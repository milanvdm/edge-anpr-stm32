
edge-anpr_FSBL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34180400  34180400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011cd0  3418074c  3418074c  0000074c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  3419241c  3419241c  0001241c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  341924bc  341924bc  00013500  2**0
                  CONTENTS
  4 .ARM          00000008  341924bc  341924bc  000124bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  341924c4  341924c4  00013500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  341924c4  341924c4  000124c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  341924c8  341924c8  000124c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  341c0000  341924cc  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .noncacheable 00000004  341c000c  341924d8  0001300c  2**0
                  ALLOC
 10 .gnu.sgstubs  00000020  341924e0  341924e0  000134e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss          00000948  341c0010  341c0010  00014010  2**2
                  ALLOC
 12 ._user_heap_stack 00000a00  341c0958  341c0958  00014010  2**0
                  ALLOC
 13 .ARM.attributes 0000003a  00000000  00000000  00013500  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003750c  00000000  00000000  0001353a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000048a3  00000000  00000000  0004aa46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000031d8  00000000  00000000  0004f2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000026d9  00000000  00000000  000524c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0005c8b7  00000000  00000000  00054ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003492e  00000000  00000000  000b1458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0024c2c7  00000000  00000000  000e5d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0033204d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000dbc4  00000000  00000000  00332090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  0033fc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

3418074c <__do_global_dtors_aux>:
3418074c:	b510      	push	{r4, lr}
3418074e:	4c05      	ldr	r4, [pc, #20]	@ (34180764 <__do_global_dtors_aux+0x18>)
34180750:	7823      	ldrb	r3, [r4, #0]
34180752:	b933      	cbnz	r3, 34180762 <__do_global_dtors_aux+0x16>
34180754:	4b04      	ldr	r3, [pc, #16]	@ (34180768 <__do_global_dtors_aux+0x1c>)
34180756:	b113      	cbz	r3, 3418075e <__do_global_dtors_aux+0x12>
34180758:	4804      	ldr	r0, [pc, #16]	@ (3418076c <__do_global_dtors_aux+0x20>)
3418075a:	f3af 8000 	nop.w
3418075e:	2301      	movs	r3, #1
34180760:	7023      	strb	r3, [r4, #0]
34180762:	bd10      	pop	{r4, pc}
34180764:	341c0010 	.word	0x341c0010
34180768:	00000000 	.word	0x00000000
3418076c:	34192404 	.word	0x34192404

34180770 <frame_dummy>:
34180770:	b508      	push	{r3, lr}
34180772:	4b03      	ldr	r3, [pc, #12]	@ (34180780 <frame_dummy+0x10>)
34180774:	b11b      	cbz	r3, 3418077e <frame_dummy+0xe>
34180776:	4903      	ldr	r1, [pc, #12]	@ (34180784 <frame_dummy+0x14>)
34180778:	4803      	ldr	r0, [pc, #12]	@ (34180788 <frame_dummy+0x18>)
3418077a:	f3af 8000 	nop.w
3418077e:	bd08      	pop	{r3, pc}
34180780:	00000000 	.word	0x00000000
34180784:	341c0014 	.word	0x341c0014
34180788:	34192404 	.word	0x34192404

3418078c <__aeabi_uldivmod>:
3418078c:	b953      	cbnz	r3, 341807a4 <__aeabi_uldivmod+0x18>
3418078e:	b94a      	cbnz	r2, 341807a4 <__aeabi_uldivmod+0x18>
34180790:	2900      	cmp	r1, #0
34180792:	bf08      	it	eq
34180794:	2800      	cmpeq	r0, #0
34180796:	bf1c      	itt	ne
34180798:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
3418079c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
341807a0:	f000 b97e 	b.w	34180aa0 <__aeabi_idiv0>
341807a4:	f1ad 0c08 	sub.w	ip, sp, #8
341807a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
341807ac:	f000 f806 	bl	341807bc <__udivmoddi4>
341807b0:	f8dd e004 	ldr.w	lr, [sp, #4]
341807b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
341807b8:	b004      	add	sp, #16
341807ba:	4770      	bx	lr

341807bc <__udivmoddi4>:
341807bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341807c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
341807c2:	460c      	mov	r4, r1
341807c4:	2b00      	cmp	r3, #0
341807c6:	d14d      	bne.n	34180864 <__udivmoddi4+0xa8>
341807c8:	428a      	cmp	r2, r1
341807ca:	460f      	mov	r7, r1
341807cc:	4684      	mov	ip, r0
341807ce:	4696      	mov	lr, r2
341807d0:	fab2 f382 	clz	r3, r2
341807d4:	d960      	bls.n	34180898 <__udivmoddi4+0xdc>
341807d6:	b14b      	cbz	r3, 341807ec <__udivmoddi4+0x30>
341807d8:	fa02 fe03 	lsl.w	lr, r2, r3
341807dc:	f1c3 0220 	rsb	r2, r3, #32
341807e0:	409f      	lsls	r7, r3
341807e2:	fa00 fc03 	lsl.w	ip, r0, r3
341807e6:	fa20 f202 	lsr.w	r2, r0, r2
341807ea:	4317      	orrs	r7, r2
341807ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
341807f0:	fa1f f48e 	uxth.w	r4, lr
341807f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
341807f8:	fbb7 f1f6 	udiv	r1, r7, r6
341807fc:	fb06 7711 	mls	r7, r6, r1, r7
34180800:	fb01 f004 	mul.w	r0, r1, r4
34180804:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
34180808:	4290      	cmp	r0, r2
3418080a:	d908      	bls.n	3418081e <__udivmoddi4+0x62>
3418080c:	eb1e 0202 	adds.w	r2, lr, r2
34180810:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
34180814:	d202      	bcs.n	3418081c <__udivmoddi4+0x60>
34180816:	4290      	cmp	r0, r2
34180818:	f200 812d 	bhi.w	34180a76 <__udivmoddi4+0x2ba>
3418081c:	4639      	mov	r1, r7
3418081e:	1a12      	subs	r2, r2, r0
34180820:	fa1f fc8c 	uxth.w	ip, ip
34180824:	fbb2 f0f6 	udiv	r0, r2, r6
34180828:	fb06 2210 	mls	r2, r6, r0, r2
3418082c:	fb00 f404 	mul.w	r4, r0, r4
34180830:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
34180834:	4564      	cmp	r4, ip
34180836:	d908      	bls.n	3418084a <__udivmoddi4+0x8e>
34180838:	eb1e 0c0c 	adds.w	ip, lr, ip
3418083c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
34180840:	d202      	bcs.n	34180848 <__udivmoddi4+0x8c>
34180842:	4564      	cmp	r4, ip
34180844:	f200 811a 	bhi.w	34180a7c <__udivmoddi4+0x2c0>
34180848:	4610      	mov	r0, r2
3418084a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
3418084e:	ebac 0c04 	sub.w	ip, ip, r4
34180852:	2100      	movs	r1, #0
34180854:	b125      	cbz	r5, 34180860 <__udivmoddi4+0xa4>
34180856:	fa2c f303 	lsr.w	r3, ip, r3
3418085a:	2200      	movs	r2, #0
3418085c:	e9c5 3200 	strd	r3, r2, [r5]
34180860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34180864:	428b      	cmp	r3, r1
34180866:	d905      	bls.n	34180874 <__udivmoddi4+0xb8>
34180868:	b10d      	cbz	r5, 3418086e <__udivmoddi4+0xb2>
3418086a:	e9c5 0100 	strd	r0, r1, [r5]
3418086e:	2100      	movs	r1, #0
34180870:	4608      	mov	r0, r1
34180872:	e7f5      	b.n	34180860 <__udivmoddi4+0xa4>
34180874:	fab3 f183 	clz	r1, r3
34180878:	2900      	cmp	r1, #0
3418087a:	d14d      	bne.n	34180918 <__udivmoddi4+0x15c>
3418087c:	42a3      	cmp	r3, r4
3418087e:	f0c0 80f2 	bcc.w	34180a66 <__udivmoddi4+0x2aa>
34180882:	4290      	cmp	r0, r2
34180884:	f080 80ef 	bcs.w	34180a66 <__udivmoddi4+0x2aa>
34180888:	4606      	mov	r6, r0
3418088a:	4623      	mov	r3, r4
3418088c:	4608      	mov	r0, r1
3418088e:	2d00      	cmp	r5, #0
34180890:	d0e6      	beq.n	34180860 <__udivmoddi4+0xa4>
34180892:	e9c5 6300 	strd	r6, r3, [r5]
34180896:	e7e3      	b.n	34180860 <__udivmoddi4+0xa4>
34180898:	2b00      	cmp	r3, #0
3418089a:	f040 80a2 	bne.w	341809e2 <__udivmoddi4+0x226>
3418089e:	1a8a      	subs	r2, r1, r2
341808a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
341808a4:	fa1f f68e 	uxth.w	r6, lr
341808a8:	2101      	movs	r1, #1
341808aa:	fbb2 f4f7 	udiv	r4, r2, r7
341808ae:	fb07 2014 	mls	r0, r7, r4, r2
341808b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
341808b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
341808ba:	fb06 f004 	mul.w	r0, r6, r4
341808be:	4290      	cmp	r0, r2
341808c0:	d90f      	bls.n	341808e2 <__udivmoddi4+0x126>
341808c2:	eb1e 0202 	adds.w	r2, lr, r2
341808c6:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
341808ca:	bf2c      	ite	cs
341808cc:	f04f 0901 	movcs.w	r9, #1
341808d0:	f04f 0900 	movcc.w	r9, #0
341808d4:	4290      	cmp	r0, r2
341808d6:	d903      	bls.n	341808e0 <__udivmoddi4+0x124>
341808d8:	f1b9 0f00 	cmp.w	r9, #0
341808dc:	f000 80c8 	beq.w	34180a70 <__udivmoddi4+0x2b4>
341808e0:	4644      	mov	r4, r8
341808e2:	1a12      	subs	r2, r2, r0
341808e4:	fa1f fc8c 	uxth.w	ip, ip
341808e8:	fbb2 f0f7 	udiv	r0, r2, r7
341808ec:	fb07 2210 	mls	r2, r7, r0, r2
341808f0:	fb00 f606 	mul.w	r6, r0, r6
341808f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
341808f8:	4566      	cmp	r6, ip
341808fa:	d908      	bls.n	3418090e <__udivmoddi4+0x152>
341808fc:	eb1e 0c0c 	adds.w	ip, lr, ip
34180900:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
34180904:	d202      	bcs.n	3418090c <__udivmoddi4+0x150>
34180906:	4566      	cmp	r6, ip
34180908:	f200 80bb 	bhi.w	34180a82 <__udivmoddi4+0x2c6>
3418090c:	4610      	mov	r0, r2
3418090e:	ebac 0c06 	sub.w	ip, ip, r6
34180912:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
34180916:	e79d      	b.n	34180854 <__udivmoddi4+0x98>
34180918:	f1c1 0620 	rsb	r6, r1, #32
3418091c:	408b      	lsls	r3, r1
3418091e:	fa04 fe01 	lsl.w	lr, r4, r1
34180922:	fa22 f706 	lsr.w	r7, r2, r6
34180926:	fa20 fc06 	lsr.w	ip, r0, r6
3418092a:	40f4      	lsrs	r4, r6
3418092c:	408a      	lsls	r2, r1
3418092e:	431f      	orrs	r7, r3
34180930:	ea4e 030c 	orr.w	r3, lr, ip
34180934:	fa00 fe01 	lsl.w	lr, r0, r1
34180938:	ea4f 4817 	mov.w	r8, r7, lsr #16
3418093c:	ea4f 4913 	mov.w	r9, r3, lsr #16
34180940:	fa1f fc87 	uxth.w	ip, r7
34180944:	fbb4 f0f8 	udiv	r0, r4, r8
34180948:	fb08 4410 	mls	r4, r8, r0, r4
3418094c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
34180950:	fb00 f90c 	mul.w	r9, r0, ip
34180954:	45a1      	cmp	r9, r4
34180956:	d90e      	bls.n	34180976 <__udivmoddi4+0x1ba>
34180958:	193c      	adds	r4, r7, r4
3418095a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
3418095e:	bf2c      	ite	cs
34180960:	f04f 0b01 	movcs.w	fp, #1
34180964:	f04f 0b00 	movcc.w	fp, #0
34180968:	45a1      	cmp	r9, r4
3418096a:	d903      	bls.n	34180974 <__udivmoddi4+0x1b8>
3418096c:	f1bb 0f00 	cmp.w	fp, #0
34180970:	f000 8093 	beq.w	34180a9a <__udivmoddi4+0x2de>
34180974:	4650      	mov	r0, sl
34180976:	eba4 0409 	sub.w	r4, r4, r9
3418097a:	fa1f f983 	uxth.w	r9, r3
3418097e:	fbb4 f3f8 	udiv	r3, r4, r8
34180982:	fb08 4413 	mls	r4, r8, r3, r4
34180986:	fb03 fc0c 	mul.w	ip, r3, ip
3418098a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
3418098e:	45a4      	cmp	ip, r4
34180990:	d906      	bls.n	341809a0 <__udivmoddi4+0x1e4>
34180992:	193c      	adds	r4, r7, r4
34180994:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
34180998:	d201      	bcs.n	3418099e <__udivmoddi4+0x1e2>
3418099a:	45a4      	cmp	ip, r4
3418099c:	d87a      	bhi.n	34180a94 <__udivmoddi4+0x2d8>
3418099e:	4643      	mov	r3, r8
341809a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
341809a4:	eba4 040c 	sub.w	r4, r4, ip
341809a8:	fba0 9802 	umull	r9, r8, r0, r2
341809ac:	4544      	cmp	r4, r8
341809ae:	46cc      	mov	ip, r9
341809b0:	4643      	mov	r3, r8
341809b2:	d302      	bcc.n	341809ba <__udivmoddi4+0x1fe>
341809b4:	d106      	bne.n	341809c4 <__udivmoddi4+0x208>
341809b6:	45ce      	cmp	lr, r9
341809b8:	d204      	bcs.n	341809c4 <__udivmoddi4+0x208>
341809ba:	3801      	subs	r0, #1
341809bc:	ebb9 0c02 	subs.w	ip, r9, r2
341809c0:	eb68 0307 	sbc.w	r3, r8, r7
341809c4:	b15d      	cbz	r5, 341809de <__udivmoddi4+0x222>
341809c6:	ebbe 020c 	subs.w	r2, lr, ip
341809ca:	eb64 0403 	sbc.w	r4, r4, r3
341809ce:	fa04 f606 	lsl.w	r6, r4, r6
341809d2:	fa22 f301 	lsr.w	r3, r2, r1
341809d6:	40cc      	lsrs	r4, r1
341809d8:	431e      	orrs	r6, r3
341809da:	e9c5 6400 	strd	r6, r4, [r5]
341809de:	2100      	movs	r1, #0
341809e0:	e73e      	b.n	34180860 <__udivmoddi4+0xa4>
341809e2:	fa02 fe03 	lsl.w	lr, r2, r3
341809e6:	f1c3 0120 	rsb	r1, r3, #32
341809ea:	fa04 f203 	lsl.w	r2, r4, r3
341809ee:	fa00 fc03 	lsl.w	ip, r0, r3
341809f2:	40cc      	lsrs	r4, r1
341809f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
341809f8:	fa20 f101 	lsr.w	r1, r0, r1
341809fc:	fa1f f68e 	uxth.w	r6, lr
34180a00:	fbb4 f0f7 	udiv	r0, r4, r7
34180a04:	430a      	orrs	r2, r1
34180a06:	fb07 4410 	mls	r4, r7, r0, r4
34180a0a:	0c11      	lsrs	r1, r2, #16
34180a0c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
34180a10:	fb00 f406 	mul.w	r4, r0, r6
34180a14:	428c      	cmp	r4, r1
34180a16:	d90e      	bls.n	34180a36 <__udivmoddi4+0x27a>
34180a18:	eb1e 0101 	adds.w	r1, lr, r1
34180a1c:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
34180a20:	bf2c      	ite	cs
34180a22:	f04f 0901 	movcs.w	r9, #1
34180a26:	f04f 0900 	movcc.w	r9, #0
34180a2a:	428c      	cmp	r4, r1
34180a2c:	d902      	bls.n	34180a34 <__udivmoddi4+0x278>
34180a2e:	f1b9 0f00 	cmp.w	r9, #0
34180a32:	d02c      	beq.n	34180a8e <__udivmoddi4+0x2d2>
34180a34:	4640      	mov	r0, r8
34180a36:	1b09      	subs	r1, r1, r4
34180a38:	b292      	uxth	r2, r2
34180a3a:	fbb1 f4f7 	udiv	r4, r1, r7
34180a3e:	fb07 1114 	mls	r1, r7, r4, r1
34180a42:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34180a46:	fb04 f106 	mul.w	r1, r4, r6
34180a4a:	4291      	cmp	r1, r2
34180a4c:	d907      	bls.n	34180a5e <__udivmoddi4+0x2a2>
34180a4e:	eb1e 0202 	adds.w	r2, lr, r2
34180a52:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
34180a56:	d201      	bcs.n	34180a5c <__udivmoddi4+0x2a0>
34180a58:	4291      	cmp	r1, r2
34180a5a:	d815      	bhi.n	34180a88 <__udivmoddi4+0x2cc>
34180a5c:	4644      	mov	r4, r8
34180a5e:	1a52      	subs	r2, r2, r1
34180a60:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
34180a64:	e721      	b.n	341808aa <__udivmoddi4+0xee>
34180a66:	1a86      	subs	r6, r0, r2
34180a68:	eb64 0303 	sbc.w	r3, r4, r3
34180a6c:	2001      	movs	r0, #1
34180a6e:	e70e      	b.n	3418088e <__udivmoddi4+0xd2>
34180a70:	3c02      	subs	r4, #2
34180a72:	4472      	add	r2, lr
34180a74:	e735      	b.n	341808e2 <__udivmoddi4+0x126>
34180a76:	3902      	subs	r1, #2
34180a78:	4472      	add	r2, lr
34180a7a:	e6d0      	b.n	3418081e <__udivmoddi4+0x62>
34180a7c:	44f4      	add	ip, lr
34180a7e:	3802      	subs	r0, #2
34180a80:	e6e3      	b.n	3418084a <__udivmoddi4+0x8e>
34180a82:	44f4      	add	ip, lr
34180a84:	3802      	subs	r0, #2
34180a86:	e742      	b.n	3418090e <__udivmoddi4+0x152>
34180a88:	3c02      	subs	r4, #2
34180a8a:	4472      	add	r2, lr
34180a8c:	e7e7      	b.n	34180a5e <__udivmoddi4+0x2a2>
34180a8e:	3802      	subs	r0, #2
34180a90:	4471      	add	r1, lr
34180a92:	e7d0      	b.n	34180a36 <__udivmoddi4+0x27a>
34180a94:	3b02      	subs	r3, #2
34180a96:	443c      	add	r4, r7
34180a98:	e782      	b.n	341809a0 <__udivmoddi4+0x1e4>
34180a9a:	3802      	subs	r0, #2
34180a9c:	443c      	add	r4, r7
34180a9e:	e76a      	b.n	34180976 <__udivmoddi4+0x1ba>

34180aa0 <__aeabi_idiv0>:
34180aa0:	4770      	bx	lr
34180aa2:	bf00      	nop

34180aa4 <LL_AHB4_GRP1_EnableClock>:
  *         @arg @ref LL_AHB4_GRP1_PERIPH_PWR
  *         @arg @ref LL_AHB4_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
34180aa4:	b480      	push	{r7}
34180aa6:	b085      	sub	sp, #20
34180aa8:	af00      	add	r7, sp, #0
34180aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34180aac:	4a07      	ldr	r2, [pc, #28]	@ (34180acc <LL_AHB4_GRP1_EnableClock+0x28>)
34180aae:	687b      	ldr	r3, [r7, #4]
34180ab0:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB4ENR);
34180ab4:	4b05      	ldr	r3, [pc, #20]	@ (34180acc <LL_AHB4_GRP1_EnableClock+0x28>)
34180ab6:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34180aba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34180abc:	68fb      	ldr	r3, [r7, #12]
}
34180abe:	bf00      	nop
34180ac0:	3714      	adds	r7, #20
34180ac2:	46bd      	mov	sp, r7
34180ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
34180ac8:	4770      	bx	lr
34180aca:	bf00      	nop
34180acc:	56028000 	.word	0x56028000

34180ad0 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_MDIOS
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
34180ad0:	b480      	push	{r7}
34180ad2:	b085      	sub	sp, #20
34180ad4:	af00      	add	r7, sp, #0
34180ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB1ENSR2, Periphs);
34180ad8:	4a07      	ldr	r2, [pc, #28]	@ (34180af8 <LL_APB1_GRP2_EnableClock+0x28>)
34180ada:	687b      	ldr	r3, [r7, #4]
34180adc:	f8c2 3a68 	str.w	r3, [r2, #2664]	@ 0xa68
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB1ENR2);
34180ae0:	4b05      	ldr	r3, [pc, #20]	@ (34180af8 <LL_APB1_GRP2_EnableClock+0x28>)
34180ae2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
34180ae6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34180ae8:	68fb      	ldr	r3, [r7, #12]
}
34180aea:	bf00      	nop
34180aec:	3714      	adds	r7, #20
34180aee:	46bd      	mov	sp, r7
34180af0:	f85d 7b04 	ldr.w	r7, [sp], #4
34180af4:	4770      	bx	lr
34180af6:	bf00      	nop
34180af8:	56028000 	.word	0x56028000

34180afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
34180afc:	b580      	push	{r7, lr}
34180afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
34180b00:	f001 fe4d 	bl	3418279e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
34180b04:	f000 f822 	bl	34180b4c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
34180b08:	f000 f8c4 	bl	34180c94 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
34180b0c:	f000 fc98 	bl	34181440 <MX_GPIO_Init>
  MX_ADC1_Init();
34180b10:	f000 f8ee 	bl	34180cf0 <MX_ADC1_Init>
  MX_CSI_Init();
34180b14:	f000 f974 	bl	34180e00 <MX_CSI_Init>
  MX_I2C1_Init();
34180b18:	f000 f97a 	bl	34180e10 <MX_I2C1_Init>
  MX_I2C2_Init();
34180b1c:	f000 f9b8 	bl	34180e90 <MX_I2C2_Init>
  MX_ICACHE_Init();
34180b20:	f000 f9f6 	bl	34180f10 <MX_ICACHE_Init>
  MX_MDF1_Init();
34180b24:	f000 fa08 	bl	34180f38 <MX_MDF1_Init>
  MX_SAI1_Init();
34180b28:	f000 fa5e 	bl	34180fe8 <MX_SAI1_Init>
  MX_SDMMC2_SD_Init();
34180b2c:	f000 fb26 	bl	3418117c <MX_SDMMC2_SD_Init>
  MX_UCPD1_Init();
34180b30:	f000 fb48 	bl	341811c4 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
34180b34:	f000 fb4e 	bl	341811d4 <MX_USART1_UART_Init>
  MX_USB1_OTG_HS_USB_Init();
34180b38:	f000 fb98 	bl	3418126c <MX_USB1_OTG_HS_USB_Init>
  MX_USB2_OTG_HS_HCD_Init();
34180b3c:	f000 fb9e 	bl	3418127c <MX_USB2_OTG_HS_HCD_Init>
  MX_XSPI1_Init();
34180b40:	f000 fbca 	bl	341812d8 <MX_XSPI1_Init>
  MX_XSPI2_Init();
34180b44:	f000 fc22 	bl	3418138c <MX_XSPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
34180b48:	bf00      	nop
34180b4a:	e7fd      	b.n	34180b48 <main+0x4c>

34180b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
34180b4c:	b580      	push	{r7, lr}
34180b4e:	b0b6      	sub	sp, #216	@ 0xd8
34180b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
34180b52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180b56:	2298      	movs	r2, #152	@ 0x98
34180b58:	2100      	movs	r1, #0
34180b5a:	4618      	mov	r0, r3
34180b5c:	f011 fc26 	bl	341923ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
34180b60:	463b      	mov	r3, r7
34180b62:	2240      	movs	r2, #64	@ 0x40
34180b64:	2100      	movs	r1, #0
34180b66:	4618      	mov	r0, r3
34180b68:	f011 fc20 	bl	341923ac <memset>

  /** Configure the System Power Supply
  */
  if (HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY) != HAL_OK)
34180b6c:	2000      	movs	r0, #0
34180b6e:	f003 ff2d 	bl	341849cc <HAL_PWREx_ConfigSupply>
34180b72:	4603      	mov	r3, r0
34180b74:	2b00      	cmp	r3, #0
34180b76:	d001      	beq.n	34180b7c <SystemClock_Config+0x30>
  {
    Error_Handler();
34180b78:	f000 fd24 	bl	341815c4 <Error_Handler>
  }

  /* Enable HSI */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
34180b7c:	2302      	movs	r3, #2
34180b7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
34180b80:	2308      	movs	r3, #8
34180b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
34180b84:	2300      	movs	r3, #0
34180b86:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
34180b88:	2300      	movs	r3, #0
34180b8a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_NONE;
34180b8c:	2300      	movs	r3, #0
34180b8e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
34180b90:	2300      	movs	r3, #0
34180b92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
34180b96:	2300      	movs	r3, #0
34180b98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
34180b9c:	2300      	movs	r3, #0
34180b9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34180ba2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180ba6:	4618      	mov	r0, r3
34180ba8:	f004 fa1e 	bl	34184fe8 <HAL_RCC_OscConfig>
34180bac:	4603      	mov	r3, r0
34180bae:	2b00      	cmp	r3, #0
34180bb0:	d001      	beq.n	34180bb6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
34180bb2:	f000 fd07 	bl	341815c4 <Error_Handler>
  }

  /** Get current CPU/System buses clocks configuration and if necessary switch
 to intermediate HSI clock to ensure target clock can be set
  */
  HAL_RCC_GetClockConfig(&RCC_ClkInitStruct);
34180bb6:	463b      	mov	r3, r7
34180bb8:	4618      	mov	r0, r3
34180bba:	f005 f90b 	bl	34185dd4 <HAL_RCC_GetClockConfig>
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
34180bbe:	687b      	ldr	r3, [r7, #4]
34180bc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34180bc4:	d003      	beq.n	34180bce <SystemClock_Config+0x82>
     (RCC_ClkInitStruct.SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11))
34180bc6:	68bb      	ldr	r3, [r7, #8]
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
34180bc8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34180bcc:	d10e      	bne.n	34180bec <SystemClock_Config+0xa0>
  {
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK);
34180bce:	2303      	movs	r3, #3
34180bd0:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_HSI;
34180bd2:	2300      	movs	r3, #0
34180bd4:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
34180bd6:	2300      	movs	r3, #0
34180bd8:	60bb      	str	r3, [r7, #8]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34180bda:	463b      	mov	r3, r7
34180bdc:	4618      	mov	r0, r3
34180bde:	f004 fde3 	bl	341857a8 <HAL_RCC_ClockConfig>
34180be2:	4603      	mov	r3, r0
34180be4:	2b00      	cmp	r3, #0
34180be6:	d001      	beq.n	34180bec <SystemClock_Config+0xa0>
    {
      /* Initialization Error */
      Error_Handler();
34180be8:	f000 fcec 	bl	341815c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34180bec:	2300      	movs	r3, #0
34180bee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
34180bf0:	2302      	movs	r3, #2
34180bf2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34180bf4:	2300      	movs	r3, #0
34180bf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL1.PLLM = 1;
34180bf8:	2301      	movs	r3, #1
34180bfa:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL1.PLLN = 25;
34180bfc:	2319      	movs	r3, #25
34180bfe:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
34180c00:	2300      	movs	r3, #0
34180c02:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34180c04:	2301      	movs	r3, #1
34180c06:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
34180c08:	2301      	movs	r3, #1
34180c0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
34180c0e:	2300      	movs	r3, #0
34180c10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
34180c14:	2300      	movs	r3, #0
34180c16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
34180c1a:	2300      	movs	r3, #0
34180c1c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34180c20:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180c24:	4618      	mov	r0, r3
34180c26:	f004 f9df 	bl	34184fe8 <HAL_RCC_OscConfig>
34180c2a:	4603      	mov	r3, r0
34180c2c:	2b00      	cmp	r3, #0
34180c2e:	d001      	beq.n	34180c34 <SystemClock_Config+0xe8>
  {
    Error_Handler();
34180c30:	f000 fcc8 	bl	341815c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_CPUCLK|RCC_CLOCKTYPE_HCLK
34180c34:	237f      	movs	r3, #127	@ 0x7f
34180c36:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2|RCC_CLOCKTYPE_PCLK5
                              |RCC_CLOCKTYPE_PCLK4;
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
34180c38:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
34180c3c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
34180c3e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
34180c42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
34180c44:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
34180c48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
34180c4a:	2300      	movs	r3, #0
34180c4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
34180c4e:	2300      	movs	r3, #0
34180c50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
34180c52:	2300      	movs	r3, #0
34180c54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
34180c56:	2300      	movs	r3, #0
34180c58:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.IC1Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180c5a:	2300      	movs	r3, #0
34180c5c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 2;
34180c5e:	2302      	movs	r3, #2
34180c60:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180c62:	2300      	movs	r3, #0
34180c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 4;
34180c66:	2304      	movs	r3, #4
34180c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180c6a:	2300      	movs	r3, #0
34180c6c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 4;
34180c6e:	2304      	movs	r3, #4
34180c70:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180c72:	2300      	movs	r3, #0
34180c74:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 8;
34180c76:	2308      	movs	r3, #8
34180c78:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34180c7a:	463b      	mov	r3, r7
34180c7c:	4618      	mov	r0, r3
34180c7e:	f004 fd93 	bl	341857a8 <HAL_RCC_ClockConfig>
34180c82:	4603      	mov	r3, r0
34180c84:	2b00      	cmp	r3, #0
34180c86:	d001      	beq.n	34180c8c <SystemClock_Config+0x140>
  {
    Error_Handler();
34180c88:	f000 fc9c 	bl	341815c4 <Error_Handler>
  }
}
34180c8c:	bf00      	nop
34180c8e:	37d8      	adds	r7, #216	@ 0xd8
34180c90:	46bd      	mov	sp, r7
34180c92:	bd80      	pop	{r7, pc}

34180c94 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
34180c94:	b580      	push	{r7, lr}
34180c96:	b0e4      	sub	sp, #400	@ 0x190
34180c98:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34180c9a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
34180c9e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34180ca2:	4618      	mov	r0, r3
34180ca4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34180ca8:	461a      	mov	r2, r3
34180caa:	2100      	movs	r1, #0
34180cac:	f011 fb7e 	bl	341923ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM;
34180cb0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
34180cb4:	f5a3 71c8 	sub.w	r1, r3, #400	@ 0x190
34180cb8:	f04f 0200 	mov.w	r2, #0
34180cbc:	f04f 0380 	mov.w	r3, #128	@ 0x80
34180cc0:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_DIV1;
34180cc4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
34180cc8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34180ccc:	2200      	movs	r2, #0
34180cce:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34180cd2:	463b      	mov	r3, r7
34180cd4:	4618      	mov	r0, r3
34180cd6:	f006 fef7 	bl	34187ac8 <HAL_RCCEx_PeriphCLKConfig>
34180cda:	4603      	mov	r3, r0
34180cdc:	2b00      	cmp	r3, #0
34180cde:	d001      	beq.n	34180ce4 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
34180ce0:	f000 fc70 	bl	341815c4 <Error_Handler>
  }
}
34180ce4:	bf00      	nop
34180ce6:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
34180cea:	46bd      	mov	sp, r7
34180cec:	bd80      	pop	{r7, pc}
	...

34180cf0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
34180cf0:	b580      	push	{r7, lr}
34180cf2:	b092      	sub	sp, #72	@ 0x48
34180cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
34180cf6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
34180cfa:	2200      	movs	r2, #0
34180cfc:	601a      	str	r2, [r3, #0]
34180cfe:	605a      	str	r2, [r3, #4]
34180d00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
34180d02:	f107 031c 	add.w	r3, r7, #28
34180d06:	2220      	movs	r2, #32
34180d08:	2100      	movs	r1, #0
34180d0a:	4618      	mov	r0, r3
34180d0c:	f011 fb4e 	bl	341923ac <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
34180d10:	463b      	mov	r3, r7
34180d12:	2200      	movs	r2, #0
34180d14:	601a      	str	r2, [r3, #0]
34180d16:	605a      	str	r2, [r3, #4]
34180d18:	609a      	str	r2, [r3, #8]
34180d1a:	60da      	str	r2, [r3, #12]
34180d1c:	611a      	str	r2, [r3, #16]
34180d1e:	615a      	str	r2, [r3, #20]
34180d20:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
34180d22:	4b35      	ldr	r3, [pc, #212]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180d24:	4a35      	ldr	r2, [pc, #212]	@ (34180dfc <MX_ADC1_Init+0x10c>)
34180d26:	601a      	str	r2, [r3, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
34180d28:	4b33      	ldr	r3, [pc, #204]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180d2a:	2200      	movs	r2, #0
34180d2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.GainCompensation = 0;
34180d2e:	4b32      	ldr	r3, [pc, #200]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180d30:	2200      	movs	r2, #0
34180d32:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
34180d34:	4b30      	ldr	r3, [pc, #192]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180d36:	2200      	movs	r2, #0
34180d38:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
34180d3a:	4b2f      	ldr	r3, [pc, #188]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180d3c:	2204      	movs	r2, #4
34180d3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
34180d40:	4b2d      	ldr	r3, [pc, #180]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180d42:	2200      	movs	r2, #0
34180d44:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
34180d46:	4b2c      	ldr	r3, [pc, #176]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180d48:	2200      	movs	r2, #0
34180d4a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
34180d4c:	4b2a      	ldr	r3, [pc, #168]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180d4e:	2201      	movs	r2, #1
34180d50:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
34180d52:	4b29      	ldr	r3, [pc, #164]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180d54:	2200      	movs	r2, #0
34180d56:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
34180d58:	4b27      	ldr	r3, [pc, #156]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180d5a:	2200      	movs	r2, #0
34180d5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
34180d5e:	4b26      	ldr	r3, [pc, #152]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180d60:	2200      	movs	r2, #0
34180d62:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
34180d64:	4b24      	ldr	r3, [pc, #144]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180d66:	2200      	movs	r2, #0
34180d68:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
34180d6a:	4b23      	ldr	r3, [pc, #140]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180d6c:	2200      	movs	r2, #0
34180d6e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
34180d70:	4b21      	ldr	r3, [pc, #132]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180d72:	2200      	movs	r2, #0
34180d74:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
34180d76:	4b20      	ldr	r3, [pc, #128]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180d78:	2200      	movs	r2, #0
34180d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
34180d7e:	481e      	ldr	r0, [pc, #120]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180d80:	f002 f99e 	bl	341830c0 <HAL_ADC_Init>
34180d84:	4603      	mov	r3, r0
34180d86:	2b00      	cmp	r3, #0
34180d88:	d001      	beq.n	34180d8e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
34180d8a:	f000 fc1b 	bl	341815c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
34180d8e:	2300      	movs	r3, #0
34180d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
34180d92:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
34180d96:	4619      	mov	r1, r3
34180d98:	4817      	ldr	r0, [pc, #92]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180d9a:	f002 feeb 	bl	34183b74 <HAL_ADCEx_MultiModeConfigChannel>
34180d9e:	4603      	mov	r3, r0
34180da0:	2b00      	cmp	r3, #0
34180da2:	d001      	beq.n	34180da8 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
34180da4:	f000 fc0e 	bl	341815c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
34180da8:	230c      	movs	r3, #12
34180daa:	61fb      	str	r3, [r7, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
34180dac:	2306      	movs	r3, #6
34180dae:	623b      	str	r3, [r7, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
34180db0:	2300      	movs	r3, #0
34180db2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
34180db4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
34180db8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
34180dba:	2304      	movs	r3, #4
34180dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.Offset = 0;
34180dbe:	2300      	movs	r3, #0
34180dc0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
34180dc2:	f107 031c 	add.w	r3, r7, #28
34180dc6:	4619      	mov	r1, r3
34180dc8:	480b      	ldr	r0, [pc, #44]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180dca:	f002 fa95 	bl	341832f8 <HAL_ADC_ConfigChannel>
34180dce:	4603      	mov	r3, r0
34180dd0:	2b00      	cmp	r3, #0
34180dd2:	d001      	beq.n	34180dd8 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
34180dd4:	f000 fbf6 	bl	341815c4 <Error_Handler>
  }

  /** Configure the regular channel to be monitored by WatchDog 2 or 3
  */
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
34180dd8:	2300      	movs	r3, #0
34180dda:	61bb      	str	r3, [r7, #24]

  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
34180ddc:	463b      	mov	r3, r7
34180dde:	4619      	mov	r1, r3
34180de0:	4805      	ldr	r0, [pc, #20]	@ (34180df8 <MX_ADC1_Init+0x108>)
34180de2:	f002 fc8b 	bl	341836fc <HAL_ADC_AnalogWDGConfig>
34180de6:	4603      	mov	r3, r0
34180de8:	2b00      	cmp	r3, #0
34180dea:	d001      	beq.n	34180df0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
34180dec:	f000 fbea 	bl	341815c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
34180df0:	bf00      	nop
34180df2:	3748      	adds	r7, #72	@ 0x48
34180df4:	46bd      	mov	sp, r7
34180df6:	bd80      	pop	{r7, pc}
34180df8:	341c002c 	.word	0x341c002c
34180dfc:	50022000 	.word	0x50022000

34180e00 <MX_CSI_Init>:
  * @brief CSI Initialization Function
  * @param None
  * @retval None
  */
static void MX_CSI_Init(void)
{
34180e00:	b480      	push	{r7}
34180e02:	af00      	add	r7, sp, #0
  /* USER CODE END CSI_Init 1 */
  /* USER CODE BEGIN CSI_Init 2 */

  /* USER CODE END CSI_Init 2 */

}
34180e04:	bf00      	nop
34180e06:	46bd      	mov	sp, r7
34180e08:	f85d 7b04 	ldr.w	r7, [sp], #4
34180e0c:	4770      	bx	lr
	...

34180e10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
34180e10:	b580      	push	{r7, lr}
34180e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
34180e14:	4b1b      	ldr	r3, [pc, #108]	@ (34180e84 <MX_I2C1_Init+0x74>)
34180e16:	4a1c      	ldr	r2, [pc, #112]	@ (34180e88 <MX_I2C1_Init+0x78>)
34180e18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30C0EDFF;
34180e1a:	4b1a      	ldr	r3, [pc, #104]	@ (34180e84 <MX_I2C1_Init+0x74>)
34180e1c:	4a1b      	ldr	r2, [pc, #108]	@ (34180e8c <MX_I2C1_Init+0x7c>)
34180e1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
34180e20:	4b18      	ldr	r3, [pc, #96]	@ (34180e84 <MX_I2C1_Init+0x74>)
34180e22:	2200      	movs	r2, #0
34180e24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
34180e26:	4b17      	ldr	r3, [pc, #92]	@ (34180e84 <MX_I2C1_Init+0x74>)
34180e28:	2201      	movs	r2, #1
34180e2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
34180e2c:	4b15      	ldr	r3, [pc, #84]	@ (34180e84 <MX_I2C1_Init+0x74>)
34180e2e:	2200      	movs	r2, #0
34180e30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
34180e32:	4b14      	ldr	r3, [pc, #80]	@ (34180e84 <MX_I2C1_Init+0x74>)
34180e34:	2200      	movs	r2, #0
34180e36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
34180e38:	4b12      	ldr	r3, [pc, #72]	@ (34180e84 <MX_I2C1_Init+0x74>)
34180e3a:	2200      	movs	r2, #0
34180e3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
34180e3e:	4b11      	ldr	r3, [pc, #68]	@ (34180e84 <MX_I2C1_Init+0x74>)
34180e40:	2200      	movs	r2, #0
34180e42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
34180e44:	4b0f      	ldr	r3, [pc, #60]	@ (34180e84 <MX_I2C1_Init+0x74>)
34180e46:	2200      	movs	r2, #0
34180e48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
34180e4a:	480e      	ldr	r0, [pc, #56]	@ (34180e84 <MX_I2C1_Init+0x74>)
34180e4c:	f003 fabf 	bl	341843ce <HAL_I2C_Init>
34180e50:	4603      	mov	r3, r0
34180e52:	2b00      	cmp	r3, #0
34180e54:	d001      	beq.n	34180e5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
34180e56:	f000 fbb5 	bl	341815c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
34180e5a:	2100      	movs	r1, #0
34180e5c:	4809      	ldr	r0, [pc, #36]	@ (34180e84 <MX_I2C1_Init+0x74>)
34180e5e:	f003 fb51 	bl	34184504 <HAL_I2CEx_ConfigAnalogFilter>
34180e62:	4603      	mov	r3, r0
34180e64:	2b00      	cmp	r3, #0
34180e66:	d001      	beq.n	34180e6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
34180e68:	f000 fbac 	bl	341815c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
34180e6c:	2100      	movs	r1, #0
34180e6e:	4805      	ldr	r0, [pc, #20]	@ (34180e84 <MX_I2C1_Init+0x74>)
34180e70:	f003 fb93 	bl	3418459a <HAL_I2CEx_ConfigDigitalFilter>
34180e74:	4603      	mov	r3, r0
34180e76:	2b00      	cmp	r3, #0
34180e78:	d001      	beq.n	34180e7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
34180e7a:	f000 fba3 	bl	341815c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
34180e7e:	bf00      	nop
34180e80:	bd80      	pop	{r7, pc}
34180e82:	bf00      	nop
34180e84:	341c008c 	.word	0x341c008c
34180e88:	50005400 	.word	0x50005400
34180e8c:	30c0edff 	.word	0x30c0edff

34180e90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
34180e90:	b580      	push	{r7, lr}
34180e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
34180e94:	4b1b      	ldr	r3, [pc, #108]	@ (34180f04 <MX_I2C2_Init+0x74>)
34180e96:	4a1c      	ldr	r2, [pc, #112]	@ (34180f08 <MX_I2C2_Init+0x78>)
34180e98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30C0EDFF;
34180e9a:	4b1a      	ldr	r3, [pc, #104]	@ (34180f04 <MX_I2C2_Init+0x74>)
34180e9c:	4a1b      	ldr	r2, [pc, #108]	@ (34180f0c <MX_I2C2_Init+0x7c>)
34180e9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
34180ea0:	4b18      	ldr	r3, [pc, #96]	@ (34180f04 <MX_I2C2_Init+0x74>)
34180ea2:	2200      	movs	r2, #0
34180ea4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
34180ea6:	4b17      	ldr	r3, [pc, #92]	@ (34180f04 <MX_I2C2_Init+0x74>)
34180ea8:	2201      	movs	r2, #1
34180eaa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
34180eac:	4b15      	ldr	r3, [pc, #84]	@ (34180f04 <MX_I2C2_Init+0x74>)
34180eae:	2200      	movs	r2, #0
34180eb0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
34180eb2:	4b14      	ldr	r3, [pc, #80]	@ (34180f04 <MX_I2C2_Init+0x74>)
34180eb4:	2200      	movs	r2, #0
34180eb6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
34180eb8:	4b12      	ldr	r3, [pc, #72]	@ (34180f04 <MX_I2C2_Init+0x74>)
34180eba:	2200      	movs	r2, #0
34180ebc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
34180ebe:	4b11      	ldr	r3, [pc, #68]	@ (34180f04 <MX_I2C2_Init+0x74>)
34180ec0:	2200      	movs	r2, #0
34180ec2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
34180ec4:	4b0f      	ldr	r3, [pc, #60]	@ (34180f04 <MX_I2C2_Init+0x74>)
34180ec6:	2200      	movs	r2, #0
34180ec8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
34180eca:	480e      	ldr	r0, [pc, #56]	@ (34180f04 <MX_I2C2_Init+0x74>)
34180ecc:	f003 fa7f 	bl	341843ce <HAL_I2C_Init>
34180ed0:	4603      	mov	r3, r0
34180ed2:	2b00      	cmp	r3, #0
34180ed4:	d001      	beq.n	34180eda <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
34180ed6:	f000 fb75 	bl	341815c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
34180eda:	2100      	movs	r1, #0
34180edc:	4809      	ldr	r0, [pc, #36]	@ (34180f04 <MX_I2C2_Init+0x74>)
34180ede:	f003 fb11 	bl	34184504 <HAL_I2CEx_ConfigAnalogFilter>
34180ee2:	4603      	mov	r3, r0
34180ee4:	2b00      	cmp	r3, #0
34180ee6:	d001      	beq.n	34180eec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
34180ee8:	f000 fb6c 	bl	341815c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
34180eec:	2100      	movs	r1, #0
34180eee:	4805      	ldr	r0, [pc, #20]	@ (34180f04 <MX_I2C2_Init+0x74>)
34180ef0:	f003 fb53 	bl	3418459a <HAL_I2CEx_ConfigDigitalFilter>
34180ef4:	4603      	mov	r3, r0
34180ef6:	2b00      	cmp	r3, #0
34180ef8:	d001      	beq.n	34180efe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
34180efa:	f000 fb63 	bl	341815c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
34180efe:	bf00      	nop
34180f00:	bd80      	pop	{r7, pc}
34180f02:	bf00      	nop
34180f04:	341c00e0 	.word	0x341c00e0
34180f08:	50005800 	.word	0x50005800
34180f0c:	30c0edff 	.word	0x30c0edff

34180f10 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
34180f10:	b580      	push	{r7, lr}
34180f12:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
34180f14:	2000      	movs	r0, #0
34180f16:	f003 fb8d 	bl	34184634 <HAL_ICACHE_ConfigAssociativityMode>
34180f1a:	4603      	mov	r3, r0
34180f1c:	2b00      	cmp	r3, #0
34180f1e:	d001      	beq.n	34180f24 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
34180f20:	f000 fb50 	bl	341815c4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
34180f24:	f003 fba6 	bl	34184674 <HAL_ICACHE_Enable>
34180f28:	4603      	mov	r3, r0
34180f2a:	2b00      	cmp	r3, #0
34180f2c:	d001      	beq.n	34180f32 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
34180f2e:	f000 fb49 	bl	341815c4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
34180f32:	bf00      	nop
34180f34:	bd80      	pop	{r7, pc}
	...

34180f38 <MX_MDF1_Init>:
  * @brief MDF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_MDF1_Init(void)
{
34180f38:	b580      	push	{r7, lr}
34180f3a:	af00      	add	r7, sp, #0
  /* USER CODE END MDF1_Init 1 */

  /**
    MdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  MdfHandle0.Instance = MDF1_Filter0;
34180f3c:	4b27      	ldr	r3, [pc, #156]	@ (34180fdc <MX_MDF1_Init+0xa4>)
34180f3e:	4a28      	ldr	r2, [pc, #160]	@ (34180fe0 <MX_MDF1_Init+0xa8>)
34180f40:	601a      	str	r2, [r3, #0]
  MdfHandle0.Init.CommonParam.InterleavedFilters = 0;
34180f42:	4b26      	ldr	r3, [pc, #152]	@ (34180fdc <MX_MDF1_Init+0xa4>)
34180f44:	2200      	movs	r2, #0
34180f46:	605a      	str	r2, [r3, #4]
  MdfHandle0.Init.CommonParam.ProcClockDivider = 1;
34180f48:	4b24      	ldr	r3, [pc, #144]	@ (34180fdc <MX_MDF1_Init+0xa4>)
34180f4a:	2201      	movs	r2, #1
34180f4c:	609a      	str	r2, [r3, #8]
  MdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
34180f4e:	4b23      	ldr	r3, [pc, #140]	@ (34180fdc <MX_MDF1_Init+0xa4>)
34180f50:	2200      	movs	r2, #0
34180f52:	731a      	strb	r2, [r3, #12]
  MdfHandle0.Init.SerialInterface.Activation = ENABLE;
34180f54:	4b21      	ldr	r3, [pc, #132]	@ (34180fdc <MX_MDF1_Init+0xa4>)
34180f56:	2201      	movs	r2, #1
34180f58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  MdfHandle0.Init.SerialInterface.Mode = MDF_SITF_LF_MASTER_SPI_MODE;
34180f5c:	4b1f      	ldr	r3, [pc, #124]	@ (34180fdc <MX_MDF1_Init+0xa4>)
34180f5e:	2200      	movs	r2, #0
34180f60:	629a      	str	r2, [r3, #40]	@ 0x28
  MdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CKI_SOURCE;
34180f62:	4b1e      	ldr	r3, [pc, #120]	@ (34180fdc <MX_MDF1_Init+0xa4>)
34180f64:	2204      	movs	r2, #4
34180f66:	62da      	str	r2, [r3, #44]	@ 0x2c
  MdfHandle0.Init.SerialInterface.Threshold = 4;
34180f68:	4b1c      	ldr	r3, [pc, #112]	@ (34180fdc <MX_MDF1_Init+0xa4>)
34180f6a:	2204      	movs	r2, #4
34180f6c:	631a      	str	r2, [r3, #48]	@ 0x30
  MdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_RISING;
34180f6e:	4b1b      	ldr	r3, [pc, #108]	@ (34180fdc <MX_MDF1_Init+0xa4>)
34180f70:	2200      	movs	r2, #0
34180f72:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_MDF_Init(&MdfHandle0) != HAL_OK)
34180f74:	4819      	ldr	r0, [pc, #100]	@ (34180fdc <MX_MDF1_Init+0xa4>)
34180f76:	f003 fb8d 	bl	34184694 <HAL_MDF_Init>
34180f7a:	4603      	mov	r3, r0
34180f7c:	2b00      	cmp	r3, #0
34180f7e:	d001      	beq.n	34180f84 <MX_MDF1_Init+0x4c>
  {
    Error_Handler();
34180f80:	f000 fb20 	bl	341815c4 <Error_Handler>
  /**
    MdfFilterConfig0, MdfOldConfig0 and/or MdfScdConfig0 structures initialization

    WARNING : only structures are filled, no specific init function call for filter
  */
  MdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
34180f84:	4b17      	ldr	r3, [pc, #92]	@ (34180fe4 <MX_MDF1_Init+0xac>)
34180f86:	2200      	movs	r2, #0
34180f88:	601a      	str	r2, [r3, #0]
  MdfFilterConfig0.Delay = 0;
34180f8a:	4b16      	ldr	r3, [pc, #88]	@ (34180fe4 <MX_MDF1_Init+0xac>)
34180f8c:	2200      	movs	r2, #0
34180f8e:	605a      	str	r2, [r3, #4]
  MdfFilterConfig0.CicMode = MDF_TWO_FILTERS_MCIC_FASTSINC;
34180f90:	4b14      	ldr	r3, [pc, #80]	@ (34180fe4 <MX_MDF1_Init+0xac>)
34180f92:	2200      	movs	r2, #0
34180f94:	609a      	str	r2, [r3, #8]
  MdfFilterConfig0.DecimationRatio = 2;
34180f96:	4b13      	ldr	r3, [pc, #76]	@ (34180fe4 <MX_MDF1_Init+0xac>)
34180f98:	2202      	movs	r2, #2
34180f9a:	60da      	str	r2, [r3, #12]
  MdfFilterConfig0.Offset = 0;
34180f9c:	4b11      	ldr	r3, [pc, #68]	@ (34180fe4 <MX_MDF1_Init+0xac>)
34180f9e:	2200      	movs	r2, #0
34180fa0:	611a      	str	r2, [r3, #16]
  MdfFilterConfig0.Gain = 0;
34180fa2:	4b10      	ldr	r3, [pc, #64]	@ (34180fe4 <MX_MDF1_Init+0xac>)
34180fa4:	2200      	movs	r2, #0
34180fa6:	615a      	str	r2, [r3, #20]
  MdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
34180fa8:	4b0e      	ldr	r3, [pc, #56]	@ (34180fe4 <MX_MDF1_Init+0xac>)
34180faa:	2200      	movs	r2, #0
34180fac:	761a      	strb	r2, [r3, #24]
  MdfFilterConfig0.HighPassFilter.Activation = DISABLE;
34180fae:	4b0d      	ldr	r3, [pc, #52]	@ (34180fe4 <MX_MDF1_Init+0xac>)
34180fb0:	2200      	movs	r2, #0
34180fb2:	f883 2020 	strb.w	r2, [r3, #32]
  MdfFilterConfig0.Integrator.Activation = DISABLE;
34180fb6:	4b0b      	ldr	r3, [pc, #44]	@ (34180fe4 <MX_MDF1_Init+0xac>)
34180fb8:	2200      	movs	r2, #0
34180fba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  MdfFilterConfig0.SoundActivity.Activation = DISABLE;
34180fbe:	4b09      	ldr	r3, [pc, #36]	@ (34180fe4 <MX_MDF1_Init+0xac>)
34180fc0:	2200      	movs	r2, #0
34180fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  MdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
34180fc6:	4b07      	ldr	r3, [pc, #28]	@ (34180fe4 <MX_MDF1_Init+0xac>)
34180fc8:	2200      	movs	r2, #0
34180fca:	665a      	str	r2, [r3, #100]	@ 0x64
  MdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
34180fcc:	4b05      	ldr	r3, [pc, #20]	@ (34180fe4 <MX_MDF1_Init+0xac>)
34180fce:	2200      	movs	r2, #0
34180fd0:	669a      	str	r2, [r3, #104]	@ 0x68
  MdfFilterConfig0.DiscardSamples = 0;
34180fd2:	4b04      	ldr	r3, [pc, #16]	@ (34180fe4 <MX_MDF1_Init+0xac>)
34180fd4:	2200      	movs	r2, #0
34180fd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* USER CODE BEGIN MDF1_Init 2 */

  /* USER CODE END MDF1_Init 2 */

}
34180fd8:	bf00      	nop
34180fda:	bd80      	pop	{r7, pc}
34180fdc:	341c0134 	.word	0x341c0134
34180fe0:	52025080 	.word	0x52025080
34180fe4:	341c0178 	.word	0x341c0178

34180fe8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
34180fe8:	b580      	push	{r7, lr}
34180fea:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
34180fec:	4b5e      	ldr	r3, [pc, #376]	@ (34181168 <MX_SAI1_Init+0x180>)
34180fee:	4a5f      	ldr	r2, [pc, #380]	@ (3418116c <MX_SAI1_Init+0x184>)
34180ff0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
34180ff2:	4b5d      	ldr	r3, [pc, #372]	@ (34181168 <MX_SAI1_Init+0x180>)
34180ff4:	2200      	movs	r2, #0
34180ff6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
34180ff8:	4b5b      	ldr	r3, [pc, #364]	@ (34181168 <MX_SAI1_Init+0x180>)
34180ffa:	2200      	movs	r2, #0
34180ffc:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
34180ffe:	4b5a      	ldr	r3, [pc, #360]	@ (34181168 <MX_SAI1_Init+0x180>)
34181000:	2240      	movs	r2, #64	@ 0x40
34181002:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
34181004:	4b58      	ldr	r3, [pc, #352]	@ (34181168 <MX_SAI1_Init+0x180>)
34181006:	2200      	movs	r2, #0
34181008:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
3418100a:	4b57      	ldr	r3, [pc, #348]	@ (34181168 <MX_SAI1_Init+0x180>)
3418100c:	2200      	movs	r2, #0
3418100e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
34181010:	4b55      	ldr	r3, [pc, #340]	@ (34181168 <MX_SAI1_Init+0x180>)
34181012:	2200      	movs	r2, #0
34181014:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
34181016:	4b54      	ldr	r3, [pc, #336]	@ (34181168 <MX_SAI1_Init+0x180>)
34181018:	2200      	movs	r2, #0
3418101a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
3418101c:	4b52      	ldr	r3, [pc, #328]	@ (34181168 <MX_SAI1_Init+0x180>)
3418101e:	2200      	movs	r2, #0
34181020:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
34181022:	4b51      	ldr	r3, [pc, #324]	@ (34181168 <MX_SAI1_Init+0x180>)
34181024:	2200      	movs	r2, #0
34181026:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
34181028:	4b4f      	ldr	r3, [pc, #316]	@ (34181168 <MX_SAI1_Init+0x180>)
3418102a:	4a51      	ldr	r2, [pc, #324]	@ (34181170 <MX_SAI1_Init+0x188>)
3418102c:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
3418102e:	4b4e      	ldr	r3, [pc, #312]	@ (34181168 <MX_SAI1_Init+0x180>)
34181030:	2200      	movs	r2, #0
34181032:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
34181034:	4b4c      	ldr	r3, [pc, #304]	@ (34181168 <MX_SAI1_Init+0x180>)
34181036:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
3418103a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
3418103c:	4b4a      	ldr	r3, [pc, #296]	@ (34181168 <MX_SAI1_Init+0x180>)
3418103e:	2200      	movs	r2, #0
34181040:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
34181042:	4b49      	ldr	r3, [pc, #292]	@ (34181168 <MX_SAI1_Init+0x180>)
34181044:	2200      	movs	r2, #0
34181046:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
34181048:	4b47      	ldr	r3, [pc, #284]	@ (34181168 <MX_SAI1_Init+0x180>)
3418104a:	2200      	movs	r2, #0
3418104c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
3418104e:	4b46      	ldr	r3, [pc, #280]	@ (34181168 <MX_SAI1_Init+0x180>)
34181050:	2200      	movs	r2, #0
34181052:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
34181056:	4b44      	ldr	r3, [pc, #272]	@ (34181168 <MX_SAI1_Init+0x180>)
34181058:	2201      	movs	r2, #1
3418105a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
3418105c:	4b42      	ldr	r3, [pc, #264]	@ (34181168 <MX_SAI1_Init+0x180>)
3418105e:	f44f 7280 	mov.w	r2, #256	@ 0x100
34181062:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
34181064:	4b40      	ldr	r3, [pc, #256]	@ (34181168 <MX_SAI1_Init+0x180>)
34181066:	2208      	movs	r2, #8
34181068:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
3418106a:	4b3f      	ldr	r3, [pc, #252]	@ (34181168 <MX_SAI1_Init+0x180>)
3418106c:	2201      	movs	r2, #1
3418106e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
34181070:	4b3d      	ldr	r3, [pc, #244]	@ (34181168 <MX_SAI1_Init+0x180>)
34181072:	2200      	movs	r2, #0
34181074:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
34181076:	4b3c      	ldr	r3, [pc, #240]	@ (34181168 <MX_SAI1_Init+0x180>)
34181078:	2200      	movs	r2, #0
3418107a:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
3418107c:	4b3a      	ldr	r3, [pc, #232]	@ (34181168 <MX_SAI1_Init+0x180>)
3418107e:	2200      	movs	r2, #0
34181080:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
34181082:	4b39      	ldr	r3, [pc, #228]	@ (34181168 <MX_SAI1_Init+0x180>)
34181084:	2200      	movs	r2, #0
34181086:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
34181088:	4b37      	ldr	r3, [pc, #220]	@ (34181168 <MX_SAI1_Init+0x180>)
3418108a:	2200      	movs	r2, #0
3418108c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
3418108e:	4b36      	ldr	r3, [pc, #216]	@ (34181168 <MX_SAI1_Init+0x180>)
34181090:	2201      	movs	r2, #1
34181092:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
34181094:	4b34      	ldr	r3, [pc, #208]	@ (34181168 <MX_SAI1_Init+0x180>)
34181096:	2200      	movs	r2, #0
34181098:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
3418109a:	4833      	ldr	r0, [pc, #204]	@ (34181168 <MX_SAI1_Init+0x180>)
3418109c:	f00d f9c0 	bl	3418e420 <HAL_SAI_Init>
341810a0:	4603      	mov	r3, r0
341810a2:	2b00      	cmp	r3, #0
341810a4:	d001      	beq.n	341810aa <MX_SAI1_Init+0xc2>
  {
    Error_Handler();
341810a6:	f000 fa8d 	bl	341815c4 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
341810aa:	4b32      	ldr	r3, [pc, #200]	@ (34181174 <MX_SAI1_Init+0x18c>)
341810ac:	4a32      	ldr	r2, [pc, #200]	@ (34181178 <MX_SAI1_Init+0x190>)
341810ae:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
341810b0:	4b30      	ldr	r3, [pc, #192]	@ (34181174 <MX_SAI1_Init+0x18c>)
341810b2:	2200      	movs	r2, #0
341810b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
341810b6:	4b2f      	ldr	r3, [pc, #188]	@ (34181174 <MX_SAI1_Init+0x18c>)
341810b8:	2203      	movs	r2, #3
341810ba:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
341810bc:	4b2d      	ldr	r3, [pc, #180]	@ (34181174 <MX_SAI1_Init+0x18c>)
341810be:	2240      	movs	r2, #64	@ 0x40
341810c0:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
341810c2:	4b2c      	ldr	r3, [pc, #176]	@ (34181174 <MX_SAI1_Init+0x18c>)
341810c4:	2200      	movs	r2, #0
341810c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
341810c8:	4b2a      	ldr	r3, [pc, #168]	@ (34181174 <MX_SAI1_Init+0x18c>)
341810ca:	2200      	movs	r2, #0
341810cc:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
341810ce:	4b29      	ldr	r3, [pc, #164]	@ (34181174 <MX_SAI1_Init+0x18c>)
341810d0:	2201      	movs	r2, #1
341810d2:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
341810d4:	4b27      	ldr	r3, [pc, #156]	@ (34181174 <MX_SAI1_Init+0x18c>)
341810d6:	2200      	movs	r2, #0
341810d8:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
341810da:	4b26      	ldr	r3, [pc, #152]	@ (34181174 <MX_SAI1_Init+0x18c>)
341810dc:	2200      	movs	r2, #0
341810de:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
341810e0:	4b24      	ldr	r3, [pc, #144]	@ (34181174 <MX_SAI1_Init+0x18c>)
341810e2:	2200      	movs	r2, #0
341810e4:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
341810e6:	4b23      	ldr	r3, [pc, #140]	@ (34181174 <MX_SAI1_Init+0x18c>)
341810e8:	2200      	movs	r2, #0
341810ea:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
341810ec:	4b21      	ldr	r3, [pc, #132]	@ (34181174 <MX_SAI1_Init+0x18c>)
341810ee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
341810f2:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
341810f4:	4b1f      	ldr	r3, [pc, #124]	@ (34181174 <MX_SAI1_Init+0x18c>)
341810f6:	2200      	movs	r2, #0
341810f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
341810fa:	4b1e      	ldr	r3, [pc, #120]	@ (34181174 <MX_SAI1_Init+0x18c>)
341810fc:	2200      	movs	r2, #0
341810fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
34181100:	4b1c      	ldr	r3, [pc, #112]	@ (34181174 <MX_SAI1_Init+0x18c>)
34181102:	2200      	movs	r2, #0
34181104:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
34181106:	4b1b      	ldr	r3, [pc, #108]	@ (34181174 <MX_SAI1_Init+0x18c>)
34181108:	2200      	movs	r2, #0
3418110a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
3418110e:	4b19      	ldr	r3, [pc, #100]	@ (34181174 <MX_SAI1_Init+0x18c>)
34181110:	2201      	movs	r2, #1
34181112:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
34181114:	4b17      	ldr	r3, [pc, #92]	@ (34181174 <MX_SAI1_Init+0x18c>)
34181116:	f44f 7280 	mov.w	r2, #256	@ 0x100
3418111a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.FrameInit.FrameLength = 8;
3418111c:	4b15      	ldr	r3, [pc, #84]	@ (34181174 <MX_SAI1_Init+0x18c>)
3418111e:	2208      	movs	r2, #8
34181120:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
34181122:	4b14      	ldr	r3, [pc, #80]	@ (34181174 <MX_SAI1_Init+0x18c>)
34181124:	2201      	movs	r2, #1
34181126:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
34181128:	4b12      	ldr	r3, [pc, #72]	@ (34181174 <MX_SAI1_Init+0x18c>)
3418112a:	2200      	movs	r2, #0
3418112c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
3418112e:	4b11      	ldr	r3, [pc, #68]	@ (34181174 <MX_SAI1_Init+0x18c>)
34181130:	2200      	movs	r2, #0
34181132:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
34181134:	4b0f      	ldr	r3, [pc, #60]	@ (34181174 <MX_SAI1_Init+0x18c>)
34181136:	2200      	movs	r2, #0
34181138:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
3418113a:	4b0e      	ldr	r3, [pc, #56]	@ (34181174 <MX_SAI1_Init+0x18c>)
3418113c:	2200      	movs	r2, #0
3418113e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
34181140:	4b0c      	ldr	r3, [pc, #48]	@ (34181174 <MX_SAI1_Init+0x18c>)
34181142:	2200      	movs	r2, #0
34181144:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 1;
34181146:	4b0b      	ldr	r3, [pc, #44]	@ (34181174 <MX_SAI1_Init+0x18c>)
34181148:	2201      	movs	r2, #1
3418114a:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
3418114c:	4b09      	ldr	r3, [pc, #36]	@ (34181174 <MX_SAI1_Init+0x18c>)
3418114e:	2200      	movs	r2, #0
34181150:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
34181152:	4808      	ldr	r0, [pc, #32]	@ (34181174 <MX_SAI1_Init+0x18c>)
34181154:	f00d f964 	bl	3418e420 <HAL_SAI_Init>
34181158:	4603      	mov	r3, r0
3418115a:	2b00      	cmp	r3, #0
3418115c:	d001      	beq.n	34181162 <MX_SAI1_Init+0x17a>
  {
    Error_Handler();
3418115e:	f000 fa31 	bl	341815c4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
34181162:	bf00      	nop
34181164:	bd80      	pop	{r7, pc}
34181166:	bf00      	nop
34181168:	341c01f4 	.word	0x341c01f4
3418116c:	52005804 	.word	0x52005804
34181170:	0002ee00 	.word	0x0002ee00
34181174:	341c028c 	.word	0x341c028c
34181178:	52005824 	.word	0x52005824

3418117c <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
3418117c:	b580      	push	{r7, lr}
3418117e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
34181180:	4b0e      	ldr	r3, [pc, #56]	@ (341811bc <MX_SDMMC2_SD_Init+0x40>)
34181182:	4a0f      	ldr	r2, [pc, #60]	@ (341811c0 <MX_SDMMC2_SD_Init+0x44>)
34181184:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
34181186:	4b0d      	ldr	r3, [pc, #52]	@ (341811bc <MX_SDMMC2_SD_Init+0x40>)
34181188:	2200      	movs	r2, #0
3418118a:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
3418118c:	4b0b      	ldr	r3, [pc, #44]	@ (341811bc <MX_SDMMC2_SD_Init+0x40>)
3418118e:	2200      	movs	r2, #0
34181190:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
34181192:	4b0a      	ldr	r3, [pc, #40]	@ (341811bc <MX_SDMMC2_SD_Init+0x40>)
34181194:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34181198:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
3418119a:	4b08      	ldr	r3, [pc, #32]	@ (341811bc <MX_SDMMC2_SD_Init+0x40>)
3418119c:	2200      	movs	r2, #0
3418119e:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
341811a0:	4b06      	ldr	r3, [pc, #24]	@ (341811bc <MX_SDMMC2_SD_Init+0x40>)
341811a2:	2200      	movs	r2, #0
341811a4:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd2) != HAL_OK)
341811a6:	4805      	ldr	r0, [pc, #20]	@ (341811bc <MX_SDMMC2_SD_Init+0x40>)
341811a8:	f00d fb68 	bl	3418e87c <HAL_SD_Init>
341811ac:	4603      	mov	r3, r0
341811ae:	2b00      	cmp	r3, #0
341811b0:	d001      	beq.n	341811b6 <MX_SDMMC2_SD_Init+0x3a>
  {
    Error_Handler();
341811b2:	f000 fa07 	bl	341815c4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
341811b6:	bf00      	nop
341811b8:	bd80      	pop	{r7, pc}
341811ba:	bf00      	nop
341811bc:	341c0324 	.word	0x341c0324
341811c0:	58026800 	.word	0x58026800

341811c4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
341811c4:	b580      	push	{r7, lr}
341811c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
341811c8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
341811cc:	f7ff fc80 	bl	34180ad0 <LL_APB1_GRP2_EnableClock>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
341811d0:	bf00      	nop
341811d2:	bd80      	pop	{r7, pc}

341811d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
341811d4:	b580      	push	{r7, lr}
341811d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
341811d8:	4b22      	ldr	r3, [pc, #136]	@ (34181264 <MX_USART1_UART_Init+0x90>)
341811da:	4a23      	ldr	r2, [pc, #140]	@ (34181268 <MX_USART1_UART_Init+0x94>)
341811dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
341811de:	4b21      	ldr	r3, [pc, #132]	@ (34181264 <MX_USART1_UART_Init+0x90>)
341811e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
341811e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
341811e6:	4b1f      	ldr	r3, [pc, #124]	@ (34181264 <MX_USART1_UART_Init+0x90>)
341811e8:	2200      	movs	r2, #0
341811ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
341811ec:	4b1d      	ldr	r3, [pc, #116]	@ (34181264 <MX_USART1_UART_Init+0x90>)
341811ee:	2200      	movs	r2, #0
341811f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
341811f2:	4b1c      	ldr	r3, [pc, #112]	@ (34181264 <MX_USART1_UART_Init+0x90>)
341811f4:	2200      	movs	r2, #0
341811f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
341811f8:	4b1a      	ldr	r3, [pc, #104]	@ (34181264 <MX_USART1_UART_Init+0x90>)
341811fa:	220c      	movs	r2, #12
341811fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
341811fe:	4b19      	ldr	r3, [pc, #100]	@ (34181264 <MX_USART1_UART_Init+0x90>)
34181200:	2200      	movs	r2, #0
34181202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
34181204:	4b17      	ldr	r3, [pc, #92]	@ (34181264 <MX_USART1_UART_Init+0x90>)
34181206:	2200      	movs	r2, #0
34181208:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
3418120a:	4b16      	ldr	r3, [pc, #88]	@ (34181264 <MX_USART1_UART_Init+0x90>)
3418120c:	2200      	movs	r2, #0
3418120e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
34181210:	4b14      	ldr	r3, [pc, #80]	@ (34181264 <MX_USART1_UART_Init+0x90>)
34181212:	2200      	movs	r2, #0
34181214:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
34181216:	4b13      	ldr	r3, [pc, #76]	@ (34181264 <MX_USART1_UART_Init+0x90>)
34181218:	2200      	movs	r2, #0
3418121a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
3418121c:	4811      	ldr	r0, [pc, #68]	@ (34181264 <MX_USART1_UART_Init+0x90>)
3418121e:	f00e ffb5 	bl	3419018c <HAL_UART_Init>
34181222:	4603      	mov	r3, r0
34181224:	2b00      	cmp	r3, #0
34181226:	d001      	beq.n	3418122c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
34181228:	f000 f9cc 	bl	341815c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
3418122c:	2100      	movs	r1, #0
3418122e:	480d      	ldr	r0, [pc, #52]	@ (34181264 <MX_USART1_UART_Init+0x90>)
34181230:	f00f fc40 	bl	34190ab4 <HAL_UARTEx_SetTxFifoThreshold>
34181234:	4603      	mov	r3, r0
34181236:	2b00      	cmp	r3, #0
34181238:	d001      	beq.n	3418123e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
3418123a:	f000 f9c3 	bl	341815c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
3418123e:	2100      	movs	r1, #0
34181240:	4808      	ldr	r0, [pc, #32]	@ (34181264 <MX_USART1_UART_Init+0x90>)
34181242:	f00f fc75 	bl	34190b30 <HAL_UARTEx_SetRxFifoThreshold>
34181246:	4603      	mov	r3, r0
34181248:	2b00      	cmp	r3, #0
3418124a:	d001      	beq.n	34181250 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
3418124c:	f000 f9ba 	bl	341815c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
34181250:	4804      	ldr	r0, [pc, #16]	@ (34181264 <MX_USART1_UART_Init+0x90>)
34181252:	f00f fbf6 	bl	34190a42 <HAL_UARTEx_DisableFifoMode>
34181256:	4603      	mov	r3, r0
34181258:	2b00      	cmp	r3, #0
3418125a:	d001      	beq.n	34181260 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
3418125c:	f000 f9b2 	bl	341815c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
34181260:	bf00      	nop
34181262:	bd80      	pop	{r7, pc}
34181264:	341c03a0 	.word	0x341c03a0
34181268:	52001000 	.word	0x52001000

3418126c <MX_USB1_OTG_HS_USB_Init>:
  * @brief USB1_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB1_OTG_HS_USB_Init(void)
{
3418126c:	b480      	push	{r7}
3418126e:	af00      	add	r7, sp, #0
  /* USER CODE END USB1_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB1_OTG_HS_Init 2 */

  /* USER CODE END USB1_OTG_HS_Init 2 */

}
34181270:	bf00      	nop
34181272:	46bd      	mov	sp, r7
34181274:	f85d 7b04 	ldr.w	r7, [sp], #4
34181278:	4770      	bx	lr
	...

3418127c <MX_USB2_OTG_HS_HCD_Init>:
  * @brief USB2_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB2_OTG_HS_HCD_Init(void)
{
3418127c:	b580      	push	{r7, lr}
3418127e:	af00      	add	r7, sp, #0
  /* USER CODE END USB2_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB2_OTG_HS_Init 1 */

  /* USER CODE END USB2_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS2.Instance = USB2_OTG_HS;
34181280:	4b13      	ldr	r3, [pc, #76]	@ (341812d0 <MX_USB2_OTG_HS_HCD_Init+0x54>)
34181282:	4a14      	ldr	r2, [pc, #80]	@ (341812d4 <MX_USB2_OTG_HS_HCD_Init+0x58>)
34181284:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS2.Init.dev_endpoints = 9;
34181286:	4b12      	ldr	r3, [pc, #72]	@ (341812d0 <MX_USB2_OTG_HS_HCD_Init+0x54>)
34181288:	2209      	movs	r2, #9
3418128a:	711a      	strb	r2, [r3, #4]
  hhcd_USB_OTG_HS2.Init.Host_channels = 16;
3418128c:	4b10      	ldr	r3, [pc, #64]	@ (341812d0 <MX_USB2_OTG_HS_HCD_Init+0x54>)
3418128e:	2210      	movs	r2, #16
34181290:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS2.Init.speed = HCD_SPEED_HIGH;
34181292:	4b0f      	ldr	r3, [pc, #60]	@ (341812d0 <MX_USB2_OTG_HS_HCD_Init+0x54>)
34181294:	2200      	movs	r2, #0
34181296:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS2.Init.dma_enable = DISABLE;
34181298:	4b0d      	ldr	r3, [pc, #52]	@ (341812d0 <MX_USB2_OTG_HS_HCD_Init+0x54>)
3418129a:	2200      	movs	r2, #0
3418129c:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS2.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
3418129e:	4b0c      	ldr	r3, [pc, #48]	@ (341812d0 <MX_USB2_OTG_HS_HCD_Init+0x54>)
341812a0:	2203      	movs	r2, #3
341812a2:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS2.Init.Sof_enable = DISABLE;
341812a4:	4b0a      	ldr	r3, [pc, #40]	@ (341812d0 <MX_USB2_OTG_HS_HCD_Init+0x54>)
341812a6:	2200      	movs	r2, #0
341812a8:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS2.Init.low_power_enable = DISABLE;
341812aa:	4b09      	ldr	r3, [pc, #36]	@ (341812d0 <MX_USB2_OTG_HS_HCD_Init+0x54>)
341812ac:	2200      	movs	r2, #0
341812ae:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS2.Init.vbus_sensing_enable = DISABLE;
341812b0:	4b07      	ldr	r3, [pc, #28]	@ (341812d0 <MX_USB2_OTG_HS_HCD_Init+0x54>)
341812b2:	2200      	movs	r2, #0
341812b4:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS2.Init.use_external_vbus = ENABLE;
341812b6:	4b06      	ldr	r3, [pc, #24]	@ (341812d0 <MX_USB2_OTG_HS_HCD_Init+0x54>)
341812b8:	2201      	movs	r2, #1
341812ba:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS2) != HAL_OK)
341812bc:	4804      	ldr	r0, [pc, #16]	@ (341812d0 <MX_USB2_OTG_HS_HCD_Init+0x54>)
341812be:	f003 f829 	bl	34184314 <HAL_HCD_Init>
341812c2:	4603      	mov	r3, r0
341812c4:	2b00      	cmp	r3, #0
341812c6:	d001      	beq.n	341812cc <MX_USB2_OTG_HS_HCD_Init+0x50>
  {
    Error_Handler();
341812c8:	f000 f97c 	bl	341815c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB2_OTG_HS_Init 2 */

  /* USER CODE END USB2_OTG_HS_Init 2 */

}
341812cc:	bf00      	nop
341812ce:	bd80      	pop	{r7, pc}
341812d0:	341c0434 	.word	0x341c0434
341812d4:	58080000 	.word	0x58080000

341812d8 <MX_XSPI1_Init>:
  * @brief XSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_XSPI1_Init(void)
{
341812d8:	b580      	push	{r7, lr}
341812da:	b084      	sub	sp, #16
341812dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI1_Init 0 */

  /* USER CODE END XSPI1_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
341812de:	1d3b      	adds	r3, r7, #4
341812e0:	2200      	movs	r2, #0
341812e2:	601a      	str	r2, [r3, #0]
341812e4:	605a      	str	r2, [r3, #4]
341812e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI1_Init 1 */

  /* USER CODE END XSPI1_Init 1 */
  /* XSPI1 parameter configuration*/
  hxspi1.Instance = XSPI1;
341812e8:	4b26      	ldr	r3, [pc, #152]	@ (34181384 <MX_XSPI1_Init+0xac>)
341812ea:	4a27      	ldr	r2, [pc, #156]	@ (34181388 <MX_XSPI1_Init+0xb0>)
341812ec:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 1;
341812ee:	4b25      	ldr	r3, [pc, #148]	@ (34181384 <MX_XSPI1_Init+0xac>)
341812f0:	2201      	movs	r2, #1
341812f2:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
341812f4:	4b23      	ldr	r3, [pc, #140]	@ (34181384 <MX_XSPI1_Init+0xac>)
341812f6:	2200      	movs	r2, #0
341812f8:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MICRON;
341812fa:	4b22      	ldr	r3, [pc, #136]	@ (34181384 <MX_XSPI1_Init+0xac>)
341812fc:	2200      	movs	r2, #0
341812fe:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_16B;
34181300:	4b20      	ldr	r3, [pc, #128]	@ (34181384 <MX_XSPI1_Init+0xac>)
34181302:	2200      	movs	r2, #0
34181304:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 1;
34181306:	4b1f      	ldr	r3, [pc, #124]	@ (34181384 <MX_XSPI1_Init+0xac>)
34181308:	2201      	movs	r2, #1
3418130a:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
3418130c:	4b1d      	ldr	r3, [pc, #116]	@ (34181384 <MX_XSPI1_Init+0xac>)
3418130e:	2200      	movs	r2, #0
34181310:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
34181312:	4b1c      	ldr	r3, [pc, #112]	@ (34181384 <MX_XSPI1_Init+0xac>)
34181314:	2200      	movs	r2, #0
34181316:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
34181318:	4b1a      	ldr	r3, [pc, #104]	@ (34181384 <MX_XSPI1_Init+0xac>)
3418131a:	2200      	movs	r2, #0
3418131c:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
3418131e:	4b19      	ldr	r3, [pc, #100]	@ (34181384 <MX_XSPI1_Init+0xac>)
34181320:	2200      	movs	r2, #0
34181322:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
34181324:	4b17      	ldr	r3, [pc, #92]	@ (34181384 <MX_XSPI1_Init+0xac>)
34181326:	2200      	movs	r2, #0
34181328:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
3418132a:	4b16      	ldr	r3, [pc, #88]	@ (34181384 <MX_XSPI1_Init+0xac>)
3418132c:	2200      	movs	r2, #0
3418132e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
34181330:	4b14      	ldr	r3, [pc, #80]	@ (34181384 <MX_XSPI1_Init+0xac>)
34181332:	2200      	movs	r2, #0
34181334:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
34181336:	4b13      	ldr	r3, [pc, #76]	@ (34181384 <MX_XSPI1_Init+0xac>)
34181338:	2200      	movs	r2, #0
3418133a:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi1.Init.Refresh = 0;
3418133c:	4b11      	ldr	r3, [pc, #68]	@ (34181384 <MX_XSPI1_Init+0xac>)
3418133e:	2200      	movs	r2, #0
34181340:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
34181342:	4b10      	ldr	r3, [pc, #64]	@ (34181384 <MX_XSPI1_Init+0xac>)
34181344:	2200      	movs	r2, #0
34181346:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
34181348:	480e      	ldr	r0, [pc, #56]	@ (34181384 <MX_XSPI1_Init+0xac>)
3418134a:	f00f fc95 	bl	34190c78 <HAL_XSPI_Init>
3418134e:	4603      	mov	r3, r0
34181350:	2b00      	cmp	r3, #0
34181352:	d001      	beq.n	34181358 <MX_XSPI1_Init+0x80>
  {
    Error_Handler();
34181354:	f000 f936 	bl	341815c4 <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
34181358:	2310      	movs	r3, #16
3418135a:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_1;
3418135c:	2300      	movs	r3, #0
3418135e:	60bb      	str	r3, [r7, #8]
  sXspiManagerCfg.Req2AckTime = 1;
34181360:	2301      	movs	r3, #1
34181362:	60fb      	str	r3, [r7, #12]
  if (HAL_XSPIM_Config(&hxspi1, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34181364:	1d3b      	adds	r3, r7, #4
34181366:	f241 3288 	movw	r2, #5000	@ 0x1388
3418136a:	4619      	mov	r1, r3
3418136c:	4805      	ldr	r0, [pc, #20]	@ (34181384 <MX_XSPI1_Init+0xac>)
3418136e:	f00f ff49 	bl	34191204 <HAL_XSPIM_Config>
34181372:	4603      	mov	r3, r0
34181374:	2b00      	cmp	r3, #0
34181376:	d001      	beq.n	3418137c <MX_XSPI1_Init+0xa4>
  {
    Error_Handler();
34181378:	f000 f924 	bl	341815c4 <Error_Handler>
  }
  /* USER CODE BEGIN XSPI1_Init 2 */

  /* USER CODE END XSPI1_Init 2 */

}
3418137c:	bf00      	nop
3418137e:	3710      	adds	r7, #16
34181380:	46bd      	mov	sp, r7
34181382:	bd80      	pop	{r7, pc}
34181384:	341c0814 	.word	0x341c0814
34181388:	58025000 	.word	0x58025000

3418138c <MX_XSPI2_Init>:
  * @brief XSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_XSPI2_Init(void)
{
3418138c:	b580      	push	{r7, lr}
3418138e:	b084      	sub	sp, #16
34181390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI2_Init 0 */

  /* USER CODE END XSPI2_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
34181392:	1d3b      	adds	r3, r7, #4
34181394:	2200      	movs	r2, #0
34181396:	601a      	str	r2, [r3, #0]
34181398:	605a      	str	r2, [r3, #4]
3418139a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI2_Init 1 */

  /* USER CODE END XSPI2_Init 1 */
  /* XSPI2 parameter configuration*/
  hxspi2.Instance = XSPI2;
3418139c:	4b26      	ldr	r3, [pc, #152]	@ (34181438 <MX_XSPI2_Init+0xac>)
3418139e:	4a27      	ldr	r2, [pc, #156]	@ (3418143c <MX_XSPI2_Init+0xb0>)
341813a0:	601a      	str	r2, [r3, #0]
  hxspi2.Init.FifoThresholdByte = 1;
341813a2:	4b25      	ldr	r3, [pc, #148]	@ (34181438 <MX_XSPI2_Init+0xac>)
341813a4:	2201      	movs	r2, #1
341813a6:	605a      	str	r2, [r3, #4]
  hxspi2.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
341813a8:	4b23      	ldr	r3, [pc, #140]	@ (34181438 <MX_XSPI2_Init+0xac>)
341813aa:	2200      	movs	r2, #0
341813ac:	609a      	str	r2, [r3, #8]
  hxspi2.Init.MemoryType = HAL_XSPI_MEMTYPE_MICRON;
341813ae:	4b22      	ldr	r3, [pc, #136]	@ (34181438 <MX_XSPI2_Init+0xac>)
341813b0:	2200      	movs	r2, #0
341813b2:	60da      	str	r2, [r3, #12]
  hxspi2.Init.MemorySize = HAL_XSPI_SIZE_16B;
341813b4:	4b20      	ldr	r3, [pc, #128]	@ (34181438 <MX_XSPI2_Init+0xac>)
341813b6:	2200      	movs	r2, #0
341813b8:	611a      	str	r2, [r3, #16]
  hxspi2.Init.ChipSelectHighTimeCycle = 1;
341813ba:	4b1f      	ldr	r3, [pc, #124]	@ (34181438 <MX_XSPI2_Init+0xac>)
341813bc:	2201      	movs	r2, #1
341813be:	615a      	str	r2, [r3, #20]
  hxspi2.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
341813c0:	4b1d      	ldr	r3, [pc, #116]	@ (34181438 <MX_XSPI2_Init+0xac>)
341813c2:	2200      	movs	r2, #0
341813c4:	619a      	str	r2, [r3, #24]
  hxspi2.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
341813c6:	4b1c      	ldr	r3, [pc, #112]	@ (34181438 <MX_XSPI2_Init+0xac>)
341813c8:	2200      	movs	r2, #0
341813ca:	61da      	str	r2, [r3, #28]
  hxspi2.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
341813cc:	4b1a      	ldr	r3, [pc, #104]	@ (34181438 <MX_XSPI2_Init+0xac>)
341813ce:	2200      	movs	r2, #0
341813d0:	621a      	str	r2, [r3, #32]
  hxspi2.Init.ClockPrescaler = 0;
341813d2:	4b19      	ldr	r3, [pc, #100]	@ (34181438 <MX_XSPI2_Init+0xac>)
341813d4:	2200      	movs	r2, #0
341813d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi2.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
341813d8:	4b17      	ldr	r3, [pc, #92]	@ (34181438 <MX_XSPI2_Init+0xac>)
341813da:	2200      	movs	r2, #0
341813dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi2.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
341813de:	4b16      	ldr	r3, [pc, #88]	@ (34181438 <MX_XSPI2_Init+0xac>)
341813e0:	2200      	movs	r2, #0
341813e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi2.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
341813e4:	4b14      	ldr	r3, [pc, #80]	@ (34181438 <MX_XSPI2_Init+0xac>)
341813e6:	2200      	movs	r2, #0
341813e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi2.Init.MaxTran = 0;
341813ea:	4b13      	ldr	r3, [pc, #76]	@ (34181438 <MX_XSPI2_Init+0xac>)
341813ec:	2200      	movs	r2, #0
341813ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi2.Init.Refresh = 0;
341813f0:	4b11      	ldr	r3, [pc, #68]	@ (34181438 <MX_XSPI2_Init+0xac>)
341813f2:	2200      	movs	r2, #0
341813f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi2.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
341813f6:	4b10      	ldr	r3, [pc, #64]	@ (34181438 <MX_XSPI2_Init+0xac>)
341813f8:	2200      	movs	r2, #0
341813fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi2) != HAL_OK)
341813fc:	480e      	ldr	r0, [pc, #56]	@ (34181438 <MX_XSPI2_Init+0xac>)
341813fe:	f00f fc3b 	bl	34190c78 <HAL_XSPI_Init>
34181402:	4603      	mov	r3, r0
34181404:	2b00      	cmp	r3, #0
34181406:	d001      	beq.n	3418140c <MX_XSPI2_Init+0x80>
  {
    Error_Handler();
34181408:	f000 f8dc 	bl	341815c4 <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
3418140c:	2310      	movs	r3, #16
3418140e:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_2;
34181410:	2301      	movs	r3, #1
34181412:	60bb      	str	r3, [r7, #8]
  sXspiManagerCfg.Req2AckTime = 1;
34181414:	2301      	movs	r3, #1
34181416:	60fb      	str	r3, [r7, #12]
  if (HAL_XSPIM_Config(&hxspi2, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34181418:	1d3b      	adds	r3, r7, #4
3418141a:	f241 3288 	movw	r2, #5000	@ 0x1388
3418141e:	4619      	mov	r1, r3
34181420:	4805      	ldr	r0, [pc, #20]	@ (34181438 <MX_XSPI2_Init+0xac>)
34181422:	f00f feef 	bl	34191204 <HAL_XSPIM_Config>
34181426:	4603      	mov	r3, r0
34181428:	2b00      	cmp	r3, #0
3418142a:	d001      	beq.n	34181430 <MX_XSPI2_Init+0xa4>
  {
    Error_Handler();
3418142c:	f000 f8ca 	bl	341815c4 <Error_Handler>
  }
  /* USER CODE BEGIN XSPI2_Init 2 */

  /* USER CODE END XSPI2_Init 2 */

}
34181430:	bf00      	nop
34181432:	3710      	adds	r7, #16
34181434:	46bd      	mov	sp, r7
34181436:	bd80      	pop	{r7, pc}
34181438:	341c0878 	.word	0x341c0878
3418143c:	5802a000 	.word	0x5802a000

34181440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
34181440:	b580      	push	{r7, lr}
34181442:	b086      	sub	sp, #24
34181444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34181446:	1d3b      	adds	r3, r7, #4
34181448:	2200      	movs	r2, #0
3418144a:	601a      	str	r2, [r3, #0]
3418144c:	605a      	str	r2, [r3, #4]
3418144e:	609a      	str	r2, [r3, #8]
34181450:	60da      	str	r2, [r3, #12]
34181452:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
34181454:	2080      	movs	r0, #128	@ 0x80
34181456:	f7ff fb25 	bl	34180aa4 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
3418145a:	2004      	movs	r0, #4
3418145c:	f7ff fb22 	bl	34180aa4 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
34181460:	2010      	movs	r0, #16
34181462:	f7ff fb1f 	bl	34180aa4 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
34181466:	2008      	movs	r0, #8
34181468:	f7ff fb1c 	bl	34180aa4 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
3418146c:	2002      	movs	r0, #2
3418146e:	f7ff fb19 	bl	34180aa4 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOP_CLK_ENABLE();
34181472:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
34181476:	f7ff fb15 	bl	34180aa4 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOO_CLK_ENABLE();
3418147a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
3418147e:	f7ff fb11 	bl	34180aa4 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOG_CLK_ENABLE();
34181482:	2040      	movs	r0, #64	@ 0x40
34181484:	f7ff fb0e 	bl	34180aa4 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPION_CLK_ENABLE();
34181488:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
3418148c:	f7ff fb0a 	bl	34180aa4 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
34181490:	2001      	movs	r0, #1
34181492:	f7ff fb07 	bl	34180aa4 <LL_AHB4_GRP1_EnableClock>

  /*Configure GPIO pins : LCD_B4_Pin LCD_B5_Pin LCD_R4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin|LCD_B5_Pin|LCD_R4_Pin;
34181496:	2358      	movs	r3, #88	@ 0x58
34181498:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
3418149a:	2302      	movs	r3, #2
3418149c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
3418149e:	2300      	movs	r3, #0
341814a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
341814a2:	2300      	movs	r3, #0
341814a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_LCD;
341814a6:	230e      	movs	r3, #14
341814a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
341814aa:	1d3b      	adds	r3, r7, #4
341814ac:	4619      	mov	r1, r3
341814ae:	4834      	ldr	r0, [pc, #208]	@ (34181580 <MX_GPIO_Init+0x140>)
341814b0:	f002 fd7e 	bl	34183fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_R2_Pin LCD_R7_Pin LCD_R1_Pin */
  GPIO_InitStruct.Pin = LCD_R2_Pin|LCD_R7_Pin|LCD_R1_Pin;
341814b4:	f44f 4303 	mov.w	r3, #33536	@ 0x8300
341814b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
341814ba:	2302      	movs	r3, #2
341814bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
341814be:	2300      	movs	r3, #0
341814c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
341814c2:	2300      	movs	r3, #0
341814c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_LCD;
341814c6:	230e      	movs	r3, #14
341814c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
341814ca:	1d3b      	adds	r3, r7, #4
341814cc:	4619      	mov	r1, r3
341814ce:	482d      	ldr	r0, [pc, #180]	@ (34181584 <MX_GPIO_Init+0x144>)
341814d0:	f002 fd6e 	bl	34183fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_B2_Pin LCD_G4_Pin LCD_G6_Pin
                           LCD_G5_Pin LCD_R3_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_B2_Pin|LCD_G4_Pin|LCD_G6_Pin
341814d4:	f64d 0314 	movw	r3, #55316	@ 0xd814
341814d8:	607b      	str	r3, [r7, #4]
                          |LCD_G5_Pin|LCD_R3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
341814da:	2302      	movs	r3, #2
341814dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
341814de:	2300      	movs	r3, #0
341814e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
341814e2:	2300      	movs	r3, #0
341814e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_LCD;
341814e6:	230e      	movs	r3, #14
341814e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
341814ea:	1d3b      	adds	r3, r7, #4
341814ec:	4619      	mov	r1, r3
341814ee:	4826      	ldr	r0, [pc, #152]	@ (34181588 <MX_GPIO_Init+0x148>)
341814f0:	f002 fd5e 	bl	34183fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_VSYNC_Pin */
  GPIO_InitStruct.Pin = LCD_VSYNC_Pin;
341814f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
341814f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
341814fa:	2302      	movs	r3, #2
341814fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
341814fe:	2300      	movs	r3, #0
34181500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34181502:	2300      	movs	r3, #0
34181504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_LCD;
34181506:	230e      	movs	r3, #14
34181508:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LCD_VSYNC_GPIO_Port, &GPIO_InitStruct);
3418150a:	1d3b      	adds	r3, r7, #4
3418150c:	4619      	mov	r1, r3
3418150e:	481f      	ldr	r0, [pc, #124]	@ (3418158c <MX_GPIO_Init+0x14c>)
34181510:	f002 fd4e 	bl	34183fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Pin */
  GPIO_InitStruct.Pin = User_Pin;
34181514:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34181518:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
3418151a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
3418151e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
34181520:	2300      	movs	r3, #0
34181522:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(User_GPIO_Port, &GPIO_InitStruct);
34181524:	1d3b      	adds	r3, r7, #4
34181526:	4619      	mov	r1, r3
34181528:	4819      	ldr	r0, [pc, #100]	@ (34181590 <MX_GPIO_Init+0x150>)
3418152a:	f002 fd41 	bl	34183fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B3_Pin LCD_B0_Pin LCD_G1_Pin LCD_R0_Pin
                           LCD_G0_Pin LCd_G7_Pin LCD_DE_Pin LCD_R6_Pin */
  GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B0_Pin|LCD_G1_Pin|LCD_R0_Pin
3418152e:	f64b 1343 	movw	r3, #47427	@ 0xb943
34181532:	607b      	str	r3, [r7, #4]
                          |LCD_G0_Pin|LCd_G7_Pin|LCD_DE_Pin|LCD_R6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34181534:	2302      	movs	r3, #2
34181536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
34181538:	2300      	movs	r3, #0
3418153a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
3418153c:	2300      	movs	r3, #0
3418153e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_LCD;
34181540:	230e      	movs	r3, #14
34181542:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
34181544:	1d3b      	adds	r3, r7, #4
34181546:	4619      	mov	r1, r3
34181548:	4812      	ldr	r0, [pc, #72]	@ (34181594 <MX_GPIO_Init+0x154>)
3418154a:	f002 fd31 	bl	34183fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G2_Pin LCD_R5_Pin LCD_B1_Pin LCD_B7_Pin
                           LCD_B6_Pin LCD_G3_Pin */
  GPIO_InitStruct.Pin = LCD_G2_Pin|LCD_R5_Pin|LCD_B1_Pin|LCD_B7_Pin
3418154e:	f248 1387 	movw	r3, #33159	@ 0x8187
34181552:	607b      	str	r3, [r7, #4]
                          |LCD_B6_Pin|LCD_G3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34181554:	2302      	movs	r3, #2
34181556:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
34181558:	2300      	movs	r3, #0
3418155a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
3418155c:	2300      	movs	r3, #0
3418155e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_LCD;
34181560:	230e      	movs	r3, #14
34181562:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
34181564:	1d3b      	adds	r3, r7, #4
34181566:	4619      	mov	r1, r3
34181568:	480b      	ldr	r0, [pc, #44]	@ (34181598 <MX_GPIO_Init+0x158>)
3418156a:	f002 fd21 	bl	34183fb0 <HAL_GPIO_Init>

  /*Configure the EXTI line attribute */
  HAL_EXTI_ConfigLineAttributes(EXTI_LINE_13, EXTI_LINE_SEC);
3418156e:	f240 1101 	movw	r1, #257	@ 0x101
34181572:	480a      	ldr	r0, [pc, #40]	@ (3418159c <MX_GPIO_Init+0x15c>)
34181574:	f002 fcba 	bl	34183eec <HAL_EXTI_ConfigLineAttributes>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
34181578:	bf00      	nop
3418157a:	3718      	adds	r7, #24
3418157c:	46bd      	mov	sp, r7
3418157e:	bd80      	pop	{r7, pc}
34181580:	56021c00 	.word	0x56021c00
34181584:	56020c00 	.word	0x56020c00
34181588:	56020400 	.word	0x56020400
3418158c:	56021000 	.word	0x56021000
34181590:	56020800 	.word	0x56020800
34181594:	56021800 	.word	0x56021800
34181598:	56020000 	.word	0x56020000
3418159c:	1600000d 	.word	0x1600000d

341815a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
341815a0:	b580      	push	{r7, lr}
341815a2:	b082      	sub	sp, #8
341815a4:	af00      	add	r7, sp, #0
341815a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
341815a8:	687b      	ldr	r3, [r7, #4]
341815aa:	681b      	ldr	r3, [r3, #0]
341815ac:	4a04      	ldr	r2, [pc, #16]	@ (341815c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
341815ae:	4293      	cmp	r3, r2
341815b0:	d101      	bne.n	341815b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
341815b2:	f001 f909 	bl	341827c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
341815b6:	bf00      	nop
341815b8:	3708      	adds	r7, #8
341815ba:	46bd      	mov	sp, r7
341815bc:	bd80      	pop	{r7, pc}
341815be:	bf00      	nop
341815c0:	50001000 	.word	0x50001000

341815c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
341815c4:	b480      	push	{r7}
341815c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
341815c8:	b672      	cpsid	i
}
341815ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
341815cc:	bf00      	nop
341815ce:	e7fd      	b.n	341815cc <Error_Handler+0x8>

341815d0 <LL_AHB1_GRP1_EnableClock>:
{
341815d0:	b480      	push	{r7}
341815d2:	b085      	sub	sp, #20
341815d4:	af00      	add	r7, sp, #0
341815d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB1ENSR, Periphs);
341815d8:	4a07      	ldr	r2, [pc, #28]	@ (341815f8 <LL_AHB1_GRP1_EnableClock+0x28>)
341815da:	687b      	ldr	r3, [r7, #4]
341815dc:	f8c2 3a50 	str.w	r3, [r2, #2640]	@ 0xa50
  tmpreg = READ_REG(RCC->AHB1ENR);
341815e0:	4b05      	ldr	r3, [pc, #20]	@ (341815f8 <LL_AHB1_GRP1_EnableClock+0x28>)
341815e2:	f8d3 3250 	ldr.w	r3, [r3, #592]	@ 0x250
341815e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
341815e8:	68fb      	ldr	r3, [r7, #12]
}
341815ea:	bf00      	nop
341815ec:	3714      	adds	r7, #20
341815ee:	46bd      	mov	sp, r7
341815f0:	f85d 7b04 	ldr.w	r7, [sp], #4
341815f4:	4770      	bx	lr
341815f6:	bf00      	nop
341815f8:	56028000 	.word	0x56028000

341815fc <LL_AHB2_GRP1_EnableClock>:
{
341815fc:	b480      	push	{r7}
341815fe:	b085      	sub	sp, #20
34181600:	af00      	add	r7, sp, #0
34181602:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB2ENSR, Periphs);
34181604:	4a07      	ldr	r2, [pc, #28]	@ (34181624 <LL_AHB2_GRP1_EnableClock+0x28>)
34181606:	687b      	ldr	r3, [r7, #4]
34181608:	f8c2 3a54 	str.w	r3, [r2, #2644]	@ 0xa54
  tmpreg = READ_REG(RCC->AHB2ENR);
3418160c:	4b05      	ldr	r3, [pc, #20]	@ (34181624 <LL_AHB2_GRP1_EnableClock+0x28>)
3418160e:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
34181612:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181614:	68fb      	ldr	r3, [r7, #12]
}
34181616:	bf00      	nop
34181618:	3714      	adds	r7, #20
3418161a:	46bd      	mov	sp, r7
3418161c:	f85d 7b04 	ldr.w	r7, [sp], #4
34181620:	4770      	bx	lr
34181622:	bf00      	nop
34181624:	56028000 	.word	0x56028000

34181628 <LL_AHB4_GRP1_EnableClock>:
{
34181628:	b480      	push	{r7}
3418162a:	b085      	sub	sp, #20
3418162c:	af00      	add	r7, sp, #0
3418162e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34181630:	4a07      	ldr	r2, [pc, #28]	@ (34181650 <LL_AHB4_GRP1_EnableClock+0x28>)
34181632:	687b      	ldr	r3, [r7, #4]
34181634:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34181638:	4b05      	ldr	r3, [pc, #20]	@ (34181650 <LL_AHB4_GRP1_EnableClock+0x28>)
3418163a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3418163e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181640:	68fb      	ldr	r3, [r7, #12]
}
34181642:	bf00      	nop
34181644:	3714      	adds	r7, #20
34181646:	46bd      	mov	sp, r7
34181648:	f85d 7b04 	ldr.w	r7, [sp], #4
3418164c:	4770      	bx	lr
3418164e:	bf00      	nop
34181650:	56028000 	.word	0x56028000

34181654 <LL_AHB4_GRP1_IsEnabledClock>:
{
34181654:	b480      	push	{r7}
34181656:	b083      	sub	sp, #12
34181658:	af00      	add	r7, sp, #0
3418165a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB4ENR, Periphs) == Periphs) ? 1UL : 0UL);
3418165c:	4b08      	ldr	r3, [pc, #32]	@ (34181680 <LL_AHB4_GRP1_IsEnabledClock+0x2c>)
3418165e:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
34181662:	687b      	ldr	r3, [r7, #4]
34181664:	4013      	ands	r3, r2
34181666:	687a      	ldr	r2, [r7, #4]
34181668:	429a      	cmp	r2, r3
3418166a:	d101      	bne.n	34181670 <LL_AHB4_GRP1_IsEnabledClock+0x1c>
3418166c:	2301      	movs	r3, #1
3418166e:	e000      	b.n	34181672 <LL_AHB4_GRP1_IsEnabledClock+0x1e>
34181670:	2300      	movs	r3, #0
}
34181672:	4618      	mov	r0, r3
34181674:	370c      	adds	r7, #12
34181676:	46bd      	mov	sp, r7
34181678:	f85d 7b04 	ldr.w	r7, [sp], #4
3418167c:	4770      	bx	lr
3418167e:	bf00      	nop
34181680:	56028000 	.word	0x56028000

34181684 <LL_AHB4_GRP1_DisableClock>:
{
34181684:	b480      	push	{r7}
34181686:	b083      	sub	sp, #12
34181688:	af00      	add	r7, sp, #0
3418168a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENCR, Periphs);
3418168c:	4b06      	ldr	r3, [pc, #24]	@ (341816a8 <LL_AHB4_GRP1_DisableClock+0x24>)
3418168e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181692:	461a      	mov	r2, r3
34181694:	687b      	ldr	r3, [r7, #4]
34181696:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
}
3418169a:	bf00      	nop
3418169c:	370c      	adds	r7, #12
3418169e:	46bd      	mov	sp, r7
341816a0:	f85d 7b04 	ldr.w	r7, [sp], #4
341816a4:	4770      	bx	lr
341816a6:	bf00      	nop
341816a8:	56028000 	.word	0x56028000

341816ac <LL_AHB5_GRP1_EnableClock>:
{
341816ac:	b480      	push	{r7}
341816ae:	b085      	sub	sp, #20
341816b0:	af00      	add	r7, sp, #0
341816b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5ENSR, Periphs);
341816b4:	4a07      	ldr	r2, [pc, #28]	@ (341816d4 <LL_AHB5_GRP1_EnableClock+0x28>)
341816b6:	687b      	ldr	r3, [r7, #4]
341816b8:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
341816bc:	4b05      	ldr	r3, [pc, #20]	@ (341816d4 <LL_AHB5_GRP1_EnableClock+0x28>)
341816be:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
341816c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
341816c4:	68fb      	ldr	r3, [r7, #12]
}
341816c6:	bf00      	nop
341816c8:	3714      	adds	r7, #20
341816ca:	46bd      	mov	sp, r7
341816cc:	f85d 7b04 	ldr.w	r7, [sp], #4
341816d0:	4770      	bx	lr
341816d2:	bf00      	nop
341816d4:	56028000 	.word	0x56028000

341816d8 <LL_APB1_GRP1_EnableClock>:
{
341816d8:	b480      	push	{r7}
341816da:	b085      	sub	sp, #20
341816dc:	af00      	add	r7, sp, #0
341816de:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB1ENSR1, Periphs);
341816e0:	4a07      	ldr	r2, [pc, #28]	@ (34181700 <LL_APB1_GRP1_EnableClock+0x28>)
341816e2:	687b      	ldr	r3, [r7, #4]
341816e4:	f8c2 3a64 	str.w	r3, [r2, #2660]	@ 0xa64
  tmpreg = READ_REG(RCC->APB1ENR1);
341816e8:	4b05      	ldr	r3, [pc, #20]	@ (34181700 <LL_APB1_GRP1_EnableClock+0x28>)
341816ea:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
341816ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
341816f0:	68fb      	ldr	r3, [r7, #12]
}
341816f2:	bf00      	nop
341816f4:	3714      	adds	r7, #20
341816f6:	46bd      	mov	sp, r7
341816f8:	f85d 7b04 	ldr.w	r7, [sp], #4
341816fc:	4770      	bx	lr
341816fe:	bf00      	nop
34181700:	56028000 	.word	0x56028000

34181704 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_UART9
  *         @arg @ref LL_APB2_GRP1_PERIPH_USART10
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
34181704:	b480      	push	{r7}
34181706:	b085      	sub	sp, #20
34181708:	af00      	add	r7, sp, #0
3418170a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
3418170c:	4a07      	ldr	r2, [pc, #28]	@ (3418172c <LL_APB2_GRP1_EnableClock+0x28>)
3418170e:	687b      	ldr	r3, [r7, #4]
34181710:	f8c2 3a6c 	str.w	r3, [r2, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
34181714:	4b05      	ldr	r3, [pc, #20]	@ (3418172c <LL_APB2_GRP1_EnableClock+0x28>)
34181716:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
3418171a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
3418171c:	68fb      	ldr	r3, [r7, #12]
}
3418171e:	bf00      	nop
34181720:	3714      	adds	r7, #20
34181722:	46bd      	mov	sp, r7
34181724:	f85d 7b04 	ldr.w	r7, [sp], #4
34181728:	4770      	bx	lr
3418172a:	bf00      	nop
3418172c:	56028000 	.word	0x56028000

34181730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
34181730:	b580      	push	{r7, lr}
34181732:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  HAL_PWREx_EnableVddIO2();
34181734:	f003 f982 	bl	34184a3c <HAL_PWREx_EnableVddIO2>

  HAL_PWREx_EnableVddIO3();
34181738:	f003 f990 	bl	34184a5c <HAL_PWREx_EnableVddIO3>

  HAL_PWREx_EnableVddIO4();
3418173c:	f003 f99e 	bl	34184a7c <HAL_PWREx_EnableVddIO4>

  HAL_PWREx_EnableVddIO5();
34181740:	f003 f9ac 	bl	34184a9c <HAL_PWREx_EnableVddIO5>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
34181744:	bf00      	nop
34181746:	bd80      	pop	{r7, pc}

34181748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
34181748:	b580      	push	{r7, lr}
3418174a:	b0ec      	sub	sp, #432	@ 0x1b0
3418174c:	af00      	add	r7, sp, #0
3418174e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181752:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181756:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34181758:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
3418175c:	2200      	movs	r2, #0
3418175e:	601a      	str	r2, [r3, #0]
34181760:	605a      	str	r2, [r3, #4]
34181762:	609a      	str	r2, [r3, #8]
34181764:	60da      	str	r2, [r3, #12]
34181766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34181768:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
3418176c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181770:	4618      	mov	r0, r3
34181772:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34181776:	461a      	mov	r2, r3
34181778:	2100      	movs	r1, #0
3418177a:	f010 fe17 	bl	341923ac <memset>
  if(hadc->Instance==ADC1)
3418177e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181782:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181786:	681b      	ldr	r3, [r3, #0]
34181788:	681b      	ldr	r3, [r3, #0]
3418178a:	4a20      	ldr	r2, [pc, #128]	@ (3418180c <HAL_ADC_MspInit+0xc4>)
3418178c:	4293      	cmp	r3, r2
3418178e:	d137      	bne.n	34181800 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
34181790:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181794:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181798:	f04f 0201 	mov.w	r2, #1
3418179c:	f04f 0300 	mov.w	r3, #0
341817a0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_HCLK;
341817a4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
341817a8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
341817ac:	2200      	movs	r2, #0
341817ae:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    PeriphClkInitStruct.AdcDivider = 2;
341817b2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
341817b6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
341817ba:	2202      	movs	r2, #2
341817bc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
341817c0:	f107 0308 	add.w	r3, r7, #8
341817c4:	4618      	mov	r0, r3
341817c6:	f006 f97f 	bl	34187ac8 <HAL_RCCEx_PeriphCLKConfig>
341817ca:	4603      	mov	r3, r0
341817cc:	2b00      	cmp	r3, #0
341817ce:	d001      	beq.n	341817d4 <HAL_ADC_MspInit+0x8c>
    {
      Error_Handler();
341817d0:	f7ff fef8 	bl	341815c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
341817d4:	2020      	movs	r0, #32
341817d6:	f7ff fefb 	bl	341815d0 <LL_AHB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
341817da:	2001      	movs	r0, #1
341817dc:	f7ff ff24 	bl	34181628 <LL_AHB4_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA11     ------> ADC1_INP12
    */
    GPIO_InitStruct.Pin = UCPD1_VSENSE_Pin;
341817e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
341817e4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
341817e8:	2303      	movs	r3, #3
341817ea:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
341817ee:	2300      	movs	r3, #0
341817f0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(UCPD1_VSENSE_GPIO_Port, &GPIO_InitStruct);
341817f4:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
341817f8:	4619      	mov	r1, r3
341817fa:	4805      	ldr	r0, [pc, #20]	@ (34181810 <HAL_ADC_MspInit+0xc8>)
341817fc:	f002 fbd8 	bl	34183fb0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
34181800:	bf00      	nop
34181802:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
34181806:	46bd      	mov	sp, r7
34181808:	bd80      	pop	{r7, pc}
3418180a:	bf00      	nop
3418180c:	50022000 	.word	0x50022000
34181810:	56020000 	.word	0x56020000

34181814 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
34181814:	b580      	push	{r7, lr}
34181816:	b0ec      	sub	sp, #432	@ 0x1b0
34181818:	af00      	add	r7, sp, #0
3418181a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
3418181e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181822:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34181824:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181828:	2200      	movs	r2, #0
3418182a:	601a      	str	r2, [r3, #0]
3418182c:	605a      	str	r2, [r3, #4]
3418182e:	609a      	str	r2, [r3, #8]
34181830:	60da      	str	r2, [r3, #12]
34181832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34181834:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181838:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
3418183c:	4618      	mov	r0, r3
3418183e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34181842:	461a      	mov	r2, r3
34181844:	2100      	movs	r1, #0
34181846:	f010 fdb1 	bl	341923ac <memset>
  if(hi2c->Instance==I2C1)
3418184a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
3418184e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181852:	681b      	ldr	r3, [r3, #0]
34181854:	681b      	ldr	r3, [r3, #0]
34181856:	4a4d      	ldr	r2, [pc, #308]	@ (3418198c <HAL_I2C_MspInit+0x178>)
34181858:	4293      	cmp	r3, r2
3418185a:	d150      	bne.n	341818fe <HAL_I2C_MspInit+0xea>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
3418185c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181860:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181864:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34181868:	f04f 0300 	mov.w	r3, #0
3418186c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
34181870:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181874:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181878:	4a45      	ldr	r2, [pc, #276]	@ (34181990 <HAL_I2C_MspInit+0x17c>)
3418187a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
3418187e:	f107 0308 	add.w	r3, r7, #8
34181882:	4618      	mov	r0, r3
34181884:	f006 f920 	bl	34187ac8 <HAL_RCCEx_PeriphCLKConfig>
34181888:	4603      	mov	r3, r0
3418188a:	2b00      	cmp	r3, #0
3418188c:	d001      	beq.n	34181892 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
3418188e:	f7ff fe99 	bl	341815c4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
34181892:	2004      	movs	r0, #4
34181894:	f7ff fec8 	bl	34181628 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOH_CLK_ENABLE();
34181898:	2080      	movs	r0, #128	@ 0x80
3418189a:	f7ff fec5 	bl	34181628 <LL_AHB4_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PC1     ------> I2C1_SDA
    PH9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
3418189e:	2302      	movs	r3, #2
341818a0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
341818a4:	2312      	movs	r3, #18
341818a6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
341818aa:	2300      	movs	r3, #0
341818ac:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
341818b0:	2300      	movs	r3, #0
341818b2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
341818b6:	2304      	movs	r3, #4
341818b8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
341818bc:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
341818c0:	4619      	mov	r1, r3
341818c2:	4834      	ldr	r0, [pc, #208]	@ (34181994 <HAL_I2C_MspInit+0x180>)
341818c4:	f002 fb74 	bl	34183fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
341818c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
341818cc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
341818d0:	2312      	movs	r3, #18
341818d2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
341818d6:	2300      	movs	r3, #0
341818d8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
341818dc:	2300      	movs	r3, #0
341818de:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
341818e2:	2304      	movs	r3, #4
341818e4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
341818e8:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
341818ec:	4619      	mov	r1, r3
341818ee:	482a      	ldr	r0, [pc, #168]	@ (34181998 <HAL_I2C_MspInit+0x184>)
341818f0:	f002 fb5e 	bl	34183fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
341818f4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
341818f8:	f7ff feee 	bl	341816d8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
341818fc:	e040      	b.n	34181980 <HAL_I2C_MspInit+0x16c>
  else if(hi2c->Instance==I2C2)
341818fe:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181902:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181906:	681b      	ldr	r3, [r3, #0]
34181908:	681b      	ldr	r3, [r3, #0]
3418190a:	4a24      	ldr	r2, [pc, #144]	@ (3418199c <HAL_I2C_MspInit+0x188>)
3418190c:	4293      	cmp	r3, r2
3418190e:	d137      	bne.n	34181980 <HAL_I2C_MspInit+0x16c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
34181910:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181914:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181918:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3418191c:	f04f 0300 	mov.w	r3, #0
34181920:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
34181924:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181928:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
3418192c:	4a1c      	ldr	r2, [pc, #112]	@ (341819a0 <HAL_I2C_MspInit+0x18c>)
3418192e:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34181932:	f107 0308 	add.w	r3, r7, #8
34181936:	4618      	mov	r0, r3
34181938:	f006 f8c6 	bl	34187ac8 <HAL_RCCEx_PeriphCLKConfig>
3418193c:	4603      	mov	r3, r0
3418193e:	2b00      	cmp	r3, #0
34181940:	d001      	beq.n	34181946 <HAL_I2C_MspInit+0x132>
      Error_Handler();
34181942:	f7ff fe3f 	bl	341815c4 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
34181946:	2008      	movs	r0, #8
34181948:	f7ff fe6e 	bl	34181628 <LL_AHB4_GRP1_EnableClock>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
3418194c:	f244 0310 	movw	r3, #16400	@ 0x4010
34181950:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
34181954:	2312      	movs	r3, #18
34181956:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
3418195a:	2300      	movs	r3, #0
3418195c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34181960:	2300      	movs	r3, #0
34181962:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
34181966:	2304      	movs	r3, #4
34181968:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
3418196c:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181970:	4619      	mov	r1, r3
34181972:	480c      	ldr	r0, [pc, #48]	@ (341819a4 <HAL_I2C_MspInit+0x190>)
34181974:	f002 fb1c 	bl	34183fb0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
34181978:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
3418197c:	f7ff feac 	bl	341816d8 <LL_APB1_GRP1_EnableClock>
}
34181980:	bf00      	nop
34181982:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
34181986:	46bd      	mov	sp, r7
34181988:	bd80      	pop	{r7, pc}
3418198a:	bf00      	nop
3418198c:	50005400 	.word	0x50005400
34181990:	0700000c 	.word	0x0700000c
34181994:	56020800 	.word	0x56020800
34181998:	56021c00 	.word	0x56021c00
3418199c:	50005800 	.word	0x50005800
341819a0:	0700040c 	.word	0x0700040c
341819a4:	56020c00 	.word	0x56020c00

341819a8 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
341819a8:	b580      	push	{r7, lr}
341819aa:	b0ec      	sub	sp, #432	@ 0x1b0
341819ac:	af00      	add	r7, sp, #0
341819ae:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
341819b2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
341819b6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
341819b8:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
341819bc:	2200      	movs	r2, #0
341819be:	601a      	str	r2, [r3, #0]
341819c0:	605a      	str	r2, [r3, #4]
341819c2:	609a      	str	r2, [r3, #8]
341819c4:	60da      	str	r2, [r3, #12]
341819c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
341819c8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
341819cc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
341819d0:	4618      	mov	r0, r3
341819d2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
341819d6:	461a      	mov	r2, r3
341819d8:	2100      	movs	r1, #0
341819da:	f010 fce7 	bl	341923ac <memset>
  if(IS_MDF_INSTANCE(hmdf->Instance))
341819de:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
341819e2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
341819e6:	681b      	ldr	r3, [r3, #0]
341819e8:	681b      	ldr	r3, [r3, #0]
341819ea:	4a36      	ldr	r2, [pc, #216]	@ (34181ac4 <HAL_MDF_MspInit+0x11c>)
341819ec:	4293      	cmp	r3, r2
341819ee:	d02c      	beq.n	34181a4a <HAL_MDF_MspInit+0xa2>
341819f0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
341819f4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
341819f8:	681b      	ldr	r3, [r3, #0]
341819fa:	681b      	ldr	r3, [r3, #0]
341819fc:	4a32      	ldr	r2, [pc, #200]	@ (34181ac8 <HAL_MDF_MspInit+0x120>)
341819fe:	4293      	cmp	r3, r2
34181a00:	d023      	beq.n	34181a4a <HAL_MDF_MspInit+0xa2>
34181a02:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181a06:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181a0a:	681b      	ldr	r3, [r3, #0]
34181a0c:	681b      	ldr	r3, [r3, #0]
34181a0e:	4a2f      	ldr	r2, [pc, #188]	@ (34181acc <HAL_MDF_MspInit+0x124>)
34181a10:	4293      	cmp	r3, r2
34181a12:	d01a      	beq.n	34181a4a <HAL_MDF_MspInit+0xa2>
34181a14:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181a18:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181a1c:	681b      	ldr	r3, [r3, #0]
34181a1e:	681b      	ldr	r3, [r3, #0]
34181a20:	4a2b      	ldr	r2, [pc, #172]	@ (34181ad0 <HAL_MDF_MspInit+0x128>)
34181a22:	4293      	cmp	r3, r2
34181a24:	d011      	beq.n	34181a4a <HAL_MDF_MspInit+0xa2>
34181a26:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181a2a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181a2e:	681b      	ldr	r3, [r3, #0]
34181a30:	681b      	ldr	r3, [r3, #0]
34181a32:	4a28      	ldr	r2, [pc, #160]	@ (34181ad4 <HAL_MDF_MspInit+0x12c>)
34181a34:	4293      	cmp	r3, r2
34181a36:	d008      	beq.n	34181a4a <HAL_MDF_MspInit+0xa2>
34181a38:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181a3c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181a40:	681b      	ldr	r3, [r3, #0]
34181a42:	681b      	ldr	r3, [r3, #0]
34181a44:	4a24      	ldr	r2, [pc, #144]	@ (34181ad8 <HAL_MDF_MspInit+0x130>)
34181a46:	4293      	cmp	r3, r2
34181a48:	d137      	bne.n	34181aba <HAL_MDF_MspInit+0x112>

  /* USER CODE END MDF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_MDF1;
34181a4a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181a4e:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181a52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34181a56:	f04f 0300 	mov.w	r3, #0
34181a5a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Mdf1ClockSelection = RCC_MDF1CLKSOURCE_HCLK;
34181a5e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181a62:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181a66:	2200      	movs	r2, #0
34181a68:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34181a6c:	f107 0308 	add.w	r3, r7, #8
34181a70:	4618      	mov	r0, r3
34181a72:	f006 f829 	bl	34187ac8 <HAL_RCCEx_PeriphCLKConfig>
34181a76:	4603      	mov	r3, r0
34181a78:	2b00      	cmp	r3, #0
34181a7a:	d001      	beq.n	34181a80 <HAL_MDF_MspInit+0xd8>
    {
      Error_Handler();
34181a7c:	f7ff fda2 	bl	341815c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_MDF1_CLK_ENABLE();
34181a80:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
34181a84:	f7ff fdba 	bl	341815fc <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOE_CLK_ENABLE();
34181a88:	2010      	movs	r0, #16
34181a8a:	f7ff fdcd 	bl	34181628 <LL_AHB4_GRP1_EnableClock>
    /**MDF1 GPIO Configuration
    PE8     ------> MDF1_SDI0
    PE7     ------> MDF1_CKI0
    PE2     ------> MDF1_CCK0
    */
    GPIO_InitStruct.Pin = MIC_D1_Pin|GPIO_PIN_7|MIC_CK_Pin;
34181a8e:	f44f 73c2 	mov.w	r3, #388	@ 0x184
34181a92:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34181a96:	2302      	movs	r3, #2
34181a98:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181a9c:	2300      	movs	r3, #0
34181a9e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34181aa2:	2300      	movs	r3, #0
34181aa4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF4_MDF1;
34181aa8:	2304      	movs	r3, #4
34181aaa:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
34181aae:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181ab2:	4619      	mov	r1, r3
34181ab4:	4809      	ldr	r0, [pc, #36]	@ (34181adc <HAL_MDF_MspInit+0x134>)
34181ab6:	f002 fa7b 	bl	34183fb0 <HAL_GPIO_Init>

  /* USER CODE END MDF1_MspInit 1 */

  }

}
34181aba:	bf00      	nop
34181abc:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
34181ac0:	46bd      	mov	sp, r7
34181ac2:	bd80      	pop	{r7, pc}
34181ac4:	52025080 	.word	0x52025080
34181ac8:	52025100 	.word	0x52025100
34181acc:	52025180 	.word	0x52025180
34181ad0:	52025200 	.word	0x52025200
34181ad4:	52025280 	.word	0x52025280
34181ad8:	52025300 	.word	0x52025300
34181adc:	56021000 	.word	0x56021000

34181ae0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
34181ae0:	b580      	push	{r7, lr}
34181ae2:	b0ec      	sub	sp, #432	@ 0x1b0
34181ae4:	af00      	add	r7, sp, #0
34181ae6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181aea:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181aee:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34181af0:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181af4:	2200      	movs	r2, #0
34181af6:	601a      	str	r2, [r3, #0]
34181af8:	605a      	str	r2, [r3, #4]
34181afa:	609a      	str	r2, [r3, #8]
34181afc:	60da      	str	r2, [r3, #12]
34181afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34181b00:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181b04:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181b08:	4618      	mov	r0, r3
34181b0a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34181b0e:	461a      	mov	r2, r3
34181b10:	2100      	movs	r1, #0
34181b12:	f010 fc4b 	bl	341923ac <memset>
  if(hsd->Instance==SDMMC2)
34181b16:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181b1a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181b1e:	681b      	ldr	r3, [r3, #0]
34181b20:	681b      	ldr	r3, [r3, #0]
34181b22:	4a1f      	ldr	r2, [pc, #124]	@ (34181ba0 <HAL_SD_MspInit+0xc0>)
34181b24:	4293      	cmp	r3, r2
34181b26:	d135      	bne.n	34181b94 <HAL_SD_MspInit+0xb4>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC2;
34181b28:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181b2c:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181b30:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
34181b34:	f04f 0300 	mov.w	r3, #0
34181b38:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_HCLK;
34181b3c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181b40:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181b44:	4a17      	ldr	r2, [pc, #92]	@ (34181ba4 <HAL_SD_MspInit+0xc4>)
34181b46:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34181b4a:	f107 0308 	add.w	r3, r7, #8
34181b4e:	4618      	mov	r0, r3
34181b50:	f005 ffba 	bl	34187ac8 <HAL_RCCEx_PeriphCLKConfig>
34181b54:	4603      	mov	r3, r0
34181b56:	2b00      	cmp	r3, #0
34181b58:	d001      	beq.n	34181b5e <HAL_SD_MspInit+0x7e>
    {
      Error_Handler();
34181b5a:	f7ff fd33 	bl	341815c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
34181b5e:	2080      	movs	r0, #128	@ 0x80
34181b60:	f7ff fda4 	bl	341816ac <LL_AHB5_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
34181b64:	2004      	movs	r0, #4
34181b66:	f7ff fd5f 	bl	34181628 <LL_AHB4_GRP1_EnableClock>
    /**SDMMC2 GPIO Configuration
    PC2     ------> SDMMC2_CK
    */
    GPIO_InitStruct.Pin = SD_CK_Pin;
34181b6a:	2304      	movs	r3, #4
34181b6c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34181b70:	2302      	movs	r3, #2
34181b72:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181b76:	2300      	movs	r3, #0
34181b78:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34181b7c:	2303      	movs	r3, #3
34181b7e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
34181b82:	230b      	movs	r3, #11
34181b84:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(SD_CK_GPIO_Port, &GPIO_InitStruct);
34181b88:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181b8c:	4619      	mov	r1, r3
34181b8e:	4806      	ldr	r0, [pc, #24]	@ (34181ba8 <HAL_SD_MspInit+0xc8>)
34181b90:	f002 fa0e 	bl	34183fb0 <HAL_GPIO_Init>

  /* USER CODE END SDMMC2_MspInit 1 */

  }

}
34181b94:	bf00      	nop
34181b96:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
34181b9a:	46bd      	mov	sp, r7
34181b9c:	bd80      	pop	{r7, pc}
34181b9e:	bf00      	nop
34181ba0:	58026800 	.word	0x58026800
34181ba4:	0300041c 	.word	0x0300041c
34181ba8:	56020800 	.word	0x56020800

34181bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
34181bac:	b580      	push	{r7, lr}
34181bae:	b0ec      	sub	sp, #432	@ 0x1b0
34181bb0:	af00      	add	r7, sp, #0
34181bb2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181bb6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181bba:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34181bbc:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181bc0:	2200      	movs	r2, #0
34181bc2:	601a      	str	r2, [r3, #0]
34181bc4:	605a      	str	r2, [r3, #4]
34181bc6:	609a      	str	r2, [r3, #8]
34181bc8:	60da      	str	r2, [r3, #12]
34181bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34181bcc:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181bd0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181bd4:	4618      	mov	r0, r3
34181bd6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34181bda:	461a      	mov	r2, r3
34181bdc:	2100      	movs	r1, #0
34181bde:	f010 fbe5 	bl	341923ac <memset>
  if(huart->Instance==USART1)
34181be2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181be6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181bea:	681b      	ldr	r3, [r3, #0]
34181bec:	681b      	ldr	r3, [r3, #0]
34181bee:	4a1f      	ldr	r2, [pc, #124]	@ (34181c6c <HAL_UART_MspInit+0xc0>)
34181bf0:	4293      	cmp	r3, r2
34181bf2:	d135      	bne.n	34181c60 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
34181bf4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181bf8:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181bfc:	f04f 0200 	mov.w	r2, #0
34181c00:	f44f 7380 	mov.w	r3, #256	@ 0x100
34181c04:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_CLKP;
34181c08:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181c0c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181c10:	4a17      	ldr	r2, [pc, #92]	@ (34181c70 <HAL_UART_MspInit+0xc4>)
34181c12:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34181c16:	f107 0308 	add.w	r3, r7, #8
34181c1a:	4618      	mov	r0, r3
34181c1c:	f005 ff54 	bl	34187ac8 <HAL_RCCEx_PeriphCLKConfig>
34181c20:	4603      	mov	r3, r0
34181c22:	2b00      	cmp	r3, #0
34181c24:	d001      	beq.n	34181c2a <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
34181c26:	f7ff fccd 	bl	341815c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
34181c2a:	2010      	movs	r0, #16
34181c2c:	f7ff fd6a 	bl	34181704 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOE_CLK_ENABLE();
34181c30:	2010      	movs	r0, #16
34181c32:	f7ff fcf9 	bl	34181628 <LL_AHB4_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PE5     ------> USART1_TX
    PE6     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
34181c36:	2360      	movs	r3, #96	@ 0x60
34181c38:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34181c3c:	2302      	movs	r3, #2
34181c3e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181c42:	2300      	movs	r3, #0
34181c44:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34181c48:	2300      	movs	r3, #0
34181c4a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
34181c4e:	2307      	movs	r3, #7
34181c50:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
34181c54:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181c58:	4619      	mov	r1, r3
34181c5a:	4806      	ldr	r0, [pc, #24]	@ (34181c74 <HAL_UART_MspInit+0xc8>)
34181c5c:	f002 f9a8 	bl	34183fb0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
34181c60:	bf00      	nop
34181c62:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
34181c66:	46bd      	mov	sp, r7
34181c68:	bd80      	pop	{r7, pc}
34181c6a:	bf00      	nop
34181c6c:	52001000 	.word	0x52001000
34181c70:	07010030 	.word	0x07010030
34181c74:	56021000 	.word	0x56021000

34181c78 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
34181c78:	b580      	push	{r7, lr}
34181c7a:	b0e6      	sub	sp, #408	@ 0x198
34181c7c:	af00      	add	r7, sp, #0
34181c7e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
34181c82:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
34181c86:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34181c88:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
34181c8c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34181c90:	4618      	mov	r0, r3
34181c92:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34181c96:	461a      	mov	r2, r3
34181c98:	2100      	movs	r1, #0
34181c9a:	f010 fb87 	bl	341923ac <memset>
  if(hhcd->Instance==USB2_OTG_HS)
34181c9e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
34181ca2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
34181ca6:	681b      	ldr	r3, [r3, #0]
34181ca8:	681b      	ldr	r3, [r3, #0]
34181caa:	4a21      	ldr	r2, [pc, #132]	@ (34181d30 <HAL_HCD_MspInit+0xb8>)
34181cac:	4293      	cmp	r3, r2
34181cae:	d139      	bne.n	34181d24 <HAL_HCD_MspInit+0xac>

  /* USER CODE END USB2_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USBOTGHS2;
34181cb0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
34181cb4:	f5a3 71c8 	sub.w	r1, r3, #400	@ 0x190
34181cb8:	f04f 0200 	mov.w	r2, #0
34181cbc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
34181cc0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbPhy2ClockSelection = RCC_USBOTGHS2CLKSOURCE_CLKP;
34181cc4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
34181cc8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34181ccc:	4a19      	ldr	r2, [pc, #100]	@ (34181d34 <HAL_HCD_MspInit+0xbc>)
34181cce:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    PeriphClkInitStruct.UsbOtgHs2ClockSelection = RCC_USBPHY2REFCLKSOURCE_OTGPHY2;
34181cd2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
34181cd6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34181cda:	4a17      	ldr	r2, [pc, #92]	@ (34181d38 <HAL_HCD_MspInit+0xc0>)
34181cdc:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34181ce0:	f107 0308 	add.w	r3, r7, #8
34181ce4:	4618      	mov	r0, r3
34181ce6:	f005 feef 	bl	34187ac8 <HAL_RCCEx_PeriphCLKConfig>
34181cea:	4603      	mov	r3, r0
34181cec:	2b00      	cmp	r3, #0
34181cee:	d001      	beq.n	34181cf4 <HAL_HCD_MspInit+0x7c>
    {
      Error_Handler();
34181cf0:	f7ff fc68 	bl	341815c4 <Error_Handler>
    }

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
34181cf4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
34181cf8:	f7ff fcac 	bl	34181654 <LL_AHB4_GRP1_IsEnabledClock>
34181cfc:	4603      	mov	r3, r0
34181cfe:	2b00      	cmp	r3, #0
34181d00:	d00a      	beq.n	34181d18 <HAL_HCD_MspInit+0xa0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
34181d02:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
34181d06:	f7ff fc8f 	bl	34181628 <LL_AHB4_GRP1_EnableClock>
      HAL_PWREx_EnableVddUSB();
34181d0a:	f002 fe87 	bl	34184a1c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
34181d0e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
34181d12:	f7ff fcb7 	bl	34181684 <LL_AHB4_GRP1_DisableClock>
34181d16:	e001      	b.n	34181d1c <HAL_HCD_MspInit+0xa4>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
34181d18:	f002 fe80 	bl	34184a1c <HAL_PWREx_EnableVddUSB>
    }
    /* Peripheral clock enable */
    __HAL_RCC_USB2_OTG_HS_CLK_ENABLE();
34181d1c:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
34181d20:	f7ff fcc4 	bl	341816ac <LL_AHB5_GRP1_EnableClock>

  /* USER CODE END USB2_OTG_HS_MspInit 1 */

  }

}
34181d24:	bf00      	nop
34181d26:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
34181d2a:	46bd      	mov	sp, r7
34181d2c:	bd80      	pop	{r7, pc}
34181d2e:	bf00      	nop
34181d30:	58080000 	.word	0x58080000
34181d34:	03011414 	.word	0x03011414
34181d38:	01001814 	.word	0x01001814

34181d3c <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
34181d3c:	b580      	push	{r7, lr}
34181d3e:	b0ec      	sub	sp, #432	@ 0x1b0
34181d40:	af00      	add	r7, sp, #0
34181d42:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181d46:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181d4a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34181d4c:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181d50:	2200      	movs	r2, #0
34181d52:	601a      	str	r2, [r3, #0]
34181d54:	605a      	str	r2, [r3, #4]
34181d56:	609a      	str	r2, [r3, #8]
34181d58:	60da      	str	r2, [r3, #12]
34181d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34181d5c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181d60:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181d64:	4618      	mov	r0, r3
34181d66:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34181d6a:	461a      	mov	r2, r3
34181d6c:	2100      	movs	r1, #0
34181d6e:	f010 fb1d 	bl	341923ac <memset>
  if(hxspi->Instance==XSPI1)
34181d72:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181d76:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181d7a:	681b      	ldr	r3, [r3, #0]
34181d7c:	681b      	ldr	r3, [r3, #0]
34181d7e:	4a5f      	ldr	r2, [pc, #380]	@ (34181efc <HAL_XSPI_MspInit+0x1c0>)
34181d80:	4293      	cmp	r3, r2
34181d82:	d166      	bne.n	34181e52 <HAL_XSPI_MspInit+0x116>

  /* USER CODE END XSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_XSPI1;
34181d84:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181d88:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181d8c:	f04f 0200 	mov.w	r2, #0
34181d90:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
34181d94:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34181d98:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181d9c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181da0:	4a57      	ldr	r2, [pc, #348]	@ (34181f00 <HAL_XSPI_MspInit+0x1c4>)
34181da2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34181da6:	f107 0308 	add.w	r3, r7, #8
34181daa:	4618      	mov	r0, r3
34181dac:	f005 fe8c 	bl	34187ac8 <HAL_RCCEx_PeriphCLKConfig>
34181db0:	4603      	mov	r3, r0
34181db2:	2b00      	cmp	r3, #0
34181db4:	d001      	beq.n	34181dba <HAL_XSPI_MspInit+0x7e>
    {
      Error_Handler();
34181db6:	f7ff fc05 	bl	341815c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_XSPIM_CLK_ENABLED++;
34181dba:	4b52      	ldr	r3, [pc, #328]	@ (34181f04 <HAL_XSPI_MspInit+0x1c8>)
34181dbc:	681b      	ldr	r3, [r3, #0]
34181dbe:	3301      	adds	r3, #1
34181dc0:	4a50      	ldr	r2, [pc, #320]	@ (34181f04 <HAL_XSPI_MspInit+0x1c8>)
34181dc2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_XSPIM_CLK_ENABLED==1){
34181dc4:	4b4f      	ldr	r3, [pc, #316]	@ (34181f04 <HAL_XSPI_MspInit+0x1c8>)
34181dc6:	681b      	ldr	r3, [r3, #0]
34181dc8:	2b01      	cmp	r3, #1
34181dca:	d103      	bne.n	34181dd4 <HAL_XSPI_MspInit+0x98>
      __HAL_RCC_XSPIM_CLK_ENABLE();
34181dcc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34181dd0:	f7ff fc6c 	bl	341816ac <LL_AHB5_GRP1_EnableClock>
    }
    __HAL_RCC_XSPI1_CLK_ENABLE();
34181dd4:	2020      	movs	r0, #32
34181dd6:	f7ff fc69 	bl	341816ac <LL_AHB5_GRP1_EnableClock>

    __HAL_RCC_GPIOP_CLK_ENABLE();
34181dda:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
34181dde:	f7ff fc23 	bl	34181628 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOO_CLK_ENABLE();
34181de2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
34181de6:	f7ff fc1f 	bl	34181628 <LL_AHB4_GRP1_EnableClock>
    PO0     ------> XSPIM_P1_NCS1
    PP9     ------> XSPIM_P1_IO9
    PP10     ------> XSPIM_P1_IO10
    PO4     ------> XSPIM_P1_CLK
    */
    GPIO_InitStruct.Pin = HEXASPI_IO_7_Pin|HEXASPI_IO_6_Pin|HEXASPI_IO_0_Pin|HEXASPI_IO_4_Pin
34181dea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
34181dee:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                          |HEXASPI_IO_1_Pin|HEXASPI_IO_15_Pin|HEXASPI_IO_5_Pin|HEXASPI_IO_12_Pin
                          |HEXASPI_IO_3_Pin|HEXASPI_IO_2_Pin|HEXASPI_IO_13_Pin|HEXASPI_IO_11_Pin
                          |HEXASPI_IO_8_Pin|HEXASPI_IO_14_Pin|HEXASPI_IO_9_Pin|HEXASPI_IO_10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34181df2:	2302      	movs	r3, #2
34181df4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181df8:	2300      	movs	r3, #0
34181dfa:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34181dfe:	2303      	movs	r3, #3
34181e00:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P1;
34181e04:	2309      	movs	r3, #9
34181e06:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOP, &GPIO_InitStruct);
34181e0a:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181e0e:	4619      	mov	r1, r3
34181e10:	483d      	ldr	r0, [pc, #244]	@ (34181f08 <HAL_XSPI_MspInit+0x1cc>)
34181e12:	f002 f8cd 	bl	34183fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HEXASPI_DQS0_Pin|HEXASPI_DQS1_Pin|HEXASPI_NCS_Pin|HEXASPI_CLK_Pin;
34181e16:	231d      	movs	r3, #29
34181e18:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34181e1c:	2302      	movs	r3, #2
34181e1e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181e22:	2300      	movs	r3, #0
34181e24:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34181e28:	2303      	movs	r3, #3
34181e2a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P1;
34181e2e:	2309      	movs	r3, #9
34181e30:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOO, &GPIO_InitStruct);
34181e34:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181e38:	4619      	mov	r1, r3
34181e3a:	4834      	ldr	r0, [pc, #208]	@ (34181f0c <HAL_XSPI_MspInit+0x1d0>)
34181e3c:	f002 f8b8 	bl	34183fb0 <HAL_GPIO_Init>

    /* XSPI1 interrupt Init */
    HAL_NVIC_SetPriority(XSPI1_IRQn, 0, 0);
34181e40:	2200      	movs	r2, #0
34181e42:	2100      	movs	r1, #0
34181e44:	20aa      	movs	r0, #170	@ 0xaa
34181e46:	f001 fffd 	bl	34183e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(XSPI1_IRQn);
34181e4a:	20aa      	movs	r0, #170	@ 0xaa
34181e4c:	f002 f817 	bl	34183e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN XSPI2_MspInit 1 */

  /* USER CODE END XSPI2_MspInit 1 */
  }

}
34181e50:	e04e      	b.n	34181ef0 <HAL_XSPI_MspInit+0x1b4>
  else if(hxspi->Instance==XSPI2)
34181e52:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181e56:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181e5a:	681b      	ldr	r3, [r3, #0]
34181e5c:	681b      	ldr	r3, [r3, #0]
34181e5e:	4a2c      	ldr	r2, [pc, #176]	@ (34181f10 <HAL_XSPI_MspInit+0x1d4>)
34181e60:	4293      	cmp	r3, r2
34181e62:	d145      	bne.n	34181ef0 <HAL_XSPI_MspInit+0x1b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_XSPI2;
34181e64:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181e68:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181e6c:	f04f 0200 	mov.w	r2, #0
34181e70:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
34181e74:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
34181e78:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181e7c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181e80:	4a24      	ldr	r2, [pc, #144]	@ (34181f14 <HAL_XSPI_MspInit+0x1d8>)
34181e82:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34181e86:	f107 0308 	add.w	r3, r7, #8
34181e8a:	4618      	mov	r0, r3
34181e8c:	f005 fe1c 	bl	34187ac8 <HAL_RCCEx_PeriphCLKConfig>
34181e90:	4603      	mov	r3, r0
34181e92:	2b00      	cmp	r3, #0
34181e94:	d001      	beq.n	34181e9a <HAL_XSPI_MspInit+0x15e>
      Error_Handler();
34181e96:	f7ff fb95 	bl	341815c4 <Error_Handler>
    HAL_RCC_XSPIM_CLK_ENABLED++;
34181e9a:	4b1a      	ldr	r3, [pc, #104]	@ (34181f04 <HAL_XSPI_MspInit+0x1c8>)
34181e9c:	681b      	ldr	r3, [r3, #0]
34181e9e:	3301      	adds	r3, #1
34181ea0:	4a18      	ldr	r2, [pc, #96]	@ (34181f04 <HAL_XSPI_MspInit+0x1c8>)
34181ea2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_XSPIM_CLK_ENABLED==1){
34181ea4:	4b17      	ldr	r3, [pc, #92]	@ (34181f04 <HAL_XSPI_MspInit+0x1c8>)
34181ea6:	681b      	ldr	r3, [r3, #0]
34181ea8:	2b01      	cmp	r3, #1
34181eaa:	d103      	bne.n	34181eb4 <HAL_XSPI_MspInit+0x178>
      __HAL_RCC_XSPIM_CLK_ENABLE();
34181eac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34181eb0:	f7ff fbfc 	bl	341816ac <LL_AHB5_GRP1_EnableClock>
    __HAL_RCC_XSPI2_CLK_ENABLE();
34181eb4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34181eb8:	f7ff fbf8 	bl	341816ac <LL_AHB5_GRP1_EnableClock>
    __HAL_RCC_GPION_CLK_ENABLE();
34181ebc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34181ec0:	f7ff fbb2 	bl	34181628 <LL_AHB4_GRP1_EnableClock>
    GPIO_InitStruct.Pin = OCTOSPI_IO2_Pin|OCTOSPI_CLK_Pin|OCTOSPI_IO4_Pin|OCTOSPI_DQS_Pin
34181ec4:	f640 737f 	movw	r3, #3967	@ 0xf7f
34181ec8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34181ecc:	2302      	movs	r3, #2
34181ece:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181ed2:	2300      	movs	r3, #0
34181ed4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34181ed8:	2303      	movs	r3, #3
34181eda:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P2;
34181ede:	2309      	movs	r3, #9
34181ee0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPION, &GPIO_InitStruct);
34181ee4:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181ee8:	4619      	mov	r1, r3
34181eea:	480b      	ldr	r0, [pc, #44]	@ (34181f18 <HAL_XSPI_MspInit+0x1dc>)
34181eec:	f002 f860 	bl	34183fb0 <HAL_GPIO_Init>
}
34181ef0:	bf00      	nop
34181ef2:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
34181ef6:	46bd      	mov	sp, r7
34181ef8:	bd80      	pop	{r7, pc}
34181efa:	bf00      	nop
34181efc:	58025000 	.word	0x58025000
34181f00:	03000014 	.word	0x03000014
34181f04:	341c08dc 	.word	0x341c08dc
34181f08:	56023c00 	.word	0x56023c00
34181f0c:	56023800 	.word	0x56023800
34181f10:	5802a000 	.word	0x5802a000
34181f14:	03000414 	.word	0x03000414
34181f18:	56023400 	.word	0x56023400

34181f1c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
34181f1c:	b580      	push	{r7, lr}
34181f1e:	b0ec      	sub	sp, #432	@ 0x1b0
34181f20:	af00      	add	r7, sp, #0
34181f22:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181f26:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181f2a:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34181f2c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181f30:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181f34:	4618      	mov	r0, r3
34181f36:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34181f3a:	461a      	mov	r2, r3
34181f3c:	2100      	movs	r1, #0
34181f3e:	f010 fa35 	bl	341923ac <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
34181f42:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181f46:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181f4a:	681b      	ldr	r3, [r3, #0]
34181f4c:	681b      	ldr	r3, [r3, #0]
34181f4e:	4a50      	ldr	r2, [pc, #320]	@ (34182090 <HAL_SAI_MspInit+0x174>)
34181f50:	4293      	cmp	r3, r2
34181f52:	d151      	bne.n	34181ff8 <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
34181f54:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181f58:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181f5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34181f60:	f04f 0300 	mov.w	r3, #0
34181f64:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PCLK2;
34181f68:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181f6c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181f70:	4a48      	ldr	r2, [pc, #288]	@ (34182094 <HAL_SAI_MspInit+0x178>)
34181f72:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34181f76:	f107 0308 	add.w	r3, r7, #8
34181f7a:	4618      	mov	r0, r3
34181f7c:	f005 fda4 	bl	34187ac8 <HAL_RCCEx_PeriphCLKConfig>
34181f80:	4603      	mov	r3, r0
34181f82:	2b00      	cmp	r3, #0
34181f84:	d001      	beq.n	34181f8a <HAL_SAI_MspInit+0x6e>
    {
      Error_Handler();
34181f86:	f7ff fb1d 	bl	341815c4 <Error_Handler>
    }

    if (SAI1_client == 0)
34181f8a:	4b43      	ldr	r3, [pc, #268]	@ (34182098 <HAL_SAI_MspInit+0x17c>)
34181f8c:	681b      	ldr	r3, [r3, #0]
34181f8e:	2b00      	cmp	r3, #0
34181f90:	d103      	bne.n	34181f9a <HAL_SAI_MspInit+0x7e>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
34181f92:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
34181f96:	f7ff fbb5 	bl	34181704 <LL_APB2_GRP1_EnableClock>
    }
    SAI1_client ++;
34181f9a:	4b3f      	ldr	r3, [pc, #252]	@ (34182098 <HAL_SAI_MspInit+0x17c>)
34181f9c:	681b      	ldr	r3, [r3, #0]
34181f9e:	3301      	adds	r3, #1
34181fa0:	4a3d      	ldr	r2, [pc, #244]	@ (34182098 <HAL_SAI_MspInit+0x17c>)
34181fa2:	6013      	str	r3, [r2, #0]
    PB0     ------> SAI1_FS_A
    PB7     ------> SAI1_SD_A
    PB6     ------> SAI1_SCK_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FS_A_Pin|SAI1_SD_A_Pin|SAI1_CLK_A_Pin;
34181fa4:	23c1      	movs	r3, #193	@ 0xc1
34181fa6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34181faa:	2302      	movs	r3, #2
34181fac:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181fb0:	2300      	movs	r3, #0
34181fb2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34181fb6:	2300      	movs	r3, #0
34181fb8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
34181fbc:	2306      	movs	r3, #6
34181fbe:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
34181fc2:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181fc6:	4619      	mov	r1, r3
34181fc8:	4834      	ldr	r0, [pc, #208]	@ (3418209c <HAL_SAI_MspInit+0x180>)
34181fca:	f001 fff1 	bl	34183fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
34181fce:	2380      	movs	r3, #128	@ 0x80
34181fd0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34181fd4:	2302      	movs	r3, #2
34181fd6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181fda:	2300      	movs	r3, #0
34181fdc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34181fe0:	2300      	movs	r3, #0
34181fe2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
34181fe6:	2306      	movs	r3, #6
34181fe8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
34181fec:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181ff0:	4619      	mov	r1, r3
34181ff2:	482b      	ldr	r0, [pc, #172]	@ (341820a0 <HAL_SAI_MspInit+0x184>)
34181ff4:	f001 ffdc 	bl	34183fb0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
34181ff8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181ffc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34182000:	681b      	ldr	r3, [r3, #0]
34182002:	681b      	ldr	r3, [r3, #0]
34182004:	4a27      	ldr	r2, [pc, #156]	@ (341820a4 <HAL_SAI_MspInit+0x188>)
34182006:	4293      	cmp	r3, r2
34182008:	d13c      	bne.n	34182084 <HAL_SAI_MspInit+0x168>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
3418200a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
3418200e:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34182012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34182016:	f04f 0300 	mov.w	r3, #0
3418201a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PCLK2;
3418201e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34182022:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34182026:	4a1b      	ldr	r2, [pc, #108]	@ (34182094 <HAL_SAI_MspInit+0x178>)
34182028:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
3418202c:	f107 0308 	add.w	r3, r7, #8
34182030:	4618      	mov	r0, r3
34182032:	f005 fd49 	bl	34187ac8 <HAL_RCCEx_PeriphCLKConfig>
34182036:	4603      	mov	r3, r0
34182038:	2b00      	cmp	r3, #0
3418203a:	d001      	beq.n	34182040 <HAL_SAI_MspInit+0x124>
    {
      Error_Handler();
3418203c:	f7ff fac2 	bl	341815c4 <Error_Handler>
    }

      if (SAI1_client == 0)
34182040:	4b15      	ldr	r3, [pc, #84]	@ (34182098 <HAL_SAI_MspInit+0x17c>)
34182042:	681b      	ldr	r3, [r3, #0]
34182044:	2b00      	cmp	r3, #0
34182046:	d103      	bne.n	34182050 <HAL_SAI_MspInit+0x134>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
34182048:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
3418204c:	f7ff fb5a 	bl	34181704 <LL_APB2_GRP1_EnableClock>
      }
    SAI1_client ++;
34182050:	4b11      	ldr	r3, [pc, #68]	@ (34182098 <HAL_SAI_MspInit+0x17c>)
34182052:	681b      	ldr	r3, [r3, #0]
34182054:	3301      	adds	r3, #1
34182056:	4a10      	ldr	r2, [pc, #64]	@ (34182098 <HAL_SAI_MspInit+0x17c>)
34182058:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
3418205a:	2308      	movs	r3, #8
3418205c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34182060:	2302      	movs	r3, #2
34182062:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34182066:	2300      	movs	r3, #0
34182068:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
3418206c:	2300      	movs	r3, #0
3418206e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
34182072:	2306      	movs	r3, #6
34182074:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
34182078:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
3418207c:	4619      	mov	r1, r3
3418207e:	480a      	ldr	r0, [pc, #40]	@ (341820a8 <HAL_SAI_MspInit+0x18c>)
34182080:	f001 ff96 	bl	34183fb0 <HAL_GPIO_Init>

    }
}
34182084:	bf00      	nop
34182086:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
3418208a:	46bd      	mov	sp, r7
3418208c:	bd80      	pop	{r7, pc}
3418208e:	bf00      	nop
34182090:	52005804 	.word	0x52005804
34182094:	07001418 	.word	0x07001418
34182098:	341c08e0 	.word	0x341c08e0
3418209c:	56020400 	.word	0x56020400
341820a0:	56021800 	.word	0x56021800
341820a4:	52005824 	.word	0x52005824
341820a8:	56021000 	.word	0x56021000

341820ac <LL_APB1_GRP1_EnableClock>:
{
341820ac:	b480      	push	{r7}
341820ae:	b085      	sub	sp, #20
341820b0:	af00      	add	r7, sp, #0
341820b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB1ENSR1, Periphs);
341820b4:	4a07      	ldr	r2, [pc, #28]	@ (341820d4 <LL_APB1_GRP1_EnableClock+0x28>)
341820b6:	687b      	ldr	r3, [r7, #4]
341820b8:	f8c2 3a64 	str.w	r3, [r2, #2660]	@ 0xa64
  tmpreg = READ_REG(RCC->APB1ENR1);
341820bc:	4b05      	ldr	r3, [pc, #20]	@ (341820d4 <LL_APB1_GRP1_EnableClock+0x28>)
341820be:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
341820c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
341820c4:	68fb      	ldr	r3, [r7, #12]
}
341820c6:	bf00      	nop
341820c8:	3714      	adds	r7, #20
341820ca:	46bd      	mov	sp, r7
341820cc:	f85d 7b04 	ldr.w	r7, [sp], #4
341820d0:	4770      	bx	lr
341820d2:	bf00      	nop
341820d4:	56028000 	.word	0x56028000

341820d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
341820d8:	b580      	push	{r7, lr}
341820da:	b094      	sub	sp, #80	@ 0x50
341820dc:	af00      	add	r7, sp, #0
341820de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
341820e0:	2300      	movs	r3, #0
341820e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t              uwPrescalerValue = 0;
341820e4:	2300      	movs	r3, #0
341820e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
341820e8:	2200      	movs	r2, #0
341820ea:	6879      	ldr	r1, [r7, #4]
341820ec:	2078      	movs	r0, #120	@ 0x78
341820ee:	f001 fea9 	bl	34183e44 <HAL_NVIC_SetPriority>
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
341820f2:	2078      	movs	r0, #120	@ 0x78
341820f4:	f001 fec3 	bl	34183e7e <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
341820f8:	2010      	movs	r0, #16
341820fa:	f7ff ffd7 	bl	341820ac <LL_APB1_GRP1_EnableClock>

 /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig);
341820fe:	f107 0308 	add.w	r3, r7, #8
34182102:	4618      	mov	r0, r3
34182104:	f003 fe66 	bl	34185dd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
34182108:	f003 fe4e 	bl	34185da8 <HAL_RCC_GetPCLK1Freq>
3418210c:	64f8      	str	r0, [r7, #76]	@ 0x4c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
3418210e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34182110:	4a12      	ldr	r2, [pc, #72]	@ (3418215c <HAL_InitTick+0x84>)
34182112:	fba2 2303 	umull	r2, r3, r2, r3
34182116:	0c9b      	lsrs	r3, r3, #18
34182118:	3b01      	subs	r3, #1
3418211a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
3418211c:	4b10      	ldr	r3, [pc, #64]	@ (34182160 <HAL_InitTick+0x88>)
3418211e:	4a11      	ldr	r2, [pc, #68]	@ (34182164 <HAL_InitTick+0x8c>)
34182120:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
34182122:	4b0f      	ldr	r3, [pc, #60]	@ (34182160 <HAL_InitTick+0x88>)
34182124:	f240 32e7 	movw	r2, #999	@ 0x3e7
34182128:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
3418212a:	4a0d      	ldr	r2, [pc, #52]	@ (34182160 <HAL_InitTick+0x88>)
3418212c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
3418212e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
34182130:	4b0b      	ldr	r3, [pc, #44]	@ (34182160 <HAL_InitTick+0x88>)
34182132:	2200      	movs	r2, #0
34182134:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
34182136:	4b0a      	ldr	r3, [pc, #40]	@ (34182160 <HAL_InitTick+0x88>)
34182138:	2200      	movs	r2, #0
3418213a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
3418213c:	4808      	ldr	r0, [pc, #32]	@ (34182160 <HAL_InitTick+0x88>)
3418213e:	f00d fc33 	bl	3418f9a8 <HAL_TIM_Base_Init>
34182142:	4603      	mov	r3, r0
34182144:	2b00      	cmp	r3, #0
34182146:	d104      	bne.n	34182152 <HAL_InitTick+0x7a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
34182148:	4805      	ldr	r0, [pc, #20]	@ (34182160 <HAL_InitTick+0x88>)
3418214a:	f00d fc8f 	bl	3418fa6c <HAL_TIM_Base_Start_IT>
3418214e:	4603      	mov	r3, r0
34182150:	e000      	b.n	34182154 <HAL_InitTick+0x7c>
  }

  /* Return function status */
  return HAL_ERROR;
34182152:	2301      	movs	r3, #1
}
34182154:	4618      	mov	r0, r3
34182156:	3750      	adds	r7, #80	@ 0x50
34182158:	46bd      	mov	sp, r7
3418215a:	bd80      	pop	{r7, pc}
3418215c:	431bde83 	.word	0x431bde83
34182160:	341c08e4 	.word	0x341c08e4
34182164:	50001000 	.word	0x50001000

34182168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
34182168:	b480      	push	{r7}
3418216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
3418216c:	bf00      	nop
3418216e:	e7fd      	b.n	3418216c <NMI_Handler+0x4>

34182170 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
34182170:	b480      	push	{r7}
34182172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
34182174:	bf00      	nop
34182176:	e7fd      	b.n	34182174 <HardFault_Handler+0x4>

34182178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
34182178:	b480      	push	{r7}
3418217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
3418217c:	bf00      	nop
3418217e:	e7fd      	b.n	3418217c <MemManage_Handler+0x4>

34182180 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
34182180:	b480      	push	{r7}
34182182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
34182184:	bf00      	nop
34182186:	e7fd      	b.n	34182184 <BusFault_Handler+0x4>

34182188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
34182188:	b480      	push	{r7}
3418218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
3418218c:	bf00      	nop
3418218e:	e7fd      	b.n	3418218c <UsageFault_Handler+0x4>

34182190 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
34182190:	b480      	push	{r7}
34182192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
34182194:	bf00      	nop
34182196:	e7fd      	b.n	34182194 <SecureFault_Handler+0x4>

34182198 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
34182198:	b480      	push	{r7}
3418219a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
3418219c:	bf00      	nop
3418219e:	46bd      	mov	sp, r7
341821a0:	f85d 7b04 	ldr.w	r7, [sp], #4
341821a4:	4770      	bx	lr

341821a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
341821a6:	b480      	push	{r7}
341821a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
341821aa:	bf00      	nop
341821ac:	46bd      	mov	sp, r7
341821ae:	f85d 7b04 	ldr.w	r7, [sp], #4
341821b2:	4770      	bx	lr

341821b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
341821b4:	b480      	push	{r7}
341821b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
341821b8:	bf00      	nop
341821ba:	46bd      	mov	sp, r7
341821bc:	f85d 7b04 	ldr.w	r7, [sp], #4
341821c0:	4770      	bx	lr

341821c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
341821c2:	b480      	push	{r7}
341821c4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
341821c6:	bf00      	nop
341821c8:	46bd      	mov	sp, r7
341821ca:	f85d 7b04 	ldr.w	r7, [sp], #4
341821ce:	4770      	bx	lr

341821d0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
341821d0:	b580      	push	{r7, lr}
341821d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
341821d4:	4802      	ldr	r0, [pc, #8]	@ (341821e0 <TIM6_IRQHandler+0x10>)
341821d6:	f00d fd01 	bl	3418fbdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
341821da:	bf00      	nop
341821dc:	bd80      	pop	{r7, pc}
341821de:	bf00      	nop
341821e0:	341c08e4 	.word	0x341c08e4

341821e4 <XSPI1_IRQHandler>:

/**
  * @brief This function handles XSPI1 global interrupt.
  */
void XSPI1_IRQHandler(void)
{
341821e4:	b580      	push	{r7, lr}
341821e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN XSPI1_IRQn 0 */

  /* USER CODE END XSPI1_IRQn 0 */
  HAL_XSPI_IRQHandler(&hxspi1);
341821e8:	4802      	ldr	r0, [pc, #8]	@ (341821f4 <XSPI1_IRQHandler+0x10>)
341821ea:	f00e fe57 	bl	34190e9c <HAL_XSPI_IRQHandler>
  /* USER CODE BEGIN XSPI1_IRQn 1 */

  /* USER CODE END XSPI1_IRQn 1 */
}
341821ee:	bf00      	nop
341821f0:	bd80      	pop	{r7, pc}
341821f2:	bf00      	nop
341821f4:	341c0814 	.word	0x341c0814

341821f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
341821f8:	b480      	push	{r7}
341821fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
341821fc:	4b6a      	ldr	r3, [pc, #424]	@ (341823a8 <SystemInit+0x1b0>)
341821fe:	4a6b      	ldr	r2, [pc, #428]	@ (341823ac <SystemInit+0x1b4>)
34182200:	609a      	str	r2, [r3, #8]
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34182202:	4b6b      	ldr	r3, [pc, #428]	@ (341823b0 <SystemInit+0x1b8>)
34182204:	2201      	movs	r2, #1
34182206:	f8c3 2a18 	str.w	r2, [r3, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
3418220a:	4b69      	ldr	r3, [pc, #420]	@ (341823b0 <SystemInit+0x1b8>)
3418220c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182210:	461a      	mov	r2, r3
34182212:	2301      	movs	r3, #1
34182214:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
  /* Deactivate RNG clock */
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
34182218:	4b65      	ldr	r3, [pc, #404]	@ (341823b0 <SystemInit+0x1b8>)
3418221a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418221e:	461a      	mov	r2, r3
34182220:	2301      	movs	r3, #1
34182222:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258

  /* Clear SAU regions */
  SAU->RNR = 0;
34182226:	4b63      	ldr	r3, [pc, #396]	@ (341823b4 <SystemInit+0x1bc>)
34182228:	2200      	movs	r2, #0
3418222a:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3418222c:	4b61      	ldr	r3, [pc, #388]	@ (341823b4 <SystemInit+0x1bc>)
3418222e:	2200      	movs	r2, #0
34182230:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34182232:	4b60      	ldr	r3, [pc, #384]	@ (341823b4 <SystemInit+0x1bc>)
34182234:	2200      	movs	r2, #0
34182236:	611a      	str	r2, [r3, #16]
  SAU->RNR = 1;
34182238:	4b5e      	ldr	r3, [pc, #376]	@ (341823b4 <SystemInit+0x1bc>)
3418223a:	2201      	movs	r2, #1
3418223c:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3418223e:	4b5d      	ldr	r3, [pc, #372]	@ (341823b4 <SystemInit+0x1bc>)
34182240:	2200      	movs	r2, #0
34182242:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34182244:	4b5b      	ldr	r3, [pc, #364]	@ (341823b4 <SystemInit+0x1bc>)
34182246:	2200      	movs	r2, #0
34182248:	611a      	str	r2, [r3, #16]
  SAU->RNR = 2;
3418224a:	4b5a      	ldr	r3, [pc, #360]	@ (341823b4 <SystemInit+0x1bc>)
3418224c:	2202      	movs	r2, #2
3418224e:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34182250:	4b58      	ldr	r3, [pc, #352]	@ (341823b4 <SystemInit+0x1bc>)
34182252:	2200      	movs	r2, #0
34182254:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34182256:	4b57      	ldr	r3, [pc, #348]	@ (341823b4 <SystemInit+0x1bc>)
34182258:	2200      	movs	r2, #0
3418225a:	611a      	str	r2, [r3, #16]
  SAU->RNR = 3;
3418225c:	4b55      	ldr	r3, [pc, #340]	@ (341823b4 <SystemInit+0x1bc>)
3418225e:	2203      	movs	r2, #3
34182260:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34182262:	4b54      	ldr	r3, [pc, #336]	@ (341823b4 <SystemInit+0x1bc>)
34182264:	2200      	movs	r2, #0
34182266:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34182268:	4b52      	ldr	r3, [pc, #328]	@ (341823b4 <SystemInit+0x1bc>)
3418226a:	2200      	movs	r2, #0
3418226c:	611a      	str	r2, [r3, #16]
  SAU->RNR = 4;
3418226e:	4b51      	ldr	r3, [pc, #324]	@ (341823b4 <SystemInit+0x1bc>)
34182270:	2204      	movs	r2, #4
34182272:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34182274:	4b4f      	ldr	r3, [pc, #316]	@ (341823b4 <SystemInit+0x1bc>)
34182276:	2200      	movs	r2, #0
34182278:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3418227a:	4b4e      	ldr	r3, [pc, #312]	@ (341823b4 <SystemInit+0x1bc>)
3418227c:	2200      	movs	r2, #0
3418227e:	611a      	str	r2, [r3, #16]
  SAU->RNR = 5;
34182280:	4b4c      	ldr	r3, [pc, #304]	@ (341823b4 <SystemInit+0x1bc>)
34182282:	2205      	movs	r2, #5
34182284:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34182286:	4b4b      	ldr	r3, [pc, #300]	@ (341823b4 <SystemInit+0x1bc>)
34182288:	2200      	movs	r2, #0
3418228a:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3418228c:	4b49      	ldr	r3, [pc, #292]	@ (341823b4 <SystemInit+0x1bc>)
3418228e:	2200      	movs	r2, #0
34182290:	611a      	str	r2, [r3, #16]
  SAU->RNR = 6;
34182292:	4b48      	ldr	r3, [pc, #288]	@ (341823b4 <SystemInit+0x1bc>)
34182294:	2206      	movs	r2, #6
34182296:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34182298:	4b46      	ldr	r3, [pc, #280]	@ (341823b4 <SystemInit+0x1bc>)
3418229a:	2200      	movs	r2, #0
3418229c:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3418229e:	4b45      	ldr	r3, [pc, #276]	@ (341823b4 <SystemInit+0x1bc>)
341822a0:	2200      	movs	r2, #0
341822a2:	611a      	str	r2, [r3, #16]
  SAU->RNR = 7;
341822a4:	4b43      	ldr	r3, [pc, #268]	@ (341823b4 <SystemInit+0x1bc>)
341822a6:	2207      	movs	r2, #7
341822a8:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341822aa:	4b42      	ldr	r3, [pc, #264]	@ (341823b4 <SystemInit+0x1bc>)
341822ac:	2200      	movs	r2, #0
341822ae:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341822b0:	4b40      	ldr	r3, [pc, #256]	@ (341823b4 <SystemInit+0x1bc>)
341822b2:	2200      	movs	r2, #0
341822b4:	611a      	str	r2, [r3, #16]

  /* System configuration setup */
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
341822b6:	4b3e      	ldr	r3, [pc, #248]	@ (341823b0 <SystemInit+0x1b8>)
341822b8:	2201      	movs	r2, #1
341822ba:	f8c3 2a78 	str.w	r2, [r3, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;
341822be:	4b3c      	ldr	r3, [pc, #240]	@ (341823b0 <SystemInit+0x1b8>)
341822c0:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
341822c4:	4b38      	ldr	r3, [pc, #224]	@ (341823a8 <SystemInit+0x1b0>)
341822c6:	4a3c      	ldr	r2, [pc, #240]	@ (341823b8 <SystemInit+0x1c0>)
341822c8:	689b      	ldr	r3, [r3, #8]
341822ca:	6113      	str	r3, [r2, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
341822cc:	4b3b      	ldr	r3, [pc, #236]	@ (341823bc <SystemInit+0x1c4>)
341822ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341822d0:	4a3a      	ldr	r2, [pc, #232]	@ (341823bc <SystemInit+0x1c4>)
341822d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
341822d6:	63d3      	str	r3, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
341822d8:	4b38      	ldr	r3, [pc, #224]	@ (341823bc <SystemInit+0x1c4>)
341822da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341822dc:	4a37      	ldr	r2, [pc, #220]	@ (341823bc <SystemInit+0x1c4>)
341822de:	f043 0310 	orr.w	r3, r3, #16
341822e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
341822e4:	4b35      	ldr	r3, [pc, #212]	@ (341823bc <SystemInit+0x1c4>)
341822e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
341822e8:	4b31      	ldr	r3, [pc, #196]	@ (341823b0 <SystemInit+0x1b8>)
341822ea:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
341822ee:	4a30      	ldr	r2, [pc, #192]	@ (341823b0 <SystemInit+0x1b8>)
341822f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
341822f4:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
341822f8:	4b2d      	ldr	r3, [pc, #180]	@ (341823b0 <SystemInit+0x1b8>)
341822fa:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
341822fe:	4a2c      	ldr	r2, [pc, #176]	@ (341823b0 <SystemInit+0x1b8>)
34182300:	f043 0310 	orr.w	r3, r3, #16
34182304:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  (void) RCC->APB4ENR2;
34182308:	4b29      	ldr	r3, [pc, #164]	@ (341823b0 <SystemInit+0x1b8>)
3418230a:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
3418230e:	4b28      	ldr	r3, [pc, #160]	@ (341823b0 <SystemInit+0x1b8>)
34182310:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
34182314:	4a26      	ldr	r2, [pc, #152]	@ (341823b0 <SystemInit+0x1b8>)
34182316:	f023 0310 	bic.w	r3, r3, #16
3418231a:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
3418231e:	4b24      	ldr	r3, [pc, #144]	@ (341823b0 <SystemInit+0x1b8>)
34182320:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
34182324:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
34182328:	4b21      	ldr	r3, [pc, #132]	@ (341823b0 <SystemInit+0x1b8>)
3418232a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418232e:	461a      	mov	r2, r3
34182330:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34182334:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220

  /* TIM2 reset */
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
34182338:	4b1d      	ldr	r3, [pc, #116]	@ (341823b0 <SystemInit+0x1b8>)
3418233a:	2201      	movs	r2, #1
3418233c:	f8c3 2a24 	str.w	r2, [r3, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
34182340:	4b1b      	ldr	r3, [pc, #108]	@ (341823b0 <SystemInit+0x1b8>)
34182342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182346:	461a      	mov	r2, r3
34182348:	2301      	movs	r3, #1
3418234a:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
3418234e:	4b18      	ldr	r3, [pc, #96]	@ (341823b0 <SystemInit+0x1b8>)
34182350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182354:	461a      	mov	r2, r3
34182356:	2301      	movs	r3, #1
34182358:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
3418235c:	4b14      	ldr	r3, [pc, #80]	@ (341823b0 <SystemInit+0x1b8>)
3418235e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182362:	461a      	mov	r2, r3
34182364:	2340      	movs	r3, #64	@ 0x40
34182366:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
3418236a:	4b13      	ldr	r3, [pc, #76]	@ (341823b8 <SystemInit+0x1c0>)
3418236c:	691b      	ldr	r3, [r3, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
3418236e:	4b10      	ldr	r3, [pc, #64]	@ (341823b0 <SystemInit+0x1b8>)
34182370:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182374:	461a      	mov	r2, r3
34182376:	2301      	movs	r3, #1
34182378:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
3418237c:	4b0a      	ldr	r3, [pc, #40]	@ (341823a8 <SystemInit+0x1b0>)
3418237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34182382:	4a09      	ldr	r2, [pc, #36]	@ (341823a8 <SystemInit+0x1b0>)
34182384:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34182388:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
3418238c:	4b0c      	ldr	r3, [pc, #48]	@ (341823c0 <SystemInit+0x1c8>)
3418238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34182392:	4a0b      	ldr	r2, [pc, #44]	@ (341823c0 <SystemInit+0x1c8>)
34182394:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34182398:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
3418239c:	bf00      	nop
3418239e:	46bd      	mov	sp, r7
341823a0:	f85d 7b04 	ldr.w	r7, [sp], #4
341823a4:	4770      	bx	lr
341823a6:	bf00      	nop
341823a8:	e000ed00 	.word	0xe000ed00
341823ac:	34180400 	.word	0x34180400
341823b0:	56028000 	.word	0x56028000
341823b4:	e000edd0 	.word	0xe000edd0
341823b8:	56008000 	.word	0x56008000
341823bc:	56024800 	.word	0x56024800
341823c0:	e002ed00 	.word	0xe002ed00

341823c4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
341823c4:	b480      	push	{r7}
341823c6:	b08d      	sub	sp, #52	@ 0x34
341823c8:	af00      	add	r7, sp, #0
  uint32_t sysclk = 0;
341823ca:	2300      	movs	r3, #0
341823cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllm = 0;
341823ce:	2300      	movs	r3, #0
341823d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t plln = 0;
341823d2:	2300      	movs	r3, #0
341823d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllfracn = 0;
341823d6:	2300      	movs	r3, #0
341823d8:	623b      	str	r3, [r7, #32]
  uint32_t pllp1 = 0;
341823da:	2300      	movs	r3, #0
341823dc:	61fb      	str	r3, [r7, #28]
  uint32_t pllp2 = 0;
341823de:	2300      	movs	r3, #0
341823e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
341823e2:	4b9b      	ldr	r3, [pc, #620]	@ (34182650 <SystemCoreClockUpdate+0x28c>)
341823e4:	6a1b      	ldr	r3, [r3, #32]
341823e6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
341823ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341823ee:	d029      	beq.n	34182444 <SystemCoreClockUpdate+0x80>
341823f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341823f4:	f200 8180 	bhi.w	341826f8 <SystemCoreClockUpdate+0x334>
341823f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
341823fc:	d01f      	beq.n	3418243e <SystemCoreClockUpdate+0x7a>
341823fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34182402:	f200 8179 	bhi.w	341826f8 <SystemCoreClockUpdate+0x334>
34182406:	2b00      	cmp	r3, #0
34182408:	d003      	beq.n	34182412 <SystemCoreClockUpdate+0x4e>
3418240a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418240e:	d00a      	beq.n	34182426 <SystemCoreClockUpdate+0x62>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
    sysclk = sysclk / ic_divider;
    break;
  default:
    /* Nothing to do, should not occur */
    break;
34182410:	e172      	b.n	341826f8 <SystemCoreClockUpdate+0x334>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34182412:	4b8f      	ldr	r3, [pc, #572]	@ (34182650 <SystemCoreClockUpdate+0x28c>)
34182414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34182416:	09db      	lsrs	r3, r3, #7
34182418:	f003 0303 	and.w	r3, r3, #3
3418241c:	4a8d      	ldr	r2, [pc, #564]	@ (34182654 <SystemCoreClockUpdate+0x290>)
3418241e:	fa22 f303 	lsr.w	r3, r2, r3
34182422:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34182424:	e169      	b.n	341826fa <SystemCoreClockUpdate+0x336>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34182426:	4b8a      	ldr	r3, [pc, #552]	@ (34182650 <SystemCoreClockUpdate+0x28c>)
34182428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418242a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418242e:	2b00      	cmp	r3, #0
34182430:	d102      	bne.n	34182438 <SystemCoreClockUpdate+0x74>
      sysclk = MSI_VALUE;
34182432:	4b89      	ldr	r3, [pc, #548]	@ (34182658 <SystemCoreClockUpdate+0x294>)
34182434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34182436:	e160      	b.n	341826fa <SystemCoreClockUpdate+0x336>
      sysclk = 16000000UL;
34182438:	4b88      	ldr	r3, [pc, #544]	@ (3418265c <SystemCoreClockUpdate+0x298>)
3418243a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
3418243c:	e15d      	b.n	341826fa <SystemCoreClockUpdate+0x336>
    sysclk = HSE_VALUE;
3418243e:	4b88      	ldr	r3, [pc, #544]	@ (34182660 <SystemCoreClockUpdate+0x29c>)
34182440:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34182442:	e15a      	b.n	341826fa <SystemCoreClockUpdate+0x336>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
34182444:	4b82      	ldr	r3, [pc, #520]	@ (34182650 <SystemCoreClockUpdate+0x28c>)
34182446:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418244a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
3418244e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182452:	d066      	beq.n	34182522 <SystemCoreClockUpdate+0x15e>
34182454:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182458:	f200 8091 	bhi.w	3418257e <SystemCoreClockUpdate+0x1ba>
3418245c:	2b00      	cmp	r3, #0
3418245e:	d003      	beq.n	34182468 <SystemCoreClockUpdate+0xa4>
34182460:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182464:	d02f      	beq.n	341824c6 <SystemCoreClockUpdate+0x102>
34182466:	e08a      	b.n	3418257e <SystemCoreClockUpdate+0x1ba>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
34182468:	4b79      	ldr	r3, [pc, #484]	@ (34182650 <SystemCoreClockUpdate+0x28c>)
3418246a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418246e:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
34182470:	68fb      	ldr	r3, [r7, #12]
34182472:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34182476:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL1CFGR1_PLL1BYP;
34182478:	68fb      	ldr	r3, [r7, #12]
3418247a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418247e:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34182480:	693b      	ldr	r3, [r7, #16]
34182482:	2b00      	cmp	r3, #0
34182484:	f040 80a9 	bne.w	341825da <SystemCoreClockUpdate+0x216>
        pllm = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVM) >>  RCC_PLL1CFGR1_PLL1DIVM_Pos;
34182488:	68fb      	ldr	r3, [r7, #12]
3418248a:	0d1b      	lsrs	r3, r3, #20
3418248c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34182490:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
34182492:	68fb      	ldr	r3, [r7, #12]
34182494:	0a1b      	lsrs	r3, r3, #8
34182496:	f3c3 030b 	ubfx	r3, r3, #0, #12
3418249a:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
3418249c:	4b6c      	ldr	r3, [pc, #432]	@ (34182650 <SystemCoreClockUpdate+0x28c>)
3418249e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
341824a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
341824a6:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
341824a8:	4b69      	ldr	r3, [pc, #420]	@ (34182650 <SystemCoreClockUpdate+0x28c>)
341824aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
341824ae:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV1) >>  RCC_PLL1CFGR3_PLL1PDIV1_Pos;
341824b0:	68fb      	ldr	r3, [r7, #12]
341824b2:	0edb      	lsrs	r3, r3, #27
341824b4:	f003 0307 	and.w	r3, r3, #7
341824b8:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV2) >>  RCC_PLL1CFGR3_PLL1PDIV2_Pos;
341824ba:	68fb      	ldr	r3, [r7, #12]
341824bc:	0e1b      	lsrs	r3, r3, #24
341824be:	f003 0307 	and.w	r3, r3, #7
341824c2:	61bb      	str	r3, [r7, #24]
      break;
341824c4:	e089      	b.n	341825da <SystemCoreClockUpdate+0x216>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
341824c6:	4b62      	ldr	r3, [pc, #392]	@ (34182650 <SystemCoreClockUpdate+0x28c>)
341824c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
341824cc:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
341824ce:	68fb      	ldr	r3, [r7, #12]
341824d0:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
341824d4:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL2CFGR1_PLL2BYP;
341824d6:	68fb      	ldr	r3, [r7, #12]
341824d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341824dc:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
341824de:	693b      	ldr	r3, [r7, #16]
341824e0:	2b00      	cmp	r3, #0
341824e2:	d17c      	bne.n	341825de <SystemCoreClockUpdate+0x21a>
        pllm = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVM) >>  RCC_PLL2CFGR1_PLL2DIVM_Pos;
341824e4:	68fb      	ldr	r3, [r7, #12]
341824e6:	0d1b      	lsrs	r3, r3, #20
341824e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
341824ec:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
341824ee:	68fb      	ldr	r3, [r7, #12]
341824f0:	0a1b      	lsrs	r3, r3, #8
341824f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
341824f6:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
341824f8:	4b55      	ldr	r3, [pc, #340]	@ (34182650 <SystemCoreClockUpdate+0x28c>)
341824fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
341824fe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34182502:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
34182504:	4b52      	ldr	r3, [pc, #328]	@ (34182650 <SystemCoreClockUpdate+0x28c>)
34182506:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3418250a:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
3418250c:	68fb      	ldr	r3, [r7, #12]
3418250e:	0edb      	lsrs	r3, r3, #27
34182510:	f003 0307 	and.w	r3, r3, #7
34182514:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV2) >>  RCC_PLL2CFGR3_PLL2PDIV2_Pos;
34182516:	68fb      	ldr	r3, [r7, #12]
34182518:	0e1b      	lsrs	r3, r3, #24
3418251a:	f003 0307 	and.w	r3, r3, #7
3418251e:	61bb      	str	r3, [r7, #24]
      break;
34182520:	e05d      	b.n	341825de <SystemCoreClockUpdate+0x21a>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
34182522:	4b4b      	ldr	r3, [pc, #300]	@ (34182650 <SystemCoreClockUpdate+0x28c>)
34182524:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34182528:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
3418252a:	68fb      	ldr	r3, [r7, #12]
3418252c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34182530:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL3CFGR1_PLL3BYP;
34182532:	68fb      	ldr	r3, [r7, #12]
34182534:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34182538:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
3418253a:	693b      	ldr	r3, [r7, #16]
3418253c:	2b00      	cmp	r3, #0
3418253e:	d150      	bne.n	341825e2 <SystemCoreClockUpdate+0x21e>
        pllm = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVM) >>  RCC_PLL3CFGR1_PLL3DIVM_Pos;
34182540:	68fb      	ldr	r3, [r7, #12]
34182542:	0d1b      	lsrs	r3, r3, #20
34182544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34182548:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
3418254a:	68fb      	ldr	r3, [r7, #12]
3418254c:	0a1b      	lsrs	r3, r3, #8
3418254e:	f3c3 030b 	ubfx	r3, r3, #0, #12
34182552:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
34182554:	4b3e      	ldr	r3, [pc, #248]	@ (34182650 <SystemCoreClockUpdate+0x28c>)
34182556:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3418255a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3418255e:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
34182560:	4b3b      	ldr	r3, [pc, #236]	@ (34182650 <SystemCoreClockUpdate+0x28c>)
34182562:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34182566:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
34182568:	68fb      	ldr	r3, [r7, #12]
3418256a:	0edb      	lsrs	r3, r3, #27
3418256c:	f003 0307 	and.w	r3, r3, #7
34182570:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV2) >>  RCC_PLL3CFGR3_PLL3PDIV2_Pos;
34182572:	68fb      	ldr	r3, [r7, #12]
34182574:	0e1b      	lsrs	r3, r3, #24
34182576:	f003 0307 	and.w	r3, r3, #7
3418257a:	61bb      	str	r3, [r7, #24]
      break;
3418257c:	e031      	b.n	341825e2 <SystemCoreClockUpdate+0x21e>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
3418257e:	4b34      	ldr	r3, [pc, #208]	@ (34182650 <SystemCoreClockUpdate+0x28c>)
34182580:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34182584:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
34182586:	68fb      	ldr	r3, [r7, #12]
34182588:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
3418258c:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL4CFGR1_PLL4BYP;
3418258e:	68fb      	ldr	r3, [r7, #12]
34182590:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34182594:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34182596:	693b      	ldr	r3, [r7, #16]
34182598:	2b00      	cmp	r3, #0
3418259a:	d124      	bne.n	341825e6 <SystemCoreClockUpdate+0x222>
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
3418259c:	68fb      	ldr	r3, [r7, #12]
3418259e:	0d1b      	lsrs	r3, r3, #20
341825a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
341825a4:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
341825a6:	68fb      	ldr	r3, [r7, #12]
341825a8:	0a1b      	lsrs	r3, r3, #8
341825aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
341825ae:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
341825b0:	4b27      	ldr	r3, [pc, #156]	@ (34182650 <SystemCoreClockUpdate+0x28c>)
341825b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
341825b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
341825ba:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
341825bc:	4b24      	ldr	r3, [pc, #144]	@ (34182650 <SystemCoreClockUpdate+0x28c>)
341825be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341825c2:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
341825c4:	68fb      	ldr	r3, [r7, #12]
341825c6:	0edb      	lsrs	r3, r3, #27
341825c8:	f003 0307 	and.w	r3, r3, #7
341825cc:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
341825ce:	68fb      	ldr	r3, [r7, #12]
341825d0:	0e1b      	lsrs	r3, r3, #24
341825d2:	f003 0307 	and.w	r3, r3, #7
341825d6:	61bb      	str	r3, [r7, #24]
      break;
341825d8:	e005      	b.n	341825e6 <SystemCoreClockUpdate+0x222>
      break;
341825da:	bf00      	nop
341825dc:	e004      	b.n	341825e8 <SystemCoreClockUpdate+0x224>
      break;
341825de:	bf00      	nop
341825e0:	e002      	b.n	341825e8 <SystemCoreClockUpdate+0x224>
      break;
341825e2:	bf00      	nop
341825e4:	e000      	b.n	341825e8 <SystemCoreClockUpdate+0x224>
      break;
341825e6:	bf00      	nop
341825e8:	697b      	ldr	r3, [r7, #20]
341825ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341825ee:	d02c      	beq.n	3418264a <SystemCoreClockUpdate+0x286>
341825f0:	697b      	ldr	r3, [r7, #20]
341825f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341825f6:	d839      	bhi.n	3418266c <SystemCoreClockUpdate+0x2a8>
341825f8:	697b      	ldr	r3, [r7, #20]
341825fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341825fe:	d021      	beq.n	34182644 <SystemCoreClockUpdate+0x280>
34182600:	697b      	ldr	r3, [r7, #20]
34182602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182606:	d831      	bhi.n	3418266c <SystemCoreClockUpdate+0x2a8>
34182608:	697b      	ldr	r3, [r7, #20]
3418260a:	2b00      	cmp	r3, #0
3418260c:	d004      	beq.n	34182618 <SystemCoreClockUpdate+0x254>
3418260e:	697b      	ldr	r3, [r7, #20]
34182610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182614:	d00a      	beq.n	3418262c <SystemCoreClockUpdate+0x268>
      break;
34182616:	e029      	b.n	3418266c <SystemCoreClockUpdate+0x2a8>
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34182618:	4b0d      	ldr	r3, [pc, #52]	@ (34182650 <SystemCoreClockUpdate+0x28c>)
3418261a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418261c:	09db      	lsrs	r3, r3, #7
3418261e:	f003 0303 	and.w	r3, r3, #3
34182622:	4a0c      	ldr	r2, [pc, #48]	@ (34182654 <SystemCoreClockUpdate+0x290>)
34182624:	fa22 f303 	lsr.w	r3, r2, r3
34182628:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
3418262a:	e020      	b.n	3418266e <SystemCoreClockUpdate+0x2aa>
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
3418262c:	4b08      	ldr	r3, [pc, #32]	@ (34182650 <SystemCoreClockUpdate+0x28c>)
3418262e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34182630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34182634:	2b00      	cmp	r3, #0
34182636:	d102      	bne.n	3418263e <SystemCoreClockUpdate+0x27a>
        sysclk = MSI_VALUE;
34182638:	4b07      	ldr	r3, [pc, #28]	@ (34182658 <SystemCoreClockUpdate+0x294>)
3418263a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
3418263c:	e017      	b.n	3418266e <SystemCoreClockUpdate+0x2aa>
        sysclk = 16000000UL;
3418263e:	4b07      	ldr	r3, [pc, #28]	@ (3418265c <SystemCoreClockUpdate+0x298>)
34182640:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34182642:	e014      	b.n	3418266e <SystemCoreClockUpdate+0x2aa>
      sysclk = HSE_VALUE;
34182644:	4b06      	ldr	r3, [pc, #24]	@ (34182660 <SystemCoreClockUpdate+0x29c>)
34182646:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34182648:	e011      	b.n	3418266e <SystemCoreClockUpdate+0x2aa>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
3418264a:	4b06      	ldr	r3, [pc, #24]	@ (34182664 <SystemCoreClockUpdate+0x2a0>)
3418264c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
3418264e:	e00e      	b.n	3418266e <SystemCoreClockUpdate+0x2aa>
34182650:	56028000 	.word	0x56028000
34182654:	03d09000 	.word	0x03d09000
34182658:	003d0900 	.word	0x003d0900
3418265c:	00f42400 	.word	0x00f42400
34182660:	016e3600 	.word	0x016e3600
34182664:	00bb8000 	.word	0x00bb8000
34182668:	4b800000 	.word	0x4b800000
      break;
3418266c:	bf00      	nop
    if (pllbypass == 0U)
3418266e:	693b      	ldr	r3, [r7, #16]
34182670:	2b00      	cmp	r3, #0
34182672:	d134      	bne.n	341826de <SystemCoreClockUpdate+0x31a>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
34182674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34182676:	ee07 3a90 	vmov	s15, r3
3418267a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34182680:	ee07 3a90 	vmov	s15, r3
34182684:	eef8 6a67 	vcvt.f32.u32	s13, s15
34182688:	6a3b      	ldr	r3, [r7, #32]
3418268a:	ee07 3a90 	vmov	s15, r3
3418268e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34182692:	ed5f 5a0b 	vldr	s11, [pc, #-44]	@ 34182668 <SystemCoreClockUpdate+0x2a4>
34182696:	eec6 7a25 	vdiv.f32	s15, s12, s11
3418269a:	ee76 7aa7 	vadd.f32	s15, s13, s15
3418269e:	ee67 6a27 	vmul.f32	s13, s14, s15
341826a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341826a4:	ee07 3a90 	vmov	s15, r3
341826a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341826ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
341826b0:	edc7 7a02 	vstr	s15, [r7, #8]
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
341826b4:	69fb      	ldr	r3, [r7, #28]
341826b6:	ee07 3a90 	vmov	s15, r3
341826ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341826be:	69bb      	ldr	r3, [r7, #24]
341826c0:	ee07 3a90 	vmov	s15, r3
341826c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
341826c8:	ee27 7a27 	vmul.f32	s14, s14, s15
341826cc:	edd7 6a02 	vldr	s13, [r7, #8]
341826d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
341826d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
341826d8:	ee17 3a90 	vmov	r3, s15
341826dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
341826de:	4b0b      	ldr	r3, [pc, #44]	@ (3418270c <SystemCoreClockUpdate+0x348>)
341826e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341826e4:	0c1b      	lsrs	r3, r3, #16
341826e6:	b2db      	uxtb	r3, r3
341826e8:	3301      	adds	r3, #1
341826ea:	607b      	str	r3, [r7, #4]
    sysclk = sysclk / ic_divider;
341826ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
341826ee:	687b      	ldr	r3, [r7, #4]
341826f0:	fbb2 f3f3 	udiv	r3, r2, r3
341826f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341826f6:	e000      	b.n	341826fa <SystemCoreClockUpdate+0x336>
    break;
341826f8:	bf00      	nop
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
341826fa:	4a05      	ldr	r2, [pc, #20]	@ (34182710 <SystemCoreClockUpdate+0x34c>)
341826fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341826fe:	6013      	str	r3, [r2, #0]
}
34182700:	bf00      	nop
34182702:	3734      	adds	r7, #52	@ 0x34
34182704:	46bd      	mov	sp, r7
34182706:	f85d 7b04 	ldr.w	r7, [sp], #4
3418270a:	4770      	bx	lr
3418270c:	56028000 	.word	0x56028000
34182710:	341c0000 	.word	0x341c0000

34182714 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
34182714:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
34182718:	b588      	push	{r3, r7, lr}
3418271a:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
3418271c:	f7ff fe52 	bl	341823c4 <SystemCoreClockUpdate>

  return SystemCoreClock;
34182720:	4b06      	ldr	r3, [pc, #24]	@ (3418273c <__acle_se_SECURE_SystemCoreClockUpdate+0x28>)
34182722:	681b      	ldr	r3, [r3, #0]
}
34182724:	4618      	mov	r0, r3
34182726:	46bd      	mov	sp, r7
34182728:	e8bd 4088 	ldmia.w	sp!, {r3, r7, lr}
3418272c:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
34182730:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
34182734:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
34182738:	4774      	bxns	lr
3418273a:	bf00      	nop
3418273c:	341c0000 	.word	0x341c0000

34182740 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
34182740:	480f      	ldr	r0, [pc, #60]	@ (34182780 <LoopForever+0x4>)
  msr   MSPLIM, r0
34182742:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
34182746:	480f      	ldr	r0, [pc, #60]	@ (34182784 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
34182748:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
3418274a:	f7ff fd55 	bl	341821f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
3418274e:	480e      	ldr	r0, [pc, #56]	@ (34182788 <LoopForever+0xc>)
  ldr r1, =_edata
34182750:	490e      	ldr	r1, [pc, #56]	@ (3418278c <LoopForever+0x10>)
  ldr r2, =_sidata
34182752:	4a0f      	ldr	r2, [pc, #60]	@ (34182790 <LoopForever+0x14>)
  movs r3, #0
34182754:	2300      	movs	r3, #0
  b LoopCopyDataInit
34182756:	e002      	b.n	3418275e <LoopCopyDataInit>

34182758 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
34182758:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
3418275a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
3418275c:	3304      	adds	r3, #4

3418275e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
3418275e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
34182760:	428c      	cmp	r4, r1
  bcc CopyDataInit
34182762:	d3f9      	bcc.n	34182758 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
34182764:	4a0b      	ldr	r2, [pc, #44]	@ (34182794 <LoopForever+0x18>)
  ldr r4, =_ebss
34182766:	4c0c      	ldr	r4, [pc, #48]	@ (34182798 <LoopForever+0x1c>)
  movs r3, #0
34182768:	2300      	movs	r3, #0
  b LoopFillZerobss
3418276a:	e001      	b.n	34182770 <LoopFillZerobss>

3418276c <FillZerobss>:

FillZerobss:
  str  r3, [r2]
3418276c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
3418276e:	3204      	adds	r2, #4

34182770 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
34182770:	42a2      	cmp	r2, r4
  bcc FillZerobss
34182772:	d3fb      	bcc.n	3418276c <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
34182774:	f00f fe22 	bl	341923bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
34182778:	f7fe f9c0 	bl	34180afc <main>

3418277c <LoopForever>:

LoopForever:
  b LoopForever
3418277c:	e7fe      	b.n	3418277c <LoopForever>
3418277e:	0000      	.short	0x0000
  ldr   r0, =_sstack
34182780:	341ff800 	.word	0x341ff800
  ldr   r0, =_estack
34182784:	34200000 	.word	0x34200000
  ldr r0, =_sdata
34182788:	341c0000 	.word	0x341c0000
  ldr r1, =_edata
3418278c:	341c000c 	.word	0x341c000c
  ldr r2, =_sidata
34182790:	341924cc 	.word	0x341924cc
  ldr r2, =_sbss
34182794:	341c0010 	.word	0x341c0010
  ldr r4, =_ebss
34182798:	341c0958 	.word	0x341c0958

3418279c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
3418279c:	e7fe      	b.n	3418279c <ADC1_2_IRQHandler>

3418279e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
3418279e:	b580      	push	{r7, lr}
341827a0:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
341827a2:	2003      	movs	r0, #3
341827a4:	f001 fb43 	bl	34183e2e <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency in SystemCoreClock global variable */
  SystemCoreClockUpdate();
341827a8:	f7ff fe0c 	bl	341823c4 <SystemCoreClockUpdate>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
341827ac:	200f      	movs	r0, #15
341827ae:	f7ff fc93 	bl	341820d8 <HAL_InitTick>
341827b2:	4603      	mov	r3, r0
341827b4:	2b00      	cmp	r3, #0
341827b6:	d001      	beq.n	341827bc <HAL_Init+0x1e>
  {
    return HAL_ERROR;
341827b8:	2301      	movs	r3, #1
341827ba:	e002      	b.n	341827c2 <HAL_Init+0x24>
  }

  /* Init the low level hardware */
  HAL_MspInit();
341827bc:	f7fe ffb8 	bl	34181730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
341827c0:	2300      	movs	r3, #0
}
341827c2:	4618      	mov	r0, r3
341827c4:	bd80      	pop	{r7, pc}
	...

341827c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
341827c8:	b480      	push	{r7}
341827ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
341827cc:	4b06      	ldr	r3, [pc, #24]	@ (341827e8 <HAL_IncTick+0x20>)
341827ce:	781b      	ldrb	r3, [r3, #0]
341827d0:	461a      	mov	r2, r3
341827d2:	4b06      	ldr	r3, [pc, #24]	@ (341827ec <HAL_IncTick+0x24>)
341827d4:	681b      	ldr	r3, [r3, #0]
341827d6:	4413      	add	r3, r2
341827d8:	4a04      	ldr	r2, [pc, #16]	@ (341827ec <HAL_IncTick+0x24>)
341827da:	6013      	str	r3, [r2, #0]
}
341827dc:	bf00      	nop
341827de:	46bd      	mov	sp, r7
341827e0:	f85d 7b04 	ldr.w	r7, [sp], #4
341827e4:	4770      	bx	lr
341827e6:	bf00      	nop
341827e8:	341c0008 	.word	0x341c0008
341827ec:	341c0930 	.word	0x341c0930

341827f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
341827f0:	b480      	push	{r7}
341827f2:	af00      	add	r7, sp, #0
  return uwTick;
341827f4:	4b03      	ldr	r3, [pc, #12]	@ (34182804 <HAL_GetTick+0x14>)
341827f6:	681b      	ldr	r3, [r3, #0]
}
341827f8:	4618      	mov	r0, r3
341827fa:	46bd      	mov	sp, r7
341827fc:	f85d 7b04 	ldr.w	r7, [sp], #4
34182800:	4770      	bx	lr
34182802:	bf00      	nop
34182804:	341c0930 	.word	0x341c0930

34182808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
34182808:	b580      	push	{r7, lr}
3418280a:	b084      	sub	sp, #16
3418280c:	af00      	add	r7, sp, #0
3418280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
34182810:	f7ff ffee 	bl	341827f0 <HAL_GetTick>
34182814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
34182816:	687b      	ldr	r3, [r7, #4]
34182818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
3418281a:	68fb      	ldr	r3, [r7, #12]
3418281c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
34182820:	d005      	beq.n	3418282e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
34182822:	4b0a      	ldr	r3, [pc, #40]	@ (3418284c <HAL_Delay+0x44>)
34182824:	781b      	ldrb	r3, [r3, #0]
34182826:	461a      	mov	r2, r3
34182828:	68fb      	ldr	r3, [r7, #12]
3418282a:	4413      	add	r3, r2
3418282c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
3418282e:	bf00      	nop
34182830:	f7ff ffde 	bl	341827f0 <HAL_GetTick>
34182834:	4602      	mov	r2, r0
34182836:	68bb      	ldr	r3, [r7, #8]
34182838:	1ad3      	subs	r3, r2, r3
3418283a:	68fa      	ldr	r2, [r7, #12]
3418283c:	429a      	cmp	r2, r3
3418283e:	d8f7      	bhi.n	34182830 <HAL_Delay+0x28>
  {
  }
}
34182840:	bf00      	nop
34182842:	bf00      	nop
34182844:	3710      	adds	r7, #16
34182846:	46bd      	mov	sp, r7
34182848:	bd80      	pop	{r7, pc}
3418284a:	bf00      	nop
3418284c:	341c0008 	.word	0x341c0008

34182850 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
34182850:	b480      	push	{r7}
34182852:	b083      	sub	sp, #12
34182854:	af00      	add	r7, sp, #0
34182856:	6078      	str	r0, [r7, #4]
34182858:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VBATEN, PathInternal);
3418285a:	687b      	ldr	r3, [r7, #4]
3418285c:	689b      	ldr	r3, [r3, #8]
3418285e:	f023 72a0 	bic.w	r2, r3, #20971520	@ 0x1400000
34182862:	683b      	ldr	r3, [r7, #0]
34182864:	431a      	orrs	r2, r3
34182866:	687b      	ldr	r3, [r7, #4]
34182868:	609a      	str	r2, [r3, #8]
}
3418286a:	bf00      	nop
3418286c:	370c      	adds	r7, #12
3418286e:	46bd      	mov	sp, r7
34182870:	f85d 7b04 	ldr.w	r7, [sp], #4
34182874:	4770      	bx	lr

34182876 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
34182876:	b480      	push	{r7}
34182878:	b083      	sub	sp, #12
3418287a:	af00      	add	r7, sp, #0
3418287c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VBATEN));
3418287e:	687b      	ldr	r3, [r7, #4]
34182880:	689b      	ldr	r3, [r3, #8]
34182882:	f003 73a0 	and.w	r3, r3, #20971520	@ 0x1400000
}
34182886:	4618      	mov	r0, r3
34182888:	370c      	adds	r7, #12
3418288a:	46bd      	mov	sp, r7
3418288c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182890:	4770      	bx	lr

34182892 <LL_ADC_SetPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VDDCORE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetPathInternalCh(ADC_TypeDef *ADCx, uint32_t PathInternal)
{
34182892:	b480      	push	{r7}
34182894:	b083      	sub	sp, #12
34182896:	af00      	add	r7, sp, #0
34182898:	6078      	str	r0, [r7, #4]
3418289a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->OR, ADC_OR_OP2, (PathInternal >> ADC_PATH_INTERNAL_POS));
3418289c:	687b      	ldr	r3, [r7, #4]
3418289e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341828a2:	f023 0204 	bic.w	r2, r3, #4
341828a6:	683b      	ldr	r3, [r7, #0]
341828a8:	0c1b      	lsrs	r3, r3, #16
341828aa:	431a      	orrs	r2, r3
341828ac:	687b      	ldr	r3, [r7, #4]
341828ae:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
}
341828b2:	bf00      	nop
341828b4:	370c      	adds	r7, #12
341828b6:	46bd      	mov	sp, r7
341828b8:	f85d 7b04 	ldr.w	r7, [sp], #4
341828bc:	4770      	bx	lr

341828be <LL_ADC_GetPathInternalCh>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VDDCORE
  */
__STATIC_INLINE uint32_t LL_ADC_GetPathInternalCh(const ADC_TypeDef *ADCx)
{
341828be:	b480      	push	{r7}
341828c0:	b083      	sub	sp, #12
341828c2:	af00      	add	r7, sp, #0
341828c4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->OR, ADC_OR_OP2)) << ADC_PATH_INTERNAL_POS;
341828c6:	687b      	ldr	r3, [r7, #4]
341828c8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341828cc:	041b      	lsls	r3, r3, #16
341828ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
}
341828d2:	4618      	mov	r0, r3
341828d4:	370c      	adds	r7, #12
341828d6:	46bd      	mov	sp, r7
341828d8:	f85d 7b04 	ldr.w	r7, [sp], #4
341828dc:	4770      	bx	lr

341828de <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(const ADC_TypeDef *ADCx)
{
341828de:	b480      	push	{r7}
341828e0:	b083      	sub	sp, #12
341828e2:	af00      	add	r7, sp, #0
341828e4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_RES));
341828e6:	687b      	ldr	r3, [r7, #4]
341828e8:	68db      	ldr	r3, [r3, #12]
341828ea:	f003 030c 	and.w	r3, r3, #12
}
341828ee:	4618      	mov	r0, r3
341828f0:	370c      	adds	r7, #12
341828f2:	46bd      	mov	sp, r7
341828f4:	f85d 7b04 	ldr.w	r7, [sp], #4
341828f8:	4770      	bx	lr

341828fa <LL_ADC_SetOffsetChannel>:
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC1.\n
  *         (2) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel)
{
341828fa:	b480      	push	{r7}
341828fc:	b087      	sub	sp, #28
341828fe:	af00      	add	r7, sp, #0
34182900:	60f8      	str	r0, [r7, #12]
34182902:	60b9      	str	r1, [r7, #8]
34182904:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg_offset_cfg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
34182906:	68fb      	ldr	r3, [r7, #12]
34182908:	3350      	adds	r3, #80	@ 0x50
3418290a:	461a      	mov	r2, r3
3418290c:	68bb      	ldr	r3, [r7, #8]
3418290e:	009b      	lsls	r3, r3, #2
34182910:	4413      	add	r3, r2
34182912:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg_offset_cfg,
34182914:	697b      	ldr	r3, [r7, #20]
34182916:	681b      	ldr	r3, [r3, #0]
34182918:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
3418291c:	687b      	ldr	r3, [r7, #4]
3418291e:	06db      	lsls	r3, r3, #27
34182920:	431a      	orrs	r2, r3
34182922:	697b      	ldr	r3, [r7, #20]
34182924:	601a      	str	r2, [r3, #0]
             ADC_OFCFGR1_OFFSET_CH,
             (Channel & ADC_CHANNEL_NUMBER_MASK) << ADC_OFCFGR1_OFFSET_CH_Pos);
}
34182926:	bf00      	nop
34182928:	371c      	adds	r7, #28
3418292a:	46bd      	mov	sp, r7
3418292c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182930:	4770      	bx	lr

34182932 <LL_ADC_GetOffsetChannel>:
  *         (3) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
34182932:	b480      	push	{r7}
34182934:	b085      	sub	sp, #20
34182936:	af00      	add	r7, sp, #0
34182938:	6078      	str	r0, [r7, #4]
3418293a:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
3418293c:	687b      	ldr	r3, [r7, #4]
3418293e:	3350      	adds	r3, #80	@ 0x50
34182940:	461a      	mov	r2, r3
34182942:	683b      	ldr	r3, [r7, #0]
34182944:	009b      	lsls	r3, r3, #2
34182946:	4413      	add	r3, r2
34182948:	60fb      	str	r3, [r7, #12]

  return (uint32_t) __LL_ADC_DECIMAL_NB_TO_CHANNEL(READ_BIT(*preg, ADC_OFCFGR1_OFFSET_CH) >> ADC_OFCFGR1_OFFSET_CH_Pos);
3418294a:	68fb      	ldr	r3, [r7, #12]
3418294c:	681b      	ldr	r3, [r3, #0]
3418294e:	0edb      	lsrs	r3, r3, #27
34182950:	f003 031f 	and.w	r3, r3, #31
}
34182954:	4618      	mov	r0, r3
34182956:	3714      	adds	r7, #20
34182958:	46bd      	mov	sp, r7
3418295a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418295e:	4770      	bx	lr

34182960 <LL_ADC_SetOffsetLevel>:
  *         @arg @ref LL_ADC_OFFSET_4
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x00FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetLevel(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetLevel)
{
34182960:	b480      	push	{r7}
34182962:	b087      	sub	sp, #28
34182964:	af00      	add	r7, sp, #0
34182966:	60f8      	str	r0, [r7, #12]
34182968:	60b9      	str	r1, [r7, #8]
3418296a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg_offset_val = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3418296c:	68fb      	ldr	r3, [r7, #12]
3418296e:	3360      	adds	r3, #96	@ 0x60
34182970:	461a      	mov	r2, r3
34182972:	68bb      	ldr	r3, [r7, #8]
34182974:	009b      	lsls	r3, r3, #2
34182976:	4413      	add	r3, r2
34182978:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg_offset_val,
3418297a:	697b      	ldr	r3, [r7, #20]
3418297c:	681b      	ldr	r3, [r3, #0]
3418297e:	0d9b      	lsrs	r3, r3, #22
34182980:	059b      	lsls	r3, r3, #22
34182982:	687a      	ldr	r2, [r7, #4]
34182984:	431a      	orrs	r2, r3
34182986:	697b      	ldr	r3, [r7, #20]
34182988:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET,
             OffsetLevel);
}
3418298a:	bf00      	nop
3418298c:	371c      	adds	r7, #28
3418298e:	46bd      	mov	sp, r7
34182990:	f85d 7b04 	ldr.w	r7, [sp], #4
34182994:	4770      	bx	lr

34182996 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
34182996:	b480      	push	{r7}
34182998:	b087      	sub	sp, #28
3418299a:	af00      	add	r7, sp, #0
3418299c:	60f8      	str	r0, [r7, #12]
3418299e:	60b9      	str	r1, [r7, #8]
341829a0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
341829a2:	68fb      	ldr	r3, [r7, #12]
341829a4:	3350      	adds	r3, #80	@ 0x50
341829a6:	461a      	mov	r2, r3
341829a8:	68bb      	ldr	r3, [r7, #8]
341829aa:	009b      	lsls	r3, r3, #2
341829ac:	4413      	add	r3, r2
341829ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
341829b0:	697b      	ldr	r3, [r7, #20]
341829b2:	681b      	ldr	r3, [r3, #0]
341829b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
341829b8:	687b      	ldr	r3, [r7, #4]
341829ba:	431a      	orrs	r2, r3
341829bc:	697b      	ldr	r3, [r7, #20]
341829be:	601a      	str	r2, [r3, #0]
             ADC_OFCFGR1_POSOFF,
             OffsetSign);
}
341829c0:	bf00      	nop
341829c2:	371c      	adds	r7, #28
341829c4:	46bd      	mov	sp, r7
341829c6:	f85d 7b04 	ldr.w	r7, [sp], #4
341829ca:	4770      	bx	lr

341829cc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SAT_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
341829cc:	b480      	push	{r7}
341829ce:	b087      	sub	sp, #28
341829d0:	af00      	add	r7, sp, #0
341829d2:	60f8      	str	r0, [r7, #12]
341829d4:	60b9      	str	r1, [r7, #8]
341829d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
341829d8:	68fb      	ldr	r3, [r7, #12]
341829da:	3350      	adds	r3, #80	@ 0x50
341829dc:	461a      	mov	r2, r3
341829de:	68bb      	ldr	r3, [r7, #8]
341829e0:	009b      	lsls	r3, r3, #2
341829e2:	4413      	add	r3, r2
341829e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFCFGR1_SSAT, OffsetSignedSaturation);
341829e6:	697b      	ldr	r3, [r7, #20]
341829e8:	681b      	ldr	r3, [r3, #0]
341829ea:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
341829ee:	687b      	ldr	r3, [r7, #4]
341829f0:	431a      	orrs	r2, r3
341829f2:	697b      	ldr	r3, [r7, #20]
341829f4:	601a      	str	r2, [r3, #0]
}
341829f6:	bf00      	nop
341829f8:	371c      	adds	r7, #28
341829fa:	46bd      	mov	sp, r7
341829fc:	f85d 7b04 	ldr.w	r7, [sp], #4
34182a00:	4770      	bx	lr

34182a02 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SAT_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
34182a02:	b480      	push	{r7}
34182a04:	b087      	sub	sp, #28
34182a06:	af00      	add	r7, sp, #0
34182a08:	60f8      	str	r0, [r7, #12]
34182a0a:	60b9      	str	r1, [r7, #8]
34182a0c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
34182a0e:	68fb      	ldr	r3, [r7, #12]
34182a10:	3350      	adds	r3, #80	@ 0x50
34182a12:	461a      	mov	r2, r3
34182a14:	68bb      	ldr	r3, [r7, #8]
34182a16:	009b      	lsls	r3, r3, #2
34182a18:	4413      	add	r3, r2
34182a1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFCFGR1_USAT, OffsetUnsignedSaturation);
34182a1c:	697b      	ldr	r3, [r7, #20]
34182a1e:	681b      	ldr	r3, [r3, #0]
34182a20:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
34182a24:	687b      	ldr	r3, [r7, #4]
34182a26:	431a      	orrs	r2, r3
34182a28:	697b      	ldr	r3, [r7, #20]
34182a2a:	601a      	str	r2, [r3, #0]
}
34182a2c:	bf00      	nop
34182a2e:	371c      	adds	r7, #28
34182a30:	46bd      	mov	sp, r7
34182a32:	f85d 7b04 	ldr.w	r7, [sp], #4
34182a36:	4770      	bx	lr

34182a38 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
34182a38:	b480      	push	{r7}
34182a3a:	b083      	sub	sp, #12
34182a3c:	af00      	add	r7, sp, #0
34182a3e:	6078      	str	r0, [r7, #4]
34182a40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
34182a42:	687b      	ldr	r3, [r7, #4]
34182a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34182a46:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
34182a4a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
34182a4e:	683a      	ldr	r2, [r7, #0]
34182a50:	431a      	orrs	r2, r3
34182a52:	687b      	ldr	r3, [r7, #4]
34182a54:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
34182a56:	687b      	ldr	r3, [r7, #4]
34182a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34182a5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34182a5e:	683a      	ldr	r2, [r7, #0]
34182a60:	2a00      	cmp	r2, #0
34182a62:	d002      	beq.n	34182a6a <LL_ADC_SetGainCompensation+0x32>
34182a64:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
34182a68:	e000      	b.n	34182a6c <LL_ADC_SetGainCompensation+0x34>
34182a6a:	2200      	movs	r2, #0
34182a6c:	431a      	orrs	r2, r3
34182a6e:	687b      	ldr	r3, [r7, #4]
34182a70:	671a      	str	r2, [r3, #112]	@ 0x70
}
34182a72:	bf00      	nop
34182a74:	370c      	adds	r7, #12
34182a76:	46bd      	mov	sp, r7
34182a78:	f85d 7b04 	ldr.w	r7, [sp], #4
34182a7c:	4770      	bx	lr

34182a7e <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC1.\n
  *         (2) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
34182a7e:	b480      	push	{r7}
34182a80:	b087      	sub	sp, #28
34182a82:	af00      	add	r7, sp, #0
34182a84:	60f8      	str	r0, [r7, #12]
34182a86:	60b9      	str	r1, [r7, #8]
34182a88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
34182a8a:	68fb      	ldr	r3, [r7, #12]
34182a8c:	3330      	adds	r3, #48	@ 0x30
34182a8e:	461a      	mov	r2, r3
34182a90:	68bb      	ldr	r3, [r7, #8]
34182a92:	0a1b      	lsrs	r3, r3, #8
34182a94:	009b      	lsls	r3, r3, #2
34182a96:	f003 030c 	and.w	r3, r3, #12
34182a9a:	4413      	add	r3, r2
34182a9c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
34182a9e:	697b      	ldr	r3, [r7, #20]
34182aa0:	681a      	ldr	r2, [r3, #0]
34182aa2:	68bb      	ldr	r3, [r7, #8]
34182aa4:	f003 031f 	and.w	r3, r3, #31
34182aa8:	211f      	movs	r1, #31
34182aaa:	fa01 f303 	lsl.w	r3, r1, r3
34182aae:	43db      	mvns	r3, r3
34182ab0:	401a      	ands	r2, r3
34182ab2:	687b      	ldr	r3, [r7, #4]
34182ab4:	f003 011f 	and.w	r1, r3, #31
34182ab8:	68bb      	ldr	r3, [r7, #8]
34182aba:	f003 031f 	and.w	r3, r3, #31
34182abe:	fa01 f303 	lsl.w	r3, r1, r3
34182ac2:	431a      	orrs	r2, r3
34182ac4:	697b      	ldr	r3, [r7, #20]
34182ac6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
34182ac8:	bf00      	nop
34182aca:	371c      	adds	r7, #28
34182acc:	46bd      	mov	sp, r7
34182ace:	f85d 7b04 	ldr.w	r7, [sp], #4
34182ad2:	4770      	bx	lr

34182ad4 <LL_ADC_SetChannelPreselection>:
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC1.\n
  *         (2) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
34182ad4:	b480      	push	{r7}
34182ad6:	b085      	sub	sp, #20
34182ad8:	af00      	add	r7, sp, #0
34182ada:	6078      	str	r0, [r7, #4]
34182adc:	6039      	str	r1, [r7, #0]
  __IO uint32_t channel_preselectione = READ_REG(ADCx->PCSEL);
34182ade:	687b      	ldr	r3, [r7, #4]
34182ae0:	69db      	ldr	r3, [r3, #28]
34182ae2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(ADCx->PCSEL,
34182ae4:	683b      	ldr	r3, [r7, #0]
34182ae6:	f003 031f 	and.w	r3, r3, #31
34182aea:	2201      	movs	r2, #1
34182aec:	409a      	lsls	r2, r3
34182aee:	68fb      	ldr	r3, [r7, #12]
34182af0:	431a      	orrs	r2, r3
34182af2:	687b      	ldr	r3, [r7, #4]
34182af4:	61da      	str	r2, [r3, #28]
            channel_preselectione | (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)Channel) & 0x1FUL)));
}
34182af6:	bf00      	nop
34182af8:	3714      	adds	r7, #20
34182afa:	46bd      	mov	sp, r7
34182afc:	f85d 7b04 	ldr.w	r7, [sp], #4
34182b00:	4770      	bx	lr
	...

34182b04 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_246CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_1499CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
34182b04:	b480      	push	{r7}
34182b06:	b087      	sub	sp, #28
34182b08:	af00      	add	r7, sp, #0
34182b0a:	60f8      	str	r0, [r7, #12]
34182b0c:	60b9      	str	r1, [r7, #8]
34182b0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  const uint32_t iChannel = __ADC_CHANNEL_INDEX(Channel);
34182b10:	68bb      	ldr	r3, [r7, #8]
34182b12:	f003 031f 	and.w	r3, r3, #31
34182b16:	2b00      	cmp	r3, #0
34182b18:	f000 8087 	beq.w	34182c2a <LL_ADC_SetChannelSamplingTime+0x126>
34182b1c:	68bb      	ldr	r3, [r7, #8]
34182b1e:	f003 031f 	and.w	r3, r3, #31
34182b22:	2b01      	cmp	r3, #1
34182b24:	d07f      	beq.n	34182c26 <LL_ADC_SetChannelSamplingTime+0x122>
34182b26:	68bb      	ldr	r3, [r7, #8]
34182b28:	f003 031f 	and.w	r3, r3, #31
34182b2c:	2b02      	cmp	r3, #2
34182b2e:	d078      	beq.n	34182c22 <LL_ADC_SetChannelSamplingTime+0x11e>
34182b30:	68bb      	ldr	r3, [r7, #8]
34182b32:	f003 031f 	and.w	r3, r3, #31
34182b36:	2b03      	cmp	r3, #3
34182b38:	d071      	beq.n	34182c1e <LL_ADC_SetChannelSamplingTime+0x11a>
34182b3a:	68bb      	ldr	r3, [r7, #8]
34182b3c:	f003 031f 	and.w	r3, r3, #31
34182b40:	2b04      	cmp	r3, #4
34182b42:	d06a      	beq.n	34182c1a <LL_ADC_SetChannelSamplingTime+0x116>
34182b44:	68bb      	ldr	r3, [r7, #8]
34182b46:	f003 031f 	and.w	r3, r3, #31
34182b4a:	2b05      	cmp	r3, #5
34182b4c:	d063      	beq.n	34182c16 <LL_ADC_SetChannelSamplingTime+0x112>
34182b4e:	68bb      	ldr	r3, [r7, #8]
34182b50:	f003 031f 	and.w	r3, r3, #31
34182b54:	2b06      	cmp	r3, #6
34182b56:	d05c      	beq.n	34182c12 <LL_ADC_SetChannelSamplingTime+0x10e>
34182b58:	68bb      	ldr	r3, [r7, #8]
34182b5a:	f003 031f 	and.w	r3, r3, #31
34182b5e:	2b07      	cmp	r3, #7
34182b60:	d055      	beq.n	34182c0e <LL_ADC_SetChannelSamplingTime+0x10a>
34182b62:	68bb      	ldr	r3, [r7, #8]
34182b64:	f003 031f 	and.w	r3, r3, #31
34182b68:	2b08      	cmp	r3, #8
34182b6a:	d04e      	beq.n	34182c0a <LL_ADC_SetChannelSamplingTime+0x106>
34182b6c:	68bb      	ldr	r3, [r7, #8]
34182b6e:	f003 031f 	and.w	r3, r3, #31
34182b72:	2b09      	cmp	r3, #9
34182b74:	d047      	beq.n	34182c06 <LL_ADC_SetChannelSamplingTime+0x102>
34182b76:	68bb      	ldr	r3, [r7, #8]
34182b78:	f003 031f 	and.w	r3, r3, #31
34182b7c:	2b0a      	cmp	r3, #10
34182b7e:	d040      	beq.n	34182c02 <LL_ADC_SetChannelSamplingTime+0xfe>
34182b80:	68bb      	ldr	r3, [r7, #8]
34182b82:	f003 031f 	and.w	r3, r3, #31
34182b86:	2b0b      	cmp	r3, #11
34182b88:	d039      	beq.n	34182bfe <LL_ADC_SetChannelSamplingTime+0xfa>
34182b8a:	68bb      	ldr	r3, [r7, #8]
34182b8c:	f003 031f 	and.w	r3, r3, #31
34182b90:	2b0c      	cmp	r3, #12
34182b92:	d032      	beq.n	34182bfa <LL_ADC_SetChannelSamplingTime+0xf6>
34182b94:	68bb      	ldr	r3, [r7, #8]
34182b96:	f003 031f 	and.w	r3, r3, #31
34182b9a:	2b0d      	cmp	r3, #13
34182b9c:	d02b      	beq.n	34182bf6 <LL_ADC_SetChannelSamplingTime+0xf2>
34182b9e:	68bb      	ldr	r3, [r7, #8]
34182ba0:	f003 031f 	and.w	r3, r3, #31
34182ba4:	2b0e      	cmp	r3, #14
34182ba6:	d024      	beq.n	34182bf2 <LL_ADC_SetChannelSamplingTime+0xee>
34182ba8:	68bb      	ldr	r3, [r7, #8]
34182baa:	f003 031f 	and.w	r3, r3, #31
34182bae:	2b0f      	cmp	r3, #15
34182bb0:	d01d      	beq.n	34182bee <LL_ADC_SetChannelSamplingTime+0xea>
34182bb2:	68bb      	ldr	r3, [r7, #8]
34182bb4:	f003 031f 	and.w	r3, r3, #31
34182bb8:	2b10      	cmp	r3, #16
34182bba:	d016      	beq.n	34182bea <LL_ADC_SetChannelSamplingTime+0xe6>
34182bbc:	68bb      	ldr	r3, [r7, #8]
34182bbe:	f003 031f 	and.w	r3, r3, #31
34182bc2:	2b11      	cmp	r3, #17
34182bc4:	d00f      	beq.n	34182be6 <LL_ADC_SetChannelSamplingTime+0xe2>
34182bc6:	68bb      	ldr	r3, [r7, #8]
34182bc8:	f003 031f 	and.w	r3, r3, #31
34182bcc:	2b12      	cmp	r3, #18
34182bce:	d008      	beq.n	34182be2 <LL_ADC_SetChannelSamplingTime+0xde>
34182bd0:	68bb      	ldr	r3, [r7, #8]
34182bd2:	f003 031f 	and.w	r3, r3, #31
34182bd6:	2b13      	cmp	r3, #19
34182bd8:	d101      	bne.n	34182bde <LL_ADC_SetChannelSamplingTime+0xda>
34182bda:	2313      	movs	r3, #19
34182bdc:	e026      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182bde:	2300      	movs	r3, #0
34182be0:	e024      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182be2:	2312      	movs	r3, #18
34182be4:	e022      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182be6:	2311      	movs	r3, #17
34182be8:	e020      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182bea:	2310      	movs	r3, #16
34182bec:	e01e      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182bee:	230f      	movs	r3, #15
34182bf0:	e01c      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182bf2:	230e      	movs	r3, #14
34182bf4:	e01a      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182bf6:	230d      	movs	r3, #13
34182bf8:	e018      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182bfa:	230c      	movs	r3, #12
34182bfc:	e016      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182bfe:	230b      	movs	r3, #11
34182c00:	e014      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182c02:	230a      	movs	r3, #10
34182c04:	e012      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182c06:	2309      	movs	r3, #9
34182c08:	e010      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182c0a:	2308      	movs	r3, #8
34182c0c:	e00e      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182c0e:	2307      	movs	r3, #7
34182c10:	e00c      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182c12:	2306      	movs	r3, #6
34182c14:	e00a      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182c16:	2305      	movs	r3, #5
34182c18:	e008      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182c1a:	2304      	movs	r3, #4
34182c1c:	e006      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182c1e:	2303      	movs	r3, #3
34182c20:	e004      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182c22:	2302      	movs	r3, #2
34182c24:	e002      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182c26:	2301      	movs	r3, #1
34182c28:	e000      	b.n	34182c2c <LL_ADC_SetChannelSamplingTime+0x128>
34182c2a:	2300      	movs	r3, #0
34182c2c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
34182c2e:	68fb      	ldr	r3, [r7, #12]
34182c30:	3314      	adds	r3, #20
34182c32:	4619      	mov	r1, r3
34182c34:	4a15      	ldr	r2, [pc, #84]	@ (34182c8c <LL_ADC_SetChannelSamplingTime+0x188>)
34182c36:	697b      	ldr	r3, [r7, #20]
34182c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34182c3c:	0e5b      	lsrs	r3, r3, #25
34182c3e:	009b      	lsls	r3, r3, #2
34182c40:	f003 0304 	and.w	r3, r3, #4
34182c44:	440b      	add	r3, r1
34182c46:	613b      	str	r3, [r7, #16]
                                             ((ADC_CHANNEL_LUT[iChannel]
                                               & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
  MODIFY_REG(*preg,
34182c48:	693b      	ldr	r3, [r7, #16]
34182c4a:	681a      	ldr	r2, [r3, #0]
34182c4c:	490f      	ldr	r1, [pc, #60]	@ (34182c8c <LL_ADC_SetChannelSamplingTime+0x188>)
34182c4e:	697b      	ldr	r3, [r7, #20]
34182c50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
34182c54:	0d1b      	lsrs	r3, r3, #20
34182c56:	f003 031f 	and.w	r3, r3, #31
34182c5a:	2107      	movs	r1, #7
34182c5c:	fa01 f303 	lsl.w	r3, r1, r3
34182c60:	43db      	mvns	r3, r3
34182c62:	401a      	ands	r2, r3
34182c64:	4909      	ldr	r1, [pc, #36]	@ (34182c8c <LL_ADC_SetChannelSamplingTime+0x188>)
34182c66:	697b      	ldr	r3, [r7, #20]
34182c68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
34182c6c:	0d1b      	lsrs	r3, r3, #20
34182c6e:	f003 031f 	and.w	r3, r3, #31
34182c72:	6879      	ldr	r1, [r7, #4]
34182c74:	fa01 f303 	lsl.w	r3, r1, r3
34182c78:	431a      	orrs	r2, r3
34182c7a:	693b      	ldr	r3, [r7, #16]
34182c7c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((ADC_CHANNEL_LUT[iChannel] & ADC_CHANNEL_SMPx_BITOFFSET_MASK)
                                >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((ADC_CHANNEL_LUT[iChannel] & ADC_CHANNEL_SMPx_BITOFFSET_MASK)
                                >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
34182c7e:	bf00      	nop
34182c80:	371c      	adds	r7, #28
34182c82:	46bd      	mov	sp, r7
34182c84:	f85d 7b04 	ldr.w	r7, [sp], #4
34182c88:	4770      	bx	lr
34182c8a:	bf00      	nop
34182c8c:	3419241c 	.word	0x3419241c

34182c90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
34182c90:	b480      	push	{r7}
34182c92:	b087      	sub	sp, #28
34182c94:	af00      	add	r7, sp, #0
34182c96:	60f8      	str	r0, [r7, #12]
34182c98:	60b9      	str	r1, [r7, #8]
34182c9a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  const uint32_t iChannel = __ADC_CHANNEL_INDEX(Channel);
34182c9c:	68bb      	ldr	r3, [r7, #8]
34182c9e:	f003 031f 	and.w	r3, r3, #31
34182ca2:	2b00      	cmp	r3, #0
34182ca4:	f000 8087 	beq.w	34182db6 <LL_ADC_SetChannelSingleDiff+0x126>
34182ca8:	68bb      	ldr	r3, [r7, #8]
34182caa:	f003 031f 	and.w	r3, r3, #31
34182cae:	2b01      	cmp	r3, #1
34182cb0:	d07f      	beq.n	34182db2 <LL_ADC_SetChannelSingleDiff+0x122>
34182cb2:	68bb      	ldr	r3, [r7, #8]
34182cb4:	f003 031f 	and.w	r3, r3, #31
34182cb8:	2b02      	cmp	r3, #2
34182cba:	d078      	beq.n	34182dae <LL_ADC_SetChannelSingleDiff+0x11e>
34182cbc:	68bb      	ldr	r3, [r7, #8]
34182cbe:	f003 031f 	and.w	r3, r3, #31
34182cc2:	2b03      	cmp	r3, #3
34182cc4:	d071      	beq.n	34182daa <LL_ADC_SetChannelSingleDiff+0x11a>
34182cc6:	68bb      	ldr	r3, [r7, #8]
34182cc8:	f003 031f 	and.w	r3, r3, #31
34182ccc:	2b04      	cmp	r3, #4
34182cce:	d06a      	beq.n	34182da6 <LL_ADC_SetChannelSingleDiff+0x116>
34182cd0:	68bb      	ldr	r3, [r7, #8]
34182cd2:	f003 031f 	and.w	r3, r3, #31
34182cd6:	2b05      	cmp	r3, #5
34182cd8:	d063      	beq.n	34182da2 <LL_ADC_SetChannelSingleDiff+0x112>
34182cda:	68bb      	ldr	r3, [r7, #8]
34182cdc:	f003 031f 	and.w	r3, r3, #31
34182ce0:	2b06      	cmp	r3, #6
34182ce2:	d05c      	beq.n	34182d9e <LL_ADC_SetChannelSingleDiff+0x10e>
34182ce4:	68bb      	ldr	r3, [r7, #8]
34182ce6:	f003 031f 	and.w	r3, r3, #31
34182cea:	2b07      	cmp	r3, #7
34182cec:	d055      	beq.n	34182d9a <LL_ADC_SetChannelSingleDiff+0x10a>
34182cee:	68bb      	ldr	r3, [r7, #8]
34182cf0:	f003 031f 	and.w	r3, r3, #31
34182cf4:	2b08      	cmp	r3, #8
34182cf6:	d04e      	beq.n	34182d96 <LL_ADC_SetChannelSingleDiff+0x106>
34182cf8:	68bb      	ldr	r3, [r7, #8]
34182cfa:	f003 031f 	and.w	r3, r3, #31
34182cfe:	2b09      	cmp	r3, #9
34182d00:	d047      	beq.n	34182d92 <LL_ADC_SetChannelSingleDiff+0x102>
34182d02:	68bb      	ldr	r3, [r7, #8]
34182d04:	f003 031f 	and.w	r3, r3, #31
34182d08:	2b0a      	cmp	r3, #10
34182d0a:	d040      	beq.n	34182d8e <LL_ADC_SetChannelSingleDiff+0xfe>
34182d0c:	68bb      	ldr	r3, [r7, #8]
34182d0e:	f003 031f 	and.w	r3, r3, #31
34182d12:	2b0b      	cmp	r3, #11
34182d14:	d039      	beq.n	34182d8a <LL_ADC_SetChannelSingleDiff+0xfa>
34182d16:	68bb      	ldr	r3, [r7, #8]
34182d18:	f003 031f 	and.w	r3, r3, #31
34182d1c:	2b0c      	cmp	r3, #12
34182d1e:	d032      	beq.n	34182d86 <LL_ADC_SetChannelSingleDiff+0xf6>
34182d20:	68bb      	ldr	r3, [r7, #8]
34182d22:	f003 031f 	and.w	r3, r3, #31
34182d26:	2b0d      	cmp	r3, #13
34182d28:	d02b      	beq.n	34182d82 <LL_ADC_SetChannelSingleDiff+0xf2>
34182d2a:	68bb      	ldr	r3, [r7, #8]
34182d2c:	f003 031f 	and.w	r3, r3, #31
34182d30:	2b0e      	cmp	r3, #14
34182d32:	d024      	beq.n	34182d7e <LL_ADC_SetChannelSingleDiff+0xee>
34182d34:	68bb      	ldr	r3, [r7, #8]
34182d36:	f003 031f 	and.w	r3, r3, #31
34182d3a:	2b0f      	cmp	r3, #15
34182d3c:	d01d      	beq.n	34182d7a <LL_ADC_SetChannelSingleDiff+0xea>
34182d3e:	68bb      	ldr	r3, [r7, #8]
34182d40:	f003 031f 	and.w	r3, r3, #31
34182d44:	2b10      	cmp	r3, #16
34182d46:	d016      	beq.n	34182d76 <LL_ADC_SetChannelSingleDiff+0xe6>
34182d48:	68bb      	ldr	r3, [r7, #8]
34182d4a:	f003 031f 	and.w	r3, r3, #31
34182d4e:	2b11      	cmp	r3, #17
34182d50:	d00f      	beq.n	34182d72 <LL_ADC_SetChannelSingleDiff+0xe2>
34182d52:	68bb      	ldr	r3, [r7, #8]
34182d54:	f003 031f 	and.w	r3, r3, #31
34182d58:	2b12      	cmp	r3, #18
34182d5a:	d008      	beq.n	34182d6e <LL_ADC_SetChannelSingleDiff+0xde>
34182d5c:	68bb      	ldr	r3, [r7, #8]
34182d5e:	f003 031f 	and.w	r3, r3, #31
34182d62:	2b13      	cmp	r3, #19
34182d64:	d101      	bne.n	34182d6a <LL_ADC_SetChannelSingleDiff+0xda>
34182d66:	2313      	movs	r3, #19
34182d68:	e026      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182d6a:	2300      	movs	r3, #0
34182d6c:	e024      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182d6e:	2312      	movs	r3, #18
34182d70:	e022      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182d72:	2311      	movs	r3, #17
34182d74:	e020      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182d76:	2310      	movs	r3, #16
34182d78:	e01e      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182d7a:	230f      	movs	r3, #15
34182d7c:	e01c      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182d7e:	230e      	movs	r3, #14
34182d80:	e01a      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182d82:	230d      	movs	r3, #13
34182d84:	e018      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182d86:	230c      	movs	r3, #12
34182d88:	e016      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182d8a:	230b      	movs	r3, #11
34182d8c:	e014      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182d8e:	230a      	movs	r3, #10
34182d90:	e012      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182d92:	2309      	movs	r3, #9
34182d94:	e010      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182d96:	2308      	movs	r3, #8
34182d98:	e00e      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182d9a:	2307      	movs	r3, #7
34182d9c:	e00c      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182d9e:	2306      	movs	r3, #6
34182da0:	e00a      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182da2:	2305      	movs	r3, #5
34182da4:	e008      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182da6:	2304      	movs	r3, #4
34182da8:	e006      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182daa:	2303      	movs	r3, #3
34182dac:	e004      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182dae:	2302      	movs	r3, #2
34182db0:	e002      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182db2:	2301      	movs	r3, #1
34182db4:	e000      	b.n	34182db8 <LL_ADC_SetChannelSingleDiff+0x128>
34182db6:	2300      	movs	r3, #0
34182db8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(ADCx->DIFSEL,
34182dba:	68fb      	ldr	r3, [r7, #12]
34182dbc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
34182dc0:	490f      	ldr	r1, [pc, #60]	@ (34182e00 <LL_ADC_SetChannelSingleDiff+0x170>)
34182dc2:	697b      	ldr	r3, [r7, #20]
34182dc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
34182dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
34182dcc:	43db      	mvns	r3, r3
34182dce:	401a      	ands	r2, r3
34182dd0:	490b      	ldr	r1, [pc, #44]	@ (34182e00 <LL_ADC_SetChannelSingleDiff+0x170>)
34182dd2:	697b      	ldr	r3, [r7, #20]
34182dd4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
34182dd8:	687b      	ldr	r3, [r7, #4]
34182dda:	f003 0318 	and.w	r3, r3, #24
34182dde:	4809      	ldr	r0, [pc, #36]	@ (34182e04 <LL_ADC_SetChannelSingleDiff+0x174>)
34182de0:	fa20 f303 	lsr.w	r3, r0, r3
34182de4:	400b      	ands	r3, r1
34182de6:	f3c3 0313 	ubfx	r3, r3, #0, #20
34182dea:	431a      	orrs	r2, r3
34182dec:	68fb      	ldr	r3, [r7, #12]
34182dee:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             ADC_CHANNEL_LUT[iChannel] & ADC_SINGLEDIFF_CHANNEL_MASK,
             (ADC_CHANNEL_LUT[iChannel] & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
34182df2:	bf00      	nop
34182df4:	371c      	adds	r7, #28
34182df6:	46bd      	mov	sp, r7
34182df8:	f85d 7b04 	ldr.w	r7, [sp], #4
34182dfc:	4770      	bx	lr
34182dfe:	bf00      	nop
34182e00:	3419241c 	.word	0x3419241c
34182e04:	000fffff 	.word	0x000fffff

34182e08 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (0) On this STM32 series, parameter available only on analog watchdog instance: AWD1.\n
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC2, ADC3.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
34182e08:	b480      	push	{r7}
34182e0a:	b087      	sub	sp, #28
34182e0c:	af00      	add	r7, sp, #0
34182e0e:	60f8      	str	r0, [r7, #12]
34182e10:	60b9      	str	r1, [r7, #8]
34182e12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1,
34182e14:	68fb      	ldr	r3, [r7, #12]
34182e16:	330c      	adds	r3, #12
34182e18:	4618      	mov	r0, r3
34182e1a:	68bb      	ldr	r3, [r7, #8]
34182e1c:	0d1b      	lsrs	r3, r3, #20
34182e1e:	f003 0103 	and.w	r1, r3, #3
34182e22:	68bb      	ldr	r3, [r7, #8]
34182e24:	f003 0201 	and.w	r2, r3, #1
34182e28:	4613      	mov	r3, r2
34182e2a:	00db      	lsls	r3, r3, #3
34182e2c:	4413      	add	r3, r2
34182e2e:	009b      	lsls	r3, r3, #2
34182e30:	440b      	add	r3, r1
34182e32:	009b      	lsls	r3, r3, #2
34182e34:	4403      	add	r3, r0
34182e36:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK)
                                                * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
34182e38:	697b      	ldr	r3, [r7, #20]
34182e3a:	681a      	ldr	r2, [r3, #0]
34182e3c:	68bb      	ldr	r3, [r7, #8]
34182e3e:	f023 4302 	bic.w	r3, r3, #2181038080	@ 0x82000000
34182e42:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
34182e46:	43db      	mvns	r3, r3
34182e48:	401a      	ands	r2, r3
34182e4a:	6879      	ldr	r1, [r7, #4]
34182e4c:	68bb      	ldr	r3, [r7, #8]
34182e4e:	400b      	ands	r3, r1
34182e50:	431a      	orrs	r2, r3
34182e52:	697b      	ldr	r3, [r7, #20]
34182e54:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
34182e56:	bf00      	nop
34182e58:	371c      	adds	r7, #28
34182e5a:	46bd      	mov	sp, r7
34182e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182e60:	4770      	bx	lr
	...

34182e64 <LL_ADC_SetAnalogWDThresholds>:
  * @param  AWDThresholdValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdsHighLow,
                                                  uint32_t AWDThresholdValue)
{
34182e64:	b480      	push	{r7}
34182e66:	b087      	sub	sp, #28
34182e68:	af00      	add	r7, sp, #0
34182e6a:	60f8      	str	r0, [r7, #12]
34182e6c:	60b9      	str	r1, [r7, #8]
34182e6e:	607a      	str	r2, [r7, #4]
34182e70:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdValue" with bits         */
  /* position in register and register position depending on parameters       */
  /* "AWDThresholdsHighLow" and "AWDy".                                       */
  /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
  /* containing other bits reserved for other purpose.                        */
  if (AWDy == LL_ADC_AWD1)
34182e72:	68bb      	ldr	r3, [r7, #8]
34182e74:	4a12      	ldr	r2, [pc, #72]	@ (34182ec0 <LL_ADC_SetAnalogWDThresholds+0x5c>)
34182e76:	4293      	cmp	r3, r2
34182e78:	d107      	bne.n	34182e8a <LL_ADC_SetAnalogWDThresholds+0x26>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD1LTR, (AWDThresholdsHighLow));
34182e7a:	68fb      	ldr	r3, [r7, #12]
34182e7c:	33a8      	adds	r3, #168	@ 0xa8
34182e7e:	461a      	mov	r2, r3
34182e80:	687b      	ldr	r3, [r7, #4]
34182e82:	009b      	lsls	r3, r3, #2
34182e84:	4413      	add	r3, r2
34182e86:	617b      	str	r3, [r7, #20]
34182e88:	e00c      	b.n	34182ea4 <LL_ADC_SetAnalogWDThresholds+0x40>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD1LTR, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)
34182e8a:	68fb      	ldr	r3, [r7, #12]
34182e8c:	33a8      	adds	r3, #168	@ 0xa8
34182e8e:	4619      	mov	r1, r3
34182e90:	68bb      	ldr	r3, [r7, #8]
34182e92:	0d1b      	lsrs	r3, r3, #20
34182e94:	f003 0303 	and.w	r3, r3, #3
34182e98:	005a      	lsls	r2, r3, #1
34182e9a:	687b      	ldr	r3, [r7, #4]
34182e9c:	4413      	add	r3, r2
34182e9e:	009b      	lsls	r3, r3, #2
34182ea0:	440b      	add	r3, r1
34182ea2:	617b      	str	r3, [r7, #20]
                                                 >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
                                + (AWDThresholdsHighLow));
  }

  MODIFY_REG(*preg, ADC_AWD1LTR_LTR, AWDThresholdValue);
34182ea4:	697b      	ldr	r3, [r7, #20]
34182ea6:	681b      	ldr	r3, [r3, #0]
34182ea8:	0ddb      	lsrs	r3, r3, #23
34182eaa:	05db      	lsls	r3, r3, #23
34182eac:	683a      	ldr	r2, [r7, #0]
34182eae:	431a      	orrs	r2, r3
34182eb0:	697b      	ldr	r3, [r7, #20]
34182eb2:	601a      	str	r2, [r3, #0]
}
34182eb4:	bf00      	nop
34182eb6:	371c      	adds	r7, #28
34182eb8:	46bd      	mov	sp, r7
34182eba:	f85d 7b04 	ldr.w	r7, [sp], #4
34182ebe:	4770      	bx	lr
34182ec0:	7dc00000 	.word	0x7dc00000

34182ec4 <LL_ADC_SetAWDFilteringConfiguration>:
  *         @arg @ref LL_ADC_AWD_FILTERING_7SAMPLES
  *         @arg @ref LL_ADC_AWD_FILTERING_8SAMPLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAWDFilteringConfiguration(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t FilteringConfig)
{
34182ec4:	b480      	push	{r7}
34182ec6:	b085      	sub	sp, #20
34182ec8:	af00      	add	r7, sp, #0
34182eca:	60f8      	str	r0, [r7, #12]
34182ecc:	60b9      	str	r1, [r7, #8]
34182ece:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(AWDy);
  MODIFY_REG(ADCx->AWD1HTR, ADC_AWD1HTR_AWDFILT, FilteringConfig);
34182ed0:	68fb      	ldr	r3, [r7, #12]
34182ed2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
34182ed6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
34182eda:	687b      	ldr	r3, [r7, #4]
34182edc:	431a      	orrs	r2, r3
34182ede:	68fb      	ldr	r3, [r7, #12]
34182ee0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
34182ee4:	bf00      	nop
34182ee6:	3714      	adds	r7, #20
34182ee8:	46bd      	mov	sp, r7
34182eea:	f85d 7b04 	ldr.w	r7, [sp], #4
34182eee:	4770      	bx	lr

34182ef0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
34182ef0:	b480      	push	{r7}
34182ef2:	b083      	sub	sp, #12
34182ef4:	af00      	add	r7, sp, #0
34182ef6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
34182ef8:	687b      	ldr	r3, [r7, #4]
34182efa:	689b      	ldr	r3, [r3, #8]
34182efc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
34182f00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
34182f04:	687a      	ldr	r2, [r7, #4]
34182f06:	6093      	str	r3, [r2, #8]
}
34182f08:	bf00      	nop
34182f0a:	370c      	adds	r7, #12
34182f0c:	46bd      	mov	sp, r7
34182f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
34182f12:	4770      	bx	lr

34182f14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
34182f14:	b480      	push	{r7}
34182f16:	b083      	sub	sp, #12
34182f18:	af00      	add	r7, sp, #0
34182f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
34182f1c:	687b      	ldr	r3, [r7, #4]
34182f1e:	689b      	ldr	r3, [r3, #8]
34182f20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34182f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182f28:	d101      	bne.n	34182f2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
34182f2a:	2301      	movs	r3, #1
34182f2c:	e000      	b.n	34182f30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
34182f2e:	2300      	movs	r3, #0
}
34182f30:	4618      	mov	r0, r3
34182f32:	370c      	adds	r7, #12
34182f34:	46bd      	mov	sp, r7
34182f36:	f85d 7b04 	ldr.w	r7, [sp], #4
34182f3a:	4770      	bx	lr

34182f3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
34182f3c:	b480      	push	{r7}
34182f3e:	b083      	sub	sp, #12
34182f40:	af00      	add	r7, sp, #0
34182f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
34182f44:	687b      	ldr	r3, [r7, #4]
34182f46:	689b      	ldr	r3, [r3, #8]
34182f48:	f003 0301 	and.w	r3, r3, #1
34182f4c:	2b01      	cmp	r3, #1
34182f4e:	d101      	bne.n	34182f54 <LL_ADC_IsEnabled+0x18>
34182f50:	2301      	movs	r3, #1
34182f52:	e000      	b.n	34182f56 <LL_ADC_IsEnabled+0x1a>
34182f54:	2300      	movs	r3, #0
}
34182f56:	4618      	mov	r0, r3
34182f58:	370c      	adds	r7, #12
34182f5a:	46bd      	mov	sp, r7
34182f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182f60:	4770      	bx	lr

34182f62 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
34182f62:	b480      	push	{r7}
34182f64:	b083      	sub	sp, #12
34182f66:	af00      	add	r7, sp, #0
34182f68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
34182f6a:	687b      	ldr	r3, [r7, #4]
34182f6c:	689b      	ldr	r3, [r3, #8]
34182f6e:	f003 0304 	and.w	r3, r3, #4
34182f72:	2b04      	cmp	r3, #4
34182f74:	d101      	bne.n	34182f7a <LL_ADC_REG_IsConversionOngoing+0x18>
34182f76:	2301      	movs	r3, #1
34182f78:	e000      	b.n	34182f7c <LL_ADC_REG_IsConversionOngoing+0x1a>
34182f7a:	2300      	movs	r3, #0
}
34182f7c:	4618      	mov	r0, r3
34182f7e:	370c      	adds	r7, #12
34182f80:	46bd      	mov	sp, r7
34182f82:	f85d 7b04 	ldr.w	r7, [sp], #4
34182f86:	4770      	bx	lr

34182f88 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
34182f88:	b480      	push	{r7}
34182f8a:	b083      	sub	sp, #12
34182f8c:	af00      	add	r7, sp, #0
34182f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
34182f90:	687b      	ldr	r3, [r7, #4]
34182f92:	689b      	ldr	r3, [r3, #8]
34182f94:	f003 0308 	and.w	r3, r3, #8
34182f98:	2b08      	cmp	r3, #8
34182f9a:	d101      	bne.n	34182fa0 <LL_ADC_INJ_IsConversionOngoing+0x18>
34182f9c:	2301      	movs	r3, #1
34182f9e:	e000      	b.n	34182fa2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
34182fa0:	2300      	movs	r3, #0
}
34182fa2:	4618      	mov	r0, r3
34182fa4:	370c      	adds	r7, #12
34182fa6:	46bd      	mov	sp, r7
34182fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
34182fac:	4770      	bx	lr

34182fae <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
34182fae:	b480      	push	{r7}
34182fb0:	b083      	sub	sp, #12
34182fb2:	af00      	add	r7, sp, #0
34182fb4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
34182fb6:	687b      	ldr	r3, [r7, #4]
34182fb8:	2280      	movs	r2, #128	@ 0x80
34182fba:	601a      	str	r2, [r3, #0]
}
34182fbc:	bf00      	nop
34182fbe:	370c      	adds	r7, #12
34182fc0:	46bd      	mov	sp, r7
34182fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
34182fc6:	4770      	bx	lr

34182fc8 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
34182fc8:	b480      	push	{r7}
34182fca:	b083      	sub	sp, #12
34182fcc:	af00      	add	r7, sp, #0
34182fce:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
34182fd0:	687b      	ldr	r3, [r7, #4]
34182fd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
34182fd6:	601a      	str	r2, [r3, #0]
}
34182fd8:	bf00      	nop
34182fda:	370c      	adds	r7, #12
34182fdc:	46bd      	mov	sp, r7
34182fde:	f85d 7b04 	ldr.w	r7, [sp], #4
34182fe2:	4770      	bx	lr

34182fe4 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
34182fe4:	b480      	push	{r7}
34182fe6:	b083      	sub	sp, #12
34182fe8:	af00      	add	r7, sp, #0
34182fea:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
34182fec:	687b      	ldr	r3, [r7, #4]
34182fee:	f44f 7200 	mov.w	r2, #512	@ 0x200
34182ff2:	601a      	str	r2, [r3, #0]
}
34182ff4:	bf00      	nop
34182ff6:	370c      	adds	r7, #12
34182ff8:	46bd      	mov	sp, r7
34182ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
34182ffe:	4770      	bx	lr

34183000 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
34183000:	b480      	push	{r7}
34183002:	b083      	sub	sp, #12
34183004:	af00      	add	r7, sp, #0
34183006:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
34183008:	687b      	ldr	r3, [r7, #4]
3418300a:	685b      	ldr	r3, [r3, #4]
3418300c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
34183010:	687b      	ldr	r3, [r7, #4]
34183012:	605a      	str	r2, [r3, #4]
}
34183014:	bf00      	nop
34183016:	370c      	adds	r7, #12
34183018:	46bd      	mov	sp, r7
3418301a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418301e:	4770      	bx	lr

34183020 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
34183020:	b480      	push	{r7}
34183022:	b083      	sub	sp, #12
34183024:	af00      	add	r7, sp, #0
34183026:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
34183028:	687b      	ldr	r3, [r7, #4]
3418302a:	685b      	ldr	r3, [r3, #4]
3418302c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
34183030:	687b      	ldr	r3, [r7, #4]
34183032:	605a      	str	r2, [r3, #4]
}
34183034:	bf00      	nop
34183036:	370c      	adds	r7, #12
34183038:	46bd      	mov	sp, r7
3418303a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418303e:	4770      	bx	lr

34183040 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
34183040:	b480      	push	{r7}
34183042:	b083      	sub	sp, #12
34183044:	af00      	add	r7, sp, #0
34183046:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
34183048:	687b      	ldr	r3, [r7, #4]
3418304a:	685b      	ldr	r3, [r3, #4]
3418304c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
34183050:	687b      	ldr	r3, [r7, #4]
34183052:	605a      	str	r2, [r3, #4]
}
34183054:	bf00      	nop
34183056:	370c      	adds	r7, #12
34183058:	46bd      	mov	sp, r7
3418305a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418305e:	4770      	bx	lr

34183060 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
34183060:	b480      	push	{r7}
34183062:	b083      	sub	sp, #12
34183064:	af00      	add	r7, sp, #0
34183066:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
34183068:	687b      	ldr	r3, [r7, #4]
3418306a:	685b      	ldr	r3, [r3, #4]
3418306c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
34183070:	687b      	ldr	r3, [r7, #4]
34183072:	605a      	str	r2, [r3, #4]
}
34183074:	bf00      	nop
34183076:	370c      	adds	r7, #12
34183078:	46bd      	mov	sp, r7
3418307a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418307e:	4770      	bx	lr

34183080 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
34183080:	b480      	push	{r7}
34183082:	b083      	sub	sp, #12
34183084:	af00      	add	r7, sp, #0
34183086:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
34183088:	687b      	ldr	r3, [r7, #4]
3418308a:	685b      	ldr	r3, [r3, #4]
3418308c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34183090:	687b      	ldr	r3, [r7, #4]
34183092:	605a      	str	r2, [r3, #4]
}
34183094:	bf00      	nop
34183096:	370c      	adds	r7, #12
34183098:	46bd      	mov	sp, r7
3418309a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418309e:	4770      	bx	lr

341830a0 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
341830a0:	b480      	push	{r7}
341830a2:	b083      	sub	sp, #12
341830a4:	af00      	add	r7, sp, #0
341830a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
341830a8:	687b      	ldr	r3, [r7, #4]
341830aa:	685b      	ldr	r3, [r3, #4]
341830ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
341830b0:	687b      	ldr	r3, [r7, #4]
341830b2:	605a      	str	r2, [r3, #4]
}
341830b4:	bf00      	nop
341830b6:	370c      	adds	r7, #12
341830b8:	46bd      	mov	sp, r7
341830ba:	f85d 7b04 	ldr.w	r7, [sp], #4
341830be:	4770      	bx	lr

341830c0 <HAL_ADC_Init>:
  *         without disabling the other ADCs sharing the same ADC common instance.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
341830c0:	b580      	push	{r7, lr}
341830c2:	b088      	sub	sp, #32
341830c4:	af00      	add	r7, sp, #0
341830c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
341830c8:	2300      	movs	r3, #0
341830ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
341830cc:	687b      	ldr	r3, [r7, #4]
341830ce:	2b00      	cmp	r3, #0
341830d0:	d101      	bne.n	341830d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
341830d2:	2301      	movs	r3, #1
341830d4:	e108      	b.n	341832e8 <HAL_ADC_Init+0x228>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
341830d6:	687b      	ldr	r3, [r7, #4]
341830d8:	68db      	ldr	r3, [r3, #12]
341830da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
341830dc:	687b      	ldr	r3, [r7, #4]
341830de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
341830e0:	2b00      	cmp	r3, #0
341830e2:	d109      	bne.n	341830f8 <HAL_ADC_Init+0x38>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
341830e4:	6878      	ldr	r0, [r7, #4]
341830e6:	f7fe fb2f 	bl	34181748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
341830ea:	687b      	ldr	r3, [r7, #4]
341830ec:	2200      	movs	r2, #0
341830ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
341830f0:	687b      	ldr	r3, [r7, #4]
341830f2:	2200      	movs	r2, #0
341830f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* ADC must be disabled to set configuration bits                            */
  if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
341830f8:	687b      	ldr	r3, [r7, #4]
341830fa:	681b      	ldr	r3, [r3, #0]
341830fc:	4618      	mov	r0, r3
341830fe:	f7ff ff1d 	bl	34182f3c <LL_ADC_IsEnabled>
34183102:	4603      	mov	r3, r0
34183104:	2b00      	cmp	r3, #0
34183106:	d001      	beq.n	3418310c <HAL_ADC_Init+0x4c>
  {
    return HAL_ERROR;
34183108:	2301      	movs	r3, #1
3418310a:	e0ed      	b.n	341832e8 <HAL_ADC_Init+0x228>
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
3418310c:	687b      	ldr	r3, [r7, #4]
3418310e:	681b      	ldr	r3, [r3, #0]
34183110:	4618      	mov	r0, r3
34183112:	f7ff feff 	bl	34182f14 <LL_ADC_IsDeepPowerDownEnabled>
34183116:	4603      	mov	r3, r0
34183118:	2b00      	cmp	r3, #0
3418311a:	d004      	beq.n	34183126 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
3418311c:	687b      	ldr	r3, [r7, #4]
3418311e:	681b      	ldr	r3, [r3, #0]
34183120:	4618      	mov	r0, r3
34183122:	f7ff fee5 	bl	34182ef0 <LL_ADC_DisableDeepPowerDown>
  }
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
34183126:	687b      	ldr	r3, [r7, #4]
34183128:	681b      	ldr	r3, [r3, #0]
3418312a:	4618      	mov	r0, r3
3418312c:	f7ff ff19 	bl	34182f62 <LL_ADC_REG_IsConversionOngoing>
34183130:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
34183132:	687b      	ldr	r3, [r7, #4]
34183134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34183136:	f003 0310 	and.w	r3, r3, #16
3418313a:	2b00      	cmp	r3, #0
3418313c:	f040 80cb 	bne.w	341832d6 <HAL_ADC_Init+0x216>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
34183140:	697b      	ldr	r3, [r7, #20]
34183142:	2b00      	cmp	r3, #0
34183144:	f040 80c7 	bne.w	341832d6 <HAL_ADC_Init+0x216>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
34183148:	687b      	ldr	r3, [r7, #4]
3418314a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418314c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
34183150:	f043 0202 	orr.w	r2, r3, #2
34183154:	687b      	ldr	r3, [r7, #4]
34183156:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
34183158:	687b      	ldr	r3, [r7, #4]
3418315a:	7d5b      	ldrb	r3, [r3, #21]
3418315c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
3418315e:	687b      	ldr	r3, [r7, #4]
34183160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
34183162:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
34183164:	687b      	ldr	r3, [r7, #4]
34183166:	685b      	ldr	r3, [r3, #4]
                hadc->Init.Overrun                                                    |
34183168:	431a      	orrs	r2, r3
                ADC_CFGR1_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
3418316a:	687b      	ldr	r3, [r7, #4]
3418316c:	7f1b      	ldrb	r3, [r3, #28]
3418316e:	041b      	lsls	r3, r3, #16
    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
34183170:	4313      	orrs	r3, r2
34183172:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
34183174:	687b      	ldr	r3, [r7, #4]
34183176:	7f1b      	ldrb	r3, [r3, #28]
34183178:	2b01      	cmp	r3, #1
3418317a:	d106      	bne.n	3418318a <HAL_ADC_Init+0xca>
    {
      tmpCFGR1 |= ADC_CFGR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
3418317c:	687b      	ldr	r3, [r7, #4]
3418317e:	6a1b      	ldr	r3, [r3, #32]
34183180:	3b01      	subs	r3, #1
34183182:	045b      	lsls	r3, r3, #17
34183184:	69ba      	ldr	r2, [r7, #24]
34183186:	4313      	orrs	r3, r2
34183188:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
3418318a:	687b      	ldr	r3, [r7, #4]
3418318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418318e:	2b00      	cmp	r3, #0
34183190:	d009      	beq.n	341831a6 <HAL_ADC_Init+0xe6>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL)
34183192:	687b      	ldr	r3, [r7, #4]
34183194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183196:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
3418319a:	687b      	ldr	r3, [r7, #4]
3418319c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418319e:	4313      	orrs	r3, r2
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL)
341831a0:	69ba      	ldr	r2, [r7, #24]
341831a2:	4313      	orrs	r3, r2
341831a4:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_FIELDS_1, tmpCFGR1);
341831a6:	687b      	ldr	r3, [r7, #4]
341831a8:	681b      	ldr	r3, [r3, #0]
341831aa:	68da      	ldr	r2, [r3, #12]
341831ac:	4b50      	ldr	r3, [pc, #320]	@ (341832f0 <HAL_ADC_Init+0x230>)
341831ae:	4013      	ands	r3, r2
341831b0:	687a      	ldr	r2, [r7, #4]
341831b2:	6812      	ldr	r2, [r2, #0]
341831b4:	69b9      	ldr	r1, [r7, #24]
341831b6:	430b      	orrs	r3, r1
341831b8:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
341831ba:	687b      	ldr	r3, [r7, #4]
341831bc:	681b      	ldr	r3, [r3, #0]
341831be:	691b      	ldr	r3, [r3, #16]
341831c0:	f423 4120 	bic.w	r1, r3, #40960	@ 0xa000
341831c4:	687b      	ldr	r3, [r7, #4]
341831c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
341831c8:	687b      	ldr	r3, [r7, #4]
341831ca:	681b      	ldr	r3, [r3, #0]
341831cc:	430a      	orrs	r2, r1
341831ce:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
341831d0:	687b      	ldr	r3, [r7, #4]
341831d2:	681b      	ldr	r3, [r3, #0]
341831d4:	4618      	mov	r0, r3
341831d6:	f7ff fec4 	bl	34182f62 <LL_ADC_REG_IsConversionOngoing>
341831da:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
341831dc:	687b      	ldr	r3, [r7, #4]
341831de:	681b      	ldr	r3, [r3, #0]
341831e0:	4618      	mov	r0, r3
341831e2:	f7ff fed1 	bl	34182f88 <LL_ADC_INJ_IsConversionOngoing>
341831e6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
341831e8:	693b      	ldr	r3, [r7, #16]
341831ea:	2b00      	cmp	r3, #0
341831ec:	d151      	bne.n	34183292 <HAL_ADC_Init+0x1d2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
341831ee:	68fb      	ldr	r3, [r7, #12]
341831f0:	2b00      	cmp	r3, #0
341831f2:	d14e      	bne.n	34183292 <HAL_ADC_Init+0x1d2>
       )
    {
      tmpCFGR1 = (
                   ADC_CFGR1_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
341831f4:	687b      	ldr	r3, [r7, #4]
341831f6:	7d1b      	ldrb	r3, [r3, #20]
341831f8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
341831fa:	687b      	ldr	r3, [r7, #4]
341831fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR1 = (
341831fe:	4313      	orrs	r3, r2
34183200:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_FIELDS_2, tmpCFGR1);
34183202:	687b      	ldr	r3, [r7, #4]
34183204:	681b      	ldr	r3, [r3, #0]
34183206:	68db      	ldr	r3, [r3, #12]
34183208:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
3418320c:	f023 0303 	bic.w	r3, r3, #3
34183210:	687a      	ldr	r2, [r7, #4]
34183212:	6812      	ldr	r2, [r2, #0]
34183214:	69b9      	ldr	r1, [r7, #24]
34183216:	430b      	orrs	r3, r1
34183218:	60d3      	str	r3, [r2, #12]

      LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
3418321a:	687b      	ldr	r3, [r7, #4]
3418321c:	681a      	ldr	r2, [r3, #0]
3418321e:	687b      	ldr	r3, [r7, #4]
34183220:	689b      	ldr	r3, [r3, #8]
34183222:	4619      	mov	r1, r3
34183224:	4610      	mov	r0, r2
34183226:	f7ff fc07 	bl	34182a38 <LL_ADC_SetGainCompensation>

      if (hadc->Init.OversamplingMode == ENABLE)
3418322a:	687b      	ldr	r3, [r7, #4]
3418322c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
34183230:	2b01      	cmp	r3, #1
34183232:	d11b      	bne.n	3418326c <HAL_ADC_Init+0x1ac>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
34183234:	687b      	ldr	r3, [r7, #4]
34183236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183238:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
3418323a:	687b      	ldr	r3, [r7, #4]
3418323c:	681b      	ldr	r3, [r3, #0]
3418323e:	691a      	ldr	r2, [r3, #16]
34183240:	4b2c      	ldr	r3, [pc, #176]	@ (341832f4 <HAL_ADC_Init+0x234>)
34183242:	4013      	ands	r3, r2
34183244:	687a      	ldr	r2, [r7, #4]
34183246:	6c12      	ldr	r2, [r2, #64]	@ 0x40
34183248:	3a01      	subs	r2, #1
3418324a:	0411      	lsls	r1, r2, #16
3418324c:	687a      	ldr	r2, [r7, #4]
3418324e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
34183250:	4311      	orrs	r1, r2
34183252:	687a      	ldr	r2, [r7, #4]
34183254:	6c92      	ldr	r2, [r2, #72]	@ 0x48
34183256:	4311      	orrs	r1, r2
34183258:	687a      	ldr	r2, [r7, #4]
3418325a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
3418325c:	430a      	orrs	r2, r1
3418325e:	431a      	orrs	r2, r3
34183260:	687b      	ldr	r3, [r7, #4]
34183262:	681b      	ldr	r3, [r3, #0]
34183264:	f042 0201 	orr.w	r2, r2, #1
34183268:	611a      	str	r2, [r3, #16]
3418326a:	e007      	b.n	3418327c <HAL_ADC_Init+0x1bc>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
3418326c:	687b      	ldr	r3, [r7, #4]
3418326e:	681b      	ldr	r3, [r3, #0]
34183270:	691a      	ldr	r2, [r3, #16]
34183272:	687b      	ldr	r3, [r7, #4]
34183274:	681b      	ldr	r3, [r3, #0]
34183276:	f022 0201 	bic.w	r2, r2, #1
3418327a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
3418327c:	687b      	ldr	r3, [r7, #4]
3418327e:	681b      	ldr	r3, [r3, #0]
34183280:	691b      	ldr	r3, [r3, #16]
34183282:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
34183286:	687b      	ldr	r3, [r7, #4]
34183288:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418328a:	687b      	ldr	r3, [r7, #4]
3418328c:	681b      	ldr	r3, [r3, #0]
3418328e:	430a      	orrs	r2, r1
34183290:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
34183292:	687b      	ldr	r3, [r7, #4]
34183294:	68db      	ldr	r3, [r3, #12]
34183296:	2b01      	cmp	r3, #1
34183298:	d10c      	bne.n	341832b4 <HAL_ADC_Init+0x1f4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
3418329a:	687b      	ldr	r3, [r7, #4]
3418329c:	681b      	ldr	r3, [r3, #0]
3418329e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
341832a0:	f023 010f 	bic.w	r1, r3, #15
341832a4:	687b      	ldr	r3, [r7, #4]
341832a6:	699b      	ldr	r3, [r3, #24]
341832a8:	1e5a      	subs	r2, r3, #1
341832aa:	687b      	ldr	r3, [r7, #4]
341832ac:	681b      	ldr	r3, [r3, #0]
341832ae:	430a      	orrs	r2, r1
341832b0:	631a      	str	r2, [r3, #48]	@ 0x30
341832b2:	e007      	b.n	341832c4 <HAL_ADC_Init+0x204>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
341832b4:	687b      	ldr	r3, [r7, #4]
341832b6:	681b      	ldr	r3, [r3, #0]
341832b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
341832ba:	687b      	ldr	r3, [r7, #4]
341832bc:	681b      	ldr	r3, [r3, #0]
341832be:	f022 020f 	bic.w	r2, r2, #15
341832c2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
341832c4:	687b      	ldr	r3, [r7, #4]
341832c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
341832c8:	f023 0303 	bic.w	r3, r3, #3
341832cc:	f043 0201 	orr.w	r2, r3, #1
341832d0:	687b      	ldr	r3, [r7, #4]
341832d2:	659a      	str	r2, [r3, #88]	@ 0x58
341832d4:	e007      	b.n	341832e6 <HAL_ADC_Init+0x226>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
341832d6:	687b      	ldr	r3, [r7, #4]
341832d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
341832da:	f043 0210 	orr.w	r2, r3, #16
341832de:	687b      	ldr	r3, [r7, #4]
341832e0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
341832e2:	2301      	movs	r3, #1
341832e4:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
341832e6:	7ffb      	ldrb	r3, [r7, #31]
}
341832e8:	4618      	mov	r0, r3
341832ea:	3720      	adds	r7, #32
341832ec:	46bd      	mov	sp, r7
341832ee:	bd80      	pop	{r7, pc}
341832f0:	fff0c013 	.word	0xfff0c013
341832f4:	fc00f81e 	.word	0xfc00f81e

341832f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
341832f8:	b590      	push	{r4, r7, lr}
341832fa:	b089      	sub	sp, #36	@ 0x24
341832fc:	af00      	add	r7, sp, #0
341832fe:	6078      	str	r0, [r7, #4]
34183300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
34183302:	2300      	movs	r3, #0
34183304:	77fb      	strb	r3, [r7, #31]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* ADC must be disabled to set configuration bits                           */
  if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
34183306:	687b      	ldr	r3, [r7, #4]
34183308:	681b      	ldr	r3, [r3, #0]
3418330a:	4618      	mov	r0, r3
3418330c:	f7ff fe16 	bl	34182f3c <LL_ADC_IsEnabled>
34183310:	4603      	mov	r3, r0
34183312:	2b00      	cmp	r3, #0
34183314:	d001      	beq.n	3418331a <HAL_ADC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
34183316:	2301      	movs	r3, #1
34183318:	e1db      	b.n	341836d2 <HAL_ADC_ConfigChannel+0x3da>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
3418331a:	687b      	ldr	r3, [r7, #4]
3418331c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34183320:	2b01      	cmp	r3, #1
34183322:	d101      	bne.n	34183328 <HAL_ADC_ConfigChannel+0x30>
34183324:	2302      	movs	r3, #2
34183326:	e1d4      	b.n	341836d2 <HAL_ADC_ConfigChannel+0x3da>
34183328:	687b      	ldr	r3, [r7, #4]
3418332a:	2201      	movs	r2, #1
3418332c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
34183330:	687b      	ldr	r3, [r7, #4]
34183332:	681b      	ldr	r3, [r3, #0]
34183334:	4618      	mov	r0, r3
34183336:	f7ff fe14 	bl	34182f62 <LL_ADC_REG_IsConversionOngoing>
3418333a:	4603      	mov	r3, r0
3418333c:	2b00      	cmp	r3, #0
3418333e:	f040 81bb 	bne.w	341836b8 <HAL_ADC_ConfigChannel+0x3c0>
  {
    /* ADC channels preselection */
    LL_ADC_SetChannelPreselection(hadc->Instance, pConfig->Channel);
34183342:	687b      	ldr	r3, [r7, #4]
34183344:	681a      	ldr	r2, [r3, #0]
34183346:	683b      	ldr	r3, [r7, #0]
34183348:	681b      	ldr	r3, [r3, #0]
3418334a:	4619      	mov	r1, r3
3418334c:	4610      	mov	r0, r2
3418334e:	f7ff fbc1 	bl	34182ad4 <LL_ADC_SetChannelPreselection>

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
34183352:	687b      	ldr	r3, [r7, #4]
34183354:	6818      	ldr	r0, [r3, #0]
34183356:	683b      	ldr	r3, [r7, #0]
34183358:	6859      	ldr	r1, [r3, #4]
3418335a:	683b      	ldr	r3, [r7, #0]
3418335c:	681b      	ldr	r3, [r3, #0]
3418335e:	461a      	mov	r2, r3
34183360:	f7ff fb8d 	bl	34182a7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
34183364:	687b      	ldr	r3, [r7, #4]
34183366:	681b      	ldr	r3, [r3, #0]
34183368:	4618      	mov	r0, r3
3418336a:	f7ff fdfa 	bl	34182f62 <LL_ADC_REG_IsConversionOngoing>
3418336e:	61b8      	str	r0, [r7, #24]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
34183370:	687b      	ldr	r3, [r7, #4]
34183372:	681b      	ldr	r3, [r3, #0]
34183374:	4618      	mov	r0, r3
34183376:	f7ff fe07 	bl	34182f88 <LL_ADC_INJ_IsConversionOngoing>
3418337a:	6178      	str	r0, [r7, #20]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
3418337c:	69bb      	ldr	r3, [r7, #24]
3418337e:	2b00      	cmp	r3, #0
34183380:	f040 80aa 	bne.w	341834d8 <HAL_ADC_ConfigChannel+0x1e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
34183384:	697b      	ldr	r3, [r7, #20]
34183386:	2b00      	cmp	r3, #0
34183388:	f040 80a6 	bne.w	341834d8 <HAL_ADC_ConfigChannel+0x1e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
3418338c:	687b      	ldr	r3, [r7, #4]
3418338e:	6818      	ldr	r0, [r3, #0]
34183390:	683b      	ldr	r3, [r7, #0]
34183392:	6819      	ldr	r1, [r3, #0]
34183394:	683b      	ldr	r3, [r7, #0]
34183396:	689b      	ldr	r3, [r3, #8]
34183398:	461a      	mov	r2, r3
3418339a:	f7ff fbb3 	bl	34182b04 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
3418339e:	683b      	ldr	r3, [r7, #0]
341833a0:	695a      	ldr	r2, [r3, #20]
341833a2:	687b      	ldr	r3, [r7, #4]
341833a4:	681b      	ldr	r3, [r3, #0]
341833a6:	68db      	ldr	r3, [r3, #12]
341833a8:	089b      	lsrs	r3, r3, #2
341833aa:	f003 0303 	and.w	r3, r3, #3
341833ae:	005b      	lsls	r3, r3, #1
341833b0:	fa02 f303 	lsl.w	r3, r2, r3
341833b4:	613b      	str	r3, [r7, #16]

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
341833b6:	683b      	ldr	r3, [r7, #0]
341833b8:	691b      	ldr	r3, [r3, #16]
341833ba:	2b04      	cmp	r3, #4
341833bc:	d038      	beq.n	34183430 <HAL_ADC_ConfigChannel+0x138>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffsetChannel(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel);
341833be:	687b      	ldr	r3, [r7, #4]
341833c0:	6818      	ldr	r0, [r3, #0]
341833c2:	683b      	ldr	r3, [r7, #0]
341833c4:	6919      	ldr	r1, [r3, #16]
341833c6:	683b      	ldr	r3, [r7, #0]
341833c8:	681b      	ldr	r3, [r3, #0]
341833ca:	461a      	mov	r2, r3
341833cc:	f7ff fa95 	bl	341828fa <LL_ADC_SetOffsetChannel>
        LL_ADC_SetOffsetLevel(hadc->Instance, pConfig->OffsetNumber, tmpOffsetShifted);
341833d0:	687b      	ldr	r3, [r7, #4]
341833d2:	6818      	ldr	r0, [r3, #0]
341833d4:	683b      	ldr	r3, [r7, #0]
341833d6:	691b      	ldr	r3, [r3, #16]
341833d8:	693a      	ldr	r2, [r7, #16]
341833da:	4619      	mov	r1, r3
341833dc:	f7ff fac0 	bl	34182960 <LL_ADC_SetOffsetLevel>
        /* Signed and unsigned saturation cannot be set at the same time */
        assert_param(!((pConfig->OffsetSignedSaturation == ENABLE) && (pConfig->OffsetSaturation == ENABLE)));


        /* Set ADC offset sign */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
341833e0:	687b      	ldr	r3, [r7, #4]
341833e2:	6818      	ldr	r0, [r3, #0]
341833e4:	683b      	ldr	r3, [r7, #0]
341833e6:	6919      	ldr	r1, [r3, #16]
341833e8:	683b      	ldr	r3, [r7, #0]
341833ea:	69db      	ldr	r3, [r3, #28]
341833ec:	461a      	mov	r2, r3
341833ee:	f7ff fad2 	bl	34182996 <LL_ADC_SetOffsetSign>
        /* Set ADC offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,      \
341833f2:	687b      	ldr	r3, [r7, #4]
341833f4:	6818      	ldr	r0, [r3, #0]
341833f6:	683b      	ldr	r3, [r7, #0]
341833f8:	6919      	ldr	r1, [r3, #16]
                                         (pConfig->OffsetSignedSaturation == ENABLE) \
341833fa:	683b      	ldr	r3, [r7, #0]
341833fc:	7e1b      	ldrb	r3, [r3, #24]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,      \
341833fe:	2b01      	cmp	r3, #1
34183400:	d102      	bne.n	34183408 <HAL_ADC_ConfigChannel+0x110>
34183402:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34183406:	e000      	b.n	3418340a <HAL_ADC_ConfigChannel+0x112>
34183408:	2300      	movs	r3, #0
3418340a:	461a      	mov	r2, r3
3418340c:	f7ff fade 	bl	341829cc <LL_ADC_SetOffsetSignedSaturation>
                                         ? LL_ADC_OFFSET_SIGNED_SAT_ENABLE           \
                                         : LL_ADC_OFFSET_SIGNED_SAT_DISABLE);
        /* Set ADC offset unsigned saturation */
        LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,    \
34183410:	687b      	ldr	r3, [r7, #4]
34183412:	6818      	ldr	r0, [r3, #0]
34183414:	683b      	ldr	r3, [r7, #0]
34183416:	6919      	ldr	r1, [r3, #16]
                                           (pConfig->OffsetSaturation == ENABLE)     \
34183418:	683b      	ldr	r3, [r7, #0]
3418341a:	7e5b      	ldrb	r3, [r3, #25]
        LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,    \
3418341c:	2b01      	cmp	r3, #1
3418341e:	d102      	bne.n	34183426 <HAL_ADC_ConfigChannel+0x12e>
34183420:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
34183424:	e000      	b.n	34183428 <HAL_ADC_ConfigChannel+0x130>
34183426:	2300      	movs	r3, #0
34183428:	461a      	mov	r2, r3
3418342a:	f7ff faea 	bl	34182a02 <LL_ADC_SetOffsetUnsignedSaturation>
3418342e:	e053      	b.n	341834d8 <HAL_ADC_ConfigChannel+0x1e0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted.
           If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
34183430:	687b      	ldr	r3, [r7, #4]
34183432:	681b      	ldr	r3, [r3, #0]
34183434:	2100      	movs	r1, #0
34183436:	4618      	mov	r0, r3
34183438:	f7ff fa7b 	bl	34182932 <LL_ADC_GetOffsetChannel>
3418343c:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
3418343e:	683b      	ldr	r3, [r7, #0]
34183440:	681b      	ldr	r3, [r3, #0]
34183442:	4053      	eors	r3, r2
34183444:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
34183448:	2b00      	cmp	r3, #0
3418344a:	d106      	bne.n	3418345a <HAL_ADC_ConfigChannel+0x162>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_1, 0UL);
3418344c:	687b      	ldr	r3, [r7, #4]
3418344e:	681b      	ldr	r3, [r3, #0]
34183450:	2200      	movs	r2, #0
34183452:	2100      	movs	r1, #0
34183454:	4618      	mov	r0, r3
34183456:	f7ff fa83 	bl	34182960 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
3418345a:	687b      	ldr	r3, [r7, #4]
3418345c:	681b      	ldr	r3, [r3, #0]
3418345e:	2101      	movs	r1, #1
34183460:	4618      	mov	r0, r3
34183462:	f7ff fa66 	bl	34182932 <LL_ADC_GetOffsetChannel>
34183466:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
34183468:	683b      	ldr	r3, [r7, #0]
3418346a:	681b      	ldr	r3, [r3, #0]
3418346c:	4053      	eors	r3, r2
3418346e:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
34183472:	2b00      	cmp	r3, #0
34183474:	d106      	bne.n	34183484 <HAL_ADC_ConfigChannel+0x18c>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_2, 0UL);
34183476:	687b      	ldr	r3, [r7, #4]
34183478:	681b      	ldr	r3, [r3, #0]
3418347a:	2200      	movs	r2, #0
3418347c:	2101      	movs	r1, #1
3418347e:	4618      	mov	r0, r3
34183480:	f7ff fa6e 	bl	34182960 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
34183484:	687b      	ldr	r3, [r7, #4]
34183486:	681b      	ldr	r3, [r3, #0]
34183488:	2102      	movs	r1, #2
3418348a:	4618      	mov	r0, r3
3418348c:	f7ff fa51 	bl	34182932 <LL_ADC_GetOffsetChannel>
34183490:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
34183492:	683b      	ldr	r3, [r7, #0]
34183494:	681b      	ldr	r3, [r3, #0]
34183496:	4053      	eors	r3, r2
34183498:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
3418349c:	2b00      	cmp	r3, #0
3418349e:	d106      	bne.n	341834ae <HAL_ADC_ConfigChannel+0x1b6>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_3, 0UL);
341834a0:	687b      	ldr	r3, [r7, #4]
341834a2:	681b      	ldr	r3, [r3, #0]
341834a4:	2200      	movs	r2, #0
341834a6:	2102      	movs	r1, #2
341834a8:	4618      	mov	r0, r3
341834aa:	f7ff fa59 	bl	34182960 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
341834ae:	687b      	ldr	r3, [r7, #4]
341834b0:	681b      	ldr	r3, [r3, #0]
341834b2:	2103      	movs	r1, #3
341834b4:	4618      	mov	r0, r3
341834b6:	f7ff fa3c 	bl	34182932 <LL_ADC_GetOffsetChannel>
341834ba:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
341834bc:	683b      	ldr	r3, [r7, #0]
341834be:	681b      	ldr	r3, [r3, #0]
341834c0:	4053      	eors	r3, r2
341834c2:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
341834c6:	2b00      	cmp	r3, #0
341834c8:	d106      	bne.n	341834d8 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_4, 0UL);
341834ca:	687b      	ldr	r3, [r7, #4]
341834cc:	681b      	ldr	r3, [r3, #0]
341834ce:	2200      	movs	r2, #0
341834d0:	2103      	movs	r1, #3
341834d2:	4618      	mov	r0, r3
341834d4:	f7ff fa44 	bl	34182960 <LL_ADC_SetOffsetLevel>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
341834d8:	687b      	ldr	r3, [r7, #4]
341834da:	681b      	ldr	r3, [r3, #0]
341834dc:	4618      	mov	r0, r3
341834de:	f7ff fd2d 	bl	34182f3c <LL_ADC_IsEnabled>
341834e2:	4603      	mov	r3, r0
341834e4:	2b00      	cmp	r3, #0
341834e6:	f040 8090 	bne.w	3418360a <HAL_ADC_ConfigChannel+0x312>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
341834ea:	687b      	ldr	r3, [r7, #4]
341834ec:	6818      	ldr	r0, [r3, #0]
341834ee:	683b      	ldr	r3, [r7, #0]
341834f0:	6819      	ldr	r1, [r3, #0]
341834f2:	683b      	ldr	r3, [r7, #0]
341834f4:	68db      	ldr	r3, [r3, #12]
341834f6:	461a      	mov	r2, r3
341834f8:	f7ff fbca 	bl	34182c90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
341834fc:	683b      	ldr	r3, [r7, #0]
341834fe:	68db      	ldr	r3, [r3, #12]
34183500:	4a76      	ldr	r2, [pc, #472]	@ (341836dc <HAL_ADC_ConfigChannel+0x3e4>)
34183502:	4293      	cmp	r3, r2
34183504:	f040 8081 	bne.w	3418360a <HAL_ADC_ConfigChannel+0x312>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance,
34183508:	687b      	ldr	r3, [r7, #4]
3418350a:	681a      	ldr	r2, [r3, #0]
                                      __HAL_ADC_CHANNEL_DIFF_NEG_INPUT(hadc, pConfig->Channel));
3418350c:	683b      	ldr	r3, [r7, #0]
3418350e:	681b      	ldr	r3, [r3, #0]
34183510:	2b00      	cmp	r3, #0
34183512:	d05a      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
34183514:	683b      	ldr	r3, [r7, #0]
34183516:	681b      	ldr	r3, [r3, #0]
34183518:	2b01      	cmp	r3, #1
3418351a:	d056      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
3418351c:	683b      	ldr	r3, [r7, #0]
3418351e:	681b      	ldr	r3, [r3, #0]
34183520:	2b02      	cmp	r3, #2
34183522:	d052      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
34183524:	683b      	ldr	r3, [r7, #0]
34183526:	681b      	ldr	r3, [r3, #0]
34183528:	2b03      	cmp	r3, #3
3418352a:	d04e      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
3418352c:	683b      	ldr	r3, [r7, #0]
3418352e:	681b      	ldr	r3, [r3, #0]
34183530:	2b04      	cmp	r3, #4
34183532:	d04a      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
34183534:	683b      	ldr	r3, [r7, #0]
34183536:	681b      	ldr	r3, [r3, #0]
34183538:	2b05      	cmp	r3, #5
3418353a:	d046      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
3418353c:	683b      	ldr	r3, [r7, #0]
3418353e:	681b      	ldr	r3, [r3, #0]
34183540:	2b06      	cmp	r3, #6
34183542:	d042      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
34183544:	683b      	ldr	r3, [r7, #0]
34183546:	681b      	ldr	r3, [r3, #0]
34183548:	2b07      	cmp	r3, #7
3418354a:	d03e      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
3418354c:	683b      	ldr	r3, [r7, #0]
3418354e:	681b      	ldr	r3, [r3, #0]
34183550:	2b08      	cmp	r3, #8
34183552:	d03a      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
34183554:	683b      	ldr	r3, [r7, #0]
34183556:	681b      	ldr	r3, [r3, #0]
34183558:	2b09      	cmp	r3, #9
3418355a:	d036      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
3418355c:	683b      	ldr	r3, [r7, #0]
3418355e:	681b      	ldr	r3, [r3, #0]
34183560:	2b0a      	cmp	r3, #10
34183562:	d032      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
34183564:	683b      	ldr	r3, [r7, #0]
34183566:	681b      	ldr	r3, [r3, #0]
34183568:	2b0b      	cmp	r3, #11
3418356a:	d02e      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
3418356c:	683b      	ldr	r3, [r7, #0]
3418356e:	681b      	ldr	r3, [r3, #0]
34183570:	2b0c      	cmp	r3, #12
34183572:	d02a      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
34183574:	683b      	ldr	r3, [r7, #0]
34183576:	681b      	ldr	r3, [r3, #0]
34183578:	2b0d      	cmp	r3, #13
3418357a:	d026      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
3418357c:	683b      	ldr	r3, [r7, #0]
3418357e:	681b      	ldr	r3, [r3, #0]
34183580:	2b0e      	cmp	r3, #14
34183582:	d022      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
34183584:	683b      	ldr	r3, [r7, #0]
34183586:	681b      	ldr	r3, [r3, #0]
34183588:	2b0f      	cmp	r3, #15
3418358a:	d01e      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
3418358c:	683b      	ldr	r3, [r7, #0]
3418358e:	681b      	ldr	r3, [r3, #0]
34183590:	2b10      	cmp	r3, #16
34183592:	d01a      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
34183594:	683b      	ldr	r3, [r7, #0]
34183596:	681b      	ldr	r3, [r3, #0]
34183598:	2b11      	cmp	r3, #17
3418359a:	d016      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
3418359c:	683b      	ldr	r3, [r7, #0]
3418359e:	681b      	ldr	r3, [r3, #0]
341835a0:	2b12      	cmp	r3, #18
341835a2:	d012      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
341835a4:	683b      	ldr	r3, [r7, #0]
341835a6:	681b      	ldr	r3, [r3, #0]
341835a8:	2b13      	cmp	r3, #19
341835aa:	d00e      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
341835ac:	683b      	ldr	r3, [r7, #0]
341835ae:	681b      	ldr	r3, [r3, #0]
341835b0:	494b      	ldr	r1, [pc, #300]	@ (341836e0 <HAL_ADC_ConfigChannel+0x3e8>)
341835b2:	428b      	cmp	r3, r1
341835b4:	d009      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
341835b6:	683b      	ldr	r3, [r7, #0]
341835b8:	681b      	ldr	r3, [r3, #0]
341835ba:	494a      	ldr	r1, [pc, #296]	@ (341836e4 <HAL_ADC_ConfigChannel+0x3ec>)
341835bc:	428b      	cmp	r3, r1
341835be:	d004      	beq.n	341835ca <HAL_ADC_ConfigChannel+0x2d2>
341835c0:	683b      	ldr	r3, [r7, #0]
341835c2:	681b      	ldr	r3, [r3, #0]
341835c4:	4948      	ldr	r1, [pc, #288]	@ (341836e8 <HAL_ADC_ConfigChannel+0x3f0>)
341835c6:	428b      	cmp	r3, r1
341835c8:	d101      	bne.n	341835ce <HAL_ADC_ConfigChannel+0x2d6>
341835ca:	2301      	movs	r3, #1
341835cc:	e000      	b.n	341835d0 <HAL_ADC_ConfigChannel+0x2d8>
341835ce:	2300      	movs	r3, #0
        LL_ADC_SetChannelPreselection(hadc->Instance,
341835d0:	2b00      	cmp	r3, #0
341835d2:	d015      	beq.n	34183600 <HAL_ADC_ConfigChannel+0x308>
                                      __HAL_ADC_CHANNEL_DIFF_NEG_INPUT(hadc, pConfig->Channel));
341835d4:	687b      	ldr	r3, [r7, #4]
341835d6:	681b      	ldr	r3, [r3, #0]
341835d8:	4944      	ldr	r1, [pc, #272]	@ (341836ec <HAL_ADC_ConfigChannel+0x3f4>)
341835da:	428b      	cmp	r3, r1
341835dc:	bf14      	ite	ne
341835de:	2301      	movne	r3, #1
341835e0:	2300      	moveq	r3, #0
341835e2:	b2db      	uxtb	r3, r3
341835e4:	4618      	mov	r0, r3
341835e6:	683b      	ldr	r3, [r7, #0]
341835e8:	681b      	ldr	r3, [r3, #0]
341835ea:	b2db      	uxtb	r3, r3
341835ec:	461c      	mov	r4, r3
341835ee:	4940      	ldr	r1, [pc, #256]	@ (341836f0 <HAL_ADC_ConfigChannel+0x3f8>)
341835f0:	4603      	mov	r3, r0
341835f2:	009b      	lsls	r3, r3, #2
341835f4:	4403      	add	r3, r0
341835f6:	009b      	lsls	r3, r3, #2
341835f8:	440b      	add	r3, r1
341835fa:	4423      	add	r3, r4
341835fc:	781b      	ldrb	r3, [r3, #0]
341835fe:	e000      	b.n	34183602 <HAL_ADC_ConfigChannel+0x30a>
        LL_ADC_SetChannelPreselection(hadc->Instance,
34183600:	23ff      	movs	r3, #255	@ 0xff
34183602:	4619      	mov	r1, r3
34183604:	4610      	mov	r0, r2
34183606:	f7ff fa65 	bl	34182ad4 <LL_ADC_SetChannelPreselection>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
3418360a:	683b      	ldr	r3, [r7, #0]
3418360c:	681b      	ldr	r3, [r3, #0]
3418360e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
34183612:	2b00      	cmp	r3, #0
34183614:	d058      	beq.n	341836c8 <HAL_ADC_ConfigChannel+0x3d0>
    {
      tmp_config_common_path_internal_channel =
        LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
34183616:	4837      	ldr	r0, [pc, #220]	@ (341836f4 <HAL_ADC_ConfigChannel+0x3fc>)
34183618:	f7ff f92d 	bl	34182876 <LL_ADC_GetCommonPathInternalCh>
3418361c:	60f8      	str	r0, [r7, #12]
      tmp_config_path_internal_channel = LL_ADC_GetPathInternalCh(hadc->Instance);
3418361e:	687b      	ldr	r3, [r7, #4]
34183620:	681b      	ldr	r3, [r3, #0]
34183622:	4618      	mov	r0, r3
34183624:	f7ff f94b 	bl	341828be <LL_ADC_GetPathInternalCh>
34183628:	60b8      	str	r0, [r7, #8]
      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
3418362a:	683b      	ldr	r3, [r7, #0]
3418362c:	681b      	ldr	r3, [r3, #0]
3418362e:	4a2e      	ldr	r2, [pc, #184]	@ (341836e8 <HAL_ADC_ConfigChannel+0x3f0>)
34183630:	4293      	cmp	r3, r2
34183632:	d111      	bne.n	34183658 <HAL_ADC_ConfigChannel+0x360>
          && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
34183634:	68fb      	ldr	r3, [r7, #12]
34183636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
3418363a:	2b00      	cmp	r3, #0
3418363c:	d10c      	bne.n	34183658 <HAL_ADC_ConfigChannel+0x360>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
3418363e:	687b      	ldr	r3, [r7, #4]
34183640:	681b      	ldr	r3, [r3, #0]
34183642:	4a2a      	ldr	r2, [pc, #168]	@ (341836ec <HAL_ADC_ConfigChannel+0x3f4>)
34183644:	4293      	cmp	r3, r2
34183646:	d13f      	bne.n	341836c8 <HAL_ADC_ConfigChannel+0x3d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
34183648:	68fb      	ldr	r3, [r7, #12]
3418364a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
3418364e:	4619      	mov	r1, r3
34183650:	4828      	ldr	r0, [pc, #160]	@ (341836f4 <HAL_ADC_ConfigChannel+0x3fc>)
34183652:	f7ff f8fd 	bl	34182850 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
34183656:	e037      	b.n	341836c8 <HAL_ADC_ConfigChannel+0x3d0>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_common_path_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
34183658:	683b      	ldr	r3, [r7, #0]
3418365a:	681b      	ldr	r3, [r3, #0]
3418365c:	4a20      	ldr	r2, [pc, #128]	@ (341836e0 <HAL_ADC_ConfigChannel+0x3e8>)
3418365e:	4293      	cmp	r3, r2
34183660:	d111      	bne.n	34183686 <HAL_ADC_ConfigChannel+0x38e>
               && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
34183662:	68fb      	ldr	r3, [r7, #12]
34183664:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34183668:	2b00      	cmp	r3, #0
3418366a:	d10c      	bne.n	34183686 <HAL_ADC_ConfigChannel+0x38e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
3418366c:	687b      	ldr	r3, [r7, #4]
3418366e:	681b      	ldr	r3, [r3, #0]
34183670:	4a21      	ldr	r2, [pc, #132]	@ (341836f8 <HAL_ADC_ConfigChannel+0x400>)
34183672:	4293      	cmp	r3, r2
34183674:	d128      	bne.n	341836c8 <HAL_ADC_ConfigChannel+0x3d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
34183676:	68fb      	ldr	r3, [r7, #12]
34183678:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
3418367c:	4619      	mov	r1, r3
3418367e:	481d      	ldr	r0, [pc, #116]	@ (341836f4 <HAL_ADC_ConfigChannel+0x3fc>)
34183680:	f7ff f8e6 	bl	34182850 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
34183684:	e020      	b.n	341836c8 <HAL_ADC_ConfigChannel+0x3d0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_common_path_internal_channel);
        }
      }
      else if (((pConfig->Channel == ADC_CHANNEL_VDDCORE)
34183686:	683b      	ldr	r3, [r7, #0]
34183688:	681b      	ldr	r3, [r3, #0]
3418368a:	4a16      	ldr	r2, [pc, #88]	@ (341836e4 <HAL_ADC_ConfigChannel+0x3ec>)
3418368c:	4293      	cmp	r3, r2
3418368e:	d11b      	bne.n	341836c8 <HAL_ADC_ConfigChannel+0x3d0>
                && ((tmp_config_path_internal_channel & LL_ADC_PATH_INTERNAL_VDDCORE) == 0UL)))
34183690:	68bb      	ldr	r3, [r7, #8]
34183692:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34183696:	2b00      	cmp	r3, #0
34183698:	d116      	bne.n	341836c8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
3418369a:	687b      	ldr	r3, [r7, #4]
3418369c:	681b      	ldr	r3, [r3, #0]
3418369e:	4a16      	ldr	r2, [pc, #88]	@ (341836f8 <HAL_ADC_ConfigChannel+0x400>)
341836a0:	4293      	cmp	r3, r2
341836a2:	d111      	bne.n	341836c8 <HAL_ADC_ConfigChannel+0x3d0>
        {
          LL_ADC_SetPathInternalCh(hadc->Instance, LL_ADC_PATH_INTERNAL_VDDCORE | tmp_config_path_internal_channel);
341836a4:	687b      	ldr	r3, [r7, #4]
341836a6:	681a      	ldr	r2, [r3, #0]
341836a8:	68bb      	ldr	r3, [r7, #8]
341836aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
341836ae:	4619      	mov	r1, r3
341836b0:	4610      	mov	r0, r2
341836b2:	f7ff f8ee 	bl	34182892 <LL_ADC_SetPathInternalCh>
341836b6:	e007      	b.n	341836c8 <HAL_ADC_ConfigChannel+0x3d0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
341836b8:	687b      	ldr	r3, [r7, #4]
341836ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
341836bc:	f043 0220 	orr.w	r2, r3, #32
341836c0:	687b      	ldr	r3, [r7, #4]
341836c2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
341836c4:	2301      	movs	r3, #1
341836c6:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
341836c8:	687b      	ldr	r3, [r7, #4]
341836ca:	2200      	movs	r2, #0
341836cc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
341836d0:	7ffb      	ldrb	r3, [r7, #31]
}
341836d2:	4618      	mov	r0, r3
341836d4:	3724      	adds	r7, #36	@ 0x24
341836d6:	46bd      	mov	sp, r7
341836d8:	bd90      	pop	{r4, r7, pc}
341836da:	bf00      	nop
341836dc:	43ff0000 	.word	0x43ff0000
341836e0:	01000810 	.word	0x01000810
341836e4:	00040811 	.word	0x00040811
341836e8:	00400411 	.word	0x00400411
341836ec:	50022000 	.word	0x50022000
341836f0:	3419246c 	.word	0x3419246c
341836f4:	50022300 	.word	0x50022300
341836f8:	50022100 	.word	0x50022100

341836fc <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
341836fc:	b580      	push	{r7, lr}
341836fe:	b088      	sub	sp, #32
34183700:	af00      	add	r7, sp, #0
34183702:	6078      	str	r0, [r7, #4]
34183704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
34183706:	2300      	movs	r3, #0
34183708:	77fb      	strb	r3, [r7, #31]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));

  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
3418370a:	683b      	ldr	r3, [r7, #0]
3418370c:	685b      	ldr	r3, [r3, #4]
3418370e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
34183712:	d003      	beq.n	3418371c <HAL_ADC_AnalogWDGConfig+0x20>
      (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
34183714:	683b      	ldr	r3, [r7, #0]
34183716:	685b      	ldr	r3, [r3, #4]
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
34183718:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* ADC must be disabled to set configuration bits                           */
  if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
3418371c:	687b      	ldr	r3, [r7, #4]
3418371e:	681b      	ldr	r3, [r3, #0]
34183720:	4618      	mov	r0, r3
34183722:	f7ff fc0b 	bl	34182f3c <LL_ADC_IsEnabled>
34183726:	4603      	mov	r3, r0
34183728:	2b00      	cmp	r3, #0
3418372a:	d001      	beq.n	34183730 <HAL_ADC_AnalogWDGConfig+0x34>
  {
    return HAL_ERROR;
3418372c:	2301      	movs	r3, #1
3418372e:	e1f4      	b.n	34183b1a <HAL_ADC_AnalogWDGConfig+0x41e>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
34183730:	687b      	ldr	r3, [r7, #4]
34183732:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34183736:	2b01      	cmp	r3, #1
34183738:	d101      	bne.n	3418373e <HAL_ADC_AnalogWDGConfig+0x42>
3418373a:	2302      	movs	r3, #2
3418373c:	e1ed      	b.n	34183b1a <HAL_ADC_AnalogWDGConfig+0x41e>
3418373e:	687b      	ldr	r3, [r7, #4]
34183740:	2201      	movs	r2, #1
34183742:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
34183746:	687b      	ldr	r3, [r7, #4]
34183748:	681b      	ldr	r3, [r3, #0]
3418374a:	4618      	mov	r0, r3
3418374c:	f7ff fc09 	bl	34182f62 <LL_ADC_REG_IsConversionOngoing>
34183750:	61b8      	str	r0, [r7, #24]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
34183752:	687b      	ldr	r3, [r7, #4]
34183754:	681b      	ldr	r3, [r3, #0]
34183756:	4618      	mov	r0, r3
34183758:	f7ff fc16 	bl	34182f88 <LL_ADC_INJ_IsConversionOngoing>
3418375c:	6178      	str	r0, [r7, #20]

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
3418375e:	69bb      	ldr	r3, [r7, #24]
34183760:	2b00      	cmp	r3, #0
34183762:	f040 81cd 	bne.w	34183b00 <HAL_ADC_AnalogWDGConfig+0x404>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
34183766:	697b      	ldr	r3, [r7, #20]
34183768:	2b00      	cmp	r3, #0
3418376a:	f040 81c9 	bne.w	34183b00 <HAL_ADC_AnalogWDGConfig+0x404>
     )
  {
    /* Format analog watchdog thresholds data in function of the selected ADC resolution */
    tmp_adc_resolution = LL_ADC_GetResolution(hadc->Instance);
3418376e:	687b      	ldr	r3, [r7, #4]
34183770:	681b      	ldr	r3, [r3, #0]
34183772:	4618      	mov	r0, r3
34183774:	f7ff f8b3 	bl	341828de <LL_ADC_GetResolution>
34183778:	6138      	str	r0, [r7, #16]
    tmp_awd_high_threshold_shifted = __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(tmp_adc_resolution,
3418377a:	683b      	ldr	r3, [r7, #0]
3418377c:	691a      	ldr	r2, [r3, #16]
3418377e:	693b      	ldr	r3, [r7, #16]
34183780:	085b      	lsrs	r3, r3, #1
34183782:	fa02 f303 	lsl.w	r3, r2, r3
34183786:	60fb      	str	r3, [r7, #12]
                                                                                pAnalogWDGConfig->HighThreshold);
    tmp_awd_low_threshold_shifted = __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(tmp_adc_resolution,
34183788:	683b      	ldr	r3, [r7, #0]
3418378a:	695a      	ldr	r2, [r3, #20]
3418378c:	693b      	ldr	r3, [r7, #16]
3418378e:	085b      	lsrs	r3, r3, #1
34183790:	fa02 f303 	lsl.w	r3, r2, r3
34183794:	60bb      	str	r3, [r7, #8]
                                                                               pAnalogWDGConfig->LowThreshold);

    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
34183796:	683b      	ldr	r3, [r7, #0]
34183798:	681b      	ldr	r3, [r3, #0]
3418379a:	4a96      	ldr	r2, [pc, #600]	@ (341839f4 <HAL_ADC_AnalogWDGConfig+0x2f8>)
3418379c:	4293      	cmp	r3, r2
3418379e:	f040 80be 	bne.w	3418391e <HAL_ADC_AnalogWDGConfig+0x222>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (pAnalogWDGConfig->WatchdogMode)
341837a2:	683b      	ldr	r3, [r7, #0]
341837a4:	685b      	ldr	r3, [r3, #4]
341837a6:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
341837aa:	d04a      	beq.n	34183842 <HAL_ADC_AnalogWDGConfig+0x146>
341837ac:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
341837b0:	d877      	bhi.n	341838a2 <HAL_ADC_AnalogWDGConfig+0x1a6>
341837b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
341837b6:	d06c      	beq.n	34183892 <HAL_ADC_AnalogWDGConfig+0x196>
341837b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
341837bc:	d871      	bhi.n	341838a2 <HAL_ADC_AnalogWDGConfig+0x1a6>
341837be:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
341837c2:	d026      	beq.n	34183812 <HAL_ADC_AnalogWDGConfig+0x116>
341837c4:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
341837c8:	d86b      	bhi.n	341838a2 <HAL_ADC_AnalogWDGConfig+0x1a6>
341837ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
341837ce:	d058      	beq.n	34183882 <HAL_ADC_AnalogWDGConfig+0x186>
341837d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
341837d4:	d865      	bhi.n	341838a2 <HAL_ADC_AnalogWDGConfig+0x1a6>
341837d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
341837da:	d04a      	beq.n	34183872 <HAL_ADC_AnalogWDGConfig+0x176>
341837dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
341837e0:	d15f      	bne.n	341838a2 <HAL_ADC_AnalogWDGConfig+0x1a6>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
341837e2:	687b      	ldr	r3, [r7, #4]
341837e4:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
341837e6:	683b      	ldr	r3, [r7, #0]
341837e8:	689b      	ldr	r3, [r3, #8]
341837ea:	069b      	lsls	r3, r3, #26
341837ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
341837f0:	683b      	ldr	r3, [r7, #0]
341837f2:	689b      	ldr	r3, [r3, #8]
341837f4:	b2db      	uxtb	r3, r3
341837f6:	4619      	mov	r1, r3
341837f8:	4b7f      	ldr	r3, [pc, #508]	@ (341839f8 <HAL_ADC_AnalogWDGConfig+0x2fc>)
341837fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
341837fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
34183802:	4313      	orrs	r3, r2
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
34183804:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
34183808:	461a      	mov	r2, r3
3418380a:	497a      	ldr	r1, [pc, #488]	@ (341839f4 <HAL_ADC_AnalogWDGConfig+0x2f8>)
3418380c:	f7ff fafc 	bl	34182e08 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
34183810:	e04f      	b.n	341838b2 <HAL_ADC_AnalogWDGConfig+0x1b6>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
34183812:	687b      	ldr	r3, [r7, #4]
34183814:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
34183816:	683b      	ldr	r3, [r7, #0]
34183818:	689b      	ldr	r3, [r3, #8]
3418381a:	069b      	lsls	r3, r3, #26
3418381c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
34183820:	683b      	ldr	r3, [r7, #0]
34183822:	689b      	ldr	r3, [r3, #8]
34183824:	b2db      	uxtb	r3, r3
34183826:	4619      	mov	r1, r3
34183828:	4b73      	ldr	r3, [pc, #460]	@ (341839f8 <HAL_ADC_AnalogWDGConfig+0x2fc>)
3418382a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
3418382e:	f3c3 0313 	ubfx	r3, r3, #0, #20
34183832:	4313      	orrs	r3, r2
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
34183834:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
34183838:	461a      	mov	r2, r3
3418383a:	496e      	ldr	r1, [pc, #440]	@ (341839f4 <HAL_ADC_AnalogWDGConfig+0x2f8>)
3418383c:	f7ff fae4 	bl	34182e08 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_INJECTED));
          break;
34183840:	e037      	b.n	341838b2 <HAL_ADC_AnalogWDGConfig+0x1b6>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
34183842:	687b      	ldr	r3, [r7, #4]
34183844:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
34183846:	683b      	ldr	r3, [r7, #0]
34183848:	689b      	ldr	r3, [r3, #8]
3418384a:	069b      	lsls	r3, r3, #26
3418384c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
34183850:	683b      	ldr	r3, [r7, #0]
34183852:	689b      	ldr	r3, [r3, #8]
34183854:	b2db      	uxtb	r3, r3
34183856:	4619      	mov	r1, r3
34183858:	4b67      	ldr	r3, [pc, #412]	@ (341839f8 <HAL_ADC_AnalogWDGConfig+0x2fc>)
3418385a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
3418385e:	f3c3 0313 	ubfx	r3, r3, #0, #20
34183862:	4313      	orrs	r3, r2
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
34183864:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
34183868:	461a      	mov	r2, r3
3418386a:	4962      	ldr	r1, [pc, #392]	@ (341839f4 <HAL_ADC_AnalogWDGConfig+0x2f8>)
3418386c:	f7ff facc 	bl	34182e08 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
34183870:	e01f      	b.n	341838b2 <HAL_ADC_AnalogWDGConfig+0x1b6>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
34183872:	687b      	ldr	r3, [r7, #4]
34183874:	681b      	ldr	r3, [r3, #0]
34183876:	4a61      	ldr	r2, [pc, #388]	@ (341839fc <HAL_ADC_AnalogWDGConfig+0x300>)
34183878:	495e      	ldr	r1, [pc, #376]	@ (341839f4 <HAL_ADC_AnalogWDGConfig+0x2f8>)
3418387a:	4618      	mov	r0, r3
3418387c:	f7ff fac4 	bl	34182e08 <LL_ADC_SetAnalogWDMonitChannels>
          break;
34183880:	e017      	b.n	341838b2 <HAL_ADC_AnalogWDGConfig+0x1b6>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
34183882:	687b      	ldr	r3, [r7, #4]
34183884:	681b      	ldr	r3, [r3, #0]
34183886:	4a5e      	ldr	r2, [pc, #376]	@ (34183a00 <HAL_ADC_AnalogWDGConfig+0x304>)
34183888:	495a      	ldr	r1, [pc, #360]	@ (341839f4 <HAL_ADC_AnalogWDGConfig+0x2f8>)
3418388a:	4618      	mov	r0, r3
3418388c:	f7ff fabc 	bl	34182e08 <LL_ADC_SetAnalogWDMonitChannels>
          break;
34183890:	e00f      	b.n	341838b2 <HAL_ADC_AnalogWDGConfig+0x1b6>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
34183892:	687b      	ldr	r3, [r7, #4]
34183894:	681b      	ldr	r3, [r3, #0]
34183896:	4a5b      	ldr	r2, [pc, #364]	@ (34183a04 <HAL_ADC_AnalogWDGConfig+0x308>)
34183898:	4956      	ldr	r1, [pc, #344]	@ (341839f4 <HAL_ADC_AnalogWDGConfig+0x2f8>)
3418389a:	4618      	mov	r0, r3
3418389c:	f7ff fab4 	bl	34182e08 <LL_ADC_SetAnalogWDMonitChannels>
          break;
341838a0:	e007      	b.n	341838b2 <HAL_ADC_AnalogWDGConfig+0x1b6>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
341838a2:	687b      	ldr	r3, [r7, #4]
341838a4:	681b      	ldr	r3, [r3, #0]
341838a6:	2200      	movs	r2, #0
341838a8:	4952      	ldr	r1, [pc, #328]	@ (341839f4 <HAL_ADC_AnalogWDGConfig+0x2f8>)
341838aa:	4618      	mov	r0, r3
341838ac:	f7ff faac 	bl	34182e08 <LL_ADC_SetAnalogWDMonitChannels>
          break;
341838b0:	bf00      	nop
      }

      /* Set the filtering configuration */
      assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(pAnalogWDGConfig->FilteringConfig));
      LL_ADC_SetAWDFilteringConfiguration(hadc->Instance, hadc->Instance->AWD1HTR, pAnalogWDGConfig->FilteringConfig);
341838b2:	687b      	ldr	r3, [r7, #4]
341838b4:	6818      	ldr	r0, [r3, #0]
341838b6:	687b      	ldr	r3, [r7, #4]
341838b8:	681b      	ldr	r3, [r3, #0]
341838ba:	f8d3 10ac 	ldr.w	r1, [r3, #172]	@ 0xac
341838be:	683b      	ldr	r3, [r7, #0]
341838c0:	699b      	ldr	r3, [r3, #24]
341838c2:	461a      	mov	r2, r3
341838c4:	f7ff fafe 	bl	34182ec4 <LL_ADC_SetAWDFilteringConfiguration>

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_SetAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber,
341838c8:	687b      	ldr	r3, [r7, #4]
341838ca:	6818      	ldr	r0, [r3, #0]
341838cc:	683b      	ldr	r3, [r7, #0]
341838ce:	6819      	ldr	r1, [r3, #0]
341838d0:	68fb      	ldr	r3, [r7, #12]
341838d2:	2201      	movs	r2, #1
341838d4:	f7ff fac6 	bl	34182e64 <LL_ADC_SetAnalogWDThresholds>
                                   LL_ADC_AWD_THRESHOLD_HIGH, tmp_awd_high_threshold_shifted);
      LL_ADC_SetAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber,
341838d8:	687b      	ldr	r3, [r7, #4]
341838da:	6818      	ldr	r0, [r3, #0]
341838dc:	683b      	ldr	r3, [r7, #0]
341838de:	6819      	ldr	r1, [r3, #0]
341838e0:	68bb      	ldr	r3, [r7, #8]
341838e2:	2200      	movs	r2, #0
341838e4:	f7ff fabe 	bl	34182e64 <LL_ADC_SetAnalogWDThresholds>
                                   LL_ADC_AWD_THRESHOLD_LOW, tmp_awd_low_threshold_shifted);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
341838e8:	687b      	ldr	r3, [r7, #4]
341838ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
341838ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
341838f0:	687b      	ldr	r3, [r7, #4]
341838f2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
341838f4:	687b      	ldr	r3, [r7, #4]
341838f6:	681b      	ldr	r3, [r3, #0]
341838f8:	4618      	mov	r0, r3
341838fa:	f7ff fb58 	bl	34182fae <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
341838fe:	683b      	ldr	r3, [r7, #0]
34183900:	7b1b      	ldrb	r3, [r3, #12]
34183902:	2b01      	cmp	r3, #1
34183904:	d105      	bne.n	34183912 <HAL_ADC_AnalogWDGConfig+0x216>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
34183906:	687b      	ldr	r3, [r7, #4]
34183908:	681b      	ldr	r3, [r3, #0]
3418390a:	4618      	mov	r0, r3
3418390c:	f7ff fb78 	bl	34183000 <LL_ADC_EnableIT_AWD1>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
34183910:	e0fe      	b.n	34183b10 <HAL_ADC_AnalogWDGConfig+0x414>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
34183912:	687b      	ldr	r3, [r7, #4]
34183914:	681b      	ldr	r3, [r3, #0]
34183916:	4618      	mov	r0, r3
34183918:	f7ff fba2 	bl	34183060 <LL_ADC_DisableIT_AWD1>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
3418391c:	e0f8      	b.n	34183b10 <HAL_ADC_AnalogWDGConfig+0x414>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
3418391e:	683b      	ldr	r3, [r7, #0]
34183920:	685b      	ldr	r3, [r3, #4]
34183922:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
34183926:	d01a      	beq.n	3418395e <HAL_ADC_AnalogWDGConfig+0x262>
34183928:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
3418392c:	d86e      	bhi.n	34183a0c <HAL_ADC_AnalogWDGConfig+0x310>
3418392e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
34183932:	d039      	beq.n	341839a8 <HAL_ADC_AnalogWDGConfig+0x2ac>
34183934:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
34183938:	d868      	bhi.n	34183a0c <HAL_ADC_AnalogWDGConfig+0x310>
3418393a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
3418393e:	d00e      	beq.n	3418395e <HAL_ADC_AnalogWDGConfig+0x262>
34183940:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
34183944:	d862      	bhi.n	34183a0c <HAL_ADC_AnalogWDGConfig+0x310>
34183946:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418394a:	d02d      	beq.n	341839a8 <HAL_ADC_AnalogWDGConfig+0x2ac>
3418394c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34183950:	d85c      	bhi.n	34183a0c <HAL_ADC_AnalogWDGConfig+0x310>
34183952:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
34183956:	d027      	beq.n	341839a8 <HAL_ADC_AnalogWDGConfig+0x2ac>
34183958:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
3418395c:	d156      	bne.n	34183a0c <HAL_ADC_AnalogWDGConfig+0x310>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
3418395e:	683b      	ldr	r3, [r7, #0]
34183960:	681b      	ldr	r3, [r3, #0]
34183962:	4a29      	ldr	r2, [pc, #164]	@ (34183a08 <HAL_ADC_AnalogWDGConfig+0x30c>)
34183964:	4293      	cmp	r3, r2
34183966:	d10f      	bne.n	34183988 <HAL_ADC_AnalogWDGConfig+0x28c>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL                                                       \
34183968:	687b      	ldr	r3, [r7, #4]
3418396a:	681b      	ldr	r3, [r3, #0]
3418396c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
34183970:	683b      	ldr	r3, [r7, #0]
34183972:	689b      	ldr	r3, [r3, #8]
34183974:	f003 031f 	and.w	r3, r3, #31
34183978:	2201      	movs	r2, #1
3418397a:	409a      	lsls	r2, r3
3418397c:	687b      	ldr	r3, [r7, #4]
3418397e:	681b      	ldr	r3, [r3, #0]
34183980:	430a      	orrs	r2, r1
34183982:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL                                                      \
                                             << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
34183986:	e04a      	b.n	34183a1e <HAL_ADC_AnalogWDGConfig+0x322>
            SET_BIT(hadc->Instance->AWD3CR, (1UL                                                      \
34183988:	687b      	ldr	r3, [r7, #4]
3418398a:	681b      	ldr	r3, [r3, #0]
3418398c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
34183990:	683b      	ldr	r3, [r7, #0]
34183992:	689b      	ldr	r3, [r3, #8]
34183994:	f003 031f 	and.w	r3, r3, #31
34183998:	2201      	movs	r2, #1
3418399a:	409a      	lsls	r2, r3
3418399c:	687b      	ldr	r3, [r7, #4]
3418399e:	681b      	ldr	r3, [r3, #0]
341839a0:	430a      	orrs	r2, r1
341839a2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
          break;
341839a6:	e03a      	b.n	34183a1e <HAL_ADC_AnalogWDGConfig+0x322>
        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
341839a8:	683b      	ldr	r3, [r7, #0]
341839aa:	681b      	ldr	r3, [r3, #0]
341839ac:	4a16      	ldr	r2, [pc, #88]	@ (34183a08 <HAL_ADC_AnalogWDGConfig+0x30c>)
341839ae:	4293      	cmp	r3, r2
341839b0:	d10f      	bne.n	341839d2 <HAL_ADC_AnalogWDGConfig+0x2d6>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL                                                           \
341839b2:	687b      	ldr	r3, [r7, #4]
341839b4:	681b      	ldr	r3, [r3, #0]
341839b6:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
341839ba:	683b      	ldr	r3, [r7, #0]
341839bc:	689b      	ldr	r3, [r3, #8]
341839be:	f003 031f 	and.w	r3, r3, #31
341839c2:	2201      	movs	r2, #1
341839c4:	409a      	lsls	r2, r3
341839c6:	687b      	ldr	r3, [r7, #4]
341839c8:	681b      	ldr	r3, [r3, #0]
341839ca:	430a      	orrs	r2, r1
341839cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL                                                        \
                                             << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
341839d0:	e025      	b.n	34183a1e <HAL_ADC_AnalogWDGConfig+0x322>
            SET_BIT(hadc->Instance->AWD3CR, (1UL                                                        \
341839d2:	687b      	ldr	r3, [r7, #4]
341839d4:	681b      	ldr	r3, [r3, #0]
341839d6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
341839da:	683b      	ldr	r3, [r7, #0]
341839dc:	689b      	ldr	r3, [r3, #8]
341839de:	f003 031f 	and.w	r3, r3, #31
341839e2:	2201      	movs	r2, #1
341839e4:	409a      	lsls	r2, r3
341839e6:	687b      	ldr	r3, [r7, #4]
341839e8:	681b      	ldr	r3, [r3, #0]
341839ea:	430a      	orrs	r2, r1
341839ec:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
          break;
341839f0:	e015      	b.n	34183a1e <HAL_ADC_AnalogWDGConfig+0x322>
341839f2:	bf00      	nop
341839f4:	7dc00000 	.word	0x7dc00000
341839f8:	3419241c 	.word	0x3419241c
341839fc:	008fffff 	.word	0x008fffff
34183a00:	010fffff 	.word	0x010fffff
34183a04:	018fffff 	.word	0x018fffff
34183a08:	001fffff 	.word	0x001fffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
34183a0c:	687b      	ldr	r3, [r7, #4]
34183a0e:	6818      	ldr	r0, [r3, #0]
34183a10:	683b      	ldr	r3, [r7, #0]
34183a12:	681b      	ldr	r3, [r3, #0]
34183a14:	2200      	movs	r2, #0
34183a16:	4619      	mov	r1, r3
34183a18:	f7ff f9f6 	bl	34182e08 <LL_ADC_SetAnalogWDMonitChannels>
          break;
34183a1c:	bf00      	nop
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
34183a1e:	683b      	ldr	r3, [r7, #0]
34183a20:	681b      	ldr	r3, [r3, #0]
34183a22:	4a40      	ldr	r2, [pc, #256]	@ (34183b24 <HAL_ADC_AnalogWDGConfig+0x428>)
34183a24:	4293      	cmp	r3, r2
34183a26:	d118      	bne.n	34183a5a <HAL_ADC_AnalogWDGConfig+0x35e>
      {
        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        MODIFY_REG(hadc->Instance->AWD2LTR, ADC_AWD2LTR_LTR, tmp_awd_low_threshold_shifted);
34183a28:	687b      	ldr	r3, [r7, #4]
34183a2a:	681b      	ldr	r3, [r3, #0]
34183a2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34183a30:	0ddb      	lsrs	r3, r3, #23
34183a32:	05db      	lsls	r3, r3, #23
34183a34:	687a      	ldr	r2, [r7, #4]
34183a36:	6812      	ldr	r2, [r2, #0]
34183a38:	68b9      	ldr	r1, [r7, #8]
34183a3a:	430b      	orrs	r3, r1
34183a3c:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
        MODIFY_REG(hadc->Instance->AWD2HTR, ADC_AWD2HTR_HTR, tmp_awd_high_threshold_shifted);
34183a40:	687b      	ldr	r3, [r7, #4]
34183a42:	681b      	ldr	r3, [r3, #0]
34183a44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34183a48:	0ddb      	lsrs	r3, r3, #23
34183a4a:	05db      	lsls	r3, r3, #23
34183a4c:	687a      	ldr	r2, [r7, #4]
34183a4e:	6812      	ldr	r2, [r2, #0]
34183a50:	68f9      	ldr	r1, [r7, #12]
34183a52:	430b      	orrs	r3, r1
34183a54:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
34183a58:	e017      	b.n	34183a8a <HAL_ADC_AnalogWDGConfig+0x38e>
      }
      else
      {
        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        MODIFY_REG(hadc->Instance->AWD3LTR, ADC_AWD3LTR_LTR, tmp_awd_low_threshold_shifted);
34183a5a:	687b      	ldr	r3, [r7, #4]
34183a5c:	681b      	ldr	r3, [r3, #0]
34183a5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34183a62:	0ddb      	lsrs	r3, r3, #23
34183a64:	05db      	lsls	r3, r3, #23
34183a66:	687a      	ldr	r2, [r7, #4]
34183a68:	6812      	ldr	r2, [r2, #0]
34183a6a:	68b9      	ldr	r1, [r7, #8]
34183a6c:	430b      	orrs	r3, r1
34183a6e:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
        MODIFY_REG(hadc->Instance->AWD3HTR, ADC_AWD3HTR_HTR, tmp_awd_high_threshold_shifted);
34183a72:	687b      	ldr	r3, [r7, #4]
34183a74:	681b      	ldr	r3, [r3, #0]
34183a76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34183a7a:	0ddb      	lsrs	r3, r3, #23
34183a7c:	05db      	lsls	r3, r3, #23
34183a7e:	687a      	ldr	r2, [r7, #4]
34183a80:	6812      	ldr	r2, [r2, #0]
34183a82:	68f9      	ldr	r1, [r7, #12]
34183a84:	430b      	orrs	r3, r1
34183a86:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
34183a8a:	683b      	ldr	r3, [r7, #0]
34183a8c:	681b      	ldr	r3, [r3, #0]
34183a8e:	4a25      	ldr	r2, [pc, #148]	@ (34183b24 <HAL_ADC_AnalogWDGConfig+0x428>)
34183a90:	4293      	cmp	r3, r2
34183a92:	d11a      	bne.n	34183aca <HAL_ADC_AnalogWDGConfig+0x3ce>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
34183a94:	687b      	ldr	r3, [r7, #4]
34183a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34183a98:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
34183a9c:	687b      	ldr	r3, [r7, #4]
34183a9e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
34183aa0:	687b      	ldr	r3, [r7, #4]
34183aa2:	681b      	ldr	r3, [r3, #0]
34183aa4:	4618      	mov	r0, r3
34183aa6:	f7ff fa8f 	bl	34182fc8 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
34183aaa:	683b      	ldr	r3, [r7, #0]
34183aac:	7b1b      	ldrb	r3, [r3, #12]
34183aae:	2b01      	cmp	r3, #1
34183ab0:	d105      	bne.n	34183abe <HAL_ADC_AnalogWDGConfig+0x3c2>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
34183ab2:	687b      	ldr	r3, [r7, #4]
34183ab4:	681b      	ldr	r3, [r3, #0]
34183ab6:	4618      	mov	r0, r3
34183ab8:	f7ff fab2 	bl	34183020 <LL_ADC_EnableIT_AWD2>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
34183abc:	e028      	b.n	34183b10 <HAL_ADC_AnalogWDGConfig+0x414>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
34183abe:	687b      	ldr	r3, [r7, #4]
34183ac0:	681b      	ldr	r3, [r3, #0]
34183ac2:	4618      	mov	r0, r3
34183ac4:	f7ff fadc 	bl	34183080 <LL_ADC_DisableIT_AWD2>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
34183ac8:	e022      	b.n	34183b10 <HAL_ADC_AnalogWDGConfig+0x414>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
34183aca:	687b      	ldr	r3, [r7, #4]
34183acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34183ace:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
34183ad2:	687b      	ldr	r3, [r7, #4]
34183ad4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
34183ad6:	687b      	ldr	r3, [r7, #4]
34183ad8:	681b      	ldr	r3, [r3, #0]
34183ada:	4618      	mov	r0, r3
34183adc:	f7ff fa82 	bl	34182fe4 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
34183ae0:	683b      	ldr	r3, [r7, #0]
34183ae2:	7b1b      	ldrb	r3, [r3, #12]
34183ae4:	2b01      	cmp	r3, #1
34183ae6:	d105      	bne.n	34183af4 <HAL_ADC_AnalogWDGConfig+0x3f8>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
34183ae8:	687b      	ldr	r3, [r7, #4]
34183aea:	681b      	ldr	r3, [r3, #0]
34183aec:	4618      	mov	r0, r3
34183aee:	f7ff faa7 	bl	34183040 <LL_ADC_EnableIT_AWD3>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
34183af2:	e00d      	b.n	34183b10 <HAL_ADC_AnalogWDGConfig+0x414>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
34183af4:	687b      	ldr	r3, [r7, #4]
34183af6:	681b      	ldr	r3, [r3, #0]
34183af8:	4618      	mov	r0, r3
34183afa:	f7ff fad1 	bl	341830a0 <LL_ADC_DisableIT_AWD3>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
34183afe:	e007      	b.n	34183b10 <HAL_ADC_AnalogWDGConfig+0x414>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
34183b00:	687b      	ldr	r3, [r7, #4]
34183b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34183b04:	f043 0220 	orr.w	r2, r3, #32
34183b08:	687b      	ldr	r3, [r7, #4]
34183b0a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
34183b0c:	2301      	movs	r3, #1
34183b0e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
34183b10:	687b      	ldr	r3, [r7, #4]
34183b12:	2200      	movs	r2, #0
34183b14:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
34183b18:	7ffb      	ldrb	r3, [r7, #31]
}
34183b1a:	4618      	mov	r0, r3
34183b1c:	3720      	adds	r7, #32
34183b1e:	46bd      	mov	sp, r7
34183b20:	bd80      	pop	{r7, pc}
34183b22:	bf00      	nop
34183b24:	001fffff 	.word	0x001fffff

34183b28 <LL_ADC_IsEnabled>:
{
34183b28:	b480      	push	{r7}
34183b2a:	b083      	sub	sp, #12
34183b2c:	af00      	add	r7, sp, #0
34183b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
34183b30:	687b      	ldr	r3, [r7, #4]
34183b32:	689b      	ldr	r3, [r3, #8]
34183b34:	f003 0301 	and.w	r3, r3, #1
34183b38:	2b01      	cmp	r3, #1
34183b3a:	d101      	bne.n	34183b40 <LL_ADC_IsEnabled+0x18>
34183b3c:	2301      	movs	r3, #1
34183b3e:	e000      	b.n	34183b42 <LL_ADC_IsEnabled+0x1a>
34183b40:	2300      	movs	r3, #0
}
34183b42:	4618      	mov	r0, r3
34183b44:	370c      	adds	r7, #12
34183b46:	46bd      	mov	sp, r7
34183b48:	f85d 7b04 	ldr.w	r7, [sp], #4
34183b4c:	4770      	bx	lr

34183b4e <LL_ADC_REG_IsConversionOngoing>:
{
34183b4e:	b480      	push	{r7}
34183b50:	b083      	sub	sp, #12
34183b52:	af00      	add	r7, sp, #0
34183b54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
34183b56:	687b      	ldr	r3, [r7, #4]
34183b58:	689b      	ldr	r3, [r3, #8]
34183b5a:	f003 0304 	and.w	r3, r3, #4
34183b5e:	2b04      	cmp	r3, #4
34183b60:	d101      	bne.n	34183b66 <LL_ADC_REG_IsConversionOngoing+0x18>
34183b62:	2301      	movs	r3, #1
34183b64:	e000      	b.n	34183b68 <LL_ADC_REG_IsConversionOngoing+0x1a>
34183b66:	2300      	movs	r3, #0
}
34183b68:	4618      	mov	r0, r3
34183b6a:	370c      	adds	r7, #12
34183b6c:	46bd      	mov	sp, r7
34183b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
34183b72:	4770      	bx	lr

34183b74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc,
                                                   const ADC_MultiModeTypeDef *pMultimode)
{
34183b74:	b590      	push	{r4, r7, lr}
34183b76:	b09f      	sub	sp, #124	@ 0x7c
34183b78:	af00      	add	r7, sp, #0
34183b7a:	6078      	str	r0, [r7, #4]
34183b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
34183b7e:	2300      	movs	r3, #0
34183b80:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(pMultimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
34183b84:	687b      	ldr	r3, [r7, #4]
34183b86:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34183b8a:	2b01      	cmp	r3, #1
34183b8c:	d101      	bne.n	34183b92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
34183b8e:	2302      	movs	r3, #2
34183b90:	e095      	b.n	34183cbe <HAL_ADCEx_MultiModeConfigChannel+0x14a>
34183b92:	687b      	ldr	r3, [r7, #4]
34183b94:	2201      	movs	r2, #1
34183b96:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
34183b9a:	2300      	movs	r3, #0
34183b9c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
34183b9e:	2300      	movs	r3, #0
34183ba0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
34183ba2:	687b      	ldr	r3, [r7, #4]
34183ba4:	681b      	ldr	r3, [r3, #0]
34183ba6:	4a48      	ldr	r2, [pc, #288]	@ (34183cc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
34183ba8:	4293      	cmp	r3, r2
34183baa:	d102      	bne.n	34183bb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
34183bac:	4b47      	ldr	r3, [pc, #284]	@ (34183ccc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
34183bae:	60fb      	str	r3, [r7, #12]
34183bb0:	e001      	b.n	34183bb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
34183bb2:	2300      	movs	r3, #0
34183bb4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
34183bb6:	68fb      	ldr	r3, [r7, #12]
34183bb8:	2b00      	cmp	r3, #0
34183bba:	d10b      	bne.n	34183bd4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
34183bbc:	687b      	ldr	r3, [r7, #4]
34183bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34183bc0:	f043 0220 	orr.w	r2, r3, #32
34183bc4:	687b      	ldr	r3, [r7, #4]
34183bc6:	659a      	str	r2, [r3, #88]	@ 0x58

    __HAL_UNLOCK(hadc);
34183bc8:	687b      	ldr	r3, [r7, #4]
34183bca:	2200      	movs	r2, #0
34183bcc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
34183bd0:	2301      	movs	r3, #1
34183bd2:	e074      	b.n	34183cbe <HAL_ADCEx_MultiModeConfigChannel+0x14a>
  }

  /* ADC must be disabled to set configuration bits */
  if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
34183bd4:	687b      	ldr	r3, [r7, #4]
34183bd6:	681b      	ldr	r3, [r3, #0]
34183bd8:	4618      	mov	r0, r3
34183bda:	f7ff ffa5 	bl	34183b28 <LL_ADC_IsEnabled>
34183bde:	4603      	mov	r3, r0
34183be0:	2b00      	cmp	r3, #0
34183be2:	d008      	beq.n	34183bf6 <HAL_ADCEx_MultiModeConfigChannel+0x82>
  {
    if (LL_ADC_IsEnabled(tmphadcSlave.Instance) != 0UL)
34183be4:	68fb      	ldr	r3, [r7, #12]
34183be6:	4618      	mov	r0, r3
34183be8:	f7ff ff9e 	bl	34183b28 <LL_ADC_IsEnabled>
34183bec:	4603      	mov	r3, r0
34183bee:	2b00      	cmp	r3, #0
34183bf0:	d001      	beq.n	34183bf6 <HAL_ADCEx_MultiModeConfigChannel+0x82>
    {
      return HAL_ERROR;
34183bf2:	2301      	movs	r3, #1
34183bf4:	e063      	b.n	34183cbe <HAL_ADCEx_MultiModeConfigChannel+0x14a>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
34183bf6:	68fb      	ldr	r3, [r7, #12]
34183bf8:	4618      	mov	r0, r3
34183bfa:	f7ff ffa8 	bl	34183b4e <LL_ADC_REG_IsConversionOngoing>
34183bfe:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
34183c00:	687b      	ldr	r3, [r7, #4]
34183c02:	681b      	ldr	r3, [r3, #0]
34183c04:	4618      	mov	r0, r3
34183c06:	f7ff ffa2 	bl	34183b4e <LL_ADC_REG_IsConversionOngoing>
34183c0a:	4603      	mov	r3, r0
34183c0c:	2b00      	cmp	r3, #0
34183c0e:	d145      	bne.n	34183c9c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      && (tmphadcSlave_conversion_on_going == 0UL))
34183c10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
34183c12:	2b00      	cmp	r3, #0
34183c14:	d142      	bne.n	34183c9c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
34183c16:	4b2e      	ldr	r3, [pc, #184]	@ (34183cd0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
34183c18:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
34183c1a:	683b      	ldr	r3, [r7, #0]
34183c1c:	681b      	ldr	r3, [r3, #0]
34183c1e:	2b00      	cmp	r3, #0
34183c20:	d022      	beq.n	34183c68 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, pMultimode->DualModeData);
34183c22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183c24:	689b      	ldr	r3, [r3, #8]
34183c26:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
34183c2a:	683b      	ldr	r3, [r7, #0]
34183c2c:	685b      	ldr	r3, [r3, #4]
34183c2e:	431a      	orrs	r2, r3
34183c30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183c32:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
34183c34:	4824      	ldr	r0, [pc, #144]	@ (34183cc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
34183c36:	f7ff ff77 	bl	34183b28 <LL_ADC_IsEnabled>
34183c3a:	4604      	mov	r4, r0
34183c3c:	4823      	ldr	r0, [pc, #140]	@ (34183ccc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
34183c3e:	f7ff ff73 	bl	34183b28 <LL_ADC_IsEnabled>
34183c42:	4603      	mov	r3, r0
34183c44:	4323      	orrs	r3, r4
34183c46:	2b00      	cmp	r3, #0
34183c48:	d132      	bne.n	34183cb0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
      {
        MODIFY_REG(tmpADC_Common->CCR,
34183c4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183c4c:	689b      	ldr	r3, [r3, #8]
34183c4e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
34183c52:	f023 030f 	bic.w	r3, r3, #15
34183c56:	683a      	ldr	r2, [r7, #0]
34183c58:	6811      	ldr	r1, [r2, #0]
34183c5a:	683a      	ldr	r2, [r7, #0]
34183c5c:	6892      	ldr	r2, [r2, #8]
34183c5e:	430a      	orrs	r2, r1
34183c60:	431a      	orrs	r2, r3
34183c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183c64:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
34183c66:	e023      	b.n	34183cb0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
34183c68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183c6a:	689b      	ldr	r3, [r3, #8]
34183c6c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
34183c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183c72:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
34183c74:	4814      	ldr	r0, [pc, #80]	@ (34183cc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
34183c76:	f7ff ff57 	bl	34183b28 <LL_ADC_IsEnabled>
34183c7a:	4604      	mov	r4, r0
34183c7c:	4813      	ldr	r0, [pc, #76]	@ (34183ccc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
34183c7e:	f7ff ff53 	bl	34183b28 <LL_ADC_IsEnabled>
34183c82:	4603      	mov	r3, r0
34183c84:	4323      	orrs	r3, r4
34183c86:	2b00      	cmp	r3, #0
34183c88:	d112      	bne.n	34183cb0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
34183c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183c8c:	689b      	ldr	r3, [r3, #8]
34183c8e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
34183c92:	f023 030f 	bic.w	r3, r3, #15
34183c96:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
34183c98:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
34183c9a:	e009      	b.n	34183cb0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
34183c9c:	687b      	ldr	r3, [r7, #4]
34183c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34183ca0:	f043 0220 	orr.w	r2, r3, #32
34183ca4:	687b      	ldr	r3, [r7, #4]
34183ca6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
34183ca8:	2301      	movs	r3, #1
34183caa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
34183cae:	e000      	b.n	34183cb2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
34183cb0:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
34183cb2:	687b      	ldr	r3, [r7, #4]
34183cb4:	2200      	movs	r2, #0
34183cb6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
34183cba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
34183cbe:	4618      	mov	r0, r3
34183cc0:	377c      	adds	r7, #124	@ 0x7c
34183cc2:	46bd      	mov	sp, r7
34183cc4:	bd90      	pop	{r4, r7, pc}
34183cc6:	bf00      	nop
34183cc8:	50022000 	.word	0x50022000
34183ccc:	50022100 	.word	0x50022100
34183cd0:	50022300 	.word	0x50022300

34183cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34183cd4:	b480      	push	{r7}
34183cd6:	b085      	sub	sp, #20
34183cd8:	af00      	add	r7, sp, #0
34183cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
34183cdc:	687b      	ldr	r3, [r7, #4]
34183cde:	f003 0307 	and.w	r3, r3, #7
34183ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
34183ce4:	4b0c      	ldr	r3, [pc, #48]	@ (34183d18 <__NVIC_SetPriorityGrouping+0x44>)
34183ce6:	68db      	ldr	r3, [r3, #12]
34183ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
34183cea:	68ba      	ldr	r2, [r7, #8]
34183cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
34183cf0:	4013      	ands	r3, r2
34183cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
34183cf4:	68fb      	ldr	r3, [r7, #12]
34183cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
34183cf8:	68bb      	ldr	r3, [r7, #8]
34183cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
34183cfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
34183d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34183d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
34183d06:	4a04      	ldr	r2, [pc, #16]	@ (34183d18 <__NVIC_SetPriorityGrouping+0x44>)
34183d08:	68bb      	ldr	r3, [r7, #8]
34183d0a:	60d3      	str	r3, [r2, #12]
}
34183d0c:	bf00      	nop
34183d0e:	3714      	adds	r7, #20
34183d10:	46bd      	mov	sp, r7
34183d12:	f85d 7b04 	ldr.w	r7, [sp], #4
34183d16:	4770      	bx	lr
34183d18:	e000ed00 	.word	0xe000ed00

34183d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
34183d1c:	b480      	push	{r7}
34183d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34183d20:	4b04      	ldr	r3, [pc, #16]	@ (34183d34 <__NVIC_GetPriorityGrouping+0x18>)
34183d22:	68db      	ldr	r3, [r3, #12]
34183d24:	0a1b      	lsrs	r3, r3, #8
34183d26:	f003 0307 	and.w	r3, r3, #7
}
34183d2a:	4618      	mov	r0, r3
34183d2c:	46bd      	mov	sp, r7
34183d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
34183d32:	4770      	bx	lr
34183d34:	e000ed00 	.word	0xe000ed00

34183d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
34183d38:	b480      	push	{r7}
34183d3a:	b083      	sub	sp, #12
34183d3c:	af00      	add	r7, sp, #0
34183d3e:	4603      	mov	r3, r0
34183d40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
34183d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34183d46:	2b00      	cmp	r3, #0
34183d48:	db0b      	blt.n	34183d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34183d4a:	88fb      	ldrh	r3, [r7, #6]
34183d4c:	f003 021f 	and.w	r2, r3, #31
34183d50:	4907      	ldr	r1, [pc, #28]	@ (34183d70 <__NVIC_EnableIRQ+0x38>)
34183d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34183d56:	095b      	lsrs	r3, r3, #5
34183d58:	2001      	movs	r0, #1
34183d5a:	fa00 f202 	lsl.w	r2, r0, r2
34183d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
34183d62:	bf00      	nop
34183d64:	370c      	adds	r7, #12
34183d66:	46bd      	mov	sp, r7
34183d68:	f85d 7b04 	ldr.w	r7, [sp], #4
34183d6c:	4770      	bx	lr
34183d6e:	bf00      	nop
34183d70:	e000e100 	.word	0xe000e100

34183d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
34183d74:	b480      	push	{r7}
34183d76:	b083      	sub	sp, #12
34183d78:	af00      	add	r7, sp, #0
34183d7a:	4603      	mov	r3, r0
34183d7c:	6039      	str	r1, [r7, #0]
34183d7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
34183d80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34183d84:	2b00      	cmp	r3, #0
34183d86:	db0a      	blt.n	34183d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34183d88:	683b      	ldr	r3, [r7, #0]
34183d8a:	b2da      	uxtb	r2, r3
34183d8c:	490c      	ldr	r1, [pc, #48]	@ (34183dc0 <__NVIC_SetPriority+0x4c>)
34183d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34183d92:	0112      	lsls	r2, r2, #4
34183d94:	b2d2      	uxtb	r2, r2
34183d96:	440b      	add	r3, r1
34183d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
34183d9c:	e00a      	b.n	34183db4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34183d9e:	683b      	ldr	r3, [r7, #0]
34183da0:	b2da      	uxtb	r2, r3
34183da2:	4908      	ldr	r1, [pc, #32]	@ (34183dc4 <__NVIC_SetPriority+0x50>)
34183da4:	88fb      	ldrh	r3, [r7, #6]
34183da6:	f003 030f 	and.w	r3, r3, #15
34183daa:	3b04      	subs	r3, #4
34183dac:	0112      	lsls	r2, r2, #4
34183dae:	b2d2      	uxtb	r2, r2
34183db0:	440b      	add	r3, r1
34183db2:	761a      	strb	r2, [r3, #24]
}
34183db4:	bf00      	nop
34183db6:	370c      	adds	r7, #12
34183db8:	46bd      	mov	sp, r7
34183dba:	f85d 7b04 	ldr.w	r7, [sp], #4
34183dbe:	4770      	bx	lr
34183dc0:	e000e100 	.word	0xe000e100
34183dc4:	e000ed00 	.word	0xe000ed00

34183dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
34183dc8:	b480      	push	{r7}
34183dca:	b089      	sub	sp, #36	@ 0x24
34183dcc:	af00      	add	r7, sp, #0
34183dce:	60f8      	str	r0, [r7, #12]
34183dd0:	60b9      	str	r1, [r7, #8]
34183dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
34183dd4:	68fb      	ldr	r3, [r7, #12]
34183dd6:	f003 0307 	and.w	r3, r3, #7
34183dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34183ddc:	69fb      	ldr	r3, [r7, #28]
34183dde:	f1c3 0307 	rsb	r3, r3, #7
34183de2:	2b04      	cmp	r3, #4
34183de4:	bf28      	it	cs
34183de6:	2304      	movcs	r3, #4
34183de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
34183dea:	69fb      	ldr	r3, [r7, #28]
34183dec:	3304      	adds	r3, #4
34183dee:	2b06      	cmp	r3, #6
34183df0:	d902      	bls.n	34183df8 <NVIC_EncodePriority+0x30>
34183df2:	69fb      	ldr	r3, [r7, #28]
34183df4:	3b03      	subs	r3, #3
34183df6:	e000      	b.n	34183dfa <NVIC_EncodePriority+0x32>
34183df8:	2300      	movs	r3, #0
34183dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34183dfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
34183e00:	69bb      	ldr	r3, [r7, #24]
34183e02:	fa02 f303 	lsl.w	r3, r2, r3
34183e06:	43da      	mvns	r2, r3
34183e08:	68bb      	ldr	r3, [r7, #8]
34183e0a:	401a      	ands	r2, r3
34183e0c:	697b      	ldr	r3, [r7, #20]
34183e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
34183e10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
34183e14:	697b      	ldr	r3, [r7, #20]
34183e16:	fa01 f303 	lsl.w	r3, r1, r3
34183e1a:	43d9      	mvns	r1, r3
34183e1c:	687b      	ldr	r3, [r7, #4]
34183e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34183e20:	4313      	orrs	r3, r2
         );
}
34183e22:	4618      	mov	r0, r3
34183e24:	3724      	adds	r7, #36	@ 0x24
34183e26:	46bd      	mov	sp, r7
34183e28:	f85d 7b04 	ldr.w	r7, [sp], #4
34183e2c:	4770      	bx	lr

34183e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34183e2e:	b580      	push	{r7, lr}
34183e30:	b082      	sub	sp, #8
34183e32:	af00      	add	r7, sp, #0
34183e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
34183e36:	6878      	ldr	r0, [r7, #4]
34183e38:	f7ff ff4c 	bl	34183cd4 <__NVIC_SetPriorityGrouping>
}
34183e3c:	bf00      	nop
34183e3e:	3708      	adds	r7, #8
34183e40:	46bd      	mov	sp, r7
34183e42:	bd80      	pop	{r7, pc}

34183e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
34183e44:	b580      	push	{r7, lr}
34183e46:	b086      	sub	sp, #24
34183e48:	af00      	add	r7, sp, #0
34183e4a:	4603      	mov	r3, r0
34183e4c:	60b9      	str	r1, [r7, #8]
34183e4e:	607a      	str	r2, [r7, #4]
34183e50:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
34183e52:	f7ff ff63 	bl	34183d1c <__NVIC_GetPriorityGrouping>
34183e56:	4603      	mov	r3, r0
34183e58:	f003 0307 	and.w	r3, r3, #7
34183e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
34183e5e:	687a      	ldr	r2, [r7, #4]
34183e60:	68b9      	ldr	r1, [r7, #8]
34183e62:	6978      	ldr	r0, [r7, #20]
34183e64:	f7ff ffb0 	bl	34183dc8 <NVIC_EncodePriority>
34183e68:	4602      	mov	r2, r0
34183e6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
34183e6e:	4611      	mov	r1, r2
34183e70:	4618      	mov	r0, r3
34183e72:	f7ff ff7f 	bl	34183d74 <__NVIC_SetPriority>
}
34183e76:	bf00      	nop
34183e78:	3718      	adds	r7, #24
34183e7a:	46bd      	mov	sp, r7
34183e7c:	bd80      	pop	{r7, pc}

34183e7e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32n6xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
34183e7e:	b580      	push	{r7, lr}
34183e80:	b082      	sub	sp, #8
34183e82:	af00      	add	r7, sp, #0
34183e84:	4603      	mov	r3, r0
34183e86:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
34183e88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34183e8c:	4618      	mov	r0, r3
34183e8e:	f7ff ff53 	bl	34183d38 <__NVIC_EnableIRQ>
}
34183e92:	bf00      	nop
34183e94:	3708      	adds	r7, #8
34183e96:	46bd      	mov	sp, r7
34183e98:	bd80      	pop	{r7, pc}

34183e9a <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
34183e9a:	b480      	push	{r7}
34183e9c:	b083      	sub	sp, #12
34183e9e:	af00      	add	r7, sp, #0
34183ea0:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
34183ea2:	687b      	ldr	r3, [r7, #4]
34183ea4:	2b00      	cmp	r3, #0
34183ea6:	d101      	bne.n	34183eac <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
34183ea8:	2301      	movs	r3, #1
34183eaa:	e019      	b.n	34183ee0 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
34183eac:	687b      	ldr	r3, [r7, #4]
34183eae:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34183eb2:	b2db      	uxtb	r3, r3
34183eb4:	2b02      	cmp	r3, #2
34183eb6:	d004      	beq.n	34183ec2 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
34183eb8:	687b      	ldr	r3, [r7, #4]
34183eba:	2220      	movs	r2, #32
34183ebc:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
34183ebe:	2301      	movs	r3, #1
34183ec0:	e00e      	b.n	34183ee0 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
34183ec2:	687b      	ldr	r3, [r7, #4]
34183ec4:	2204      	movs	r2, #4
34183ec6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
34183eca:	687b      	ldr	r3, [r7, #4]
34183ecc:	681b      	ldr	r3, [r3, #0]
34183ece:	695b      	ldr	r3, [r3, #20]
34183ed0:	687a      	ldr	r2, [r7, #4]
34183ed2:	6812      	ldr	r2, [r2, #0]
34183ed4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34183ed8:	f043 0304 	orr.w	r3, r3, #4
34183edc:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
34183ede:	2300      	movs	r3, #0
}
34183ee0:	4618      	mov	r0, r3
34183ee2:	370c      	adds	r7, #12
34183ee4:	46bd      	mov	sp, r7
34183ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
34183eea:	4770      	bx	lr

34183eec <HAL_EXTI_ConfigLineAttributes>:
  *            @arg @ref EXTI_LINE_SEC          Secure-only access
  *            @arg @ref EXTI_LINE_NSEC         Secure/Non-secure access
  * @retval None
  */
void HAL_EXTI_ConfigLineAttributes(uint32_t ExtiLine, uint32_t LineAttributes)
{
34183eec:	b480      	push	{r7}
34183eee:	b089      	sub	sp, #36	@ 0x24
34183ef0:	af00      	add	r7, sp, #0
34183ef2:	6078      	str	r0, [r7, #4]
34183ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));
  assert_param(IS_EXTI_LINE_ATTRIBUTES(LineAttributes));

  /* compute line register offset and line mask */
  offset = ((ExtiLine & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
34183ef6:	687b      	ldr	r3, [r7, #4]
34183ef8:	0c1b      	lsrs	r3, r3, #16
34183efa:	f003 0303 	and.w	r3, r3, #3
34183efe:	61bb      	str	r3, [r7, #24]
  linepos = (ExtiLine & EXTI_PIN_MASK);
34183f00:	687b      	ldr	r3, [r7, #4]
34183f02:	f003 031f 	and.w	r3, r3, #31
34183f06:	617b      	str	r3, [r7, #20]
  maskline = (1UL << linepos);
34183f08:	2201      	movs	r2, #1
34183f0a:	697b      	ldr	r3, [r7, #20]
34183f0c:	fa02 f303 	lsl.w	r3, r2, r3
34183f10:	613b      	str	r3, [r7, #16]

  /* Configure privilege or non-privilege attributes */
  regaddr = (__IO uint32_t *)(&EXTI->PRIVCFGR1 + (EXTI_PRIVCFGR_OFFSET * offset));
34183f12:	69bb      	ldr	r3, [r7, #24]
34183f14:	015a      	lsls	r2, r3, #5
34183f16:	4b24      	ldr	r3, [pc, #144]	@ (34183fa8 <HAL_EXTI_ConfigLineAttributes+0xbc>)
34183f18:	4413      	add	r3, r2
34183f1a:	60fb      	str	r3, [r7, #12]
  regval = *regaddr;
34183f1c:	68fb      	ldr	r3, [r7, #12]
34183f1e:	681b      	ldr	r3, [r3, #0]
34183f20:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((LineAttributes & EXTI_LINE_PRIV) == EXTI_LINE_PRIV)
34183f22:	683a      	ldr	r2, [r7, #0]
34183f24:	f240 2302 	movw	r3, #514	@ 0x202
34183f28:	4013      	ands	r3, r2
34183f2a:	f240 2202 	movw	r2, #514	@ 0x202
34183f2e:	4293      	cmp	r3, r2
34183f30:	d104      	bne.n	34183f3c <HAL_EXTI_ConfigLineAttributes+0x50>
  {
    regval |= maskline;
34183f32:	69fa      	ldr	r2, [r7, #28]
34183f34:	693b      	ldr	r3, [r7, #16]
34183f36:	4313      	orrs	r3, r2
34183f38:	61fb      	str	r3, [r7, #28]
34183f3a:	e009      	b.n	34183f50 <HAL_EXTI_ConfigLineAttributes+0x64>
  }
  else if ((LineAttributes & EXTI_LINE_NPRIV) == EXTI_LINE_NPRIV)
34183f3c:	683b      	ldr	r3, [r7, #0]
34183f3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34183f42:	2b00      	cmp	r3, #0
34183f44:	d004      	beq.n	34183f50 <HAL_EXTI_ConfigLineAttributes+0x64>
  {
    regval &= ~maskline;
34183f46:	693b      	ldr	r3, [r7, #16]
34183f48:	43db      	mvns	r3, r3
34183f4a:	69fa      	ldr	r2, [r7, #28]
34183f4c:	4013      	ands	r3, r2
34183f4e:	61fb      	str	r3, [r7, #28]
  {
    /* do nothing */
  }

  /* Store privilege or non-privilege attribute */
  *regaddr = regval;
34183f50:	68fb      	ldr	r3, [r7, #12]
34183f52:	69fa      	ldr	r2, [r7, #28]
34183f54:	601a      	str	r2, [r3, #0]

#if defined CPU_IN_SECURE_STATE
  /* Configure secure or non-secure attributes */
  regaddr = (__IO uint32_t *)(&EXTI->SECCFGR1 + (EXTI_SECCFGR_OFFSET * offset));
34183f56:	69bb      	ldr	r3, [r7, #24]
34183f58:	015a      	lsls	r2, r3, #5
34183f5a:	4b14      	ldr	r3, [pc, #80]	@ (34183fac <HAL_EXTI_ConfigLineAttributes+0xc0>)
34183f5c:	4413      	add	r3, r2
34183f5e:	60fb      	str	r3, [r7, #12]
  regval = *regaddr;
34183f60:	68fb      	ldr	r3, [r7, #12]
34183f62:	681b      	ldr	r3, [r3, #0]
34183f64:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((LineAttributes & EXTI_LINE_SEC) == EXTI_LINE_SEC)
34183f66:	683a      	ldr	r2, [r7, #0]
34183f68:	f240 1301 	movw	r3, #257	@ 0x101
34183f6c:	4013      	ands	r3, r2
34183f6e:	f240 1201 	movw	r2, #257	@ 0x101
34183f72:	4293      	cmp	r3, r2
34183f74:	d104      	bne.n	34183f80 <HAL_EXTI_ConfigLineAttributes+0x94>
  {
    regval |= maskline;
34183f76:	69fa      	ldr	r2, [r7, #28]
34183f78:	693b      	ldr	r3, [r7, #16]
34183f7a:	4313      	orrs	r3, r2
34183f7c:	61fb      	str	r3, [r7, #28]
34183f7e:	e009      	b.n	34183f94 <HAL_EXTI_ConfigLineAttributes+0xa8>
  }
  else if ((LineAttributes & EXTI_LINE_NSEC) == EXTI_LINE_NSEC)
34183f80:	683b      	ldr	r3, [r7, #0]
34183f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34183f86:	2b00      	cmp	r3, #0
34183f88:	d004      	beq.n	34183f94 <HAL_EXTI_ConfigLineAttributes+0xa8>
  {
    regval &= ~maskline;
34183f8a:	693b      	ldr	r3, [r7, #16]
34183f8c:	43db      	mvns	r3, r3
34183f8e:	69fa      	ldr	r2, [r7, #28]
34183f90:	4013      	ands	r3, r2
34183f92:	61fb      	str	r3, [r7, #28]
  {
    /* do nothing */
  }

  /* Store secure or non-secure attribute */
  *regaddr = regval;
34183f94:	68fb      	ldr	r3, [r7, #12]
34183f96:	69fa      	ldr	r2, [r7, #28]
34183f98:	601a      	str	r2, [r3, #0]
#endif /* CPU_IN_SECURE_STATE */

}
34183f9a:	bf00      	nop
34183f9c:	3724      	adds	r7, #36	@ 0x24
34183f9e:	46bd      	mov	sp, r7
34183fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
34183fa4:	4770      	bx	lr
34183fa6:	bf00      	nop
34183fa8:	56025018 	.word	0x56025018
34183fac:	56025014 	.word	0x56025014

34183fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
34183fb0:	b480      	push	{r7}
34183fb2:	b087      	sub	sp, #28
34183fb4:	af00      	add	r7, sp, #0
34183fb6:	6078      	str	r0, [r7, #4]
34183fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
34183fba:	2300      	movs	r3, #0
34183fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34183fbe:	e180      	b.n	341842c2 <HAL_GPIO_Init+0x312>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34183fc0:	683b      	ldr	r3, [r7, #0]
34183fc2:	681a      	ldr	r2, [r3, #0]
34183fc4:	2101      	movs	r1, #1
34183fc6:	697b      	ldr	r3, [r7, #20]
34183fc8:	fa01 f303 	lsl.w	r3, r1, r3
34183fcc:	4013      	ands	r3, r2
34183fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
34183fd0:	68fb      	ldr	r3, [r7, #12]
34183fd2:	2b00      	cmp	r3, #0
34183fd4:	f000 8172 	beq.w	341842bc <HAL_GPIO_Init+0x30c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
34183fd8:	683b      	ldr	r3, [r7, #0]
34183fda:	685b      	ldr	r3, [r3, #4]
34183fdc:	f003 0303 	and.w	r3, r3, #3
34183fe0:	2b01      	cmp	r3, #1
34183fe2:	d005      	beq.n	34183ff0 <HAL_GPIO_Init+0x40>
34183fe4:	683b      	ldr	r3, [r7, #0]
34183fe6:	685b      	ldr	r3, [r3, #4]
34183fe8:	f003 0303 	and.w	r3, r3, #3
34183fec:	2b02      	cmp	r3, #2
34183fee:	d130      	bne.n	34184052 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
34183ff0:	687b      	ldr	r3, [r7, #4]
34183ff2:	689b      	ldr	r3, [r3, #8]
34183ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34183ff6:	697b      	ldr	r3, [r7, #20]
34183ff8:	005b      	lsls	r3, r3, #1
34183ffa:	2203      	movs	r2, #3
34183ffc:	fa02 f303 	lsl.w	r3, r2, r3
34184000:	43db      	mvns	r3, r3
34184002:	693a      	ldr	r2, [r7, #16]
34184004:	4013      	ands	r3, r2
34184006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34184008:	683b      	ldr	r3, [r7, #0]
3418400a:	68da      	ldr	r2, [r3, #12]
3418400c:	697b      	ldr	r3, [r7, #20]
3418400e:	005b      	lsls	r3, r3, #1
34184010:	fa02 f303 	lsl.w	r3, r2, r3
34184014:	693a      	ldr	r2, [r7, #16]
34184016:	4313      	orrs	r3, r2
34184018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
3418401a:	687b      	ldr	r3, [r7, #4]
3418401c:	693a      	ldr	r2, [r7, #16]
3418401e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
34184020:	687b      	ldr	r3, [r7, #4]
34184022:	685b      	ldr	r3, [r3, #4]
34184024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
34184026:	2201      	movs	r2, #1
34184028:	697b      	ldr	r3, [r7, #20]
3418402a:	fa02 f303 	lsl.w	r3, r2, r3
3418402e:	43db      	mvns	r3, r3
34184030:	693a      	ldr	r2, [r7, #16]
34184032:	4013      	ands	r3, r2
34184034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34184036:	683b      	ldr	r3, [r7, #0]
34184038:	685b      	ldr	r3, [r3, #4]
3418403a:	091b      	lsrs	r3, r3, #4
3418403c:	f003 0201 	and.w	r2, r3, #1
34184040:	697b      	ldr	r3, [r7, #20]
34184042:	fa02 f303 	lsl.w	r3, r2, r3
34184046:	693a      	ldr	r2, [r7, #16]
34184048:	4313      	orrs	r3, r2
3418404a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
3418404c:	687b      	ldr	r3, [r7, #4]
3418404e:	693a      	ldr	r2, [r7, #16]
34184050:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34184052:	683b      	ldr	r3, [r7, #0]
34184054:	685b      	ldr	r3, [r3, #4]
34184056:	f003 0303 	and.w	r3, r3, #3
3418405a:	2b03      	cmp	r3, #3
3418405c:	d109      	bne.n	34184072 <HAL_GPIO_Init+0xc2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
3418405e:	683b      	ldr	r3, [r7, #0]
34184060:	685b      	ldr	r3, [r3, #4]
34184062:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34184066:	2b03      	cmp	r3, #3
34184068:	d11b      	bne.n	341840a2 <HAL_GPIO_Init+0xf2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
3418406a:	683b      	ldr	r3, [r7, #0]
3418406c:	689b      	ldr	r3, [r3, #8]
3418406e:	2b01      	cmp	r3, #1
34184070:	d017      	beq.n	341840a2 <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
34184072:	687b      	ldr	r3, [r7, #4]
34184074:	68db      	ldr	r3, [r3, #12]
34184076:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34184078:	697b      	ldr	r3, [r7, #20]
3418407a:	005b      	lsls	r3, r3, #1
3418407c:	2203      	movs	r2, #3
3418407e:	fa02 f303 	lsl.w	r3, r2, r3
34184082:	43db      	mvns	r3, r3
34184084:	693a      	ldr	r2, [r7, #16]
34184086:	4013      	ands	r3, r2
34184088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
3418408a:	683b      	ldr	r3, [r7, #0]
3418408c:	689a      	ldr	r2, [r3, #8]
3418408e:	697b      	ldr	r3, [r7, #20]
34184090:	005b      	lsls	r3, r3, #1
34184092:	fa02 f303 	lsl.w	r3, r2, r3
34184096:	693a      	ldr	r2, [r7, #16]
34184098:	4313      	orrs	r3, r2
3418409a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
3418409c:	687b      	ldr	r3, [r7, #4]
3418409e:	693a      	ldr	r2, [r7, #16]
341840a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
341840a2:	683b      	ldr	r3, [r7, #0]
341840a4:	685b      	ldr	r3, [r3, #4]
341840a6:	f003 0303 	and.w	r3, r3, #3
341840aa:	2b02      	cmp	r3, #2
341840ac:	d123      	bne.n	341840f6 <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
341840ae:	697b      	ldr	r3, [r7, #20]
341840b0:	08da      	lsrs	r2, r3, #3
341840b2:	687b      	ldr	r3, [r7, #4]
341840b4:	3208      	adds	r2, #8
341840b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
341840ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
341840bc:	697b      	ldr	r3, [r7, #20]
341840be:	f003 0307 	and.w	r3, r3, #7
341840c2:	009b      	lsls	r3, r3, #2
341840c4:	220f      	movs	r2, #15
341840c6:	fa02 f303 	lsl.w	r3, r2, r3
341840ca:	43db      	mvns	r3, r3
341840cc:	693a      	ldr	r2, [r7, #16]
341840ce:	4013      	ands	r3, r2
341840d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
341840d2:	683b      	ldr	r3, [r7, #0]
341840d4:	691a      	ldr	r2, [r3, #16]
341840d6:	697b      	ldr	r3, [r7, #20]
341840d8:	f003 0307 	and.w	r3, r3, #7
341840dc:	009b      	lsls	r3, r3, #2
341840de:	fa02 f303 	lsl.w	r3, r2, r3
341840e2:	693a      	ldr	r2, [r7, #16]
341840e4:	4313      	orrs	r3, r2
341840e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
341840e8:	697b      	ldr	r3, [r7, #20]
341840ea:	08da      	lsrs	r2, r3, #3
341840ec:	687b      	ldr	r3, [r7, #4]
341840ee:	3208      	adds	r2, #8
341840f0:	6939      	ldr	r1, [r7, #16]
341840f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
341840f6:	687b      	ldr	r3, [r7, #4]
341840f8:	681b      	ldr	r3, [r3, #0]
341840fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
341840fc:	697b      	ldr	r3, [r7, #20]
341840fe:	005b      	lsls	r3, r3, #1
34184100:	2203      	movs	r2, #3
34184102:	fa02 f303 	lsl.w	r3, r2, r3
34184106:	43db      	mvns	r3, r3
34184108:	693a      	ldr	r2, [r7, #16]
3418410a:	4013      	ands	r3, r2
3418410c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
3418410e:	683b      	ldr	r3, [r7, #0]
34184110:	685b      	ldr	r3, [r3, #4]
34184112:	f003 0203 	and.w	r2, r3, #3
34184116:	697b      	ldr	r3, [r7, #20]
34184118:	005b      	lsls	r3, r3, #1
3418411a:	fa02 f303 	lsl.w	r3, r2, r3
3418411e:	693a      	ldr	r2, [r7, #16]
34184120:	4313      	orrs	r3, r2
34184122:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
34184124:	687b      	ldr	r3, [r7, #4]
34184126:	693a      	ldr	r2, [r7, #16]
34184128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
3418412a:	683b      	ldr	r3, [r7, #0]
3418412c:	685b      	ldr	r3, [r3, #4]
3418412e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
34184132:	2b00      	cmp	r3, #0
34184134:	f000 80c2 	beq.w	341842bc <HAL_GPIO_Init+0x30c>
      {
        temp = EXTI->EXTICR[position >> 2u];
34184138:	4a69      	ldr	r2, [pc, #420]	@ (341842e0 <HAL_GPIO_Init+0x330>)
3418413a:	697b      	ldr	r3, [r7, #20]
3418413c:	089b      	lsrs	r3, r3, #2
3418413e:	3318      	adds	r3, #24
34184140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34184144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34184146:	697b      	ldr	r3, [r7, #20]
34184148:	f003 0303 	and.w	r3, r3, #3
3418414c:	00db      	lsls	r3, r3, #3
3418414e:	220f      	movs	r2, #15
34184150:	fa02 f303 	lsl.w	r3, r2, r3
34184154:	43db      	mvns	r3, r3
34184156:	693a      	ldr	r2, [r7, #16]
34184158:	4013      	ands	r3, r2
3418415a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
3418415c:	687b      	ldr	r3, [r7, #4]
3418415e:	4a61      	ldr	r2, [pc, #388]	@ (341842e4 <HAL_GPIO_Init+0x334>)
34184160:	4293      	cmp	r3, r2
34184162:	d043      	beq.n	341841ec <HAL_GPIO_Init+0x23c>
34184164:	687b      	ldr	r3, [r7, #4]
34184166:	4a60      	ldr	r2, [pc, #384]	@ (341842e8 <HAL_GPIO_Init+0x338>)
34184168:	4293      	cmp	r3, r2
3418416a:	d03d      	beq.n	341841e8 <HAL_GPIO_Init+0x238>
3418416c:	687b      	ldr	r3, [r7, #4]
3418416e:	4a5f      	ldr	r2, [pc, #380]	@ (341842ec <HAL_GPIO_Init+0x33c>)
34184170:	4293      	cmp	r3, r2
34184172:	d037      	beq.n	341841e4 <HAL_GPIO_Init+0x234>
34184174:	687b      	ldr	r3, [r7, #4]
34184176:	4a5e      	ldr	r2, [pc, #376]	@ (341842f0 <HAL_GPIO_Init+0x340>)
34184178:	4293      	cmp	r3, r2
3418417a:	d031      	beq.n	341841e0 <HAL_GPIO_Init+0x230>
3418417c:	687b      	ldr	r3, [r7, #4]
3418417e:	4a5d      	ldr	r2, [pc, #372]	@ (341842f4 <HAL_GPIO_Init+0x344>)
34184180:	4293      	cmp	r3, r2
34184182:	d02b      	beq.n	341841dc <HAL_GPIO_Init+0x22c>
34184184:	687b      	ldr	r3, [r7, #4]
34184186:	4a5c      	ldr	r2, [pc, #368]	@ (341842f8 <HAL_GPIO_Init+0x348>)
34184188:	4293      	cmp	r3, r2
3418418a:	d025      	beq.n	341841d8 <HAL_GPIO_Init+0x228>
3418418c:	687b      	ldr	r3, [r7, #4]
3418418e:	4a5b      	ldr	r2, [pc, #364]	@ (341842fc <HAL_GPIO_Init+0x34c>)
34184190:	4293      	cmp	r3, r2
34184192:	d01f      	beq.n	341841d4 <HAL_GPIO_Init+0x224>
34184194:	687b      	ldr	r3, [r7, #4]
34184196:	4a5a      	ldr	r2, [pc, #360]	@ (34184300 <HAL_GPIO_Init+0x350>)
34184198:	4293      	cmp	r3, r2
3418419a:	d019      	beq.n	341841d0 <HAL_GPIO_Init+0x220>
3418419c:	687b      	ldr	r3, [r7, #4]
3418419e:	4a59      	ldr	r2, [pc, #356]	@ (34184304 <HAL_GPIO_Init+0x354>)
341841a0:	4293      	cmp	r3, r2
341841a2:	d013      	beq.n	341841cc <HAL_GPIO_Init+0x21c>
341841a4:	687b      	ldr	r3, [r7, #4]
341841a6:	4a58      	ldr	r2, [pc, #352]	@ (34184308 <HAL_GPIO_Init+0x358>)
341841a8:	4293      	cmp	r3, r2
341841aa:	d00d      	beq.n	341841c8 <HAL_GPIO_Init+0x218>
341841ac:	687b      	ldr	r3, [r7, #4]
341841ae:	4a57      	ldr	r2, [pc, #348]	@ (3418430c <HAL_GPIO_Init+0x35c>)
341841b0:	4293      	cmp	r3, r2
341841b2:	d007      	beq.n	341841c4 <HAL_GPIO_Init+0x214>
341841b4:	687b      	ldr	r3, [r7, #4]
341841b6:	4a56      	ldr	r2, [pc, #344]	@ (34184310 <HAL_GPIO_Init+0x360>)
341841b8:	4293      	cmp	r3, r2
341841ba:	d101      	bne.n	341841c0 <HAL_GPIO_Init+0x210>
341841bc:	230b      	movs	r3, #11
341841be:	e016      	b.n	341841ee <HAL_GPIO_Init+0x23e>
341841c0:	2310      	movs	r3, #16
341841c2:	e014      	b.n	341841ee <HAL_GPIO_Init+0x23e>
341841c4:	230a      	movs	r3, #10
341841c6:	e012      	b.n	341841ee <HAL_GPIO_Init+0x23e>
341841c8:	2309      	movs	r3, #9
341841ca:	e010      	b.n	341841ee <HAL_GPIO_Init+0x23e>
341841cc:	2308      	movs	r3, #8
341841ce:	e00e      	b.n	341841ee <HAL_GPIO_Init+0x23e>
341841d0:	2307      	movs	r3, #7
341841d2:	e00c      	b.n	341841ee <HAL_GPIO_Init+0x23e>
341841d4:	2306      	movs	r3, #6
341841d6:	e00a      	b.n	341841ee <HAL_GPIO_Init+0x23e>
341841d8:	2305      	movs	r3, #5
341841da:	e008      	b.n	341841ee <HAL_GPIO_Init+0x23e>
341841dc:	2304      	movs	r3, #4
341841de:	e006      	b.n	341841ee <HAL_GPIO_Init+0x23e>
341841e0:	2303      	movs	r3, #3
341841e2:	e004      	b.n	341841ee <HAL_GPIO_Init+0x23e>
341841e4:	2302      	movs	r3, #2
341841e6:	e002      	b.n	341841ee <HAL_GPIO_Init+0x23e>
341841e8:	2301      	movs	r3, #1
341841ea:	e000      	b.n	341841ee <HAL_GPIO_Init+0x23e>
341841ec:	2300      	movs	r3, #0
341841ee:	697a      	ldr	r2, [r7, #20]
341841f0:	f002 0203 	and.w	r2, r2, #3
341841f4:	00d2      	lsls	r2, r2, #3
341841f6:	4093      	lsls	r3, r2
341841f8:	693a      	ldr	r2, [r7, #16]
341841fa:	4313      	orrs	r3, r2
341841fc:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
341841fe:	4938      	ldr	r1, [pc, #224]	@ (341842e0 <HAL_GPIO_Init+0x330>)
34184200:	697b      	ldr	r3, [r7, #20]
34184202:	089b      	lsrs	r3, r3, #2
34184204:	3318      	adds	r3, #24
34184206:	693a      	ldr	r2, [r7, #16]
34184208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
3418420c:	4b34      	ldr	r3, [pc, #208]	@ (341842e0 <HAL_GPIO_Init+0x330>)
3418420e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34184212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34184214:	68fb      	ldr	r3, [r7, #12]
34184216:	43db      	mvns	r3, r3
34184218:	693a      	ldr	r2, [r7, #16]
3418421a:	4013      	ands	r3, r2
3418421c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
3418421e:	683b      	ldr	r3, [r7, #0]
34184220:	685b      	ldr	r3, [r3, #4]
34184222:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34184226:	2b00      	cmp	r3, #0
34184228:	d003      	beq.n	34184232 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
3418422a:	693a      	ldr	r2, [r7, #16]
3418422c:	68fb      	ldr	r3, [r7, #12]
3418422e:	4313      	orrs	r3, r2
34184230:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
34184232:	4a2b      	ldr	r2, [pc, #172]	@ (341842e0 <HAL_GPIO_Init+0x330>)
34184234:	693b      	ldr	r3, [r7, #16]
34184236:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
3418423a:	4b29      	ldr	r3, [pc, #164]	@ (341842e0 <HAL_GPIO_Init+0x330>)
3418423c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34184240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34184242:	68fb      	ldr	r3, [r7, #12]
34184244:	43db      	mvns	r3, r3
34184246:	693a      	ldr	r2, [r7, #16]
34184248:	4013      	ands	r3, r2
3418424a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
3418424c:	683b      	ldr	r3, [r7, #0]
3418424e:	685b      	ldr	r3, [r3, #4]
34184250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34184254:	2b00      	cmp	r3, #0
34184256:	d003      	beq.n	34184260 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
34184258:	693a      	ldr	r2, [r7, #16]
3418425a:	68fb      	ldr	r3, [r7, #12]
3418425c:	4313      	orrs	r3, r2
3418425e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
34184260:	4a1f      	ldr	r2, [pc, #124]	@ (341842e0 <HAL_GPIO_Init+0x330>)
34184262:	693b      	ldr	r3, [r7, #16]
34184264:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
34184268:	4b1d      	ldr	r3, [pc, #116]	@ (341842e0 <HAL_GPIO_Init+0x330>)
3418426a:	681b      	ldr	r3, [r3, #0]
3418426c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
3418426e:	68fb      	ldr	r3, [r7, #12]
34184270:	43db      	mvns	r3, r3
34184272:	693a      	ldr	r2, [r7, #16]
34184274:	4013      	ands	r3, r2
34184276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
34184278:	683b      	ldr	r3, [r7, #0]
3418427a:	685b      	ldr	r3, [r3, #4]
3418427c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34184280:	2b00      	cmp	r3, #0
34184282:	d003      	beq.n	3418428c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
34184284:	693a      	ldr	r2, [r7, #16]
34184286:	68fb      	ldr	r3, [r7, #12]
34184288:	4313      	orrs	r3, r2
3418428a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
3418428c:	4a14      	ldr	r2, [pc, #80]	@ (341842e0 <HAL_GPIO_Init+0x330>)
3418428e:	693b      	ldr	r3, [r7, #16]
34184290:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
34184292:	4b13      	ldr	r3, [pc, #76]	@ (341842e0 <HAL_GPIO_Init+0x330>)
34184294:	685b      	ldr	r3, [r3, #4]
34184296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34184298:	68fb      	ldr	r3, [r7, #12]
3418429a:	43db      	mvns	r3, r3
3418429c:	693a      	ldr	r2, [r7, #16]
3418429e:	4013      	ands	r3, r2
341842a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
341842a2:	683b      	ldr	r3, [r7, #0]
341842a4:	685b      	ldr	r3, [r3, #4]
341842a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
341842aa:	2b00      	cmp	r3, #0
341842ac:	d003      	beq.n	341842b6 <HAL_GPIO_Init+0x306>
        {
          temp |= iocurrent;
341842ae:	693a      	ldr	r2, [r7, #16]
341842b0:	68fb      	ldr	r3, [r7, #12]
341842b2:	4313      	orrs	r3, r2
341842b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
341842b6:	4a0a      	ldr	r2, [pc, #40]	@ (341842e0 <HAL_GPIO_Init+0x330>)
341842b8:	693b      	ldr	r3, [r7, #16]
341842ba:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
341842bc:	697b      	ldr	r3, [r7, #20]
341842be:	3301      	adds	r3, #1
341842c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
341842c2:	683b      	ldr	r3, [r7, #0]
341842c4:	681a      	ldr	r2, [r3, #0]
341842c6:	697b      	ldr	r3, [r7, #20]
341842c8:	fa22 f303 	lsr.w	r3, r2, r3
341842cc:	2b00      	cmp	r3, #0
341842ce:	f47f ae77 	bne.w	34183fc0 <HAL_GPIO_Init+0x10>
  }
}
341842d2:	bf00      	nop
341842d4:	bf00      	nop
341842d6:	371c      	adds	r7, #28
341842d8:	46bd      	mov	sp, r7
341842da:	f85d 7b04 	ldr.w	r7, [sp], #4
341842de:	4770      	bx	lr
341842e0:	56025000 	.word	0x56025000
341842e4:	56020000 	.word	0x56020000
341842e8:	56020400 	.word	0x56020400
341842ec:	56020800 	.word	0x56020800
341842f0:	56020c00 	.word	0x56020c00
341842f4:	56021000 	.word	0x56021000
341842f8:	56021400 	.word	0x56021400
341842fc:	56021800 	.word	0x56021800
34184300:	56021c00 	.word	0x56021c00
34184304:	56023400 	.word	0x56023400
34184308:	56023800 	.word	0x56023800
3418430c:	56023c00 	.word	0x56023c00
34184310:	56024000 	.word	0x56024000

34184314 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
34184314:	b580      	push	{r7, lr}
34184316:	b084      	sub	sp, #16
34184318:	af02      	add	r7, sp, #8
3418431a:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
3418431c:	687b      	ldr	r3, [r7, #4]
3418431e:	2b00      	cmp	r3, #0
34184320:	d101      	bne.n	34184326 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
34184322:	2301      	movs	r3, #1
34184324:	e04f      	b.n	341843c6 <HAL_HCD_Init+0xb2>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
34184326:	687b      	ldr	r3, [r7, #4]
34184328:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
3418432c:	b2db      	uxtb	r3, r3
3418432e:	2b00      	cmp	r3, #0
34184330:	d106      	bne.n	34184340 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
34184332:	687b      	ldr	r3, [r7, #4]
34184334:	2200      	movs	r2, #0
34184336:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
3418433a:	6878      	ldr	r0, [r7, #4]
3418433c:	f7fd fc9c 	bl	34181c78 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
34184340:	687b      	ldr	r3, [r7, #4]
34184342:	2203      	movs	r2, #3
34184344:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
34184348:	687b      	ldr	r3, [r7, #4]
3418434a:	681b      	ldr	r3, [r3, #0]
3418434c:	4618      	mov	r0, r3
3418434e:	f00d fe7b 	bl	34192048 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
34184352:	687b      	ldr	r3, [r7, #4]
34184354:	6818      	ldr	r0, [r3, #0]
34184356:	687b      	ldr	r3, [r7, #4]
34184358:	7c1a      	ldrb	r2, [r3, #16]
3418435a:	f88d 2000 	strb.w	r2, [sp]
3418435e:	3304      	adds	r3, #4
34184360:	cb0e      	ldmia	r3, {r1, r2, r3}
34184362:	f00d fe3f 	bl	34191fe4 <USB_CoreInit>
34184366:	4603      	mov	r3, r0
34184368:	2b00      	cmp	r3, #0
3418436a:	d005      	beq.n	34184378 <HAL_HCD_Init+0x64>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
3418436c:	687b      	ldr	r3, [r7, #4]
3418436e:	2202      	movs	r2, #2
34184370:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
34184374:	2301      	movs	r3, #1
34184376:	e026      	b.n	341843c6 <HAL_HCD_Init+0xb2>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
34184378:	687b      	ldr	r3, [r7, #4]
3418437a:	681b      	ldr	r3, [r3, #0]
3418437c:	2101      	movs	r1, #1
3418437e:	4618      	mov	r0, r3
34184380:	f00d fe73 	bl	3419206a <USB_SetCurrentMode>
34184384:	4603      	mov	r3, r0
34184386:	2b00      	cmp	r3, #0
34184388:	d005      	beq.n	34184396 <HAL_HCD_Init+0x82>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
3418438a:	687b      	ldr	r3, [r7, #4]
3418438c:	2202      	movs	r2, #2
3418438e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
34184392:	2301      	movs	r3, #1
34184394:	e017      	b.n	341843c6 <HAL_HCD_Init+0xb2>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
34184396:	687b      	ldr	r3, [r7, #4]
34184398:	6818      	ldr	r0, [r3, #0]
3418439a:	687b      	ldr	r3, [r7, #4]
3418439c:	7c1a      	ldrb	r2, [r3, #16]
3418439e:	f88d 2000 	strb.w	r2, [sp]
341843a2:	3304      	adds	r3, #4
341843a4:	cb0e      	ldmia	r3, {r1, r2, r3}
341843a6:	f00d ff4b 	bl	34192240 <USB_HostInit>
341843aa:	4603      	mov	r3, r0
341843ac:	2b00      	cmp	r3, #0
341843ae:	d005      	beq.n	341843bc <HAL_HCD_Init+0xa8>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
341843b0:	687b      	ldr	r3, [r7, #4]
341843b2:	2202      	movs	r2, #2
341843b4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
341843b8:	2301      	movs	r3, #1
341843ba:	e004      	b.n	341843c6 <HAL_HCD_Init+0xb2>
  }

  hhcd->State = HAL_HCD_STATE_READY;
341843bc:	687b      	ldr	r3, [r7, #4]
341843be:	2201      	movs	r2, #1
341843c0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
341843c4:	2300      	movs	r3, #0
}
341843c6:	4618      	mov	r0, r3
341843c8:	3708      	adds	r7, #8
341843ca:	46bd      	mov	sp, r7
341843cc:	bd80      	pop	{r7, pc}

341843ce <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
341843ce:	b580      	push	{r7, lr}
341843d0:	b082      	sub	sp, #8
341843d2:	af00      	add	r7, sp, #0
341843d4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
341843d6:	687b      	ldr	r3, [r7, #4]
341843d8:	2b00      	cmp	r3, #0
341843da:	d101      	bne.n	341843e0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
341843dc:	2301      	movs	r3, #1
341843de:	e08d      	b.n	341844fc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
341843e0:	687b      	ldr	r3, [r7, #4]
341843e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
341843e6:	b2db      	uxtb	r3, r3
341843e8:	2b00      	cmp	r3, #0
341843ea:	d106      	bne.n	341843fa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
341843ec:	687b      	ldr	r3, [r7, #4]
341843ee:	2200      	movs	r2, #0
341843f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
341843f4:	6878      	ldr	r0, [r7, #4]
341843f6:	f7fd fa0d 	bl	34181814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
341843fa:	687b      	ldr	r3, [r7, #4]
341843fc:	2224      	movs	r2, #36	@ 0x24
341843fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
34184402:	687b      	ldr	r3, [r7, #4]
34184404:	681b      	ldr	r3, [r3, #0]
34184406:	681a      	ldr	r2, [r3, #0]
34184408:	687b      	ldr	r3, [r7, #4]
3418440a:	681b      	ldr	r3, [r3, #0]
3418440c:	f022 0201 	bic.w	r2, r2, #1
34184410:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
34184412:	687b      	ldr	r3, [r7, #4]
34184414:	685a      	ldr	r2, [r3, #4]
34184416:	687b      	ldr	r3, [r7, #4]
34184418:	681b      	ldr	r3, [r3, #0]
3418441a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
3418441e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
34184420:	687b      	ldr	r3, [r7, #4]
34184422:	681b      	ldr	r3, [r3, #0]
34184424:	689a      	ldr	r2, [r3, #8]
34184426:	687b      	ldr	r3, [r7, #4]
34184428:	681b      	ldr	r3, [r3, #0]
3418442a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
3418442e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
34184430:	687b      	ldr	r3, [r7, #4]
34184432:	68db      	ldr	r3, [r3, #12]
34184434:	2b01      	cmp	r3, #1
34184436:	d107      	bne.n	34184448 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
34184438:	687b      	ldr	r3, [r7, #4]
3418443a:	689a      	ldr	r2, [r3, #8]
3418443c:	687b      	ldr	r3, [r7, #4]
3418443e:	681b      	ldr	r3, [r3, #0]
34184440:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34184444:	609a      	str	r2, [r3, #8]
34184446:	e006      	b.n	34184456 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
34184448:	687b      	ldr	r3, [r7, #4]
3418444a:	689a      	ldr	r2, [r3, #8]
3418444c:	687b      	ldr	r3, [r7, #4]
3418444e:	681b      	ldr	r3, [r3, #0]
34184450:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
34184454:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
34184456:	687b      	ldr	r3, [r7, #4]
34184458:	68db      	ldr	r3, [r3, #12]
3418445a:	2b02      	cmp	r3, #2
3418445c:	d108      	bne.n	34184470 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
3418445e:	687b      	ldr	r3, [r7, #4]
34184460:	681b      	ldr	r3, [r3, #0]
34184462:	685a      	ldr	r2, [r3, #4]
34184464:	687b      	ldr	r3, [r7, #4]
34184466:	681b      	ldr	r3, [r3, #0]
34184468:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
3418446c:	605a      	str	r2, [r3, #4]
3418446e:	e007      	b.n	34184480 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
34184470:	687b      	ldr	r3, [r7, #4]
34184472:	681b      	ldr	r3, [r3, #0]
34184474:	685a      	ldr	r2, [r3, #4]
34184476:	687b      	ldr	r3, [r7, #4]
34184478:	681b      	ldr	r3, [r3, #0]
3418447a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
3418447e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
34184480:	687b      	ldr	r3, [r7, #4]
34184482:	681b      	ldr	r3, [r3, #0]
34184484:	685b      	ldr	r3, [r3, #4]
34184486:	687a      	ldr	r2, [r7, #4]
34184488:	6812      	ldr	r2, [r2, #0]
3418448a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
3418448e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34184492:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
34184494:	687b      	ldr	r3, [r7, #4]
34184496:	681b      	ldr	r3, [r3, #0]
34184498:	68da      	ldr	r2, [r3, #12]
3418449a:	687b      	ldr	r3, [r7, #4]
3418449c:	681b      	ldr	r3, [r3, #0]
3418449e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
341844a2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
341844a4:	687b      	ldr	r3, [r7, #4]
341844a6:	691a      	ldr	r2, [r3, #16]
341844a8:	687b      	ldr	r3, [r7, #4]
341844aa:	695b      	ldr	r3, [r3, #20]
341844ac:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
341844b0:	687b      	ldr	r3, [r7, #4]
341844b2:	699b      	ldr	r3, [r3, #24]
341844b4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
341844b6:	687b      	ldr	r3, [r7, #4]
341844b8:	681b      	ldr	r3, [r3, #0]
341844ba:	430a      	orrs	r2, r1
341844bc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
341844be:	687b      	ldr	r3, [r7, #4]
341844c0:	69d9      	ldr	r1, [r3, #28]
341844c2:	687b      	ldr	r3, [r7, #4]
341844c4:	6a1a      	ldr	r2, [r3, #32]
341844c6:	687b      	ldr	r3, [r7, #4]
341844c8:	681b      	ldr	r3, [r3, #0]
341844ca:	430a      	orrs	r2, r1
341844cc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
341844ce:	687b      	ldr	r3, [r7, #4]
341844d0:	681b      	ldr	r3, [r3, #0]
341844d2:	681a      	ldr	r2, [r3, #0]
341844d4:	687b      	ldr	r3, [r7, #4]
341844d6:	681b      	ldr	r3, [r3, #0]
341844d8:	f042 0201 	orr.w	r2, r2, #1
341844dc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
341844de:	687b      	ldr	r3, [r7, #4]
341844e0:	2200      	movs	r2, #0
341844e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
341844e4:	687b      	ldr	r3, [r7, #4]
341844e6:	2220      	movs	r2, #32
341844e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
341844ec:	687b      	ldr	r3, [r7, #4]
341844ee:	2200      	movs	r2, #0
341844f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
341844f2:	687b      	ldr	r3, [r7, #4]
341844f4:	2200      	movs	r2, #0
341844f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
341844fa:	2300      	movs	r3, #0
}
341844fc:	4618      	mov	r0, r3
341844fe:	3708      	adds	r7, #8
34184500:	46bd      	mov	sp, r7
34184502:	bd80      	pop	{r7, pc}

34184504 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
34184504:	b480      	push	{r7}
34184506:	b083      	sub	sp, #12
34184508:	af00      	add	r7, sp, #0
3418450a:	6078      	str	r0, [r7, #4]
3418450c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
3418450e:	687b      	ldr	r3, [r7, #4]
34184510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34184514:	b2db      	uxtb	r3, r3
34184516:	2b20      	cmp	r3, #32
34184518:	d138      	bne.n	3418458c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
3418451a:	687b      	ldr	r3, [r7, #4]
3418451c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
34184520:	2b01      	cmp	r3, #1
34184522:	d101      	bne.n	34184528 <HAL_I2CEx_ConfigAnalogFilter+0x24>
34184524:	2302      	movs	r3, #2
34184526:	e032      	b.n	3418458e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
34184528:	687b      	ldr	r3, [r7, #4]
3418452a:	2201      	movs	r2, #1
3418452c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
34184530:	687b      	ldr	r3, [r7, #4]
34184532:	2224      	movs	r2, #36	@ 0x24
34184534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
34184538:	687b      	ldr	r3, [r7, #4]
3418453a:	681b      	ldr	r3, [r3, #0]
3418453c:	681a      	ldr	r2, [r3, #0]
3418453e:	687b      	ldr	r3, [r7, #4]
34184540:	681b      	ldr	r3, [r3, #0]
34184542:	f022 0201 	bic.w	r2, r2, #1
34184546:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
34184548:	687b      	ldr	r3, [r7, #4]
3418454a:	681b      	ldr	r3, [r3, #0]
3418454c:	681a      	ldr	r2, [r3, #0]
3418454e:	687b      	ldr	r3, [r7, #4]
34184550:	681b      	ldr	r3, [r3, #0]
34184552:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
34184556:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
34184558:	687b      	ldr	r3, [r7, #4]
3418455a:	681b      	ldr	r3, [r3, #0]
3418455c:	6819      	ldr	r1, [r3, #0]
3418455e:	687b      	ldr	r3, [r7, #4]
34184560:	681b      	ldr	r3, [r3, #0]
34184562:	683a      	ldr	r2, [r7, #0]
34184564:	430a      	orrs	r2, r1
34184566:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
34184568:	687b      	ldr	r3, [r7, #4]
3418456a:	681b      	ldr	r3, [r3, #0]
3418456c:	681a      	ldr	r2, [r3, #0]
3418456e:	687b      	ldr	r3, [r7, #4]
34184570:	681b      	ldr	r3, [r3, #0]
34184572:	f042 0201 	orr.w	r2, r2, #1
34184576:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
34184578:	687b      	ldr	r3, [r7, #4]
3418457a:	2220      	movs	r2, #32
3418457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
34184580:	687b      	ldr	r3, [r7, #4]
34184582:	2200      	movs	r2, #0
34184584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
34184588:	2300      	movs	r3, #0
3418458a:	e000      	b.n	3418458e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
3418458c:	2302      	movs	r3, #2
  }
}
3418458e:	4618      	mov	r0, r3
34184590:	370c      	adds	r7, #12
34184592:	46bd      	mov	sp, r7
34184594:	f85d 7b04 	ldr.w	r7, [sp], #4
34184598:	4770      	bx	lr

3418459a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
3418459a:	b480      	push	{r7}
3418459c:	b085      	sub	sp, #20
3418459e:	af00      	add	r7, sp, #0
341845a0:	6078      	str	r0, [r7, #4]
341845a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
341845a4:	687b      	ldr	r3, [r7, #4]
341845a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
341845aa:	b2db      	uxtb	r3, r3
341845ac:	2b20      	cmp	r3, #32
341845ae:	d139      	bne.n	34184624 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
341845b0:	687b      	ldr	r3, [r7, #4]
341845b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
341845b6:	2b01      	cmp	r3, #1
341845b8:	d101      	bne.n	341845be <HAL_I2CEx_ConfigDigitalFilter+0x24>
341845ba:	2302      	movs	r3, #2
341845bc:	e033      	b.n	34184626 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
341845be:	687b      	ldr	r3, [r7, #4]
341845c0:	2201      	movs	r2, #1
341845c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
341845c6:	687b      	ldr	r3, [r7, #4]
341845c8:	2224      	movs	r2, #36	@ 0x24
341845ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
341845ce:	687b      	ldr	r3, [r7, #4]
341845d0:	681b      	ldr	r3, [r3, #0]
341845d2:	681a      	ldr	r2, [r3, #0]
341845d4:	687b      	ldr	r3, [r7, #4]
341845d6:	681b      	ldr	r3, [r3, #0]
341845d8:	f022 0201 	bic.w	r2, r2, #1
341845dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
341845de:	687b      	ldr	r3, [r7, #4]
341845e0:	681b      	ldr	r3, [r3, #0]
341845e2:	681b      	ldr	r3, [r3, #0]
341845e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
341845e6:	68fb      	ldr	r3, [r7, #12]
341845e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
341845ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
341845ee:	683b      	ldr	r3, [r7, #0]
341845f0:	021b      	lsls	r3, r3, #8
341845f2:	68fa      	ldr	r2, [r7, #12]
341845f4:	4313      	orrs	r3, r2
341845f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
341845f8:	687b      	ldr	r3, [r7, #4]
341845fa:	681b      	ldr	r3, [r3, #0]
341845fc:	68fa      	ldr	r2, [r7, #12]
341845fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
34184600:	687b      	ldr	r3, [r7, #4]
34184602:	681b      	ldr	r3, [r3, #0]
34184604:	681a      	ldr	r2, [r3, #0]
34184606:	687b      	ldr	r3, [r7, #4]
34184608:	681b      	ldr	r3, [r3, #0]
3418460a:	f042 0201 	orr.w	r2, r2, #1
3418460e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
34184610:	687b      	ldr	r3, [r7, #4]
34184612:	2220      	movs	r2, #32
34184614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
34184618:	687b      	ldr	r3, [r7, #4]
3418461a:	2200      	movs	r2, #0
3418461c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
34184620:	2300      	movs	r3, #0
34184622:	e000      	b.n	34184626 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
34184624:	2302      	movs	r3, #2
  }
}
34184626:	4618      	mov	r0, r3
34184628:	3714      	adds	r7, #20
3418462a:	46bd      	mov	sp, r7
3418462c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184630:	4770      	bx	lr
	...

34184634 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_4WAYS  4-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
34184634:	b480      	push	{r7}
34184636:	b085      	sub	sp, #20
34184638:	af00      	add	r7, sp, #0
3418463a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3418463c:	2300      	movs	r3, #0
3418463e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
34184640:	4b0b      	ldr	r3, [pc, #44]	@ (34184670 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
34184642:	681b      	ldr	r3, [r3, #0]
34184644:	f003 0301 	and.w	r3, r3, #1
34184648:	2b00      	cmp	r3, #0
3418464a:	d002      	beq.n	34184652 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
3418464c:	2301      	movs	r3, #1
3418464e:	73fb      	strb	r3, [r7, #15]
34184650:	e007      	b.n	34184662 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
34184652:	4b07      	ldr	r3, [pc, #28]	@ (34184670 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
34184654:	681b      	ldr	r3, [r3, #0]
34184656:	f023 0204 	bic.w	r2, r3, #4
3418465a:	4905      	ldr	r1, [pc, #20]	@ (34184670 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
3418465c:	687b      	ldr	r3, [r7, #4]
3418465e:	4313      	orrs	r3, r2
34184660:	600b      	str	r3, [r1, #0]
  }

  return status;
34184662:	7bfb      	ldrb	r3, [r7, #15]
}
34184664:	4618      	mov	r0, r3
34184666:	3714      	adds	r7, #20
34184668:	46bd      	mov	sp, r7
3418466a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418466e:	4770      	bx	lr
34184670:	58035000 	.word	0x58035000

34184674 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
34184674:	b480      	push	{r7}
34184676:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
34184678:	4b05      	ldr	r3, [pc, #20]	@ (34184690 <HAL_ICACHE_Enable+0x1c>)
3418467a:	681b      	ldr	r3, [r3, #0]
3418467c:	4a04      	ldr	r2, [pc, #16]	@ (34184690 <HAL_ICACHE_Enable+0x1c>)
3418467e:	f043 0301 	orr.w	r3, r3, #1
34184682:	6013      	str	r3, [r2, #0]

  return HAL_OK;
34184684:	2300      	movs	r3, #0
}
34184686:	4618      	mov	r0, r3
34184688:	46bd      	mov	sp, r7
3418468a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418468e:	4770      	bx	lr
34184690:	58035000 	.word	0x58035000

34184694 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
34184694:	b580      	push	{r7, lr}
34184696:	b084      	sub	sp, #16
34184698:	af00      	add	r7, sp, #0
3418469a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3418469c:	2300      	movs	r3, #0
3418469e:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
341846a0:	687b      	ldr	r3, [r7, #4]
341846a2:	2b00      	cmp	r3, #0
341846a4:	d102      	bne.n	341846ac <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
341846a6:	2301      	movs	r3, #1
341846a8:	73fb      	strb	r3, [r7, #15]
341846aa:	e141      	b.n	34184930 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
341846ac:	687b      	ldr	r3, [r7, #4]
341846ae:	681b      	ldr	r3, [r3, #0]
341846b0:	4618      	mov	r0, r3
341846b2:	f000 f947 	bl	34184944 <MDF_GetHandleNumberFromInstance>
341846b6:	4603      	mov	r3, r0
341846b8:	4a86      	ldr	r2, [pc, #536]	@ (341848d4 <HAL_MDF_Init+0x240>)
341846ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
341846be:	2b00      	cmp	r3, #0
341846c0:	d002      	beq.n	341846c8 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
341846c2:	2301      	movs	r3, #1
341846c4:	73fb      	strb	r3, [r7, #15]
341846c6:	e133      	b.n	34184930 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
341846c8:	6878      	ldr	r0, [r7, #4]
341846ca:	f7fd f96d 	bl	341819a8 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
341846ce:	4b82      	ldr	r3, [pc, #520]	@ (341848d8 <HAL_MDF_Init+0x244>)
341846d0:	681b      	ldr	r3, [r3, #0]
341846d2:	2b00      	cmp	r3, #0
341846d4:	d11d      	bne.n	34184712 <HAL_MDF_Init+0x7e>
341846d6:	687b      	ldr	r3, [r7, #4]
341846d8:	681b      	ldr	r3, [r3, #0]
341846da:	4a80      	ldr	r2, [pc, #512]	@ (341848dc <HAL_MDF_Init+0x248>)
341846dc:	4293      	cmp	r3, r2
341846de:	d023      	beq.n	34184728 <HAL_MDF_Init+0x94>
341846e0:	687b      	ldr	r3, [r7, #4]
341846e2:	681b      	ldr	r3, [r3, #0]
341846e4:	4a7e      	ldr	r2, [pc, #504]	@ (341848e0 <HAL_MDF_Init+0x24c>)
341846e6:	4293      	cmp	r3, r2
341846e8:	d01e      	beq.n	34184728 <HAL_MDF_Init+0x94>
341846ea:	687b      	ldr	r3, [r7, #4]
341846ec:	681b      	ldr	r3, [r3, #0]
341846ee:	4a7d      	ldr	r2, [pc, #500]	@ (341848e4 <HAL_MDF_Init+0x250>)
341846f0:	4293      	cmp	r3, r2
341846f2:	d019      	beq.n	34184728 <HAL_MDF_Init+0x94>
341846f4:	687b      	ldr	r3, [r7, #4]
341846f6:	681b      	ldr	r3, [r3, #0]
341846f8:	4a7b      	ldr	r2, [pc, #492]	@ (341848e8 <HAL_MDF_Init+0x254>)
341846fa:	4293      	cmp	r3, r2
341846fc:	d014      	beq.n	34184728 <HAL_MDF_Init+0x94>
341846fe:	687b      	ldr	r3, [r7, #4]
34184700:	681b      	ldr	r3, [r3, #0]
34184702:	4a7a      	ldr	r2, [pc, #488]	@ (341848ec <HAL_MDF_Init+0x258>)
34184704:	4293      	cmp	r3, r2
34184706:	d00f      	beq.n	34184728 <HAL_MDF_Init+0x94>
34184708:	687b      	ldr	r3, [r7, #4]
3418470a:	681b      	ldr	r3, [r3, #0]
3418470c:	4a78      	ldr	r2, [pc, #480]	@ (341848f0 <HAL_MDF_Init+0x25c>)
3418470e:	4293      	cmp	r3, r2
34184710:	d00a      	beq.n	34184728 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
34184712:	4b78      	ldr	r3, [pc, #480]	@ (341848f4 <HAL_MDF_Init+0x260>)
34184714:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
34184716:	2b00      	cmp	r3, #0
34184718:	f040 8090 	bne.w	3418483c <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
3418471c:	687b      	ldr	r3, [r7, #4]
3418471e:	681b      	ldr	r3, [r3, #0]
34184720:	4a75      	ldr	r2, [pc, #468]	@ (341848f8 <HAL_MDF_Init+0x264>)
34184722:	4293      	cmp	r3, r2
34184724:	f040 808a 	bne.w	3418483c <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
34184728:	687b      	ldr	r3, [r7, #4]
3418472a:	681b      	ldr	r3, [r3, #0]
3418472c:	4a72      	ldr	r2, [pc, #456]	@ (341848f8 <HAL_MDF_Init+0x264>)
3418472e:	4293      	cmp	r3, r2
34184730:	d101      	bne.n	34184736 <HAL_MDF_Init+0xa2>
34184732:	4b72      	ldr	r3, [pc, #456]	@ (341848fc <HAL_MDF_Init+0x268>)
34184734:	e000      	b.n	34184738 <HAL_MDF_Init+0xa4>
34184736:	4b72      	ldr	r3, [pc, #456]	@ (34184900 <HAL_MDF_Init+0x26c>)
34184738:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
3418473a:	68bb      	ldr	r3, [r7, #8]
3418473c:	685b      	ldr	r3, [r3, #4]
3418473e:	2b00      	cmp	r3, #0
34184740:	da02      	bge.n	34184748 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
34184742:	2301      	movs	r3, #1
34184744:	73fb      	strb	r3, [r7, #15]
34184746:	e079      	b.n	3418483c <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
34184748:	687b      	ldr	r3, [r7, #4]
3418474a:	681b      	ldr	r3, [r3, #0]
3418474c:	4a63      	ldr	r2, [pc, #396]	@ (341848dc <HAL_MDF_Init+0x248>)
3418474e:	4293      	cmp	r3, r2
34184750:	d018      	beq.n	34184784 <HAL_MDF_Init+0xf0>
34184752:	687b      	ldr	r3, [r7, #4]
34184754:	681b      	ldr	r3, [r3, #0]
34184756:	4a62      	ldr	r2, [pc, #392]	@ (341848e0 <HAL_MDF_Init+0x24c>)
34184758:	4293      	cmp	r3, r2
3418475a:	d013      	beq.n	34184784 <HAL_MDF_Init+0xf0>
3418475c:	687b      	ldr	r3, [r7, #4]
3418475e:	681b      	ldr	r3, [r3, #0]
34184760:	4a60      	ldr	r2, [pc, #384]	@ (341848e4 <HAL_MDF_Init+0x250>)
34184762:	4293      	cmp	r3, r2
34184764:	d00e      	beq.n	34184784 <HAL_MDF_Init+0xf0>
34184766:	687b      	ldr	r3, [r7, #4]
34184768:	681b      	ldr	r3, [r3, #0]
3418476a:	4a5f      	ldr	r2, [pc, #380]	@ (341848e8 <HAL_MDF_Init+0x254>)
3418476c:	4293      	cmp	r3, r2
3418476e:	d009      	beq.n	34184784 <HAL_MDF_Init+0xf0>
34184770:	687b      	ldr	r3, [r7, #4]
34184772:	681b      	ldr	r3, [r3, #0]
34184774:	4a5d      	ldr	r2, [pc, #372]	@ (341848ec <HAL_MDF_Init+0x258>)
34184776:	4293      	cmp	r3, r2
34184778:	d004      	beq.n	34184784 <HAL_MDF_Init+0xf0>
3418477a:	687b      	ldr	r3, [r7, #4]
3418477c:	681b      	ldr	r3, [r3, #0]
3418477e:	4a5c      	ldr	r2, [pc, #368]	@ (341848f0 <HAL_MDF_Init+0x25c>)
34184780:	4293      	cmp	r3, r2
34184782:	d10d      	bne.n	341847a0 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
34184784:	68bb      	ldr	r3, [r7, #8]
34184786:	681b      	ldr	r3, [r3, #0]
34184788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
3418478c:	68bb      	ldr	r3, [r7, #8]
3418478e:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
34184790:	68bb      	ldr	r3, [r7, #8]
34184792:	681a      	ldr	r2, [r3, #0]
34184794:	687b      	ldr	r3, [r7, #4]
34184796:	685b      	ldr	r3, [r3, #4]
34184798:	011b      	lsls	r3, r3, #4
3418479a:	431a      	orrs	r2, r3
3418479c:	68bb      	ldr	r3, [r7, #8]
3418479e:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
341847a0:	68bb      	ldr	r3, [r7, #8]
341847a2:	2200      	movs	r2, #0
341847a4:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
341847a6:	68bb      	ldr	r3, [r7, #8]
341847a8:	685a      	ldr	r2, [r3, #4]
341847aa:	687b      	ldr	r3, [r7, #4]
341847ac:	689b      	ldr	r3, [r3, #8]
341847ae:	3b01      	subs	r3, #1
341847b0:	061b      	lsls	r3, r3, #24
341847b2:	431a      	orrs	r2, r3
341847b4:	68bb      	ldr	r3, [r7, #8]
341847b6:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
341847b8:	687b      	ldr	r3, [r7, #4]
341847ba:	7b1b      	ldrb	r3, [r3, #12]
341847bc:	2b01      	cmp	r3, #1
341847be:	d137      	bne.n	34184830 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
341847c0:	68bb      	ldr	r3, [r7, #8]
341847c2:	685a      	ldr	r2, [r3, #4]
341847c4:	687b      	ldr	r3, [r7, #4]
341847c6:	695b      	ldr	r3, [r3, #20]
341847c8:	3b01      	subs	r3, #1
341847ca:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
341847cc:	687b      	ldr	r3, [r7, #4]
341847ce:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
341847d0:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
341847d2:	687b      	ldr	r3, [r7, #4]
341847d4:	691b      	ldr	r3, [r3, #16]
341847d6:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
341847d8:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
341847da:	431a      	orrs	r2, r3
341847dc:	68bb      	ldr	r3, [r7, #8]
341847de:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
341847e0:	687b      	ldr	r3, [r7, #4]
341847e2:	7e1b      	ldrb	r3, [r3, #24]
341847e4:	2b01      	cmp	r3, #1
341847e6:	d123      	bne.n	34184830 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
341847e8:	687b      	ldr	r3, [r7, #4]
341847ea:	681b      	ldr	r3, [r3, #0]
341847ec:	4a3b      	ldr	r2, [pc, #236]	@ (341848dc <HAL_MDF_Init+0x248>)
341847ee:	4293      	cmp	r3, r2
341847f0:	d012      	beq.n	34184818 <HAL_MDF_Init+0x184>
341847f2:	687b      	ldr	r3, [r7, #4]
341847f4:	681b      	ldr	r3, [r3, #0]
341847f6:	4a3a      	ldr	r2, [pc, #232]	@ (341848e0 <HAL_MDF_Init+0x24c>)
341847f8:	4293      	cmp	r3, r2
341847fa:	d00d      	beq.n	34184818 <HAL_MDF_Init+0x184>
341847fc:	687b      	ldr	r3, [r7, #4]
341847fe:	681b      	ldr	r3, [r3, #0]
34184800:	4a38      	ldr	r2, [pc, #224]	@ (341848e4 <HAL_MDF_Init+0x250>)
34184802:	4293      	cmp	r3, r2
34184804:	d008      	beq.n	34184818 <HAL_MDF_Init+0x184>
34184806:	687b      	ldr	r3, [r7, #4]
34184808:	681b      	ldr	r3, [r3, #0]
3418480a:	4a37      	ldr	r2, [pc, #220]	@ (341848e8 <HAL_MDF_Init+0x254>)
3418480c:	4293      	cmp	r3, r2
3418480e:	d003      	beq.n	34184818 <HAL_MDF_Init+0x184>
34184810:	687b      	ldr	r3, [r7, #4]
34184812:	681b      	ldr	r3, [r3, #0]
34184814:	4a35      	ldr	r2, [pc, #212]	@ (341848ec <HAL_MDF_Init+0x258>)
34184816:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
34184818:	68bb      	ldr	r3, [r7, #8]
3418481a:	685a      	ldr	r2, [r3, #4]
3418481c:	687b      	ldr	r3, [r7, #4]
3418481e:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
34184820:	687b      	ldr	r3, [r7, #4]
34184822:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
34184824:	430b      	orrs	r3, r1
34184826:	4313      	orrs	r3, r2
34184828:	f043 0210 	orr.w	r2, r3, #16
3418482c:	68bb      	ldr	r3, [r7, #8]
3418482e:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
34184830:	68bb      	ldr	r3, [r7, #8]
34184832:	685b      	ldr	r3, [r3, #4]
34184834:	f043 0201 	orr.w	r2, r3, #1
34184838:	68bb      	ldr	r3, [r7, #8]
3418483a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
3418483c:	7bfb      	ldrb	r3, [r7, #15]
3418483e:	2b00      	cmp	r3, #0
34184840:	d128      	bne.n	34184894 <HAL_MDF_Init+0x200>
34184842:	687b      	ldr	r3, [r7, #4]
34184844:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
34184848:	2b01      	cmp	r3, #1
3418484a:	d123      	bne.n	34184894 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
3418484c:	687b      	ldr	r3, [r7, #4]
3418484e:	681b      	ldr	r3, [r3, #0]
34184850:	681b      	ldr	r3, [r3, #0]
34184852:	2b00      	cmp	r3, #0
34184854:	da02      	bge.n	3418485c <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
34184856:	2301      	movs	r3, #1
34184858:	73fb      	strb	r3, [r7, #15]
3418485a:	e01b      	b.n	34184894 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
3418485c:	687b      	ldr	r3, [r7, #4]
3418485e:	681b      	ldr	r3, [r3, #0]
34184860:	2200      	movs	r2, #0
34184862:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
34184864:	687b      	ldr	r3, [r7, #4]
34184866:	681b      	ldr	r3, [r3, #0]
34184868:	6819      	ldr	r1, [r3, #0]
3418486a:	687b      	ldr	r3, [r7, #4]
3418486c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418486e:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
34184870:	687b      	ldr	r3, [r7, #4]
34184872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
34184874:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
34184876:	687b      	ldr	r3, [r7, #4]
34184878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418487a:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
3418487c:	687b      	ldr	r3, [r7, #4]
3418487e:	681b      	ldr	r3, [r3, #0]
34184880:	430a      	orrs	r2, r1
34184882:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
34184884:	687b      	ldr	r3, [r7, #4]
34184886:	681b      	ldr	r3, [r3, #0]
34184888:	681a      	ldr	r2, [r3, #0]
3418488a:	687b      	ldr	r3, [r7, #4]
3418488c:	681b      	ldr	r3, [r3, #0]
3418488e:	f042 0201 	orr.w	r2, r2, #1
34184892:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
34184894:	7bfb      	ldrb	r3, [r7, #15]
34184896:	2b00      	cmp	r3, #0
34184898:	d14a      	bne.n	34184930 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
3418489a:	687b      	ldr	r3, [r7, #4]
3418489c:	681b      	ldr	r3, [r3, #0]
3418489e:	685a      	ldr	r2, [r3, #4]
341848a0:	687b      	ldr	r3, [r7, #4]
341848a2:	681b      	ldr	r3, [r3, #0]
341848a4:	f022 021f 	bic.w	r2, r2, #31
341848a8:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
341848aa:	687b      	ldr	r3, [r7, #4]
341848ac:	681b      	ldr	r3, [r3, #0]
341848ae:	6859      	ldr	r1, [r3, #4]
341848b0:	687b      	ldr	r3, [r7, #4]
341848b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
341848b4:	687b      	ldr	r3, [r7, #4]
341848b6:	681b      	ldr	r3, [r3, #0]
341848b8:	430a      	orrs	r2, r1
341848ba:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
341848bc:	687b      	ldr	r3, [r7, #4]
341848be:	681b      	ldr	r3, [r3, #0]
341848c0:	4a0d      	ldr	r2, [pc, #52]	@ (341848f8 <HAL_MDF_Init+0x264>)
341848c2:	4293      	cmp	r3, r2
341848c4:	d11e      	bne.n	34184904 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
341848c6:	4b0b      	ldr	r3, [pc, #44]	@ (341848f4 <HAL_MDF_Init+0x260>)
341848c8:	681b      	ldr	r3, [r3, #0]
341848ca:	3301      	adds	r3, #1
341848cc:	4a09      	ldr	r2, [pc, #36]	@ (341848f4 <HAL_MDF_Init+0x260>)
341848ce:	6013      	str	r3, [r2, #0]
341848d0:	e01d      	b.n	3418490e <HAL_MDF_Init+0x27a>
341848d2:	bf00      	nop
341848d4:	341c093c 	.word	0x341c093c
341848d8:	341c0934 	.word	0x341c0934
341848dc:	52025080 	.word	0x52025080
341848e0:	52025100 	.word	0x52025100
341848e4:	52025180 	.word	0x52025180
341848e8:	52025200 	.word	0x52025200
341848ec:	52025280 	.word	0x52025280
341848f0:	52025300 	.word	0x52025300
341848f4:	341c0938 	.word	0x341c0938
341848f8:	52026080 	.word	0x52026080
341848fc:	52026000 	.word	0x52026000
34184900:	52025000 	.word	0x52025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
34184904:	4b0d      	ldr	r3, [pc, #52]	@ (3418493c <HAL_MDF_Init+0x2a8>)
34184906:	681b      	ldr	r3, [r3, #0]
34184908:	3301      	adds	r3, #1
3418490a:	4a0c      	ldr	r2, [pc, #48]	@ (3418493c <HAL_MDF_Init+0x2a8>)
3418490c:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
3418490e:	687b      	ldr	r3, [r7, #4]
34184910:	681b      	ldr	r3, [r3, #0]
34184912:	4618      	mov	r0, r3
34184914:	f000 f816 	bl	34184944 <MDF_GetHandleNumberFromInstance>
34184918:	4602      	mov	r2, r0
3418491a:	4909      	ldr	r1, [pc, #36]	@ (34184940 <HAL_MDF_Init+0x2ac>)
3418491c:	687b      	ldr	r3, [r7, #4]
3418491e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
34184922:	687b      	ldr	r3, [r7, #4]
34184924:	2200      	movs	r2, #0
34184926:	641a      	str	r2, [r3, #64]	@ 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
34184928:	687b      	ldr	r3, [r7, #4]
3418492a:	2201      	movs	r2, #1
3418492c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    }
  }

  /* Return function status */
  return status;
34184930:	7bfb      	ldrb	r3, [r7, #15]
}
34184932:	4618      	mov	r0, r3
34184934:	3710      	adds	r7, #16
34184936:	46bd      	mov	sp, r7
34184938:	bd80      	pop	{r7, pc}
3418493a:	bf00      	nop
3418493c:	341c0934 	.word	0x341c0934
34184940:	341c093c 	.word	0x341c093c

34184944 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
34184944:	b480      	push	{r7}
34184946:	b085      	sub	sp, #20
34184948:	af00      	add	r7, sp, #0
3418494a:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
3418494c:	687b      	ldr	r3, [r7, #4]
3418494e:	4a19      	ldr	r2, [pc, #100]	@ (341849b4 <MDF_GetHandleNumberFromInstance+0x70>)
34184950:	4293      	cmp	r3, r2
34184952:	d102      	bne.n	3418495a <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
34184954:	2300      	movs	r3, #0
34184956:	60fb      	str	r3, [r7, #12]
34184958:	e024      	b.n	341849a4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
3418495a:	687b      	ldr	r3, [r7, #4]
3418495c:	4a16      	ldr	r2, [pc, #88]	@ (341849b8 <MDF_GetHandleNumberFromInstance+0x74>)
3418495e:	4293      	cmp	r3, r2
34184960:	d102      	bne.n	34184968 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
34184962:	2301      	movs	r3, #1
34184964:	60fb      	str	r3, [r7, #12]
34184966:	e01d      	b.n	341849a4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter2)
34184968:	687b      	ldr	r3, [r7, #4]
3418496a:	4a14      	ldr	r2, [pc, #80]	@ (341849bc <MDF_GetHandleNumberFromInstance+0x78>)
3418496c:	4293      	cmp	r3, r2
3418496e:	d102      	bne.n	34184976 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
34184970:	2302      	movs	r3, #2
34184972:	60fb      	str	r3, [r7, #12]
34184974:	e016      	b.n	341849a4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
34184976:	687b      	ldr	r3, [r7, #4]
34184978:	4a11      	ldr	r2, [pc, #68]	@ (341849c0 <MDF_GetHandleNumberFromInstance+0x7c>)
3418497a:	4293      	cmp	r3, r2
3418497c:	d102      	bne.n	34184984 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
3418497e:	2303      	movs	r3, #3
34184980:	60fb      	str	r3, [r7, #12]
34184982:	e00f      	b.n	341849a4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
34184984:	687b      	ldr	r3, [r7, #4]
34184986:	4a0f      	ldr	r2, [pc, #60]	@ (341849c4 <MDF_GetHandleNumberFromInstance+0x80>)
34184988:	4293      	cmp	r3, r2
3418498a:	d102      	bne.n	34184992 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
3418498c:	2304      	movs	r3, #4
3418498e:	60fb      	str	r3, [r7, #12]
34184990:	e008      	b.n	341849a4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
34184992:	687b      	ldr	r3, [r7, #4]
34184994:	4a0c      	ldr	r2, [pc, #48]	@ (341849c8 <MDF_GetHandleNumberFromInstance+0x84>)
34184996:	4293      	cmp	r3, r2
34184998:	d102      	bne.n	341849a0 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
3418499a:	2305      	movs	r3, #5
3418499c:	60fb      	str	r3, [r7, #12]
3418499e:	e001      	b.n	341849a4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
341849a0:	2306      	movs	r3, #6
341849a2:	60fb      	str	r3, [r7, #12]
  }

  return handle_number;
341849a4:	68fb      	ldr	r3, [r7, #12]
}
341849a6:	4618      	mov	r0, r3
341849a8:	3714      	adds	r7, #20
341849aa:	46bd      	mov	sp, r7
341849ac:	f85d 7b04 	ldr.w	r7, [sp], #4
341849b0:	4770      	bx	lr
341849b2:	bf00      	nop
341849b4:	52025080 	.word	0x52025080
341849b8:	52025100 	.word	0x52025100
341849bc:	52025180 	.word	0x52025180
341849c0:	52025200 	.word	0x52025200
341849c4:	52025280 	.word	0x52025280
341849c8:	52025300 	.word	0x52025300

341849cc <HAL_PWREx_ConfigSupply>:
  * @note: The power supply configuration is not reset by wakeup from Standby mode and
  *        application reset, but only reset by VDD POR.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
341849cc:	b580      	push	{r7, lr}
341849ce:	b084      	sub	sp, #16
341849d0:	af00      	add	r7, sp, #0
341849d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR1, PWR_SUPPLY_CONFIG_MASK, SupplySource);
341849d4:	4b10      	ldr	r3, [pc, #64]	@ (34184a18 <HAL_PWREx_ConfigSupply+0x4c>)
341849d6:	681b      	ldr	r3, [r3, #0]
341849d8:	f023 0204 	bic.w	r2, r3, #4
341849dc:	490e      	ldr	r1, [pc, #56]	@ (34184a18 <HAL_PWREx_ConfigSupply+0x4c>)
341849de:	687b      	ldr	r3, [r7, #4]
341849e0:	4313      	orrs	r3, r2
341849e2:	600b      	str	r3, [r1, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
341849e4:	f7fd ff04 	bl	341827f0 <HAL_GetTick>
341849e8:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
341849ea:	e009      	b.n	34184a00 <HAL_PWREx_ConfigSupply+0x34>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
341849ec:	f7fd ff00 	bl	341827f0 <HAL_GetTick>
341849f0:	4602      	mov	r2, r0
341849f2:	68fb      	ldr	r3, [r7, #12]
341849f4:	1ad3      	subs	r3, r2, r3
341849f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
341849fa:	d901      	bls.n	34184a00 <HAL_PWREx_ConfigSupply+0x34>
    {
      return HAL_ERROR;
341849fc:	2301      	movs	r3, #1
341849fe:	e006      	b.n	34184a0e <HAL_PWREx_ConfigSupply+0x42>
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
34184a00:	4b05      	ldr	r3, [pc, #20]	@ (34184a18 <HAL_PWREx_ConfigSupply+0x4c>)
34184a02:	6a1b      	ldr	r3, [r3, #32]
34184a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34184a08:	2b00      	cmp	r3, #0
34184a0a:	d0ef      	beq.n	341849ec <HAL_PWREx_ConfigSupply+0x20>
    }
  }

  return HAL_OK;
34184a0c:	2300      	movs	r3, #0
}
34184a0e:	4618      	mov	r0, r3
34184a10:	3710      	adds	r7, #16
34184a12:	46bd      	mov	sp, r7
34184a14:	bd80      	pop	{r7, pc}
34184a16:	bf00      	nop
34184a18:	56024800 	.word	0x56024800

34184a1c <HAL_PWREx_EnableVddUSB>:
  * @note   Setting this bit is mandatory to use the USB2 HS PHYs.
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
34184a1c:	b480      	push	{r7}
34184a1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_USB33SV);
34184a20:	4b05      	ldr	r3, [pc, #20]	@ (34184a38 <HAL_PWREx_EnableVddUSB+0x1c>)
34184a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34184a24:	4a04      	ldr	r2, [pc, #16]	@ (34184a38 <HAL_PWREx_EnableVddUSB+0x1c>)
34184a26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
34184a2a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34184a2c:	bf00      	nop
34184a2e:	46bd      	mov	sp, r7
34184a30:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a34:	4770      	bx	lr
34184a36:	bf00      	nop
34184a38:	56024800 	.word	0x56024800

34184a3c <HAL_PWREx_EnableVddIO2>:
  * @brief  Enable VDDIO2 supply valid.
  * @note   Setting this bit is mandatory to use PO[5:0] and PP[15:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
34184a3c:	b480      	push	{r7}
34184a3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2SV);
34184a40:	4b05      	ldr	r3, [pc, #20]	@ (34184a58 <HAL_PWREx_EnableVddIO2+0x1c>)
34184a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34184a44:	4a04      	ldr	r2, [pc, #16]	@ (34184a58 <HAL_PWREx_EnableVddIO2+0x1c>)
34184a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34184a4a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34184a4c:	bf00      	nop
34184a4e:	46bd      	mov	sp, r7
34184a50:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a54:	4770      	bx	lr
34184a56:	bf00      	nop
34184a58:	56024800 	.word	0x56024800

34184a5c <HAL_PWREx_EnableVddIO3>:
  * @brief  Enable VDDIO3 supply valid.
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
34184a5c:	b480      	push	{r7}
34184a5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
34184a60:	4b05      	ldr	r3, [pc, #20]	@ (34184a78 <HAL_PWREx_EnableVddIO3+0x1c>)
34184a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34184a64:	4a04      	ldr	r2, [pc, #16]	@ (34184a78 <HAL_PWREx_EnableVddIO3+0x1c>)
34184a66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34184a6a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34184a6c:	bf00      	nop
34184a6e:	46bd      	mov	sp, r7
34184a70:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a74:	4770      	bx	lr
34184a76:	bf00      	nop
34184a78:	56024800 	.word	0x56024800

34184a7c <HAL_PWREx_EnableVddIO4>:
  * @brief  Enable VDDIO4 supply valid.
  * @note   Setting this bit is mandatory to use PB[9,8], PC[12:6], and PD[2] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO4(void)
{
34184a7c:	b480      	push	{r7}
34184a7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR1, PWR_SVMCR1_VDDIO4SV);
34184a80:	4b05      	ldr	r3, [pc, #20]	@ (34184a98 <HAL_PWREx_EnableVddIO4+0x1c>)
34184a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34184a84:	4a04      	ldr	r2, [pc, #16]	@ (34184a98 <HAL_PWREx_EnableVddIO4+0x1c>)
34184a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34184a8a:	6353      	str	r3, [r2, #52]	@ 0x34
}
34184a8c:	bf00      	nop
34184a8e:	46bd      	mov	sp, r7
34184a90:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a94:	4770      	bx	lr
34184a96:	bf00      	nop
34184a98:	56024800 	.word	0x56024800

34184a9c <HAL_PWREx_EnableVddIO5>:
  * @brief  Enable VDDIO5 supply valid.
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO5(void)
{
34184a9c:	b480      	push	{r7}
34184a9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR2, PWR_SVMCR2_VDDIO5SV);
34184aa0:	4b05      	ldr	r3, [pc, #20]	@ (34184ab8 <HAL_PWREx_EnableVddIO5+0x1c>)
34184aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34184aa4:	4a04      	ldr	r2, [pc, #16]	@ (34184ab8 <HAL_PWREx_EnableVddIO5+0x1c>)
34184aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34184aaa:	6393      	str	r3, [r2, #56]	@ 0x38
}
34184aac:	bf00      	nop
34184aae:	46bd      	mov	sp, r7
34184ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ab4:	4770      	bx	lr
34184ab6:	bf00      	nop
34184ab8:	56024800 	.word	0x56024800

34184abc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll SR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
34184abc:	b480      	push	{r7}
34184abe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34184ac0:	4b06      	ldr	r3, [pc, #24]	@ (34184adc <LL_RCC_HSE_IsReady+0x20>)
34184ac2:	685b      	ldr	r3, [r3, #4]
34184ac4:	f003 0310 	and.w	r3, r3, #16
34184ac8:	2b00      	cmp	r3, #0
34184aca:	d001      	beq.n	34184ad0 <LL_RCC_HSE_IsReady+0x14>
34184acc:	2301      	movs	r3, #1
34184ace:	e000      	b.n	34184ad2 <LL_RCC_HSE_IsReady+0x16>
34184ad0:	2300      	movs	r3, #0
}
34184ad2:	4618      	mov	r0, r3
34184ad4:	46bd      	mov	sp, r7
34184ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ada:	4770      	bx	lr
34184adc:	56028000 	.word	0x56028000

34184ae0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CSR          HSIONS        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
34184ae0:	b480      	push	{r7}
34184ae2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
34184ae4:	4b04      	ldr	r3, [pc, #16]	@ (34184af8 <LL_RCC_HSI_Enable+0x18>)
34184ae6:	2208      	movs	r2, #8
34184ae8:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34184aec:	bf00      	nop
34184aee:	46bd      	mov	sp, r7
34184af0:	f85d 7b04 	ldr.w	r7, [sp], #4
34184af4:	4770      	bx	lr
34184af6:	bf00      	nop
34184af8:	56028000 	.word	0x56028000

34184afc <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CCR          HSIONC        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
34184afc:	b480      	push	{r7}
34184afe:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
34184b00:	4b05      	ldr	r3, [pc, #20]	@ (34184b18 <LL_RCC_HSI_Disable+0x1c>)
34184b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34184b06:	461a      	mov	r2, r3
34184b08:	2308      	movs	r3, #8
34184b0a:	6013      	str	r3, [r2, #0]
}
34184b0c:	bf00      	nop
34184b0e:	46bd      	mov	sp, r7
34184b10:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b14:	4770      	bx	lr
34184b16:	bf00      	nop
34184b18:	56028000 	.word	0x56028000

34184b1c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll SR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
34184b1c:	b480      	push	{r7}
34184b1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34184b20:	4b06      	ldr	r3, [pc, #24]	@ (34184b3c <LL_RCC_HSI_IsReady+0x20>)
34184b22:	685b      	ldr	r3, [r3, #4]
34184b24:	f003 0308 	and.w	r3, r3, #8
34184b28:	2b00      	cmp	r3, #0
34184b2a:	d001      	beq.n	34184b30 <LL_RCC_HSI_IsReady+0x14>
34184b2c:	2301      	movs	r3, #1
34184b2e:	e000      	b.n	34184b32 <LL_RCC_HSI_IsReady+0x16>
34184b30:	2300      	movs	r3, #0
}
34184b32:	4618      	mov	r0, r3
34184b34:	46bd      	mov	sp, r7
34184b36:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b3a:	4770      	bx	lr
34184b3c:	56028000 	.word	0x56028000

34184b40 <LL_RCC_HSI_SetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_HSI_SetDivider(uint32_t Divider)
{
34184b40:	b480      	push	{r7}
34184b42:	b083      	sub	sp, #12
34184b44:	af00      	add	r7, sp, #0
34184b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34184b48:	4b06      	ldr	r3, [pc, #24]	@ (34184b64 <LL_RCC_HSI_SetDivider+0x24>)
34184b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34184b4c:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
34184b50:	4904      	ldr	r1, [pc, #16]	@ (34184b64 <LL_RCC_HSI_SetDivider+0x24>)
34184b52:	687b      	ldr	r3, [r7, #4]
34184b54:	4313      	orrs	r3, r2
34184b56:	648b      	str	r3, [r1, #72]	@ 0x48
}
34184b58:	bf00      	nop
34184b5a:	370c      	adds	r7, #12
34184b5c:	46bd      	mov	sp, r7
34184b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b62:	4770      	bx	lr
34184b64:	56028000 	.word	0x56028000

34184b68 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_2
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
34184b68:	b480      	push	{r7}
34184b6a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34184b6c:	4b04      	ldr	r3, [pc, #16]	@ (34184b80 <LL_RCC_HSI_GetDivider+0x18>)
34184b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34184b70:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
34184b74:	4618      	mov	r0, r3
34184b76:	46bd      	mov	sp, r7
34184b78:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b7c:	4770      	bx	lr
34184b7e:	bf00      	nop
34184b80:	56028000 	.word	0x56028000

34184b84 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll HSICFGR      HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value This parameter can be a value between 0 and 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
34184b84:	b480      	push	{r7}
34184b86:	b083      	sub	sp, #12
34184b88:	af00      	add	r7, sp, #0
34184b8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
34184b8c:	4b07      	ldr	r3, [pc, #28]	@ (34184bac <LL_RCC_HSI_SetCalibTrimming+0x28>)
34184b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34184b90:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
34184b94:	687b      	ldr	r3, [r7, #4]
34184b96:	041b      	lsls	r3, r3, #16
34184b98:	4904      	ldr	r1, [pc, #16]	@ (34184bac <LL_RCC_HSI_SetCalibTrimming+0x28>)
34184b9a:	4313      	orrs	r3, r2
34184b9c:	648b      	str	r3, [r1, #72]	@ 0x48
}
34184b9e:	bf00      	nop
34184ba0:	370c      	adds	r7, #12
34184ba2:	46bd      	mov	sp, r7
34184ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ba8:	4770      	bx	lr
34184baa:	bf00      	nop
34184bac:	56028000 	.word	0x56028000

34184bb0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CSR          MSIONS        LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
34184bb0:	b480      	push	{r7}
34184bb2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
34184bb4:	4b04      	ldr	r3, [pc, #16]	@ (34184bc8 <LL_RCC_MSI_Enable+0x18>)
34184bb6:	2204      	movs	r2, #4
34184bb8:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34184bbc:	bf00      	nop
34184bbe:	46bd      	mov	sp, r7
34184bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
34184bc4:	4770      	bx	lr
34184bc6:	bf00      	nop
34184bc8:	56028000 	.word	0x56028000

34184bcc <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CCR          MSIONC        LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
34184bcc:	b480      	push	{r7}
34184bce:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
34184bd0:	4b05      	ldr	r3, [pc, #20]	@ (34184be8 <LL_RCC_MSI_Disable+0x1c>)
34184bd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34184bd6:	461a      	mov	r2, r3
34184bd8:	2304      	movs	r3, #4
34184bda:	6013      	str	r3, [r2, #0]
}
34184bdc:	bf00      	nop
34184bde:	46bd      	mov	sp, r7
34184be0:	f85d 7b04 	ldr.w	r7, [sp], #4
34184be4:	4770      	bx	lr
34184be6:	bf00      	nop
34184be8:	56028000 	.word	0x56028000

34184bec <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI clock is ready
  * @rmtoll SR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
34184bec:	b480      	push	{r7}
34184bee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34184bf0:	4b06      	ldr	r3, [pc, #24]	@ (34184c0c <LL_RCC_MSI_IsReady+0x20>)
34184bf2:	685b      	ldr	r3, [r3, #4]
34184bf4:	f003 0304 	and.w	r3, r3, #4
34184bf8:	2b00      	cmp	r3, #0
34184bfa:	d001      	beq.n	34184c00 <LL_RCC_MSI_IsReady+0x14>
34184bfc:	2301      	movs	r3, #1
34184bfe:	e000      	b.n	34184c02 <LL_RCC_MSI_IsReady+0x16>
34184c00:	2300      	movs	r3, #0
}
34184c02:	4618      	mov	r0, r3
34184c04:	46bd      	mov	sp, r7
34184c06:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c0a:	4770      	bx	lr
34184c0c:	56028000 	.word	0x56028000

34184c10 <LL_RCC_MSI_SetFrequency>:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_MSI_SetFrequency(uint32_t Value)
{
34184c10:	b480      	push	{r7}
34184c12:	b083      	sub	sp, #12
34184c14:	af00      	add	r7, sp, #0
34184c16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
34184c18:	4b06      	ldr	r3, [pc, #24]	@ (34184c34 <LL_RCC_MSI_SetFrequency+0x24>)
34184c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34184c1c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34184c20:	4904      	ldr	r1, [pc, #16]	@ (34184c34 <LL_RCC_MSI_SetFrequency+0x24>)
34184c22:	687b      	ldr	r3, [r7, #4]
34184c24:	4313      	orrs	r3, r2
34184c26:	644b      	str	r3, [r1, #68]	@ 0x44
}
34184c28:	bf00      	nop
34184c2a:	370c      	adds	r7, #12
34184c2c:	46bd      	mov	sp, r7
34184c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c32:	4770      	bx	lr
34184c34:	56028000 	.word	0x56028000

34184c38 <LL_RCC_MSI_GetFrequency>:
  * @retval can be one of the following values:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetFrequency(void)
{
34184c38:	b480      	push	{r7}
34184c3a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34184c3c:	4b04      	ldr	r3, [pc, #16]	@ (34184c50 <LL_RCC_MSI_GetFrequency+0x18>)
34184c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34184c40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
34184c44:	4618      	mov	r0, r3
34184c46:	46bd      	mov	sp, r7
34184c48:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c4c:	4770      	bx	lr
34184c4e:	bf00      	nop
34184c50:	56028000 	.word	0x56028000

34184c54 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll MSICFGR      MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value can be a value between 0 and 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
34184c54:	b480      	push	{r7}
34184c56:	b083      	sub	sp, #12
34184c58:	af00      	add	r7, sp, #0
34184c5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
34184c5c:	4b07      	ldr	r3, [pc, #28]	@ (34184c7c <LL_RCC_MSI_SetCalibTrimming+0x28>)
34184c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34184c60:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
34184c64:	687b      	ldr	r3, [r7, #4]
34184c66:	041b      	lsls	r3, r3, #16
34184c68:	4904      	ldr	r1, [pc, #16]	@ (34184c7c <LL_RCC_MSI_SetCalibTrimming+0x28>)
34184c6a:	4313      	orrs	r3, r2
34184c6c:	644b      	str	r3, [r1, #68]	@ 0x44
}
34184c6e:	bf00      	nop
34184c70:	370c      	adds	r7, #12
34184c72:	46bd      	mov	sp, r7
34184c74:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c78:	4770      	bx	lr
34184c7a:	bf00      	nop
34184c7c:	56028000 	.word	0x56028000

34184c80 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll SR           LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
34184c80:	b480      	push	{r7}
34184c82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34184c84:	4b06      	ldr	r3, [pc, #24]	@ (34184ca0 <LL_RCC_LSE_IsReady+0x20>)
34184c86:	685b      	ldr	r3, [r3, #4]
34184c88:	f003 0302 	and.w	r3, r3, #2
34184c8c:	2b00      	cmp	r3, #0
34184c8e:	d001      	beq.n	34184c94 <LL_RCC_LSE_IsReady+0x14>
34184c90:	2301      	movs	r3, #1
34184c92:	e000      	b.n	34184c96 <LL_RCC_LSE_IsReady+0x16>
34184c94:	2300      	movs	r3, #0
}
34184c96:	4618      	mov	r0, r3
34184c98:	46bd      	mov	sp, r7
34184c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c9e:	4770      	bx	lr
34184ca0:	56028000 	.word	0x56028000

34184ca4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSIONS        LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
34184ca4:	b480      	push	{r7}
34184ca6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
34184ca8:	4b04      	ldr	r3, [pc, #16]	@ (34184cbc <LL_RCC_LSI_Enable+0x18>)
34184caa:	2201      	movs	r2, #1
34184cac:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34184cb0:	bf00      	nop
34184cb2:	46bd      	mov	sp, r7
34184cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
34184cb8:	4770      	bx	lr
34184cba:	bf00      	nop
34184cbc:	56028000 	.word	0x56028000

34184cc0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CCR          LSIONC        LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
34184cc0:	b480      	push	{r7}
34184cc2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
34184cc4:	4b05      	ldr	r3, [pc, #20]	@ (34184cdc <LL_RCC_LSI_Disable+0x1c>)
34184cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34184cca:	461a      	mov	r2, r3
34184ccc:	2301      	movs	r3, #1
34184cce:	6013      	str	r3, [r2, #0]
}
34184cd0:	bf00      	nop
34184cd2:	46bd      	mov	sp, r7
34184cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
34184cd8:	4770      	bx	lr
34184cda:	bf00      	nop
34184cdc:	56028000 	.word	0x56028000

34184ce0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll SR           LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
34184ce0:	b480      	push	{r7}
34184ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34184ce4:	4b04      	ldr	r3, [pc, #16]	@ (34184cf8 <LL_RCC_LSI_IsReady+0x18>)
34184ce6:	685b      	ldr	r3, [r3, #4]
34184ce8:	f003 0301 	and.w	r3, r3, #1
}
34184cec:	4618      	mov	r0, r3
34184cee:	46bd      	mov	sp, r7
34184cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
34184cf4:	4770      	bx	lr
34184cf6:	bf00      	nop
34184cf8:	56028000 	.word	0x56028000

34184cfc <LL_RCC_GetCpuClkSource>:
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_IC1
  */
__STATIC_INLINE uint32_t LL_RCC_GetCpuClkSource(void)
{
34184cfc:	b480      	push	{r7}
34184cfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34184d00:	4b04      	ldr	r3, [pc, #16]	@ (34184d14 <LL_RCC_GetCpuClkSource+0x18>)
34184d02:	6a1b      	ldr	r3, [r3, #32]
34184d04:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
34184d08:	4618      	mov	r0, r3
34184d0a:	46bd      	mov	sp, r7
34184d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d10:	4770      	bx	lr
34184d12:	bf00      	nop
34184d14:	56028000 	.word	0x56028000

34184d18 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_IC2_IC6_IC11
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
34184d18:	b480      	push	{r7}
34184d1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34184d1c:	4b04      	ldr	r3, [pc, #16]	@ (34184d30 <LL_RCC_GetSysClkSource+0x18>)
34184d1e:	6a1b      	ldr	r3, [r3, #32]
34184d20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184d24:	4618      	mov	r0, r3
34184d26:	46bd      	mov	sp, r7
34184d28:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d2c:	4770      	bx	lr
34184d2e:	bf00      	nop
34184d30:	56028000 	.word	0x56028000

34184d34 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_32
  *         @arg @ref LL_RCC_AHB_DIV_64
  *         @arg @ref LL_RCC_AHB_DIV_128
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
34184d34:	b480      	push	{r7}
34184d36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
34184d38:	4b04      	ldr	r3, [pc, #16]	@ (34184d4c <LL_RCC_GetAHBPrescaler+0x18>)
34184d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184d3c:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
34184d40:	4618      	mov	r0, r3
34184d42:	46bd      	mov	sp, r7
34184d44:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d48:	4770      	bx	lr
34184d4a:	bf00      	nop
34184d4c:	56028000 	.word	0x56028000

34184d50 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_32
  *         @arg @ref LL_RCC_APB1_DIV_64
  *         @arg @ref LL_RCC_APB1_DIV_128
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
34184d50:	b480      	push	{r7}
34184d52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34184d54:	4b04      	ldr	r3, [pc, #16]	@ (34184d68 <LL_RCC_GetAPB1Prescaler+0x18>)
34184d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184d58:	f003 0307 	and.w	r3, r3, #7
}
34184d5c:	4618      	mov	r0, r3
34184d5e:	46bd      	mov	sp, r7
34184d60:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d64:	4770      	bx	lr
34184d66:	bf00      	nop
34184d68:	56028000 	.word	0x56028000

34184d6c <LL_RCC_PLL1_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetSource(void)
{
34184d6c:	b480      	push	{r7}
34184d6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34184d70:	4b04      	ldr	r3, [pc, #16]	@ (34184d84 <LL_RCC_PLL1_GetSource+0x18>)
34184d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34184d76:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34184d7a:	4618      	mov	r0, r3
34184d7c:	46bd      	mov	sp, r7
34184d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d82:	4770      	bx	lr
34184d84:	56028000 	.word	0x56028000

34184d88 <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
34184d88:	b480      	push	{r7}
34184d8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34184d8c:	4b07      	ldr	r3, [pc, #28]	@ (34184dac <LL_RCC_PLL1_IsReady+0x24>)
34184d8e:	685b      	ldr	r3, [r3, #4]
34184d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34184d94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34184d98:	d101      	bne.n	34184d9e <LL_RCC_PLL1_IsReady+0x16>
34184d9a:	2301      	movs	r3, #1
34184d9c:	e000      	b.n	34184da0 <LL_RCC_PLL1_IsReady+0x18>
34184d9e:	2300      	movs	r3, #0
}
34184da0:	4618      	mov	r0, r3
34184da2:	46bd      	mov	sp, r7
34184da4:	f85d 7b04 	ldr.w	r7, [sp], #4
34184da8:	4770      	bx	lr
34184daa:	bf00      	nop
34184dac:	56028000 	.word	0x56028000

34184db0 <LL_RCC_PLL1_IsEnabledBypass>:
  * @brief  Check if PLL1 bypass is enabled
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
34184db0:	b480      	push	{r7}
34184db2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34184db4:	4b07      	ldr	r3, [pc, #28]	@ (34184dd4 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
34184db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34184dba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34184dbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34184dc2:	d101      	bne.n	34184dc8 <LL_RCC_PLL1_IsEnabledBypass+0x18>
34184dc4:	2301      	movs	r3, #1
34184dc6:	e000      	b.n	34184dca <LL_RCC_PLL1_IsEnabledBypass+0x1a>
34184dc8:	2300      	movs	r3, #0
}
34184dca:	4618      	mov	r0, r3
34184dcc:	46bd      	mov	sp, r7
34184dce:	f85d 7b04 	ldr.w	r7, [sp], #4
34184dd2:	4770      	bx	lr
34184dd4:	56028000 	.word	0x56028000

34184dd8 <LL_RCC_PLL2_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetSource(void)
{
34184dd8:	b480      	push	{r7}
34184dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34184ddc:	4b04      	ldr	r3, [pc, #16]	@ (34184df0 <LL_RCC_PLL2_GetSource+0x18>)
34184dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34184de2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34184de6:	4618      	mov	r0, r3
34184de8:	46bd      	mov	sp, r7
34184dea:	f85d 7b04 	ldr.w	r7, [sp], #4
34184dee:	4770      	bx	lr
34184df0:	56028000 	.word	0x56028000

34184df4 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll SR           PLL2RDY         LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
34184df4:	b480      	push	{r7}
34184df6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34184df8:	4b07      	ldr	r3, [pc, #28]	@ (34184e18 <LL_RCC_PLL2_IsReady+0x24>)
34184dfa:	685b      	ldr	r3, [r3, #4]
34184dfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34184e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34184e04:	d101      	bne.n	34184e0a <LL_RCC_PLL2_IsReady+0x16>
34184e06:	2301      	movs	r3, #1
34184e08:	e000      	b.n	34184e0c <LL_RCC_PLL2_IsReady+0x18>
34184e0a:	2300      	movs	r3, #0
}
34184e0c:	4618      	mov	r0, r3
34184e0e:	46bd      	mov	sp, r7
34184e10:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e14:	4770      	bx	lr
34184e16:	bf00      	nop
34184e18:	56028000 	.word	0x56028000

34184e1c <LL_RCC_PLL2_IsEnabledBypass>:
  * @brief  Check if PLL2 bypass is enabled
  * @rmtoll PLL2CFGR1    PLL2BYP         LL_RCC_PLL2_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsEnabledBypass(void)
{
34184e1c:	b480      	push	{r7}
34184e1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34184e20:	4b07      	ldr	r3, [pc, #28]	@ (34184e40 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34184e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34184e26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34184e2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34184e2e:	d101      	bne.n	34184e34 <LL_RCC_PLL2_IsEnabledBypass+0x18>
34184e30:	2301      	movs	r3, #1
34184e32:	e000      	b.n	34184e36 <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34184e34:	2300      	movs	r3, #0
}
34184e36:	4618      	mov	r0, r3
34184e38:	46bd      	mov	sp, r7
34184e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e3e:	4770      	bx	lr
34184e40:	56028000 	.word	0x56028000

34184e44 <LL_RCC_PLL3_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetSource(void)
{
34184e44:	b480      	push	{r7}
34184e46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34184e48:	4b04      	ldr	r3, [pc, #16]	@ (34184e5c <LL_RCC_PLL3_GetSource+0x18>)
34184e4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34184e4e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34184e52:	4618      	mov	r0, r3
34184e54:	46bd      	mov	sp, r7
34184e56:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e5a:	4770      	bx	lr
34184e5c:	56028000 	.word	0x56028000

34184e60 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll SR           PLL3RDY         LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
34184e60:	b480      	push	{r7}
34184e62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34184e64:	4b07      	ldr	r3, [pc, #28]	@ (34184e84 <LL_RCC_PLL3_IsReady+0x24>)
34184e66:	685b      	ldr	r3, [r3, #4]
34184e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34184e6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34184e70:	d101      	bne.n	34184e76 <LL_RCC_PLL3_IsReady+0x16>
34184e72:	2301      	movs	r3, #1
34184e74:	e000      	b.n	34184e78 <LL_RCC_PLL3_IsReady+0x18>
34184e76:	2300      	movs	r3, #0
}
34184e78:	4618      	mov	r0, r3
34184e7a:	46bd      	mov	sp, r7
34184e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e80:	4770      	bx	lr
34184e82:	bf00      	nop
34184e84:	56028000 	.word	0x56028000

34184e88 <LL_RCC_PLL3_IsEnabledBypass>:
  * @brief  Check if PLL3 bypass is enabled
  * @rmtoll PLL3CFGR1    PLL3BYP         LL_RCC_PLL3_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsEnabledBypass(void)
{
34184e88:	b480      	push	{r7}
34184e8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34184e8c:	4b07      	ldr	r3, [pc, #28]	@ (34184eac <LL_RCC_PLL3_IsEnabledBypass+0x24>)
34184e8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34184e92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34184e96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34184e9a:	d101      	bne.n	34184ea0 <LL_RCC_PLL3_IsEnabledBypass+0x18>
34184e9c:	2301      	movs	r3, #1
34184e9e:	e000      	b.n	34184ea2 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34184ea0:	2300      	movs	r3, #0
}
34184ea2:	4618      	mov	r0, r3
34184ea4:	46bd      	mov	sp, r7
34184ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184eaa:	4770      	bx	lr
34184eac:	56028000 	.word	0x56028000

34184eb0 <LL_RCC_PLL4_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_GetSource(void)
{
34184eb0:	b480      	push	{r7}
34184eb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34184eb4:	4b04      	ldr	r3, [pc, #16]	@ (34184ec8 <LL_RCC_PLL4_GetSource+0x18>)
34184eb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34184eba:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34184ebe:	4618      	mov	r0, r3
34184ec0:	46bd      	mov	sp, r7
34184ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ec6:	4770      	bx	lr
34184ec8:	56028000 	.word	0x56028000

34184ecc <LL_RCC_PLL4_IsReady>:
  * @brief  Check if PLL4 Ready
  * @rmtoll SR           PLL4RDY         LL_RCC_PLL4_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsReady(void)
{
34184ecc:	b480      	push	{r7}
34184ece:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34184ed0:	4b07      	ldr	r3, [pc, #28]	@ (34184ef0 <LL_RCC_PLL4_IsReady+0x24>)
34184ed2:	685b      	ldr	r3, [r3, #4]
34184ed4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34184ed8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34184edc:	d101      	bne.n	34184ee2 <LL_RCC_PLL4_IsReady+0x16>
34184ede:	2301      	movs	r3, #1
34184ee0:	e000      	b.n	34184ee4 <LL_RCC_PLL4_IsReady+0x18>
34184ee2:	2300      	movs	r3, #0
}
34184ee4:	4618      	mov	r0, r3
34184ee6:	46bd      	mov	sp, r7
34184ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
34184eec:	4770      	bx	lr
34184eee:	bf00      	nop
34184ef0:	56028000 	.word	0x56028000

34184ef4 <LL_RCC_PLL4_IsEnabledBypass>:
  * @brief  Check if PLL4 bypass is enabled
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
34184ef4:	b480      	push	{r7}
34184ef6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34184ef8:	4b07      	ldr	r3, [pc, #28]	@ (34184f18 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
34184efa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34184efe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34184f02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34184f06:	d101      	bne.n	34184f0c <LL_RCC_PLL4_IsEnabledBypass+0x18>
34184f08:	2301      	movs	r3, #1
34184f0a:	e000      	b.n	34184f0e <LL_RCC_PLL4_IsEnabledBypass+0x1a>
34184f0c:	2300      	movs	r3, #0
}
34184f0e:	4618      	mov	r0, r3
34184f10:	46bd      	mov	sp, r7
34184f12:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f16:	4770      	bx	lr
34184f18:	56028000 	.word	0x56028000

34184f1c <LL_RCC_IC1_Enable>:
  * @brief  Enable IC1
  * @rmtoll DIVENSR      IC1ENS        LL_RCC_IC1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC1_Enable(void)
{
34184f1c:	b480      	push	{r7}
34184f1e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
34184f20:	4b04      	ldr	r3, [pc, #16]	@ (34184f34 <LL_RCC_IC1_Enable+0x18>)
34184f22:	2201      	movs	r2, #1
34184f24:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184f28:	bf00      	nop
34184f2a:	46bd      	mov	sp, r7
34184f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f30:	4770      	bx	lr
34184f32:	bf00      	nop
34184f34:	56028000 	.word	0x56028000

34184f38 <LL_RCC_IC1_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
34184f38:	b480      	push	{r7}
34184f3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34184f3c:	4b04      	ldr	r3, [pc, #16]	@ (34184f50 <LL_RCC_IC1_GetSource+0x18>)
34184f3e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34184f42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184f46:	4618      	mov	r0, r3
34184f48:	46bd      	mov	sp, r7
34184f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f4e:	4770      	bx	lr
34184f50:	56028000 	.word	0x56028000

34184f54 <LL_RCC_IC1_GetDivider>:
  * @brief  Get IC1 divider
  * @rmtoll IC1CFGR      IC1INT        LL_RCC_IC1_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetDivider(void)
{
34184f54:	b480      	push	{r7}
34184f56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34184f58:	4b05      	ldr	r3, [pc, #20]	@ (34184f70 <LL_RCC_IC1_GetDivider+0x1c>)
34184f5a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34184f5e:	0c1b      	lsrs	r3, r3, #16
34184f60:	b2db      	uxtb	r3, r3
34184f62:	3301      	adds	r3, #1
}
34184f64:	4618      	mov	r0, r3
34184f66:	46bd      	mov	sp, r7
34184f68:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f6c:	4770      	bx	lr
34184f6e:	bf00      	nop
34184f70:	56028000 	.word	0x56028000

34184f74 <LL_RCC_IC2_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
34184f74:	b480      	push	{r7}
34184f76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34184f78:	4b04      	ldr	r3, [pc, #16]	@ (34184f8c <LL_RCC_IC2_GetSource+0x18>)
34184f7a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34184f7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184f82:	4618      	mov	r0, r3
34184f84:	46bd      	mov	sp, r7
34184f86:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f8a:	4770      	bx	lr
34184f8c:	56028000 	.word	0x56028000

34184f90 <LL_RCC_IC2_GetDivider>:
  * @brief  Get IC2 divider
  * @rmtoll IC2CFGR      IC2INT        LL_RCC_IC2_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetDivider(void)
{
34184f90:	b480      	push	{r7}
34184f92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34184f94:	4b05      	ldr	r3, [pc, #20]	@ (34184fac <LL_RCC_IC2_GetDivider+0x1c>)
34184f96:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34184f9a:	0c1b      	lsrs	r3, r3, #16
34184f9c:	b2db      	uxtb	r3, r3
34184f9e:	3301      	adds	r3, #1
}
34184fa0:	4618      	mov	r0, r3
34184fa2:	46bd      	mov	sp, r7
34184fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
34184fa8:	4770      	bx	lr
34184faa:	bf00      	nop
34184fac:	56028000 	.word	0x56028000

34184fb0 <LL_RCC_IC6_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
34184fb0:	b480      	push	{r7}
34184fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34184fb4:	4b04      	ldr	r3, [pc, #16]	@ (34184fc8 <LL_RCC_IC6_GetSource+0x18>)
34184fb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
34184fba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184fbe:	4618      	mov	r0, r3
34184fc0:	46bd      	mov	sp, r7
34184fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
34184fc6:	4770      	bx	lr
34184fc8:	56028000 	.word	0x56028000

34184fcc <LL_RCC_IC11_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
34184fcc:	b480      	push	{r7}
34184fce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34184fd0:	4b04      	ldr	r3, [pc, #16]	@ (34184fe4 <LL_RCC_IC11_GetSource+0x18>)
34184fd2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34184fd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184fda:	4618      	mov	r0, r3
34184fdc:	46bd      	mov	sp, r7
34184fde:	f85d 7b04 	ldr.w	r7, [sp], #4
34184fe2:	4770      	bx	lr
34184fe4:	56028000 	.word	0x56028000

34184fe8 <HAL_RCC_OscConfig>:
  * @note   This function does not protect the MCOxSEL, the PERSEL and the PPPSEL glitch-free muxes
  *         (Mux selection cannot be changed if selected input clock is inactive).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
34184fe8:	b580      	push	{r7, lr}
34184fea:	b0a2      	sub	sp, #136	@ 0x88
34184fec:	af00      	add	r7, sp, #0
34184fee:	6078      	str	r0, [r7, #4]
  uint32_t pll3src;
  uint32_t pll4src;
  uint32_t rccsr;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
34184ff0:	687b      	ldr	r3, [r7, #4]
34184ff2:	2b00      	cmp	r3, #0
34184ff4:	d101      	bne.n	34184ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
34184ff6:	2301      	movs	r3, #1
34184ff8:	e3d1      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  cpuclksrc = LL_RCC_GetCpuClkSource();
34184ffa:	f7ff fe7f 	bl	34184cfc <LL_RCC_GetCpuClkSource>
34184ffe:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  sysclksrc = LL_RCC_GetSysClkSource();
34185002:	f7ff fe89 	bl	34184d18 <LL_RCC_GetSysClkSource>
34185006:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  pll1src = LL_RCC_PLL1_GetSource();
3418500a:	f7ff feaf 	bl	34184d6c <LL_RCC_PLL1_GetSource>
3418500e:	67f8      	str	r0, [r7, #124]	@ 0x7c
  pll2src = LL_RCC_PLL2_GetSource();
34185010:	f7ff fee2 	bl	34184dd8 <LL_RCC_PLL2_GetSource>
34185014:	67b8      	str	r0, [r7, #120]	@ 0x78
  pll3src = LL_RCC_PLL3_GetSource();
34185016:	f7ff ff15 	bl	34184e44 <LL_RCC_PLL3_GetSource>
3418501a:	6778      	str	r0, [r7, #116]	@ 0x74
  pll4src = LL_RCC_PLL4_GetSource();
3418501c:	f7ff ff48 	bl	34184eb0 <LL_RCC_PLL4_GetSource>
34185020:	6738      	str	r0, [r7, #112]	@ 0x70
  rccsr = RCC->SR;
34185022:	4b91      	ldr	r3, [pc, #580]	@ (34185268 <HAL_RCC_OscConfig+0x280>)
34185024:	685b      	ldr	r3, [r3, #4]
34185026:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
34185028:	687b      	ldr	r3, [r7, #4]
3418502a:	681b      	ldr	r3, [r3, #0]
3418502c:	f003 0301 	and.w	r3, r3, #1
34185030:	2b00      	cmp	r3, #0
34185032:	f000 80a8 	beq.w	34185186 <HAL_RCC_OscConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34185036:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418503a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418503e:	d028      	beq.n	34185092 <HAL_RCC_OscConfig+0xaa>
34185040:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34185044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185048:	d023      	beq.n	34185092 <HAL_RCC_OscConfig+0xaa>
3418504a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
3418504c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185050:	d104      	bne.n	3418505c <HAL_RCC_OscConfig+0x74>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34185052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34185054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34185058:	2b00      	cmp	r3, #0
3418505a:	d11a      	bne.n	34185092 <HAL_RCC_OscConfig+0xaa>
3418505c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
3418505e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185062:	d104      	bne.n	3418506e <HAL_RCC_OscConfig+0x86>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34185064:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34185066:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418506a:	2b00      	cmp	r3, #0
3418506c:	d111      	bne.n	34185092 <HAL_RCC_OscConfig+0xaa>
3418506e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34185070:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185074:	d104      	bne.n	34185080 <HAL_RCC_OscConfig+0x98>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34185076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34185078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418507c:	2b00      	cmp	r3, #0
3418507e:	d108      	bne.n	34185092 <HAL_RCC_OscConfig+0xaa>
34185080:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
34185082:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185086:	d10a      	bne.n	3418509e <HAL_RCC_OscConfig+0xb6>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34185088:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418508a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418508e:	2b00      	cmp	r3, #0
34185090:	d005      	beq.n	3418509e <HAL_RCC_OscConfig+0xb6>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
34185092:	687b      	ldr	r3, [r7, #4]
34185094:	685b      	ldr	r3, [r3, #4]
34185096:	2b00      	cmp	r3, #0
34185098:	d175      	bne.n	34185186 <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
3418509a:	2301      	movs	r3, #1
3418509c:	e37f      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
      /* HSE ON , nothing to do */
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
3418509e:	687b      	ldr	r3, [r7, #4]
341850a0:	685b      	ldr	r3, [r3, #4]
341850a2:	2b10      	cmp	r3, #16
341850a4:	d104      	bne.n	341850b0 <HAL_RCC_OscConfig+0xc8>
341850a6:	4b70      	ldr	r3, [pc, #448]	@ (34185268 <HAL_RCC_OscConfig+0x280>)
341850a8:	2210      	movs	r2, #16
341850aa:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
341850ae:	e043      	b.n	34185138 <HAL_RCC_OscConfig+0x150>
341850b0:	687b      	ldr	r3, [r7, #4]
341850b2:	685b      	ldr	r3, [r3, #4]
341850b4:	2b00      	cmp	r3, #0
341850b6:	d10c      	bne.n	341850d2 <HAL_RCC_OscConfig+0xea>
341850b8:	4b6b      	ldr	r3, [pc, #428]	@ (34185268 <HAL_RCC_OscConfig+0x280>)
341850ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341850be:	461a      	mov	r2, r3
341850c0:	2310      	movs	r3, #16
341850c2:	6013      	str	r3, [r2, #0]
341850c4:	4b68      	ldr	r3, [pc, #416]	@ (34185268 <HAL_RCC_OscConfig+0x280>)
341850c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341850c8:	4a67      	ldr	r2, [pc, #412]	@ (34185268 <HAL_RCC_OscConfig+0x280>)
341850ca:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
341850ce:	6553      	str	r3, [r2, #84]	@ 0x54
341850d0:	e032      	b.n	34185138 <HAL_RCC_OscConfig+0x150>
341850d2:	687b      	ldr	r3, [r7, #4]
341850d4:	685b      	ldr	r3, [r3, #4]
341850d6:	f248 0210 	movw	r2, #32784	@ 0x8010
341850da:	4293      	cmp	r3, r2
341850dc:	d110      	bne.n	34185100 <HAL_RCC_OscConfig+0x118>
341850de:	4b62      	ldr	r3, [pc, #392]	@ (34185268 <HAL_RCC_OscConfig+0x280>)
341850e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341850e2:	4a61      	ldr	r2, [pc, #388]	@ (34185268 <HAL_RCC_OscConfig+0x280>)
341850e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
341850e8:	6553      	str	r3, [r2, #84]	@ 0x54
341850ea:	4b5f      	ldr	r3, [pc, #380]	@ (34185268 <HAL_RCC_OscConfig+0x280>)
341850ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341850ee:	4a5e      	ldr	r2, [pc, #376]	@ (34185268 <HAL_RCC_OscConfig+0x280>)
341850f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
341850f4:	6553      	str	r3, [r2, #84]	@ 0x54
341850f6:	4b5c      	ldr	r3, [pc, #368]	@ (34185268 <HAL_RCC_OscConfig+0x280>)
341850f8:	2210      	movs	r2, #16
341850fa:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
341850fe:	e01b      	b.n	34185138 <HAL_RCC_OscConfig+0x150>
34185100:	687b      	ldr	r3, [r7, #4]
34185102:	685b      	ldr	r3, [r3, #4]
34185104:	4a59      	ldr	r2, [pc, #356]	@ (3418526c <HAL_RCC_OscConfig+0x284>)
34185106:	4293      	cmp	r3, r2
34185108:	d10a      	bne.n	34185120 <HAL_RCC_OscConfig+0x138>
3418510a:	4b57      	ldr	r3, [pc, #348]	@ (34185268 <HAL_RCC_OscConfig+0x280>)
3418510c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418510e:	4a56      	ldr	r2, [pc, #344]	@ (34185268 <HAL_RCC_OscConfig+0x280>)
34185110:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
34185114:	6553      	str	r3, [r2, #84]	@ 0x54
34185116:	4b54      	ldr	r3, [pc, #336]	@ (34185268 <HAL_RCC_OscConfig+0x280>)
34185118:	2210      	movs	r2, #16
3418511a:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3418511e:	e00b      	b.n	34185138 <HAL_RCC_OscConfig+0x150>
34185120:	4b51      	ldr	r3, [pc, #324]	@ (34185268 <HAL_RCC_OscConfig+0x280>)
34185122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34185126:	461a      	mov	r2, r3
34185128:	2310      	movs	r3, #16
3418512a:	6013      	str	r3, [r2, #0]
3418512c:	4b4e      	ldr	r3, [pc, #312]	@ (34185268 <HAL_RCC_OscConfig+0x280>)
3418512e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185130:	4a4d      	ldr	r2, [pc, #308]	@ (34185268 <HAL_RCC_OscConfig+0x280>)
34185132:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
34185136:	6553      	str	r3, [r2, #84]	@ 0x54

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34185138:	f7fd fb5a 	bl	341827f0 <HAL_GetTick>
3418513c:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
3418513e:	687b      	ldr	r3, [r7, #4]
34185140:	685b      	ldr	r3, [r3, #4]
34185142:	2b00      	cmp	r3, #0
34185144:	d019      	beq.n	3418517a <HAL_RCC_OscConfig+0x192>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
34185146:	e008      	b.n	3418515a <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34185148:	f7fd fb52 	bl	341827f0 <HAL_GetTick>
3418514c:	4602      	mov	r2, r0
3418514e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34185150:	1ad3      	subs	r3, r2, r3
34185152:	2b64      	cmp	r3, #100	@ 0x64
34185154:	d901      	bls.n	3418515a <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
34185156:	2303      	movs	r3, #3
34185158:	e321      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
3418515a:	4b43      	ldr	r3, [pc, #268]	@ (34185268 <HAL_RCC_OscConfig+0x280>)
3418515c:	685b      	ldr	r3, [r3, #4]
3418515e:	f003 0310 	and.w	r3, r3, #16
34185162:	2b00      	cmp	r3, #0
34185164:	d0f0      	beq.n	34185148 <HAL_RCC_OscConfig+0x160>
34185166:	e00e      	b.n	34185186 <HAL_RCC_OscConfig+0x19e>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34185168:	f7fd fb42 	bl	341827f0 <HAL_GetTick>
3418516c:	4602      	mov	r2, r0
3418516e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34185170:	1ad3      	subs	r3, r2, r3
34185172:	2b64      	cmp	r3, #100	@ 0x64
34185174:	d901      	bls.n	3418517a <HAL_RCC_OscConfig+0x192>
          {
            return HAL_TIMEOUT;
34185176:	2303      	movs	r3, #3
34185178:	e311      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
3418517a:	4b3b      	ldr	r3, [pc, #236]	@ (34185268 <HAL_RCC_OscConfig+0x280>)
3418517c:	685b      	ldr	r3, [r3, #4]
3418517e:	f003 0310 	and.w	r3, r3, #16
34185182:	2b00      	cmp	r3, #0
34185184:	d1f0      	bne.n	34185168 <HAL_RCC_OscConfig+0x180>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
34185186:	687b      	ldr	r3, [r7, #4]
34185188:	681b      	ldr	r3, [r3, #0]
3418518a:	f003 0302 	and.w	r3, r3, #2
3418518e:	2b00      	cmp	r3, #0
34185190:	d073      	beq.n	3418527a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));

    /* When the HSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34185192:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34185196:	2b00      	cmp	r3, #0
34185198:	d023      	beq.n	341851e2 <HAL_RCC_OscConfig+0x1fa>
3418519a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418519e:	2b00      	cmp	r3, #0
341851a0:	d01f      	beq.n	341851e2 <HAL_RCC_OscConfig+0x1fa>
341851a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
341851a4:	2b00      	cmp	r3, #0
341851a6:	d104      	bne.n	341851b2 <HAL_RCC_OscConfig+0x1ca>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
341851a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341851aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341851ae:	2b00      	cmp	r3, #0
341851b0:	d117      	bne.n	341851e2 <HAL_RCC_OscConfig+0x1fa>
341851b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
341851b4:	2b00      	cmp	r3, #0
341851b6:	d104      	bne.n	341851c2 <HAL_RCC_OscConfig+0x1da>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
341851b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341851ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341851be:	2b00      	cmp	r3, #0
341851c0:	d10f      	bne.n	341851e2 <HAL_RCC_OscConfig+0x1fa>
341851c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
341851c4:	2b00      	cmp	r3, #0
341851c6:	d104      	bne.n	341851d2 <HAL_RCC_OscConfig+0x1ea>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
341851c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341851ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341851ce:	2b00      	cmp	r3, #0
341851d0:	d107      	bne.n	341851e2 <HAL_RCC_OscConfig+0x1fa>
341851d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
341851d4:	2b00      	cmp	r3, #0
341851d6:	d115      	bne.n	34185204 <HAL_RCC_OscConfig+0x21c>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
341851d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341851da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341851de:	2b00      	cmp	r3, #0
341851e0:	d010      	beq.n	34185204 <HAL_RCC_OscConfig+0x21c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
341851e2:	687b      	ldr	r3, [r7, #4]
341851e4:	68db      	ldr	r3, [r3, #12]
341851e6:	2b00      	cmp	r3, #0
341851e8:	d101      	bne.n	341851ee <HAL_RCC_OscConfig+0x206>
      {
        return HAL_ERROR;
341851ea:	2301      	movs	r3, #1
341851ec:	e2d7      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
341851ee:	687b      	ldr	r3, [r7, #4]
341851f0:	691b      	ldr	r3, [r3, #16]
341851f2:	4618      	mov	r0, r3
341851f4:	f7ff fca4 	bl	34184b40 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
341851f8:	687b      	ldr	r3, [r7, #4]
341851fa:	695b      	ldr	r3, [r3, #20]
341851fc:	4618      	mov	r0, r3
341851fe:	f7ff fcc1 	bl	34184b84 <LL_RCC_HSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
34185202:	e03a      	b.n	3418527a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
34185204:	687b      	ldr	r3, [r7, #4]
34185206:	68db      	ldr	r3, [r3, #12]
34185208:	2b00      	cmp	r3, #0
3418520a:	d01e      	beq.n	3418524a <HAL_RCC_OscConfig+0x262>
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
3418520c:	f7ff fc68 	bl	34184ae0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34185210:	f7fd faee 	bl	341827f0 <HAL_GetTick>
34185214:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
34185216:	e008      	b.n	3418522a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34185218:	f7fd faea 	bl	341827f0 <HAL_GetTick>
3418521c:	4602      	mov	r2, r0
3418521e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34185220:	1ad3      	subs	r3, r2, r3
34185222:	2b01      	cmp	r3, #1
34185224:	d901      	bls.n	3418522a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
34185226:	2303      	movs	r3, #3
34185228:	e2b9      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_HSI_IsReady() == 0U)
3418522a:	f7ff fc77 	bl	34184b1c <LL_RCC_HSI_IsReady>
3418522e:	4603      	mov	r3, r0
34185230:	2b00      	cmp	r3, #0
34185232:	d0f1      	beq.n	34185218 <HAL_RCC_OscConfig+0x230>
          }
        }

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
34185234:	687b      	ldr	r3, [r7, #4]
34185236:	691b      	ldr	r3, [r3, #16]
34185238:	4618      	mov	r0, r3
3418523a:	f7ff fc81 	bl	34184b40 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
3418523e:	687b      	ldr	r3, [r7, #4]
34185240:	695b      	ldr	r3, [r3, #20]
34185242:	4618      	mov	r0, r3
34185244:	f7ff fc9e 	bl	34184b84 <LL_RCC_HSI_SetCalibTrimming>
34185248:	e017      	b.n	3418527a <HAL_RCC_OscConfig+0x292>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
3418524a:	f7ff fc57 	bl	34184afc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3418524e:	f7fd facf 	bl	341827f0 <HAL_GetTick>
34185252:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
34185254:	e00c      	b.n	34185270 <HAL_RCC_OscConfig+0x288>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34185256:	f7fd facb 	bl	341827f0 <HAL_GetTick>
3418525a:	4602      	mov	r2, r0
3418525c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418525e:	1ad3      	subs	r3, r2, r3
34185260:	2b01      	cmp	r3, #1
34185262:	d905      	bls.n	34185270 <HAL_RCC_OscConfig+0x288>
          {
            return HAL_TIMEOUT;
34185264:	2303      	movs	r3, #3
34185266:	e29a      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
34185268:	56028000 	.word	0x56028000
3418526c:	00018010 	.word	0x00018010
        while (LL_RCC_HSI_IsReady() != 0U)
34185270:	f7ff fc54 	bl	34184b1c <LL_RCC_HSI_IsReady>
34185274:	4603      	mov	r3, r0
34185276:	2b00      	cmp	r3, #0
34185278:	d1ed      	bne.n	34185256 <HAL_RCC_OscConfig+0x26e>
      }
    }
  }

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
3418527a:	687b      	ldr	r3, [r7, #4]
3418527c:	681b      	ldr	r3, [r3, #0]
3418527e:	f003 0310 	and.w	r3, r3, #16
34185282:	2b00      	cmp	r3, #0
34185284:	d070      	beq.n	34185368 <HAL_RCC_OscConfig+0x380>
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));

    /* When the MSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    /* but just to update the MSI calibration value */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34185286:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418528a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418528e:	d028      	beq.n	341852e2 <HAL_RCC_OscConfig+0x2fa>
34185290:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34185294:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34185298:	d023      	beq.n	341852e2 <HAL_RCC_OscConfig+0x2fa>
3418529a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
3418529c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341852a0:	d104      	bne.n	341852ac <HAL_RCC_OscConfig+0x2c4>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
341852a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341852a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341852a8:	2b00      	cmp	r3, #0
341852aa:	d11a      	bne.n	341852e2 <HAL_RCC_OscConfig+0x2fa>
341852ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
341852ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341852b2:	d104      	bne.n	341852be <HAL_RCC_OscConfig+0x2d6>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
341852b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341852b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341852ba:	2b00      	cmp	r3, #0
341852bc:	d111      	bne.n	341852e2 <HAL_RCC_OscConfig+0x2fa>
341852be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
341852c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341852c4:	d104      	bne.n	341852d0 <HAL_RCC_OscConfig+0x2e8>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
341852c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341852c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341852cc:	2b00      	cmp	r3, #0
341852ce:	d108      	bne.n	341852e2 <HAL_RCC_OscConfig+0x2fa>
341852d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
341852d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341852d6:	d110      	bne.n	341852fa <HAL_RCC_OscConfig+0x312>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
341852d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341852da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341852de:	2b00      	cmp	r3, #0
341852e0:	d00b      	beq.n	341852fa <HAL_RCC_OscConfig+0x312>
    {
      /* When MSI is used as system clock it will not disabled */
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
341852e2:	687b      	ldr	r3, [r7, #4]
341852e4:	69db      	ldr	r3, [r3, #28]
341852e6:	2b00      	cmp	r3, #0
341852e8:	d101      	bne.n	341852ee <HAL_RCC_OscConfig+0x306>
      {
        return HAL_ERROR;
341852ea:	2301      	movs	r3, #1
341852ec:	e257      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
341852ee:	687b      	ldr	r3, [r7, #4]
341852f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341852f2:	4618      	mov	r0, r3
341852f4:	f7ff fcae 	bl	34184c54 <LL_RCC_MSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
341852f8:	e036      	b.n	34185368 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Check the MSI State */
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
341852fa:	687b      	ldr	r3, [r7, #4]
341852fc:	69db      	ldr	r3, [r3, #28]
341852fe:	2b00      	cmp	r3, #0
34185300:	d01e      	beq.n	34185340 <HAL_RCC_OscConfig+0x358>
        /* Check the parameters */
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

        /* Set the frequency */
        __HAL_RCC_MSI_FREQUENCY_CONFIG(pRCC_OscInitStruct->MSIFrequency);
34185302:	687b      	ldr	r3, [r7, #4]
34185304:	6a1b      	ldr	r3, [r3, #32]
34185306:	4618      	mov	r0, r3
34185308:	f7ff fc82 	bl	34184c10 <LL_RCC_MSI_SetFrequency>

        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
3418530c:	f7ff fc50 	bl	34184bb0 <LL_RCC_MSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34185310:	f7fd fa6e 	bl	341827f0 <HAL_GetTick>
34185314:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
34185316:	e008      	b.n	3418532a <HAL_RCC_OscConfig+0x342>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34185318:	f7fd fa6a 	bl	341827f0 <HAL_GetTick>
3418531c:	4602      	mov	r2, r0
3418531e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34185320:	1ad3      	subs	r3, r2, r3
34185322:	2b01      	cmp	r3, #1
34185324:	d901      	bls.n	3418532a <HAL_RCC_OscConfig+0x342>
          {
            return HAL_TIMEOUT;
34185326:	2303      	movs	r3, #3
34185328:	e239      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_MSI_IsReady() == 0U)
3418532a:	f7ff fc5f 	bl	34184bec <LL_RCC_MSI_IsReady>
3418532e:	4603      	mov	r3, r0
34185330:	2b00      	cmp	r3, #0
34185332:	d0f1      	beq.n	34185318 <HAL_RCC_OscConfig+0x330>
          }
        }

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
34185334:	687b      	ldr	r3, [r7, #4]
34185336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185338:	4618      	mov	r0, r3
3418533a:	f7ff fc8b 	bl	34184c54 <LL_RCC_MSI_SetCalibTrimming>
3418533e:	e013      	b.n	34185368 <HAL_RCC_OscConfig+0x380>
      }
      else
      {
        /* Ignore MSI frequency and calibration values in disable case */
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
34185340:	f7ff fc44 	bl	34184bcc <LL_RCC_MSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34185344:	f7fd fa54 	bl	341827f0 <HAL_GetTick>
34185348:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
3418534a:	e008      	b.n	3418535e <HAL_RCC_OscConfig+0x376>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
3418534c:	f7fd fa50 	bl	341827f0 <HAL_GetTick>
34185350:	4602      	mov	r2, r0
34185352:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34185354:	1ad3      	subs	r3, r2, r3
34185356:	2b01      	cmp	r3, #1
34185358:	d901      	bls.n	3418535e <HAL_RCC_OscConfig+0x376>
          {
            return HAL_TIMEOUT;
3418535a:	2303      	movs	r3, #3
3418535c:	e21f      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_MSI_IsReady() != 0U)
3418535e:	f7ff fc45 	bl	34184bec <LL_RCC_MSI_IsReady>
34185362:	4603      	mov	r3, r0
34185364:	2b00      	cmp	r3, #0
34185366:	d1f1      	bne.n	3418534c <HAL_RCC_OscConfig+0x364>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
34185368:	687b      	ldr	r3, [r7, #4]
3418536a:	681b      	ldr	r3, [r3, #0]
3418536c:	f003 0308 	and.w	r3, r3, #8
34185370:	2b00      	cmp	r3, #0
34185372:	d02c      	beq.n	341853ce <HAL_RCC_OscConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
34185374:	687b      	ldr	r3, [r7, #4]
34185376:	699b      	ldr	r3, [r3, #24]
34185378:	2b00      	cmp	r3, #0
3418537a:	d014      	beq.n	341853a6 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
3418537c:	f7ff fc92 	bl	34184ca4 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34185380:	f7fd fa36 	bl	341827f0 <HAL_GetTick>
34185384:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
34185386:	e008      	b.n	3418539a <HAL_RCC_OscConfig+0x3b2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34185388:	f7fd fa32 	bl	341827f0 <HAL_GetTick>
3418538c:	4602      	mov	r2, r0
3418538e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34185390:	1ad3      	subs	r3, r2, r3
34185392:	2b01      	cmp	r3, #1
34185394:	d901      	bls.n	3418539a <HAL_RCC_OscConfig+0x3b2>
        {
          return HAL_TIMEOUT;
34185396:	2303      	movs	r3, #3
34185398:	e201      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSI_IsReady() == 0U)
3418539a:	f7ff fca1 	bl	34184ce0 <LL_RCC_LSI_IsReady>
3418539e:	4603      	mov	r3, r0
341853a0:	2b00      	cmp	r3, #0
341853a2:	d0f1      	beq.n	34185388 <HAL_RCC_OscConfig+0x3a0>
341853a4:	e013      	b.n	341853ce <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
341853a6:	f7ff fc8b 	bl	34184cc0 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
341853aa:	f7fd fa21 	bl	341827f0 <HAL_GetTick>
341853ae:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() != 0U)
341853b0:	e008      	b.n	341853c4 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
341853b2:	f7fd fa1d 	bl	341827f0 <HAL_GetTick>
341853b6:	4602      	mov	r2, r0
341853b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341853ba:	1ad3      	subs	r3, r2, r3
341853bc:	2b01      	cmp	r3, #1
341853be:	d901      	bls.n	341853c4 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
341853c0:	2303      	movs	r3, #3
341853c2:	e1ec      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSI_IsReady() != 0U)
341853c4:	f7ff fc8c 	bl	34184ce0 <LL_RCC_LSI_IsReady>
341853c8:	4603      	mov	r3, r0
341853ca:	2b00      	cmp	r3, #0
341853cc:	d1f1      	bne.n	341853b2 <HAL_RCC_OscConfig+0x3ca>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
341853ce:	687b      	ldr	r3, [r7, #4]
341853d0:	681b      	ldr	r3, [r3, #0]
341853d2:	f003 0304 	and.w	r3, r3, #4
341853d6:	2b00      	cmp	r3, #0
341853d8:	f000 808c 	beq.w	341854f4 <HAL_RCC_OscConfig+0x50c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
341853dc:	687b      	ldr	r3, [r7, #4]
341853de:	689b      	ldr	r3, [r3, #8]
341853e0:	2b02      	cmp	r3, #2
341853e2:	d104      	bne.n	341853ee <HAL_RCC_OscConfig+0x406>
341853e4:	4b96      	ldr	r3, [pc, #600]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
341853e6:	2202      	movs	r2, #2
341853e8:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
341853ec:	e055      	b.n	3418549a <HAL_RCC_OscConfig+0x4b2>
341853ee:	687b      	ldr	r3, [r7, #4]
341853f0:	689b      	ldr	r3, [r3, #8]
341853f2:	2b00      	cmp	r3, #0
341853f4:	d112      	bne.n	3418541c <HAL_RCC_OscConfig+0x434>
341853f6:	4b92      	ldr	r3, [pc, #584]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
341853f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341853fc:	461a      	mov	r2, r3
341853fe:	2302      	movs	r3, #2
34185400:	6013      	str	r3, [r2, #0]
34185402:	4b8f      	ldr	r3, [pc, #572]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
34185404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34185406:	4a8e      	ldr	r2, [pc, #568]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
34185408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3418540c:	6413      	str	r3, [r2, #64]	@ 0x40
3418540e:	4b8c      	ldr	r3, [pc, #560]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
34185410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34185412:	4a8b      	ldr	r2, [pc, #556]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
34185414:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34185418:	6413      	str	r3, [r2, #64]	@ 0x40
3418541a:	e03e      	b.n	3418549a <HAL_RCC_OscConfig+0x4b2>
3418541c:	687b      	ldr	r3, [r7, #4]
3418541e:	689b      	ldr	r3, [r3, #8]
34185420:	f248 0202 	movw	r2, #32770	@ 0x8002
34185424:	4293      	cmp	r3, r2
34185426:	d110      	bne.n	3418544a <HAL_RCC_OscConfig+0x462>
34185428:	4b85      	ldr	r3, [pc, #532]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
3418542a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418542c:	4a84      	ldr	r2, [pc, #528]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
3418542e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34185432:	6413      	str	r3, [r2, #64]	@ 0x40
34185434:	4b82      	ldr	r3, [pc, #520]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
34185436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34185438:	4a81      	ldr	r2, [pc, #516]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
3418543a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3418543e:	6413      	str	r3, [r2, #64]	@ 0x40
34185440:	4b7f      	ldr	r3, [pc, #508]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
34185442:	2202      	movs	r2, #2
34185444:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34185448:	e027      	b.n	3418549a <HAL_RCC_OscConfig+0x4b2>
3418544a:	687b      	ldr	r3, [r7, #4]
3418544c:	689b      	ldr	r3, [r3, #8]
3418544e:	4a7d      	ldr	r2, [pc, #500]	@ (34185644 <HAL_RCC_OscConfig+0x65c>)
34185450:	4293      	cmp	r3, r2
34185452:	d110      	bne.n	34185476 <HAL_RCC_OscConfig+0x48e>
34185454:	4b7a      	ldr	r3, [pc, #488]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
34185456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34185458:	4a79      	ldr	r2, [pc, #484]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
3418545a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3418545e:	6413      	str	r3, [r2, #64]	@ 0x40
34185460:	4b77      	ldr	r3, [pc, #476]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
34185462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34185464:	4a76      	ldr	r2, [pc, #472]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
34185466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
3418546a:	6413      	str	r3, [r2, #64]	@ 0x40
3418546c:	4b74      	ldr	r3, [pc, #464]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
3418546e:	2202      	movs	r2, #2
34185470:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34185474:	e011      	b.n	3418549a <HAL_RCC_OscConfig+0x4b2>
34185476:	4b72      	ldr	r3, [pc, #456]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
34185478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418547c:	461a      	mov	r2, r3
3418547e:	2302      	movs	r3, #2
34185480:	6013      	str	r3, [r2, #0]
34185482:	4b6f      	ldr	r3, [pc, #444]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
34185484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34185486:	4a6e      	ldr	r2, [pc, #440]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
34185488:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3418548c:	6413      	str	r3, [r2, #64]	@ 0x40
3418548e:	4b6c      	ldr	r3, [pc, #432]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
34185490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34185492:	4a6b      	ldr	r2, [pc, #428]	@ (34185640 <HAL_RCC_OscConfig+0x658>)
34185494:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34185498:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Check the LSE State */
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
3418549a:	687b      	ldr	r3, [r7, #4]
3418549c:	689b      	ldr	r3, [r3, #8]
3418549e:	2b00      	cmp	r3, #0
341854a0:	d014      	beq.n	341854cc <HAL_RCC_OscConfig+0x4e4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
341854a2:	f7fd f9a5 	bl	341827f0 <HAL_GetTick>
341854a6:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
341854a8:	e00a      	b.n	341854c0 <HAL_RCC_OscConfig+0x4d8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
341854aa:	f7fd f9a1 	bl	341827f0 <HAL_GetTick>
341854ae:	4602      	mov	r2, r0
341854b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341854b2:	1ad3      	subs	r3, r2, r3
341854b4:	f241 3288 	movw	r2, #5000	@ 0x1388
341854b8:	4293      	cmp	r3, r2
341854ba:	d901      	bls.n	341854c0 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
341854bc:	2303      	movs	r3, #3
341854be:	e16e      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSE_IsReady() == 0U)
341854c0:	f7ff fbde 	bl	34184c80 <LL_RCC_LSE_IsReady>
341854c4:	4603      	mov	r3, r0
341854c6:	2b00      	cmp	r3, #0
341854c8:	d0ef      	beq.n	341854aa <HAL_RCC_OscConfig+0x4c2>
341854ca:	e013      	b.n	341854f4 <HAL_RCC_OscConfig+0x50c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
341854cc:	f7fd f990 	bl	341827f0 <HAL_GetTick>
341854d0:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
341854d2:	e00a      	b.n	341854ea <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
341854d4:	f7fd f98c 	bl	341827f0 <HAL_GetTick>
341854d8:	4602      	mov	r2, r0
341854da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341854dc:	1ad3      	subs	r3, r2, r3
341854de:	f241 3288 	movw	r2, #5000	@ 0x1388
341854e2:	4293      	cmp	r3, r2
341854e4:	d901      	bls.n	341854ea <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
341854e6:	2303      	movs	r3, #3
341854e8:	e159      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSE_IsReady() != 0U)
341854ea:	f7ff fbc9 	bl	34184c80 <LL_RCC_LSE_IsReady>
341854ee:	4603      	mov	r3, r0
341854f0:	2b00      	cmp	r3, #0
341854f2:	d1ef      	bne.n	341854d4 <HAL_RCC_OscConfig+0x4ec>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));

  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
341854f4:	687b      	ldr	r3, [r7, #4]
341854f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
341854f8:	2b00      	cmp	r3, #0
341854fa:	d04c      	beq.n	34185596 <HAL_RCC_OscConfig+0x5ae>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
341854fc:	687b      	ldr	r3, [r7, #4]
341854fe:	3328      	adds	r3, #40	@ 0x28
34185500:	4619      	mov	r1, r3
34185502:	2000      	movs	r0, #0
34185504:	f000 fe38 	bl	34186178 <RCC_PLL_IsNewConfig>
34185508:	6678      	str	r0, [r7, #100]	@ 0x64
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
3418550a:	f7ff fc3d 	bl	34184d88 <LL_RCC_PLL1_IsReady>
3418550e:	6638      	str	r0, [r7, #96]	@ 0x60
    if (new_pll_config == 1U)
34185510:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
34185512:	2b01      	cmp	r3, #1
34185514:	d130      	bne.n	34185578 <HAL_RCC_OscConfig+0x590>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34185516:	f7ff fd0f 	bl	34184f38 <LL_RCC_IC1_GetSource>
3418551a:	65f8      	str	r0, [r7, #92]	@ 0x5c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
3418551c:	f7ff fd2a 	bl	34184f74 <LL_RCC_IC2_GetSource>
34185520:	65b8      	str	r0, [r7, #88]	@ 0x58
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34185522:	f7ff fd45 	bl	34184fb0 <LL_RCC_IC6_GetSource>
34185526:	6578      	str	r0, [r7, #84]	@ 0x54
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34185528:	f7ff fd50 	bl	34184fcc <LL_RCC_IC11_GetSource>
3418552c:	6538      	str	r0, [r7, #80]	@ 0x50
      /* PLL1 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
3418552e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34185532:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34185536:	d104      	bne.n	34185542 <HAL_RCC_OscConfig+0x55a>
34185538:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
3418553a:	2b00      	cmp	r3, #0
3418553c:	d101      	bne.n	34185542 <HAL_RCC_OscConfig+0x55a>
      {
        return HAL_ERROR;
3418553e:	2301      	movs	r3, #1
34185540:	e12d      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
      }

      /* PLL1 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
34185542:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34185546:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418554a:	d10a      	bne.n	34185562 <HAL_RCC_OscConfig+0x57a>
3418554c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
3418554e:	2b00      	cmp	r3, #0
34185550:	d005      	beq.n	3418555e <HAL_RCC_OscConfig+0x576>
34185552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34185554:	2b00      	cmp	r3, #0
34185556:	d002      	beq.n	3418555e <HAL_RCC_OscConfig+0x576>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
34185558:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418555a:	2b00      	cmp	r3, #0
3418555c:	d101      	bne.n	34185562 <HAL_RCC_OscConfig+0x57a>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL1)))
      {
        return HAL_ERROR;
3418555e:	2301      	movs	r3, #1
34185560:	e11d      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL1 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
34185562:	687b      	ldr	r3, [r7, #4]
34185564:	3328      	adds	r3, #40	@ 0x28
34185566:	4619      	mov	r1, r3
34185568:	2000      	movs	r0, #0
3418556a:	f000 fca9 	bl	34185ec0 <RCC_PLL_Config>
3418556e:	4603      	mov	r3, r0
34185570:	2b00      	cmp	r3, #0
34185572:	d010      	beq.n	34185596 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
34185574:	2301      	movs	r3, #1
34185576:	e112      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
34185578:	687b      	ldr	r3, [r7, #4]
3418557a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418557c:	2b02      	cmp	r3, #2
3418557e:	d10a      	bne.n	34185596 <HAL_RCC_OscConfig+0x5ae>
34185580:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
34185582:	2b00      	cmp	r3, #0
34185584:	d107      	bne.n	34185596 <HAL_RCC_OscConfig+0x5ae>
    {
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34185586:	2000      	movs	r0, #0
34185588:	f000 fdca 	bl	34186120 <RCC_PLL_Enable>
3418558c:	4603      	mov	r3, r0
3418558e:	2b00      	cmp	r3, #0
34185590:	d001      	beq.n	34185596 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
34185592:	2301      	movs	r3, #1
34185594:	e103      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));

  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
34185596:	687b      	ldr	r3, [r7, #4]
34185598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418559a:	2b00      	cmp	r3, #0
3418559c:	d054      	beq.n	34185648 <HAL_RCC_OscConfig+0x660>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
3418559e:	687b      	ldr	r3, [r7, #4]
341855a0:	3344      	adds	r3, #68	@ 0x44
341855a2:	4619      	mov	r1, r3
341855a4:	2001      	movs	r0, #1
341855a6:	f000 fde7 	bl	34186178 <RCC_PLL_IsNewConfig>
341855aa:	64f8      	str	r0, [r7, #76]	@ 0x4c
    uint32_t pll2_ready = LL_RCC_PLL2_IsReady();
341855ac:	f7ff fc22 	bl	34184df4 <LL_RCC_PLL2_IsReady>
341855b0:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (new_pll_config == 1U)
341855b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
341855b4:	2b01      	cmp	r3, #1
341855b6:	d134      	bne.n	34185622 <HAL_RCC_OscConfig+0x63a>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
341855b8:	f7ff fcbe 	bl	34184f38 <LL_RCC_IC1_GetSource>
341855bc:	6478      	str	r0, [r7, #68]	@ 0x44
      uint32_t ic2src = LL_RCC_IC2_GetSource();
341855be:	f7ff fcd9 	bl	34184f74 <LL_RCC_IC2_GetSource>
341855c2:	6438      	str	r0, [r7, #64]	@ 0x40
      uint32_t ic6src = LL_RCC_IC6_GetSource();
341855c4:	f7ff fcf4 	bl	34184fb0 <LL_RCC_IC6_GetSource>
341855c8:	63f8      	str	r0, [r7, #60]	@ 0x3c
      uint32_t ic11src = LL_RCC_IC11_GetSource();
341855ca:	f7ff fcff 	bl	34184fcc <LL_RCC_IC11_GetSource>
341855ce:	63b8      	str	r0, [r7, #56]	@ 0x38
      /* PLL2 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
341855d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
341855d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341855d8:	d105      	bne.n	341855e6 <HAL_RCC_OscConfig+0x5fe>
341855da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
341855dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341855e0:	d101      	bne.n	341855e6 <HAL_RCC_OscConfig+0x5fe>
      {
        return HAL_ERROR;
341855e2:	2301      	movs	r3, #1
341855e4:	e0db      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
      }

      /* PLL2 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
341855e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
341855ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341855ee:	d10d      	bne.n	3418560c <HAL_RCC_OscConfig+0x624>
341855f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
341855f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341855f6:	d007      	beq.n	34185608 <HAL_RCC_OscConfig+0x620>
341855f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
341855fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341855fe:	d003      	beq.n	34185608 <HAL_RCC_OscConfig+0x620>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
34185600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34185602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34185606:	d101      	bne.n	3418560c <HAL_RCC_OscConfig+0x624>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL2)))
      {
        return HAL_ERROR;
34185608:	2301      	movs	r3, #1
3418560a:	e0c8      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL2 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
3418560c:	687b      	ldr	r3, [r7, #4]
3418560e:	3344      	adds	r3, #68	@ 0x44
34185610:	4619      	mov	r1, r3
34185612:	2001      	movs	r0, #1
34185614:	f000 fc54 	bl	34185ec0 <RCC_PLL_Config>
34185618:	4603      	mov	r3, r0
3418561a:	2b00      	cmp	r3, #0
3418561c:	d014      	beq.n	34185648 <HAL_RCC_OscConfig+0x660>
      {
        return HAL_ERROR;
3418561e:	2301      	movs	r3, #1
34185620:	e0bd      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34185622:	687b      	ldr	r3, [r7, #4]
34185624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34185626:	2b02      	cmp	r3, #2
34185628:	d10e      	bne.n	34185648 <HAL_RCC_OscConfig+0x660>
3418562a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
3418562c:	2b00      	cmp	r3, #0
3418562e:	d10b      	bne.n	34185648 <HAL_RCC_OscConfig+0x660>
    {
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34185630:	2001      	movs	r0, #1
34185632:	f000 fd75 	bl	34186120 <RCC_PLL_Enable>
34185636:	4603      	mov	r3, r0
34185638:	2b00      	cmp	r3, #0
3418563a:	d005      	beq.n	34185648 <HAL_RCC_OscConfig+0x660>
      {
        return HAL_ERROR;
3418563c:	2301      	movs	r3, #1
3418563e:	e0ae      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
34185640:	56028000 	.word	0x56028000
34185644:	00018002 	.word	0x00018002

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));

  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
34185648:	687b      	ldr	r3, [r7, #4]
3418564a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418564c:	2b00      	cmp	r3, #0
3418564e:	d050      	beq.n	341856f2 <HAL_RCC_OscConfig+0x70a>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
34185650:	687b      	ldr	r3, [r7, #4]
34185652:	3360      	adds	r3, #96	@ 0x60
34185654:	4619      	mov	r1, r3
34185656:	2002      	movs	r0, #2
34185658:	f000 fd8e 	bl	34186178 <RCC_PLL_IsNewConfig>
3418565c:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
3418565e:	f7ff fb93 	bl	34184d88 <LL_RCC_PLL1_IsReady>
34185662:	6338      	str	r0, [r7, #48]	@ 0x30
    if (new_pll_config == 1U)
34185664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34185666:	2b01      	cmp	r3, #1
34185668:	d134      	bne.n	341856d4 <HAL_RCC_OscConfig+0x6ec>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
3418566a:	f7ff fc65 	bl	34184f38 <LL_RCC_IC1_GetSource>
3418566e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34185670:	f7ff fc80 	bl	34184f74 <LL_RCC_IC2_GetSource>
34185674:	62b8      	str	r0, [r7, #40]	@ 0x28
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34185676:	f7ff fc9b 	bl	34184fb0 <LL_RCC_IC6_GetSource>
3418567a:	6278      	str	r0, [r7, #36]	@ 0x24
      uint32_t ic11src = LL_RCC_IC11_GetSource();
3418567c:	f7ff fca6 	bl	34184fcc <LL_RCC_IC11_GetSource>
34185680:	6238      	str	r0, [r7, #32]
      /* PLL3 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
34185682:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34185686:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418568a:	d105      	bne.n	34185698 <HAL_RCC_OscConfig+0x6b0>
3418568c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418568e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185692:	d101      	bne.n	34185698 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
34185694:	2301      	movs	r3, #1
34185696:	e082      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL3 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
34185698:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418569c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341856a0:	d10d      	bne.n	341856be <HAL_RCC_OscConfig+0x6d6>
341856a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341856a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341856a8:	d007      	beq.n	341856ba <HAL_RCC_OscConfig+0x6d2>
341856aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341856ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341856b0:	d003      	beq.n	341856ba <HAL_RCC_OscConfig+0x6d2>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
341856b2:	6a3b      	ldr	r3, [r7, #32]
341856b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341856b8:	d101      	bne.n	341856be <HAL_RCC_OscConfig+0x6d6>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL3)))
      {
        return HAL_ERROR;
341856ba:	2301      	movs	r3, #1
341856bc:	e06f      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL3 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
341856be:	687b      	ldr	r3, [r7, #4]
341856c0:	3360      	adds	r3, #96	@ 0x60
341856c2:	4619      	mov	r1, r3
341856c4:	2002      	movs	r0, #2
341856c6:	f000 fbfb 	bl	34185ec0 <RCC_PLL_Config>
341856ca:	4603      	mov	r3, r0
341856cc:	2b00      	cmp	r3, #0
341856ce:	d010      	beq.n	341856f2 <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
341856d0:	2301      	movs	r3, #1
341856d2:	e064      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
341856d4:	687b      	ldr	r3, [r7, #4]
341856d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
341856d8:	2b02      	cmp	r3, #2
341856da:	d10a      	bne.n	341856f2 <HAL_RCC_OscConfig+0x70a>
341856dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
341856de:	2b00      	cmp	r3, #0
341856e0:	d107      	bne.n	341856f2 <HAL_RCC_OscConfig+0x70a>
    {
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
341856e2:	2002      	movs	r0, #2
341856e4:	f000 fd1c 	bl	34186120 <RCC_PLL_Enable>
341856e8:	4603      	mov	r3, r0
341856ea:	2b00      	cmp	r3, #0
341856ec:	d001      	beq.n	341856f2 <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
341856ee:	2301      	movs	r3, #1
341856f0:	e055      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>

  /*-------------------------------- PLL4 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));

  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
341856f2:	687b      	ldr	r3, [r7, #4]
341856f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341856f6:	2b00      	cmp	r3, #0
341856f8:	d050      	beq.n	3418579c <HAL_RCC_OscConfig+0x7b4>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
341856fa:	687b      	ldr	r3, [r7, #4]
341856fc:	337c      	adds	r3, #124	@ 0x7c
341856fe:	4619      	mov	r1, r3
34185700:	2003      	movs	r0, #3
34185702:	f000 fd39 	bl	34186178 <RCC_PLL_IsNewConfig>
34185706:	61f8      	str	r0, [r7, #28]
    uint32_t pll4_ready = LL_RCC_PLL4_IsReady();
34185708:	f7ff fbe0 	bl	34184ecc <LL_RCC_PLL4_IsReady>
3418570c:	61b8      	str	r0, [r7, #24]

    if (new_pll_config == 1U)
3418570e:	69fb      	ldr	r3, [r7, #28]
34185710:	2b01      	cmp	r3, #1
34185712:	d134      	bne.n	3418577e <HAL_RCC_OscConfig+0x796>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34185714:	f7ff fc10 	bl	34184f38 <LL_RCC_IC1_GetSource>
34185718:	6178      	str	r0, [r7, #20]
      uint32_t ic2src = LL_RCC_IC2_GetSource();
3418571a:	f7ff fc2b 	bl	34184f74 <LL_RCC_IC2_GetSource>
3418571e:	6138      	str	r0, [r7, #16]
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34185720:	f7ff fc46 	bl	34184fb0 <LL_RCC_IC6_GetSource>
34185724:	60f8      	str	r0, [r7, #12]
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34185726:	f7ff fc51 	bl	34184fcc <LL_RCC_IC11_GetSource>
3418572a:	60b8      	str	r0, [r7, #8]
      /* PLL4 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
3418572c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34185730:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34185734:	d105      	bne.n	34185742 <HAL_RCC_OscConfig+0x75a>
34185736:	697b      	ldr	r3, [r7, #20]
34185738:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418573c:	d101      	bne.n	34185742 <HAL_RCC_OscConfig+0x75a>
      {
        return HAL_ERROR;
3418573e:	2301      	movs	r3, #1
34185740:	e02d      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL4 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
34185742:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34185746:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418574a:	d10d      	bne.n	34185768 <HAL_RCC_OscConfig+0x780>
3418574c:	693b      	ldr	r3, [r7, #16]
3418574e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34185752:	d007      	beq.n	34185764 <HAL_RCC_OscConfig+0x77c>
34185754:	68fb      	ldr	r3, [r7, #12]
34185756:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418575a:	d003      	beq.n	34185764 <HAL_RCC_OscConfig+0x77c>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
3418575c:	68bb      	ldr	r3, [r7, #8]
3418575e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34185762:	d101      	bne.n	34185768 <HAL_RCC_OscConfig+0x780>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL4)))
      {
        return HAL_ERROR;
34185764:	2301      	movs	r3, #1
34185766:	e01a      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL4 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
34185768:	687b      	ldr	r3, [r7, #4]
3418576a:	337c      	adds	r3, #124	@ 0x7c
3418576c:	4619      	mov	r1, r3
3418576e:	2003      	movs	r0, #3
34185770:	f000 fba6 	bl	34185ec0 <RCC_PLL_Config>
34185774:	4603      	mov	r3, r0
34185776:	2b00      	cmp	r3, #0
34185778:	d010      	beq.n	3418579c <HAL_RCC_OscConfig+0x7b4>
      {
        return HAL_ERROR;
3418577a:	2301      	movs	r3, #1
3418577c:	e00f      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
3418577e:	687b      	ldr	r3, [r7, #4]
34185780:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185782:	2b02      	cmp	r3, #2
34185784:	d10a      	bne.n	3418579c <HAL_RCC_OscConfig+0x7b4>
34185786:	69bb      	ldr	r3, [r7, #24]
34185788:	2b00      	cmp	r3, #0
3418578a:	d107      	bne.n	3418579c <HAL_RCC_OscConfig+0x7b4>
    {
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
3418578c:	2003      	movs	r0, #3
3418578e:	f000 fcc7 	bl	34186120 <RCC_PLL_Enable>
34185792:	4603      	mov	r3, r0
34185794:	2b00      	cmp	r3, #0
34185796:	d001      	beq.n	3418579c <HAL_RCC_OscConfig+0x7b4>
      {
        return HAL_ERROR;
34185798:	2301      	movs	r3, #1
3418579a:	e000      	b.n	3418579e <HAL_RCC_OscConfig+0x7b6>
    {
      /* Nothing to do */
    }
  }

  return HAL_OK;
3418579c:	2300      	movs	r3, #0
}
3418579e:	4618      	mov	r0, r3
341857a0:	3788      	adds	r7, #136	@ 0x88
341857a2:	46bd      	mov	sp, r7
341857a4:	bd80      	pop	{r7, pc}
341857a6:	bf00      	nop

341857a8 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
341857a8:	b580      	push	{r7, lr}
341857aa:	b084      	sub	sp, #16
341857ac:	af00      	add	r7, sp, #0
341857ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
341857b0:	687b      	ldr	r3, [r7, #4]
341857b2:	2b00      	cmp	r3, #0
341857b4:	d101      	bne.n	341857ba <HAL_RCC_ClockConfig+0x12>
  {
    return HAL_ERROR;
341857b6:	2301      	movs	r3, #1
341857b8:	e1f2      	b.n	34185ba0 <HAL_RCC_ClockConfig+0x3f8>
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
341857ba:	687b      	ldr	r3, [r7, #4]
341857bc:	681b      	ldr	r3, [r3, #0]
341857be:	f003 0308 	and.w	r3, r3, #8
341857c2:	2b00      	cmp	r3, #0
341857c4:	d010      	beq.n	341857e8 <HAL_RCC_ClockConfig+0x40>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
341857c6:	687b      	ldr	r3, [r7, #4]
341857c8:	691a      	ldr	r2, [r3, #16]
341857ca:	4ba3      	ldr	r3, [pc, #652]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
341857cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341857ce:	f003 0307 	and.w	r3, r3, #7
341857d2:	429a      	cmp	r2, r3
341857d4:	d908      	bls.n	341857e8 <HAL_RCC_ClockConfig+0x40>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
341857d6:	4ba0      	ldr	r3, [pc, #640]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
341857d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341857da:	f023 0207 	bic.w	r2, r3, #7
341857de:	687b      	ldr	r3, [r7, #4]
341857e0:	691b      	ldr	r3, [r3, #16]
341857e2:	499d      	ldr	r1, [pc, #628]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
341857e4:	4313      	orrs	r3, r2
341857e6:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
341857e8:	687b      	ldr	r3, [r7, #4]
341857ea:	681b      	ldr	r3, [r3, #0]
341857ec:	f003 0310 	and.w	r3, r3, #16
341857f0:	2b00      	cmp	r3, #0
341857f2:	d010      	beq.n	34185816 <HAL_RCC_ClockConfig+0x6e>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
341857f4:	687b      	ldr	r3, [r7, #4]
341857f6:	695a      	ldr	r2, [r3, #20]
341857f8:	4b97      	ldr	r3, [pc, #604]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
341857fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341857fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34185800:	429a      	cmp	r2, r3
34185802:	d908      	bls.n	34185816 <HAL_RCC_ClockConfig+0x6e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34185804:	4b94      	ldr	r3, [pc, #592]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
34185806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185808:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
3418580c:	687b      	ldr	r3, [r7, #4]
3418580e:	695b      	ldr	r3, [r3, #20]
34185810:	4991      	ldr	r1, [pc, #580]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
34185812:	4313      	orrs	r3, r2
34185814:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34185816:	687b      	ldr	r3, [r7, #4]
34185818:	681b      	ldr	r3, [r3, #0]
3418581a:	f003 0320 	and.w	r3, r3, #32
3418581e:	2b00      	cmp	r3, #0
34185820:	d010      	beq.n	34185844 <HAL_RCC_ClockConfig+0x9c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34185822:	687b      	ldr	r3, [r7, #4]
34185824:	699a      	ldr	r2, [r3, #24]
34185826:	4b8c      	ldr	r3, [pc, #560]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
34185828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418582a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
3418582e:	429a      	cmp	r2, r3
34185830:	d908      	bls.n	34185844 <HAL_RCC_ClockConfig+0x9c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34185832:	4b89      	ldr	r3, [pc, #548]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
34185834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185836:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
3418583a:	687b      	ldr	r3, [r7, #4]
3418583c:	699b      	ldr	r3, [r3, #24]
3418583e:	4986      	ldr	r1, [pc, #536]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
34185840:	4313      	orrs	r3, r2
34185842:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34185844:	687b      	ldr	r3, [r7, #4]
34185846:	681b      	ldr	r3, [r3, #0]
34185848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418584c:	2b00      	cmp	r3, #0
3418584e:	d010      	beq.n	34185872 <HAL_RCC_ClockConfig+0xca>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34185850:	687b      	ldr	r3, [r7, #4]
34185852:	69da      	ldr	r2, [r3, #28]
34185854:	4b80      	ldr	r3, [pc, #512]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
34185856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185858:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
3418585c:	429a      	cmp	r2, r3
3418585e:	d908      	bls.n	34185872 <HAL_RCC_ClockConfig+0xca>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34185860:	4b7d      	ldr	r3, [pc, #500]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
34185862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185864:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34185868:	687b      	ldr	r3, [r7, #4]
3418586a:	69db      	ldr	r3, [r3, #28]
3418586c:	497a      	ldr	r1, [pc, #488]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
3418586e:	4313      	orrs	r3, r2
34185870:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34185872:	687b      	ldr	r3, [r7, #4]
34185874:	681b      	ldr	r3, [r3, #0]
34185876:	f003 0304 	and.w	r3, r3, #4
3418587a:	2b00      	cmp	r3, #0
3418587c:	d010      	beq.n	341858a0 <HAL_RCC_ClockConfig+0xf8>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
3418587e:	687b      	ldr	r3, [r7, #4]
34185880:	68da      	ldr	r2, [r3, #12]
34185882:	4b75      	ldr	r3, [pc, #468]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
34185884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185886:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
3418588a:	429a      	cmp	r2, r3
3418588c:	d908      	bls.n	341858a0 <HAL_RCC_ClockConfig+0xf8>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
3418588e:	4b72      	ldr	r3, [pc, #456]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
34185890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185892:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
34185896:	687b      	ldr	r3, [r7, #4]
34185898:	68db      	ldr	r3, [r3, #12]
3418589a:	496f      	ldr	r1, [pc, #444]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
3418589c:	4313      	orrs	r3, r2
3418589e:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*------------------------- CPUCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
341858a0:	687b      	ldr	r3, [r7, #4]
341858a2:	681b      	ldr	r3, [r3, #0]
341858a4:	f003 0301 	and.w	r3, r3, #1
341858a8:	2b00      	cmp	r3, #0
341858aa:	d063      	beq.n	34185974 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));

    /* HSE is selected as CPU Clock Source */
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
341858ac:	687b      	ldr	r3, [r7, #4]
341858ae:	685b      	ldr	r3, [r3, #4]
341858b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
341858b4:	d106      	bne.n	341858c4 <HAL_RCC_ClockConfig+0x11c>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
341858b6:	f7ff f901 	bl	34184abc <LL_RCC_HSE_IsReady>
341858ba:	4603      	mov	r3, r0
341858bc:	2b00      	cmp	r3, #0
341858be:	d134      	bne.n	3418592a <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
341858c0:	2301      	movs	r3, #1
341858c2:	e16d      	b.n	34185ba0 <HAL_RCC_ClockConfig+0x3f8>
      }
    }
    /* PLL is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
341858c4:	687b      	ldr	r3, [r7, #4]
341858c6:	685b      	ldr	r3, [r3, #4]
341858c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
341858cc:	d11a      	bne.n	34185904 <HAL_RCC_ClockConfig+0x15c>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC1 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
341858ce:	f7ff fb33 	bl	34184f38 <LL_RCC_IC1_GetSource>
341858d2:	4602      	mov	r2, r0
341858d4:	687b      	ldr	r3, [r7, #4]
341858d6:	6a1b      	ldr	r3, [r3, #32]
341858d8:	4619      	mov	r1, r3
341858da:	4610      	mov	r0, r2
341858dc:	f000 fd00 	bl	341862e0 <RCC_IC_CheckPLLSources>
341858e0:	4603      	mov	r3, r0
341858e2:	2b01      	cmp	r3, #1
341858e4:	d001      	beq.n	341858ea <HAL_RCC_ClockConfig+0x142>
      {
        return HAL_ERROR;
341858e6:	2301      	movs	r3, #1
341858e8:	e15a      	b.n	34185ba0 <HAL_RCC_ClockConfig+0x3f8>
      }

      /* Configure IC1 source and divider */
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
341858ea:	687b      	ldr	r3, [r7, #4]
341858ec:	6a1a      	ldr	r2, [r3, #32]
341858ee:	687b      	ldr	r3, [r7, #4]
341858f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341858f2:	3b01      	subs	r3, #1
341858f4:	041b      	lsls	r3, r3, #16
341858f6:	4958      	ldr	r1, [pc, #352]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
341858f8:	4313      	orrs	r3, r2
341858fa:	f8c1 30c4 	str.w	r3, [r1, #196]	@ 0xc4
                ((pRCC_ClkInitStruct->IC1Selection.ClockDivider - 1U) << RCC_IC1CFGR_IC1INT_Pos));

      /* Enable IC1 */
      LL_RCC_IC1_Enable();
341858fe:	f7ff fb0d 	bl	34184f1c <LL_RCC_IC1_Enable>
34185902:	e012      	b.n	3418592a <HAL_RCC_ClockConfig+0x182>
    }
    /* MSI is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
34185904:	687b      	ldr	r3, [r7, #4]
34185906:	685b      	ldr	r3, [r3, #4]
34185908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418590c:	d106      	bne.n	3418591c <HAL_RCC_ClockConfig+0x174>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
3418590e:	f7ff f96d 	bl	34184bec <LL_RCC_MSI_IsReady>
34185912:	4603      	mov	r3, r0
34185914:	2b00      	cmp	r3, #0
34185916:	d108      	bne.n	3418592a <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34185918:	2301      	movs	r3, #1
3418591a:	e141      	b.n	34185ba0 <HAL_RCC_ClockConfig+0x3f8>
    }
    /* HSI is selected as CPU Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
3418591c:	f7ff f8fe 	bl	34184b1c <LL_RCC_HSI_IsReady>
34185920:	4603      	mov	r3, r0
34185922:	2b00      	cmp	r3, #0
34185924:	d101      	bne.n	3418592a <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34185926:	2301      	movs	r3, #1
34185928:	e13a      	b.n	34185ba0 <HAL_RCC_ClockConfig+0x3f8>
      }
    }

    /* Switch the CPU clock */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
3418592a:	4b4b      	ldr	r3, [pc, #300]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
3418592c:	6a1b      	ldr	r3, [r3, #32]
3418592e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
34185932:	687b      	ldr	r3, [r7, #4]
34185934:	685b      	ldr	r3, [r3, #4]
34185936:	4948      	ldr	r1, [pc, #288]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
34185938:	4313      	orrs	r3, r2
3418593a:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
3418593c:	f7fc ff58 	bl	341827f0 <HAL_GetTick>
34185940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34185942:	e00a      	b.n	3418595a <HAL_RCC_ClockConfig+0x1b2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34185944:	f7fc ff54 	bl	341827f0 <HAL_GetTick>
34185948:	4602      	mov	r2, r0
3418594a:	68fb      	ldr	r3, [r7, #12]
3418594c:	1ad3      	subs	r3, r2, r3
3418594e:	f241 3288 	movw	r2, #5000	@ 0x1388
34185952:	4293      	cmp	r3, r2
34185954:	d901      	bls.n	3418595a <HAL_RCC_ClockConfig+0x1b2>
      {
        return HAL_TIMEOUT;
34185956:	2303      	movs	r3, #3
34185958:	e122      	b.n	34185ba0 <HAL_RCC_ClockConfig+0x3f8>
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
3418595a:	f7ff f9cf 	bl	34184cfc <LL_RCC_GetCpuClkSource>
3418595e:	4602      	mov	r2, r0
34185960:	687b      	ldr	r3, [r7, #4]
34185962:	685b      	ldr	r3, [r3, #4]
34185964:	011b      	lsls	r3, r3, #4
34185966:	429a      	cmp	r2, r3
34185968:	d1ec      	bne.n	34185944 <HAL_RCC_ClockConfig+0x19c>
      }
    }

    /* Update the SystemCoreClock global variable with CPU clock */
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
3418596a:	f000 f921 	bl	34185bb0 <HAL_RCC_GetCpuClockFreq>
3418596e:	4603      	mov	r3, r0
34185970:	4a3a      	ldr	r2, [pc, #232]	@ (34185a5c <HAL_RCC_ClockConfig+0x2b4>)
34185972:	6013      	str	r3, [r2, #0]

  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
34185974:	687b      	ldr	r3, [r7, #4]
34185976:	681b      	ldr	r3, [r3, #0]
34185978:	f003 0302 	and.w	r3, r3, #2
3418597c:	2b00      	cmp	r3, #0
3418597e:	f000 8096 	beq.w	34185aae <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System bus clock source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
34185982:	687b      	ldr	r3, [r7, #4]
34185984:	689b      	ldr	r3, [r3, #8]
34185986:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418598a:	d106      	bne.n	3418599a <HAL_RCC_ClockConfig+0x1f2>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
3418598c:	f7ff f896 	bl	34184abc <LL_RCC_HSE_IsReady>
34185990:	4603      	mov	r3, r0
34185992:	2b00      	cmp	r3, #0
34185994:	d16b      	bne.n	34185a6e <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
34185996:	2301      	movs	r3, #1
34185998:	e102      	b.n	34185ba0 <HAL_RCC_ClockConfig+0x3f8>
      }
    }
    /* PLL output is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
3418599a:	687b      	ldr	r3, [r7, #4]
3418599c:	689b      	ldr	r3, [r3, #8]
3418599e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
341859a2:	d14d      	bne.n	34185a40 <HAL_RCC_ClockConfig+0x298>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC2/IC6/IC11 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
341859a4:	f7ff fae6 	bl	34184f74 <LL_RCC_IC2_GetSource>
341859a8:	4602      	mov	r2, r0
341859aa:	687b      	ldr	r3, [r7, #4]
341859ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
341859ae:	4619      	mov	r1, r3
341859b0:	4610      	mov	r0, r2
341859b2:	f000 fc95 	bl	341862e0 <RCC_IC_CheckPLLSources>
341859b6:	4603      	mov	r3, r0
341859b8:	2b01      	cmp	r3, #1
341859ba:	d001      	beq.n	341859c0 <HAL_RCC_ClockConfig+0x218>
      {
        return HAL_ERROR;
341859bc:	2301      	movs	r3, #1
341859be:	e0ef      	b.n	34185ba0 <HAL_RCC_ClockConfig+0x3f8>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
341859c0:	f7ff faf6 	bl	34184fb0 <LL_RCC_IC6_GetSource>
341859c4:	4602      	mov	r2, r0
341859c6:	687b      	ldr	r3, [r7, #4]
341859c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
341859ca:	4619      	mov	r1, r3
341859cc:	4610      	mov	r0, r2
341859ce:	f000 fc87 	bl	341862e0 <RCC_IC_CheckPLLSources>
341859d2:	4603      	mov	r3, r0
341859d4:	2b01      	cmp	r3, #1
341859d6:	d001      	beq.n	341859dc <HAL_RCC_ClockConfig+0x234>
      {
        return HAL_ERROR;
341859d8:	2301      	movs	r3, #1
341859da:	e0e1      	b.n	34185ba0 <HAL_RCC_ClockConfig+0x3f8>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
341859dc:	f7ff faf6 	bl	34184fcc <LL_RCC_IC11_GetSource>
341859e0:	4602      	mov	r2, r0
341859e2:	687b      	ldr	r3, [r7, #4]
341859e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
341859e6:	4619      	mov	r1, r3
341859e8:	4610      	mov	r0, r2
341859ea:	f000 fc79 	bl	341862e0 <RCC_IC_CheckPLLSources>
341859ee:	4603      	mov	r3, r0
341859f0:	2b01      	cmp	r3, #1
341859f2:	d001      	beq.n	341859f8 <HAL_RCC_ClockConfig+0x250>
      {
        return HAL_ERROR;
341859f4:	2301      	movs	r3, #1
341859f6:	e0d3      	b.n	34185ba0 <HAL_RCC_ClockConfig+0x3f8>
      }

      /* Configure IC2, IC6 and IC11 sources and dividers */
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
341859f8:	687b      	ldr	r3, [r7, #4]
341859fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
341859fc:	687b      	ldr	r3, [r7, #4]
341859fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34185a00:	3b01      	subs	r3, #1
34185a02:	041b      	lsls	r3, r3, #16
34185a04:	4914      	ldr	r1, [pc, #80]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
34185a06:	4313      	orrs	r3, r2
34185a08:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
                ((pRCC_ClkInitStruct->IC2Selection.ClockDivider - 1U) << RCC_IC2CFGR_IC2INT_Pos));
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
34185a0c:	687b      	ldr	r3, [r7, #4]
34185a0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
34185a10:	687b      	ldr	r3, [r7, #4]
34185a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34185a14:	3b01      	subs	r3, #1
34185a16:	041b      	lsls	r3, r3, #16
34185a18:	490f      	ldr	r1, [pc, #60]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
34185a1a:	4313      	orrs	r3, r2
34185a1c:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
                ((pRCC_ClkInitStruct->IC6Selection.ClockDivider - 1U) << RCC_IC6CFGR_IC6INT_Pos));
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34185a20:	687b      	ldr	r3, [r7, #4]
34185a22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34185a24:	687b      	ldr	r3, [r7, #4]
34185a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34185a28:	3b01      	subs	r3, #1
34185a2a:	041b      	lsls	r3, r3, #16
34185a2c:	490a      	ldr	r1, [pc, #40]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
34185a2e:	4313      	orrs	r3, r2
34185a30:	f8c1 30ec 	str.w	r3, [r1, #236]	@ 0xec
                ((pRCC_ClkInitStruct->IC11Selection.ClockDivider - 1U) << RCC_IC11CFGR_IC11INT_Pos));

      /* Require to have IC2, IC6 and IC11 outputs enabled */
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34185a34:	4b08      	ldr	r3, [pc, #32]	@ (34185a58 <HAL_RCC_ClockConfig+0x2b0>)
34185a36:	f240 4222 	movw	r2, #1058	@ 0x422
34185a3a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
34185a3e:	e016      	b.n	34185a6e <HAL_RCC_ClockConfig+0x2c6>
    }
    /* HSI is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
34185a40:	687b      	ldr	r3, [r7, #4]
34185a42:	689b      	ldr	r3, [r3, #8]
34185a44:	2b00      	cmp	r3, #0
34185a46:	d10b      	bne.n	34185a60 <HAL_RCC_ClockConfig+0x2b8>
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
34185a48:	f7ff f868 	bl	34184b1c <LL_RCC_HSI_IsReady>
34185a4c:	4603      	mov	r3, r0
34185a4e:	2b00      	cmp	r3, #0
34185a50:	d10d      	bne.n	34185a6e <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
34185a52:	2301      	movs	r3, #1
34185a54:	e0a4      	b.n	34185ba0 <HAL_RCC_ClockConfig+0x3f8>
34185a56:	bf00      	nop
34185a58:	56028000 	.word	0x56028000
34185a5c:	341c0000 	.word	0x341c0000
    }
    /* MSI is selected as System bus clock source */
    else
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
34185a60:	f7ff f8c4 	bl	34184bec <LL_RCC_MSI_IsReady>
34185a64:	4603      	mov	r3, r0
34185a66:	2b00      	cmp	r3, #0
34185a68:	d101      	bne.n	34185a6e <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
34185a6a:	2301      	movs	r3, #1
34185a6c:	e098      	b.n	34185ba0 <HAL_RCC_ClockConfig+0x3f8>
      }
    }

    /* Switch the system bus clocks */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34185a6e:	4b4e      	ldr	r3, [pc, #312]	@ (34185ba8 <HAL_RCC_ClockConfig+0x400>)
34185a70:	6a1b      	ldr	r3, [r3, #32]
34185a72:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34185a76:	687b      	ldr	r3, [r7, #4]
34185a78:	689b      	ldr	r3, [r3, #8]
34185a7a:	494b      	ldr	r1, [pc, #300]	@ (34185ba8 <HAL_RCC_ClockConfig+0x400>)
34185a7c:	4313      	orrs	r3, r2
34185a7e:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34185a80:	f7fc feb6 	bl	341827f0 <HAL_GetTick>
34185a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34185a86:	e00a      	b.n	34185a9e <HAL_RCC_ClockConfig+0x2f6>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34185a88:	f7fc feb2 	bl	341827f0 <HAL_GetTick>
34185a8c:	4602      	mov	r2, r0
34185a8e:	68fb      	ldr	r3, [r7, #12]
34185a90:	1ad3      	subs	r3, r2, r3
34185a92:	f241 3288 	movw	r2, #5000	@ 0x1388
34185a96:	4293      	cmp	r3, r2
34185a98:	d901      	bls.n	34185a9e <HAL_RCC_ClockConfig+0x2f6>
      {
        return HAL_TIMEOUT;
34185a9a:	2303      	movs	r3, #3
34185a9c:	e080      	b.n	34185ba0 <HAL_RCC_ClockConfig+0x3f8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34185a9e:	f7ff f93b 	bl	34184d18 <LL_RCC_GetSysClkSource>
34185aa2:	4602      	mov	r2, r0
34185aa4:	687b      	ldr	r3, [r7, #4]
34185aa6:	689b      	ldr	r3, [r3, #8]
34185aa8:	011b      	lsls	r3, r3, #4
34185aaa:	429a      	cmp	r2, r3
34185aac:	d1ec      	bne.n	34185a88 <HAL_RCC_ClockConfig+0x2e0>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34185aae:	687b      	ldr	r3, [r7, #4]
34185ab0:	681b      	ldr	r3, [r3, #0]
34185ab2:	f003 0304 	and.w	r3, r3, #4
34185ab6:	2b00      	cmp	r3, #0
34185ab8:	d010      	beq.n	34185adc <HAL_RCC_ClockConfig+0x334>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
34185aba:	687b      	ldr	r3, [r7, #4]
34185abc:	68da      	ldr	r2, [r3, #12]
34185abe:	4b3a      	ldr	r3, [pc, #232]	@ (34185ba8 <HAL_RCC_ClockConfig+0x400>)
34185ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185ac2:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34185ac6:	429a      	cmp	r2, r3
34185ac8:	d208      	bcs.n	34185adc <HAL_RCC_ClockConfig+0x334>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34185aca:	4b37      	ldr	r3, [pc, #220]	@ (34185ba8 <HAL_RCC_ClockConfig+0x400>)
34185acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185ace:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
34185ad2:	687b      	ldr	r3, [r7, #4]
34185ad4:	68db      	ldr	r3, [r3, #12]
34185ad6:	4934      	ldr	r1, [pc, #208]	@ (34185ba8 <HAL_RCC_ClockConfig+0x400>)
34185ad8:	4313      	orrs	r3, r2
34185ada:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34185adc:	687b      	ldr	r3, [r7, #4]
34185ade:	681b      	ldr	r3, [r3, #0]
34185ae0:	f003 0308 	and.w	r3, r3, #8
34185ae4:	2b00      	cmp	r3, #0
34185ae6:	d010      	beq.n	34185b0a <HAL_RCC_ClockConfig+0x362>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34185ae8:	687b      	ldr	r3, [r7, #4]
34185aea:	691a      	ldr	r2, [r3, #16]
34185aec:	4b2e      	ldr	r3, [pc, #184]	@ (34185ba8 <HAL_RCC_ClockConfig+0x400>)
34185aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185af0:	f003 0307 	and.w	r3, r3, #7
34185af4:	429a      	cmp	r2, r3
34185af6:	d208      	bcs.n	34185b0a <HAL_RCC_ClockConfig+0x362>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34185af8:	4b2b      	ldr	r3, [pc, #172]	@ (34185ba8 <HAL_RCC_ClockConfig+0x400>)
34185afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185afc:	f023 0207 	bic.w	r2, r3, #7
34185b00:	687b      	ldr	r3, [r7, #4]
34185b02:	691b      	ldr	r3, [r3, #16]
34185b04:	4928      	ldr	r1, [pc, #160]	@ (34185ba8 <HAL_RCC_ClockConfig+0x400>)
34185b06:	4313      	orrs	r3, r2
34185b08:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34185b0a:	687b      	ldr	r3, [r7, #4]
34185b0c:	681b      	ldr	r3, [r3, #0]
34185b0e:	f003 0310 	and.w	r3, r3, #16
34185b12:	2b00      	cmp	r3, #0
34185b14:	d010      	beq.n	34185b38 <HAL_RCC_ClockConfig+0x390>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34185b16:	687b      	ldr	r3, [r7, #4]
34185b18:	695a      	ldr	r2, [r3, #20]
34185b1a:	4b23      	ldr	r3, [pc, #140]	@ (34185ba8 <HAL_RCC_ClockConfig+0x400>)
34185b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185b1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34185b22:	429a      	cmp	r2, r3
34185b24:	d208      	bcs.n	34185b38 <HAL_RCC_ClockConfig+0x390>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34185b26:	4b20      	ldr	r3, [pc, #128]	@ (34185ba8 <HAL_RCC_ClockConfig+0x400>)
34185b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185b2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
34185b2e:	687b      	ldr	r3, [r7, #4]
34185b30:	695b      	ldr	r3, [r3, #20]
34185b32:	491d      	ldr	r1, [pc, #116]	@ (34185ba8 <HAL_RCC_ClockConfig+0x400>)
34185b34:	4313      	orrs	r3, r2
34185b36:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34185b38:	687b      	ldr	r3, [r7, #4]
34185b3a:	681b      	ldr	r3, [r3, #0]
34185b3c:	f003 0320 	and.w	r3, r3, #32
34185b40:	2b00      	cmp	r3, #0
34185b42:	d010      	beq.n	34185b66 <HAL_RCC_ClockConfig+0x3be>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34185b44:	687b      	ldr	r3, [r7, #4]
34185b46:	699a      	ldr	r2, [r3, #24]
34185b48:	4b17      	ldr	r3, [pc, #92]	@ (34185ba8 <HAL_RCC_ClockConfig+0x400>)
34185b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185b4c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34185b50:	429a      	cmp	r2, r3
34185b52:	d208      	bcs.n	34185b66 <HAL_RCC_ClockConfig+0x3be>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34185b54:	4b14      	ldr	r3, [pc, #80]	@ (34185ba8 <HAL_RCC_ClockConfig+0x400>)
34185b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185b58:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
34185b5c:	687b      	ldr	r3, [r7, #4]
34185b5e:	699b      	ldr	r3, [r3, #24]
34185b60:	4911      	ldr	r1, [pc, #68]	@ (34185ba8 <HAL_RCC_ClockConfig+0x400>)
34185b62:	4313      	orrs	r3, r2
34185b64:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34185b66:	687b      	ldr	r3, [r7, #4]
34185b68:	681b      	ldr	r3, [r3, #0]
34185b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34185b6e:	2b00      	cmp	r3, #0
34185b70:	d010      	beq.n	34185b94 <HAL_RCC_ClockConfig+0x3ec>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34185b72:	687b      	ldr	r3, [r7, #4]
34185b74:	69da      	ldr	r2, [r3, #28]
34185b76:	4b0c      	ldr	r3, [pc, #48]	@ (34185ba8 <HAL_RCC_ClockConfig+0x400>)
34185b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185b7a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34185b7e:	429a      	cmp	r2, r3
34185b80:	d208      	bcs.n	34185b94 <HAL_RCC_ClockConfig+0x3ec>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34185b82:	4b09      	ldr	r3, [pc, #36]	@ (34185ba8 <HAL_RCC_ClockConfig+0x400>)
34185b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185b86:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34185b8a:	687b      	ldr	r3, [r7, #4]
34185b8c:	69db      	ldr	r3, [r3, #28]
34185b8e:	4906      	ldr	r1, [pc, #24]	@ (34185ba8 <HAL_RCC_ClockConfig+0x400>)
34185b90:	4313      	orrs	r3, r2
34185b92:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
34185b94:	4b05      	ldr	r3, [pc, #20]	@ (34185bac <HAL_RCC_ClockConfig+0x404>)
34185b96:	681b      	ldr	r3, [r3, #0]
34185b98:	4618      	mov	r0, r3
34185b9a:	f7fc fa9d 	bl	341820d8 <HAL_InitTick>
34185b9e:	4603      	mov	r3, r0
}
34185ba0:	4618      	mov	r0, r3
34185ba2:	3710      	adds	r7, #16
34185ba4:	46bd      	mov	sp, r7
34185ba6:	bd80      	pop	{r7, pc}
34185ba8:	56028000 	.word	0x56028000
34185bac:	341c0004 	.word	0x341c0004

34185bb0 <HAL_RCC_GetCpuClockFreq>:
  *         will be incorrect.
  *
  * @retval CPUCLK frequency
  */
uint32_t HAL_RCC_GetCpuClockFreq(void)
{
34185bb0:	b580      	push	{r7, lr}
34185bb2:	b082      	sub	sp, #8
34185bb4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
34185bb6:	2300      	movs	r3, #0
34185bb8:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetCpuClkSource())
34185bba:	f7ff f89f 	bl	34184cfc <LL_RCC_GetCpuClkSource>
34185bbe:	4603      	mov	r3, r0
34185bc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34185bc4:	d025      	beq.n	34185c12 <HAL_RCC_GetCpuClockFreq+0x62>
34185bc6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34185bca:	d860      	bhi.n	34185c8e <HAL_RCC_GetCpuClockFreq+0xde>
34185bcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34185bd0:	d01c      	beq.n	34185c0c <HAL_RCC_GetCpuClockFreq+0x5c>
34185bd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34185bd6:	d85a      	bhi.n	34185c8e <HAL_RCC_GetCpuClockFreq+0xde>
34185bd8:	2b00      	cmp	r3, #0
34185bda:	d003      	beq.n	34185be4 <HAL_RCC_GetCpuClockFreq+0x34>
34185bdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34185be0:	d009      	beq.n	34185bf6 <HAL_RCC_GetCpuClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34185be2:	e054      	b.n	34185c8e <HAL_RCC_GetCpuClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34185be4:	f7fe ffc0 	bl	34184b68 <LL_RCC_HSI_GetDivider>
34185be8:	4603      	mov	r3, r0
34185bea:	09db      	lsrs	r3, r3, #7
34185bec:	4a2b      	ldr	r2, [pc, #172]	@ (34185c9c <HAL_RCC_GetCpuClockFreq+0xec>)
34185bee:	fa22 f303 	lsr.w	r3, r2, r3
34185bf2:	607b      	str	r3, [r7, #4]
      break;
34185bf4:	e04c      	b.n	34185c90 <HAL_RCC_GetCpuClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34185bf6:	f7ff f81f 	bl	34184c38 <LL_RCC_MSI_GetFrequency>
34185bfa:	4603      	mov	r3, r0
34185bfc:	2b00      	cmp	r3, #0
34185bfe:	d102      	bne.n	34185c06 <HAL_RCC_GetCpuClockFreq+0x56>
        frequency = MSI_VALUE;
34185c00:	4b27      	ldr	r3, [pc, #156]	@ (34185ca0 <HAL_RCC_GetCpuClockFreq+0xf0>)
34185c02:	607b      	str	r3, [r7, #4]
      break;
34185c04:	e044      	b.n	34185c90 <HAL_RCC_GetCpuClockFreq+0xe0>
        frequency = 16000000UL;
34185c06:	4b27      	ldr	r3, [pc, #156]	@ (34185ca4 <HAL_RCC_GetCpuClockFreq+0xf4>)
34185c08:	607b      	str	r3, [r7, #4]
      break;
34185c0a:	e041      	b.n	34185c90 <HAL_RCC_GetCpuClockFreq+0xe0>
      frequency = HSE_VALUE;
34185c0c:	4b26      	ldr	r3, [pc, #152]	@ (34185ca8 <HAL_RCC_GetCpuClockFreq+0xf8>)
34185c0e:	607b      	str	r3, [r7, #4]
      break;
34185c10:	e03e      	b.n	34185c90 <HAL_RCC_GetCpuClockFreq+0xe0>
      ic_divider = LL_RCC_IC1_GetDivider();
34185c12:	f7ff f99f 	bl	34184f54 <LL_RCC_IC1_GetDivider>
34185c16:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC1_GetSource())
34185c18:	f7ff f98e 	bl	34184f38 <LL_RCC_IC1_GetSource>
34185c1c:	4603      	mov	r3, r0
34185c1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34185c22:	d029      	beq.n	34185c78 <HAL_RCC_GetCpuClockFreq+0xc8>
34185c24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34185c28:	d82f      	bhi.n	34185c8a <HAL_RCC_GetCpuClockFreq+0xda>
34185c2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185c2e:	d01a      	beq.n	34185c66 <HAL_RCC_GetCpuClockFreq+0xb6>
34185c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185c34:	d829      	bhi.n	34185c8a <HAL_RCC_GetCpuClockFreq+0xda>
34185c36:	2b00      	cmp	r3, #0
34185c38:	d003      	beq.n	34185c42 <HAL_RCC_GetCpuClockFreq+0x92>
34185c3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34185c3e:	d009      	beq.n	34185c54 <HAL_RCC_GetCpuClockFreq+0xa4>
          break;
34185c40:	e023      	b.n	34185c8a <HAL_RCC_GetCpuClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34185c42:	f004 fec1 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
34185c46:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34185c48:	687a      	ldr	r2, [r7, #4]
34185c4a:	683b      	ldr	r3, [r7, #0]
34185c4c:	fbb2 f3f3 	udiv	r3, r2, r3
34185c50:	607b      	str	r3, [r7, #4]
          break;
34185c52:	e01b      	b.n	34185c8c <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34185c54:	f004 fefe 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
34185c58:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34185c5a:	687a      	ldr	r2, [r7, #4]
34185c5c:	683b      	ldr	r3, [r7, #0]
34185c5e:	fbb2 f3f3 	udiv	r3, r2, r3
34185c62:	607b      	str	r3, [r7, #4]
          break;
34185c64:	e012      	b.n	34185c8c <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34185c66:	f004 ff3b 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
34185c6a:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34185c6c:	687a      	ldr	r2, [r7, #4]
34185c6e:	683b      	ldr	r3, [r7, #0]
34185c70:	fbb2 f3f3 	udiv	r3, r2, r3
34185c74:	607b      	str	r3, [r7, #4]
          break;
34185c76:	e009      	b.n	34185c8c <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34185c78:	f004 ff78 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
34185c7c:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34185c7e:	687a      	ldr	r2, [r7, #4]
34185c80:	683b      	ldr	r3, [r7, #0]
34185c82:	fbb2 f3f3 	udiv	r3, r2, r3
34185c86:	607b      	str	r3, [r7, #4]
          break;
34185c88:	e000      	b.n	34185c8c <HAL_RCC_GetCpuClockFreq+0xdc>
          break;
34185c8a:	bf00      	nop
      break;
34185c8c:	e000      	b.n	34185c90 <HAL_RCC_GetCpuClockFreq+0xe0>
      break;
34185c8e:	bf00      	nop
  }

  return frequency;
34185c90:	687b      	ldr	r3, [r7, #4]
}
34185c92:	4618      	mov	r0, r3
34185c94:	3708      	adds	r7, #8
34185c96:	46bd      	mov	sp, r7
34185c98:	bd80      	pop	{r7, pc}
34185c9a:	bf00      	nop
34185c9c:	03d09000 	.word	0x03d09000
34185ca0:	003d0900 	.word	0x003d0900
34185ca4:	00f42400 	.word	0x00f42400
34185ca8:	016e3600 	.word	0x016e3600

34185cac <HAL_RCC_GetSysClockFreq>:
  *         will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
34185cac:	b580      	push	{r7, lr}
34185cae:	b082      	sub	sp, #8
34185cb0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
34185cb2:	2300      	movs	r3, #0
34185cb4:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
34185cb6:	f7ff f82f 	bl	34184d18 <LL_RCC_GetSysClkSource>
34185cba:	4603      	mov	r3, r0
34185cbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34185cc0:	d025      	beq.n	34185d0e <HAL_RCC_GetSysClockFreq+0x62>
34185cc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34185cc6:	d860      	bhi.n	34185d8a <HAL_RCC_GetSysClockFreq+0xde>
34185cc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185ccc:	d01c      	beq.n	34185d08 <HAL_RCC_GetSysClockFreq+0x5c>
34185cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185cd2:	d85a      	bhi.n	34185d8a <HAL_RCC_GetSysClockFreq+0xde>
34185cd4:	2b00      	cmp	r3, #0
34185cd6:	d003      	beq.n	34185ce0 <HAL_RCC_GetSysClockFreq+0x34>
34185cd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34185cdc:	d009      	beq.n	34185cf2 <HAL_RCC_GetSysClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34185cde:	e054      	b.n	34185d8a <HAL_RCC_GetSysClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34185ce0:	f7fe ff42 	bl	34184b68 <LL_RCC_HSI_GetDivider>
34185ce4:	4603      	mov	r3, r0
34185ce6:	09db      	lsrs	r3, r3, #7
34185ce8:	4a2b      	ldr	r2, [pc, #172]	@ (34185d98 <HAL_RCC_GetSysClockFreq+0xec>)
34185cea:	fa22 f303 	lsr.w	r3, r2, r3
34185cee:	607b      	str	r3, [r7, #4]
      break;
34185cf0:	e04c      	b.n	34185d8c <HAL_RCC_GetSysClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34185cf2:	f7fe ffa1 	bl	34184c38 <LL_RCC_MSI_GetFrequency>
34185cf6:	4603      	mov	r3, r0
34185cf8:	2b00      	cmp	r3, #0
34185cfa:	d102      	bne.n	34185d02 <HAL_RCC_GetSysClockFreq+0x56>
        frequency = MSI_VALUE;
34185cfc:	4b27      	ldr	r3, [pc, #156]	@ (34185d9c <HAL_RCC_GetSysClockFreq+0xf0>)
34185cfe:	607b      	str	r3, [r7, #4]
      break;
34185d00:	e044      	b.n	34185d8c <HAL_RCC_GetSysClockFreq+0xe0>
        frequency = 16000000UL;
34185d02:	4b27      	ldr	r3, [pc, #156]	@ (34185da0 <HAL_RCC_GetSysClockFreq+0xf4>)
34185d04:	607b      	str	r3, [r7, #4]
      break;
34185d06:	e041      	b.n	34185d8c <HAL_RCC_GetSysClockFreq+0xe0>
      frequency = HSE_VALUE;
34185d08:	4b26      	ldr	r3, [pc, #152]	@ (34185da4 <HAL_RCC_GetSysClockFreq+0xf8>)
34185d0a:	607b      	str	r3, [r7, #4]
      break;
34185d0c:	e03e      	b.n	34185d8c <HAL_RCC_GetSysClockFreq+0xe0>
      ic_divider = LL_RCC_IC2_GetDivider();
34185d0e:	f7ff f93f 	bl	34184f90 <LL_RCC_IC2_GetDivider>
34185d12:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC2_GetSource())
34185d14:	f7ff f92e 	bl	34184f74 <LL_RCC_IC2_GetSource>
34185d18:	4603      	mov	r3, r0
34185d1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34185d1e:	d029      	beq.n	34185d74 <HAL_RCC_GetSysClockFreq+0xc8>
34185d20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34185d24:	d82f      	bhi.n	34185d86 <HAL_RCC_GetSysClockFreq+0xda>
34185d26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185d2a:	d01a      	beq.n	34185d62 <HAL_RCC_GetSysClockFreq+0xb6>
34185d2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185d30:	d829      	bhi.n	34185d86 <HAL_RCC_GetSysClockFreq+0xda>
34185d32:	2b00      	cmp	r3, #0
34185d34:	d003      	beq.n	34185d3e <HAL_RCC_GetSysClockFreq+0x92>
34185d36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34185d3a:	d009      	beq.n	34185d50 <HAL_RCC_GetSysClockFreq+0xa4>
          break;
34185d3c:	e023      	b.n	34185d86 <HAL_RCC_GetSysClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34185d3e:	f004 fe43 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
34185d42:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34185d44:	687a      	ldr	r2, [r7, #4]
34185d46:	683b      	ldr	r3, [r7, #0]
34185d48:	fbb2 f3f3 	udiv	r3, r2, r3
34185d4c:	607b      	str	r3, [r7, #4]
          break;
34185d4e:	e01b      	b.n	34185d88 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34185d50:	f004 fe80 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
34185d54:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34185d56:	687a      	ldr	r2, [r7, #4]
34185d58:	683b      	ldr	r3, [r7, #0]
34185d5a:	fbb2 f3f3 	udiv	r3, r2, r3
34185d5e:	607b      	str	r3, [r7, #4]
          break;
34185d60:	e012      	b.n	34185d88 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34185d62:	f004 febd 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
34185d66:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34185d68:	687a      	ldr	r2, [r7, #4]
34185d6a:	683b      	ldr	r3, [r7, #0]
34185d6c:	fbb2 f3f3 	udiv	r3, r2, r3
34185d70:	607b      	str	r3, [r7, #4]
          break;
34185d72:	e009      	b.n	34185d88 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34185d74:	f004 fefa 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
34185d78:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34185d7a:	687a      	ldr	r2, [r7, #4]
34185d7c:	683b      	ldr	r3, [r7, #0]
34185d7e:	fbb2 f3f3 	udiv	r3, r2, r3
34185d82:	607b      	str	r3, [r7, #4]
          break;
34185d84:	e000      	b.n	34185d88 <HAL_RCC_GetSysClockFreq+0xdc>
          break;
34185d86:	bf00      	nop
      break;
34185d88:	e000      	b.n	34185d8c <HAL_RCC_GetSysClockFreq+0xe0>
      break;
34185d8a:	bf00      	nop
  }

  return frequency;
34185d8c:	687b      	ldr	r3, [r7, #4]
}
34185d8e:	4618      	mov	r0, r3
34185d90:	3708      	adds	r7, #8
34185d92:	46bd      	mov	sp, r7
34185d94:	bd80      	pop	{r7, pc}
34185d96:	bf00      	nop
34185d98:	03d09000 	.word	0x03d09000
34185d9c:	003d0900 	.word	0x003d0900
34185da0:	00f42400 	.word	0x00f42400
34185da4:	016e3600 	.word	0x016e3600

34185da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
34185da8:	b598      	push	{r3, r4, r7, lr}
34185daa:	af00      	add	r7, sp, #0
  return LL_RCC_CALC_PCLK1_FREQ(LL_RCC_CALC_HCLK_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()),
34185dac:	f7ff ff7e 	bl	34185cac <HAL_RCC_GetSysClockFreq>
34185db0:	4604      	mov	r4, r0
34185db2:	f7fe ffbf 	bl	34184d34 <LL_RCC_GetAHBPrescaler>
34185db6:	4603      	mov	r3, r0
34185db8:	0d1b      	lsrs	r3, r3, #20
34185dba:	f003 0307 	and.w	r3, r3, #7
34185dbe:	40dc      	lsrs	r4, r3
34185dc0:	f7fe ffc6 	bl	34184d50 <LL_RCC_GetAPB1Prescaler>
34185dc4:	4603      	mov	r3, r0
34185dc6:	f003 0307 	and.w	r3, r3, #7
34185dca:	fa24 f303 	lsr.w	r3, r4, r3
                                LL_RCC_GetAPB1Prescaler());
}
34185dce:	4618      	mov	r0, r3
34185dd0:	bd98      	pop	{r3, r4, r7, pc}
	...

34185dd4 <HAL_RCC_GetClockConfig>:
  * @param  pRCC_ClkInitStruct  Pointer to an RCC_ClkInitTypeDef structure that
  *         will return the configuration.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
34185dd4:	b480      	push	{r7}
34185dd6:	b085      	sub	sp, #20
34185dd8:	af00      	add	r7, sp, #0
34185dda:	6078      	str	r0, [r7, #4]
  uint32_t cfgr_value;

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK | \
34185ddc:	687b      	ldr	r3, [r7, #4]
34185dde:	227f      	movs	r2, #127	@ 0x7f
34185de0:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK   | \
                                  RCC_CLOCKTYPE_PCLK1  | RCC_CLOCKTYPE_PCLK2 | \
                                  RCC_CLOCKTYPE_PCLK4  | RCC_CLOCKTYPE_PCLK5;

  /* Get the configuration register 1 value */
  cfgr_value = RCC->CFGR1;
34185de2:	4b36      	ldr	r3, [pc, #216]	@ (34185ebc <HAL_RCC_GetClockConfig+0xe8>)
34185de4:	6a1b      	ldr	r3, [r3, #32]
34185de6:	60fb      	str	r3, [r7, #12]

  /* Get the active CPU source -----------------------------------------------*/
  pRCC_ClkInitStruct->CPUCLKSource = (cfgr_value & RCC_CFGR1_CPUSWS) >> 4U;
34185de8:	68fb      	ldr	r3, [r7, #12]
34185dea:	091b      	lsrs	r3, r3, #4
34185dec:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
34185df0:	687b      	ldr	r3, [r7, #4]
34185df2:	605a      	str	r2, [r3, #4]

  /* Get the active SYSCLK bus source ----------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (cfgr_value & RCC_CFGR1_SYSSWS) >> 4U;
34185df4:	68fb      	ldr	r3, [r7, #12]
34185df6:	091b      	lsrs	r3, r3, #4
34185df8:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
34185dfc:	687b      	ldr	r3, [r7, #4]
34185dfe:	609a      	str	r2, [r3, #8]

  /* Get the configuration register 2 value */
  cfgr_value = RCC->CFGR2;
34185e00:	4b2e      	ldr	r3, [pc, #184]	@ (34185ebc <HAL_RCC_GetClockConfig+0xe8>)
34185e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185e04:	60fb      	str	r3, [r7, #12]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (cfgr_value & RCC_CFGR2_HPRE);
34185e06:	68fb      	ldr	r3, [r7, #12]
34185e08:	f403 02e0 	and.w	r2, r3, #7340032	@ 0x700000
34185e0c:	687b      	ldr	r3, [r7, #4]
34185e0e:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (cfgr_value & RCC_CFGR2_PPRE1);
34185e10:	68fb      	ldr	r3, [r7, #12]
34185e12:	f003 0207 	and.w	r2, r3, #7
34185e16:	687b      	ldr	r3, [r7, #4]
34185e18:	611a      	str	r2, [r3, #16]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (cfgr_value & RCC_CFGR2_PPRE2);
34185e1a:	68fb      	ldr	r3, [r7, #12]
34185e1c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
34185e20:	687b      	ldr	r3, [r7, #4]
34185e22:	615a      	str	r2, [r3, #20]

  /* Get the APB4 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB4CLKDivider = (cfgr_value & RCC_CFGR2_PPRE4);
34185e24:	68fb      	ldr	r3, [r7, #12]
34185e26:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
34185e2a:	687b      	ldr	r3, [r7, #4]
34185e2c:	619a      	str	r2, [r3, #24]

  /* Get the APB5 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB5CLKDivider = (cfgr_value & RCC_CFGR2_PPRE5);
34185e2e:	68fb      	ldr	r3, [r7, #12]
34185e30:	f403 22e0 	and.w	r2, r3, #458752	@ 0x70000
34185e34:	687b      	ldr	r3, [r7, #4]
34185e36:	61da      	str	r2, [r3, #28]

  /* Get the IC1 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC1CFGR;
34185e38:	4b20      	ldr	r3, [pc, #128]	@ (34185ebc <HAL_RCC_GetClockConfig+0xe8>)
34185e3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34185e3e:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC1Selection.ClockSelection = cfgr_value & RCC_IC1CFGR_IC1SEL;
34185e40:	68fb      	ldr	r3, [r7, #12]
34185e42:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34185e46:	687b      	ldr	r3, [r7, #4]
34185e48:	621a      	str	r2, [r3, #32]
  pRCC_ClkInitStruct->IC1Selection.ClockDivider = ((cfgr_value & RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1U;
34185e4a:	68fb      	ldr	r3, [r7, #12]
34185e4c:	0c1b      	lsrs	r3, r3, #16
34185e4e:	b2db      	uxtb	r3, r3
34185e50:	1c5a      	adds	r2, r3, #1
34185e52:	687b      	ldr	r3, [r7, #4]
34185e54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Get the IC2 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC2CFGR;
34185e56:	4b19      	ldr	r3, [pc, #100]	@ (34185ebc <HAL_RCC_GetClockConfig+0xe8>)
34185e58:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34185e5c:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC2Selection.ClockSelection = cfgr_value & RCC_IC2CFGR_IC2SEL;
34185e5e:	68fb      	ldr	r3, [r7, #12]
34185e60:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34185e64:	687b      	ldr	r3, [r7, #4]
34185e66:	629a      	str	r2, [r3, #40]	@ 0x28
  pRCC_ClkInitStruct->IC2Selection.ClockDivider = ((cfgr_value & RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1U;
34185e68:	68fb      	ldr	r3, [r7, #12]
34185e6a:	0c1b      	lsrs	r3, r3, #16
34185e6c:	b2db      	uxtb	r3, r3
34185e6e:	1c5a      	adds	r2, r3, #1
34185e70:	687b      	ldr	r3, [r7, #4]
34185e72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the IC6 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC6CFGR;
34185e74:	4b11      	ldr	r3, [pc, #68]	@ (34185ebc <HAL_RCC_GetClockConfig+0xe8>)
34185e76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
34185e7a:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC6Selection.ClockSelection = cfgr_value & RCC_IC6CFGR_IC6SEL;
34185e7c:	68fb      	ldr	r3, [r7, #12]
34185e7e:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34185e82:	687b      	ldr	r3, [r7, #4]
34185e84:	631a      	str	r2, [r3, #48]	@ 0x30
  pRCC_ClkInitStruct->IC6Selection.ClockDivider = ((cfgr_value & RCC_IC6CFGR_IC6INT) >> RCC_IC6CFGR_IC6INT_Pos) + 1U;
34185e86:	68fb      	ldr	r3, [r7, #12]
34185e88:	0c1b      	lsrs	r3, r3, #16
34185e8a:	b2db      	uxtb	r3, r3
34185e8c:	1c5a      	adds	r2, r3, #1
34185e8e:	687b      	ldr	r3, [r7, #4]
34185e90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the IC11 configuration ----------------------------------------------*/
  cfgr_value = RCC->IC11CFGR;
34185e92:	4b0a      	ldr	r3, [pc, #40]	@ (34185ebc <HAL_RCC_GetClockConfig+0xe8>)
34185e94:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34185e98:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC11Selection.ClockSelection = cfgr_value & RCC_IC11CFGR_IC11SEL;
34185e9a:	68fb      	ldr	r3, [r7, #12]
34185e9c:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34185ea0:	687b      	ldr	r3, [r7, #4]
34185ea2:	639a      	str	r2, [r3, #56]	@ 0x38
  pRCC_ClkInitStruct->IC11Selection.ClockDivider = ((cfgr_value & RCC_IC11CFGR_IC11INT) >> RCC_IC11CFGR_IC11INT_Pos) + 1U;
34185ea4:	68fb      	ldr	r3, [r7, #12]
34185ea6:	0c1b      	lsrs	r3, r3, #16
34185ea8:	b2db      	uxtb	r3, r3
34185eaa:	1c5a      	adds	r2, r3, #1
34185eac:	687b      	ldr	r3, [r7, #4]
34185eae:	63da      	str	r2, [r3, #60]	@ 0x3c
}
34185eb0:	bf00      	nop
34185eb2:	3714      	adds	r7, #20
34185eb4:	46bd      	mov	sp, r7
34185eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
34185eba:	4770      	bx	lr
34185ebc:	56028000 	.word	0x56028000

34185ec0 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34185ec0:	b580      	push	{r7, lr}
34185ec2:	b088      	sub	sp, #32
34185ec4:	af00      	add	r7, sp, #0
34185ec6:	6078      	str	r0, [r7, #4]
34185ec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_cfgr1_reg;
  __IO uint32_t *p_rcc_pll_cfgr2_reg;
  __IO uint32_t *p_rcc_pll_cfgr3_reg;
  HAL_StatusTypeDef ret = HAL_OK;
34185eca:	2300      	movs	r3, #0
34185ecc:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34185ece:	687b      	ldr	r3, [r7, #4]
34185ed0:	011a      	lsls	r2, r3, #4
34185ed2:	4b8e      	ldr	r3, [pc, #568]	@ (3418610c <RCC_PLL_Config+0x24c>)
34185ed4:	4413      	add	r3, r2
34185ed6:	61bb      	str	r3, [r7, #24]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34185ed8:	687b      	ldr	r3, [r7, #4]
34185eda:	011a      	lsls	r2, r3, #4
34185edc:	4b8c      	ldr	r3, [pc, #560]	@ (34186110 <RCC_PLL_Config+0x250>)
34185ede:	4413      	add	r3, r2
34185ee0:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34185ee2:	687b      	ldr	r3, [r7, #4]
34185ee4:	011a      	lsls	r2, r3, #4
34185ee6:	4b8b      	ldr	r3, [pc, #556]	@ (34186114 <RCC_PLL_Config+0x254>)
34185ee8:	4413      	add	r3, r2
34185eea:	613b      	str	r3, [r7, #16]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */
  if (pPLLInit->PLLState == RCC_PLL_ON)
34185eec:	683b      	ldr	r3, [r7, #0]
34185eee:	681b      	ldr	r3, [r3, #0]
34185ef0:	2b02      	cmp	r3, #2
34185ef2:	f040 8091 	bne.w	34186018 <RCC_PLL_Config+0x158>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34185ef6:	4a88      	ldr	r2, [pc, #544]	@ (34186118 <RCC_PLL_Config+0x258>)
34185ef8:	f44f 7180 	mov.w	r1, #256	@ 0x100
34185efc:	687b      	ldr	r3, [r7, #4]
34185efe:	fa01 f303 	lsl.w	r3, r1, r3
34185f02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34185f06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34185f08:	f7fc fc72 	bl	341827f0 <HAL_GetTick>
34185f0c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34185f0e:	e008      	b.n	34185f22 <RCC_PLL_Config+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34185f10:	f7fc fc6e 	bl	341827f0 <HAL_GetTick>
34185f14:	4602      	mov	r2, r0
34185f16:	68fb      	ldr	r3, [r7, #12]
34185f18:	1ad3      	subs	r3, r2, r3
34185f1a:	2b01      	cmp	r3, #1
34185f1c:	d901      	bls.n	34185f22 <RCC_PLL_Config+0x62>
      {
        return HAL_TIMEOUT;
34185f1e:	2303      	movs	r3, #3
34185f20:	e0f0      	b.n	34186104 <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34185f22:	4b7d      	ldr	r3, [pc, #500]	@ (34186118 <RCC_PLL_Config+0x258>)
34185f24:	685a      	ldr	r2, [r3, #4]
34185f26:	f44f 7180 	mov.w	r1, #256	@ 0x100
34185f2a:	687b      	ldr	r3, [r7, #4]
34185f2c:	fa01 f303 	lsl.w	r3, r1, r3
34185f30:	401a      	ands	r2, r3
34185f32:	f44f 7180 	mov.w	r1, #256	@ 0x100
34185f36:	687b      	ldr	r3, [r7, #4]
34185f38:	fa01 f303 	lsl.w	r3, r1, r3
34185f3c:	429a      	cmp	r2, r3
34185f3e:	d0e7      	beq.n	34185f10 <RCC_PLL_Config+0x50>
      }
    }

    /* Ensure PLLxMODSSDIS='1' */
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34185f40:	693b      	ldr	r3, [r7, #16]
34185f42:	681b      	ldr	r3, [r3, #0]
34185f44:	f043 0204 	orr.w	r2, r3, #4
34185f48:	693b      	ldr	r3, [r7, #16]
34185f4a:	601a      	str	r2, [r3, #0]

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34185f4c:	69bb      	ldr	r3, [r7, #24]
34185f4e:	681b      	ldr	r3, [r3, #0]
34185f50:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
34185f54:	69bb      	ldr	r3, [r7, #24]
34185f56:	601a      	str	r2, [r3, #0]

    /* Configure the PLLx clock source, multiplication and division factors. */
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34185f58:	69bb      	ldr	r3, [r7, #24]
34185f5a:	681a      	ldr	r2, [r3, #0]
34185f5c:	4b6f      	ldr	r3, [pc, #444]	@ (3418611c <RCC_PLL_Config+0x25c>)
34185f5e:	4013      	ands	r3, r2
34185f60:	683a      	ldr	r2, [r7, #0]
34185f62:	6851      	ldr	r1, [r2, #4]
34185f64:	683a      	ldr	r2, [r7, #0]
34185f66:	6892      	ldr	r2, [r2, #8]
34185f68:	0512      	lsls	r2, r2, #20
34185f6a:	4311      	orrs	r1, r2
34185f6c:	683a      	ldr	r2, [r7, #0]
34185f6e:	6912      	ldr	r2, [r2, #16]
34185f70:	0212      	lsls	r2, r2, #8
34185f72:	430a      	orrs	r2, r1
34185f74:	431a      	orrs	r2, r3
34185f76:	69bb      	ldr	r3, [r7, #24]
34185f78:	601a      	str	r2, [r3, #0]
               (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
                | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)));
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
34185f7a:	693b      	ldr	r3, [r7, #16]
34185f7c:	681b      	ldr	r3, [r3, #0]
34185f7e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
34185f82:	683b      	ldr	r3, [r7, #0]
34185f84:	695b      	ldr	r3, [r3, #20]
34185f86:	06d9      	lsls	r1, r3, #27
34185f88:	683b      	ldr	r3, [r7, #0]
34185f8a:	699b      	ldr	r3, [r3, #24]
34185f8c:	061b      	lsls	r3, r3, #24
34185f8e:	430b      	orrs	r3, r1
34185f90:	431a      	orrs	r2, r3
34185f92:	693b      	ldr	r3, [r7, #16]
34185f94:	601a      	str	r2, [r3, #0]
               ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)));

    /* Configure PLLx DIVNFRAC */
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
34185f96:	697b      	ldr	r3, [r7, #20]
34185f98:	681b      	ldr	r3, [r3, #0]
34185f9a:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
34185f9e:	683b      	ldr	r3, [r7, #0]
34185fa0:	68db      	ldr	r3, [r3, #12]
34185fa2:	431a      	orrs	r2, r3
34185fa4:	697b      	ldr	r3, [r7, #20]
34185fa6:	601a      	str	r2, [r3, #0]
               pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);

    /* Clear PLLxMODDSEN (Also clear in Fractional Mode to ensure the latch of updated FRAC value when set again) */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
34185fa8:	693b      	ldr	r3, [r7, #16]
34185faa:	681b      	ldr	r3, [r3, #0]
34185fac:	f023 0208 	bic.w	r2, r3, #8
34185fb0:	693b      	ldr	r3, [r7, #16]
34185fb2:	601a      	str	r2, [r3, #0]

    /* Fractional Mode specificities Management */
    if (pPLLInit->PLLFractional != 0U)
34185fb4:	683b      	ldr	r3, [r7, #0]
34185fb6:	68db      	ldr	r3, [r3, #12]
34185fb8:	2b00      	cmp	r3, #0
34185fba:	d005      	beq.n	34185fc8 <RCC_PLL_Config+0x108>
    {
      /* Set PLLxMODDSEN and DACEN */
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
34185fbc:	693b      	ldr	r3, [r7, #16]
34185fbe:	681b      	ldr	r3, [r3, #0]
34185fc0:	f043 020a 	orr.w	r2, r3, #10
34185fc4:	693b      	ldr	r3, [r7, #16]
34185fc6:	601a      	str	r2, [r3, #0]
    }

    /* Ensure PLLxMODSSRST='1' and Enable PLLx post divider output */
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
34185fc8:	693b      	ldr	r3, [r7, #16]
34185fca:	681b      	ldr	r3, [r3, #0]
34185fcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34185fd0:	f043 0301 	orr.w	r3, r3, #1
34185fd4:	693a      	ldr	r2, [r7, #16]
34185fd6:	6013      	str	r3, [r2, #0]

    /* Enable the PLLx */
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34185fd8:	4a4f      	ldr	r2, [pc, #316]	@ (34186118 <RCC_PLL_Config+0x258>)
34185fda:	f44f 7180 	mov.w	r1, #256	@ 0x100
34185fde:	687b      	ldr	r3, [r7, #4]
34185fe0:	fa01 f303 	lsl.w	r3, r1, r3
34185fe4:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34185fe8:	f7fc fc02 	bl	341827f0 <HAL_GetTick>
34185fec:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34185fee:	e008      	b.n	34186002 <RCC_PLL_Config+0x142>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34185ff0:	f7fc fbfe 	bl	341827f0 <HAL_GetTick>
34185ff4:	4602      	mov	r2, r0
34185ff6:	68fb      	ldr	r3, [r7, #12]
34185ff8:	1ad3      	subs	r3, r2, r3
34185ffa:	2b01      	cmp	r3, #1
34185ffc:	d901      	bls.n	34186002 <RCC_PLL_Config+0x142>
      {
        return HAL_TIMEOUT;
34185ffe:	2303      	movs	r3, #3
34186000:	e080      	b.n	34186104 <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34186002:	4b45      	ldr	r3, [pc, #276]	@ (34186118 <RCC_PLL_Config+0x258>)
34186004:	685a      	ldr	r2, [r3, #4]
34186006:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418600a:	687b      	ldr	r3, [r7, #4]
3418600c:	fa01 f303 	lsl.w	r3, r1, r3
34186010:	4013      	ands	r3, r2
34186012:	2b00      	cmp	r3, #0
34186014:	d0ec      	beq.n	34185ff0 <RCC_PLL_Config+0x130>
34186016:	e074      	b.n	34186102 <RCC_PLL_Config+0x242>
      }
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
34186018:	683b      	ldr	r3, [r7, #0]
3418601a:	681b      	ldr	r3, [r3, #0]
3418601c:	2b03      	cmp	r3, #3
3418601e:	d13b      	bne.n	34186098 <RCC_PLL_Config+0x1d8>
  {
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));

    /* Check selected source is ready */
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
34186020:	683b      	ldr	r3, [r7, #0]
34186022:	685b      	ldr	r3, [r3, #4]
34186024:	4618      	mov	r0, r3
34186026:	f000 f921 	bl	3418626c <RCC_PLL_Source_IsReady>
3418602a:	4603      	mov	r3, r0
3418602c:	2b01      	cmp	r3, #1
3418602e:	d130      	bne.n	34186092 <RCC_PLL_Config+0x1d2>
    {
      /* Ensure PLLx is disabled */
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34186030:	4a39      	ldr	r2, [pc, #228]	@ (34186118 <RCC_PLL_Config+0x258>)
34186032:	f44f 7180 	mov.w	r1, #256	@ 0x100
34186036:	687b      	ldr	r3, [r7, #4]
34186038:	fa01 f303 	lsl.w	r3, r1, r3
3418603c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34186040:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34186042:	f7fc fbd5 	bl	341827f0 <HAL_GetTick>
34186046:	60f8      	str	r0, [r7, #12]

      /* Wait till PLLx is disabled */
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34186048:	e008      	b.n	3418605c <RCC_PLL_Config+0x19c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3418604a:	f7fc fbd1 	bl	341827f0 <HAL_GetTick>
3418604e:	4602      	mov	r2, r0
34186050:	68fb      	ldr	r3, [r7, #12]
34186052:	1ad3      	subs	r3, r2, r3
34186054:	2b01      	cmp	r3, #1
34186056:	d901      	bls.n	3418605c <RCC_PLL_Config+0x19c>
        {
          return HAL_TIMEOUT;
34186058:	2303      	movs	r3, #3
3418605a:	e053      	b.n	34186104 <RCC_PLL_Config+0x244>
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418605c:	4b2e      	ldr	r3, [pc, #184]	@ (34186118 <RCC_PLL_Config+0x258>)
3418605e:	685a      	ldr	r2, [r3, #4]
34186060:	f44f 7180 	mov.w	r1, #256	@ 0x100
34186064:	687b      	ldr	r3, [r7, #4]
34186066:	fa01 f303 	lsl.w	r3, r1, r3
3418606a:	401a      	ands	r2, r3
3418606c:	f44f 7180 	mov.w	r1, #256	@ 0x100
34186070:	687b      	ldr	r3, [r7, #4]
34186072:	fa01 f303 	lsl.w	r3, r1, r3
34186076:	429a      	cmp	r2, r3
34186078:	d0e7      	beq.n	3418604a <RCC_PLL_Config+0x18a>
        }
      }

      /* Set bypass mode with selected source */
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
3418607a:	69bb      	ldr	r3, [r7, #24]
3418607c:	681b      	ldr	r3, [r3, #0]
3418607e:	f023 42f0 	bic.w	r2, r3, #2013265920	@ 0x78000000
34186082:	683b      	ldr	r3, [r7, #0]
34186084:	685b      	ldr	r3, [r3, #4]
34186086:	4313      	orrs	r3, r2
34186088:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
3418608c:	69bb      	ldr	r3, [r7, #24]
3418608e:	601a      	str	r2, [r3, #0]
34186090:	e037      	b.n	34186102 <RCC_PLL_Config+0x242>
                 (RCC_PLL1CFGR1_PLL1BYP | pPLLInit->PLLSource));
    }
    else
    {
      ret = HAL_ERROR;
34186092:	2301      	movs	r3, #1
34186094:	77fb      	strb	r3, [r7, #31]
34186096:	e034      	b.n	34186102 <RCC_PLL_Config+0x242>
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
34186098:	683b      	ldr	r3, [r7, #0]
3418609a:	681b      	ldr	r3, [r3, #0]
3418609c:	2b01      	cmp	r3, #1
3418609e:	d130      	bne.n	34186102 <RCC_PLL_Config+0x242>
  {
    /* Disable PLLx post divider output */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
341860a0:	693b      	ldr	r3, [r7, #16]
341860a2:	681b      	ldr	r3, [r3, #0]
341860a4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
341860a8:	693b      	ldr	r3, [r7, #16]
341860aa:	601a      	str	r2, [r3, #0]

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
341860ac:	4a1a      	ldr	r2, [pc, #104]	@ (34186118 <RCC_PLL_Config+0x258>)
341860ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
341860b2:	687b      	ldr	r3, [r7, #4]
341860b4:	fa01 f303 	lsl.w	r3, r1, r3
341860b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
341860bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
341860be:	f7fc fb97 	bl	341827f0 <HAL_GetTick>
341860c2:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341860c4:	e008      	b.n	341860d8 <RCC_PLL_Config+0x218>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
341860c6:	f7fc fb93 	bl	341827f0 <HAL_GetTick>
341860ca:	4602      	mov	r2, r0
341860cc:	68fb      	ldr	r3, [r7, #12]
341860ce:	1ad3      	subs	r3, r2, r3
341860d0:	2b01      	cmp	r3, #1
341860d2:	d901      	bls.n	341860d8 <RCC_PLL_Config+0x218>
      {
        return HAL_TIMEOUT;
341860d4:	2303      	movs	r3, #3
341860d6:	e015      	b.n	34186104 <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341860d8:	4b0f      	ldr	r3, [pc, #60]	@ (34186118 <RCC_PLL_Config+0x258>)
341860da:	685a      	ldr	r2, [r3, #4]
341860dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
341860e0:	687b      	ldr	r3, [r7, #4]
341860e2:	fa01 f303 	lsl.w	r3, r1, r3
341860e6:	401a      	ands	r2, r3
341860e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
341860ec:	687b      	ldr	r3, [r7, #4]
341860ee:	fa01 f303 	lsl.w	r3, r1, r3
341860f2:	429a      	cmp	r2, r3
341860f4:	d0e7      	beq.n	341860c6 <RCC_PLL_Config+0x206>
      }
    }

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
341860f6:	69bb      	ldr	r3, [r7, #24]
341860f8:	681b      	ldr	r3, [r3, #0]
341860fa:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
341860fe:	69bb      	ldr	r3, [r7, #24]
34186100:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  return ret;
34186102:	7ffb      	ldrb	r3, [r7, #31]
}
34186104:	4618      	mov	r0, r3
34186106:	3720      	adds	r7, #32
34186108:	46bd      	mov	sp, r7
3418610a:	bd80      	pop	{r7, pc}
3418610c:	56028080 	.word	0x56028080
34186110:	56028084 	.word	0x56028084
34186114:	56028088 	.word	0x56028088
34186118:	56028000 	.word	0x56028000
3418611c:	8c0000ff 	.word	0x8c0000ff

34186120 <RCC_PLL_Enable>:
  * @param  PLLnumber PLL number to enable
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Enable(uint32_t PLLnumber)
{
34186120:	b580      	push	{r7, lr}
34186122:	b084      	sub	sp, #16
34186124:	af00      	add	r7, sp, #0
34186126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
34186128:	2300      	movs	r3, #0
3418612a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Enable the PLLx */
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
3418612c:	4a11      	ldr	r2, [pc, #68]	@ (34186174 <RCC_PLL_Enable+0x54>)
3418612e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34186132:	687b      	ldr	r3, [r7, #4]
34186134:	fa01 f303 	lsl.w	r3, r1, r3
34186138:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
3418613c:	f7fc fb58 	bl	341827f0 <HAL_GetTick>
34186140:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLx is ready */
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34186142:	e008      	b.n	34186156 <RCC_PLL_Enable+0x36>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34186144:	f7fc fb54 	bl	341827f0 <HAL_GetTick>
34186148:	4602      	mov	r2, r0
3418614a:	68bb      	ldr	r3, [r7, #8]
3418614c:	1ad3      	subs	r3, r2, r3
3418614e:	2b01      	cmp	r3, #1
34186150:	d901      	bls.n	34186156 <RCC_PLL_Enable+0x36>
    {
      return HAL_TIMEOUT;
34186152:	2303      	movs	r3, #3
34186154:	e00a      	b.n	3418616c <RCC_PLL_Enable+0x4c>
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34186156:	4b07      	ldr	r3, [pc, #28]	@ (34186174 <RCC_PLL_Enable+0x54>)
34186158:	685a      	ldr	r2, [r3, #4]
3418615a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418615e:	687b      	ldr	r3, [r7, #4]
34186160:	fa01 f303 	lsl.w	r3, r1, r3
34186164:	4013      	ands	r3, r2
34186166:	2b00      	cmp	r3, #0
34186168:	d0ec      	beq.n	34186144 <RCC_PLL_Enable+0x24>
    }
  }

  return ret;
3418616a:	7bfb      	ldrb	r3, [r7, #15]
}
3418616c:	4618      	mov	r0, r3
3418616e:	3710      	adds	r7, #16
34186170:	46bd      	mov	sp, r7
34186172:	bd80      	pop	{r7, pc}
34186174:	56028000 	.word	0x56028000

34186178 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34186178:	b480      	push	{r7}
3418617a:	b089      	sub	sp, #36	@ 0x24
3418617c:	af00      	add	r7, sp, #0
3418617e:	6078      	str	r0, [r7, #4]
34186180:	6039      	str	r1, [r7, #0]
  __IO const uint32_t *p_rcc_pll_cfgr1_reg, *p_rcc_pll_cfgr2_reg, *p_rcc_pll_cfgr3_reg;
  uint32_t ret = 0U;
34186182:	2300      	movs	r3, #0
34186184:	61fb      	str	r3, [r7, #28]

  /* No assert since done in calling function */

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34186186:	687b      	ldr	r3, [r7, #4]
34186188:	011a      	lsls	r2, r3, #4
3418618a:	4b34      	ldr	r3, [pc, #208]	@ (3418625c <RCC_PLL_IsNewConfig+0xe4>)
3418618c:	4413      	add	r3, r2
3418618e:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34186190:	687b      	ldr	r3, [r7, #4]
34186192:	011a      	lsls	r2, r3, #4
34186194:	4b32      	ldr	r3, [pc, #200]	@ (34186260 <RCC_PLL_IsNewConfig+0xe8>)
34186196:	4413      	add	r3, r2
34186198:	613b      	str	r3, [r7, #16]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
3418619a:	687b      	ldr	r3, [r7, #4]
3418619c:	011a      	lsls	r2, r3, #4
3418619e:	4b31      	ldr	r3, [pc, #196]	@ (34186264 <RCC_PLL_IsNewConfig+0xec>)
341861a0:	4413      	add	r3, r2
341861a2:	60fb      	str	r3, [r7, #12]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
341861a4:	697b      	ldr	r3, [r7, #20]
341861a6:	681b      	ldr	r3, [r3, #0]
341861a8:	f023 430c 	bic.w	r3, r3, #2348810240	@ 0x8c000000
341861ac:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
341861b0:	683a      	ldr	r2, [r7, #0]
341861b2:	6851      	ldr	r1, [r2, #4]
341861b4:	683a      	ldr	r2, [r7, #0]
341861b6:	6892      	ldr	r2, [r2, #8]
341861b8:	0512      	lsls	r2, r2, #20
341861ba:	4311      	orrs	r1, r2
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
341861bc:	683a      	ldr	r2, [r7, #0]
341861be:	6912      	ldr	r2, [r2, #16]
341861c0:	0212      	lsls	r2, r2, #8
341861c2:	430a      	orrs	r2, r1
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
341861c4:	4293      	cmp	r3, r2
341861c6:	d002      	beq.n	341861ce <RCC_PLL_IsNewConfig+0x56>
  {
    ret = 1U; /* New PLL configuration */
341861c8:	2301      	movs	r3, #1
341861ca:	61fb      	str	r3, [r7, #28]
341861cc:	e03e      	b.n	3418624c <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
341861ce:	693b      	ldr	r3, [r7, #16]
341861d0:	681b      	ldr	r3, [r3, #0]
341861d2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
341861d6:	683b      	ldr	r3, [r7, #0]
341861d8:	68db      	ldr	r3, [r3, #12]
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
341861da:	429a      	cmp	r2, r3
341861dc:	d002      	beq.n	341861e4 <RCC_PLL_IsNewConfig+0x6c>
  {
    ret = 1U; /* New PLL configuration */
341861de:	2301      	movs	r3, #1
341861e0:	61fb      	str	r3, [r7, #28]
341861e2:	e033      	b.n	3418624c <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
341861e4:	68fb      	ldr	r3, [r7, #12]
341861e6:	681b      	ldr	r3, [r3, #0]
341861e8:	f003 527c 	and.w	r2, r3, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
341861ec:	683b      	ldr	r3, [r7, #0]
341861ee:	695b      	ldr	r3, [r3, #20]
341861f0:	06d9      	lsls	r1, r3, #27
341861f2:	683b      	ldr	r3, [r7, #0]
341861f4:	699b      	ldr	r3, [r3, #24]
341861f6:	061b      	lsls	r3, r3, #24
341861f8:	430b      	orrs	r3, r1
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
341861fa:	429a      	cmp	r2, r3
341861fc:	d002      	beq.n	34186204 <RCC_PLL_IsNewConfig+0x8c>
  {
    ret = 1U; /* New PLL configuration */
341861fe:	2301      	movs	r3, #1
34186200:	61fb      	str	r3, [r7, #28]
34186202:	e023      	b.n	3418624c <RCC_PLL_IsNewConfig+0xd4>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34186204:	4b18      	ldr	r3, [pc, #96]	@ (34186268 <RCC_PLL_IsNewConfig+0xf0>)
34186206:	685a      	ldr	r2, [r3, #4]
34186208:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418620c:	687b      	ldr	r3, [r7, #4]
3418620e:	fa01 f303 	lsl.w	r3, r1, r3
34186212:	401a      	ands	r2, r3
34186214:	f44f 7180 	mov.w	r1, #256	@ 0x100
34186218:	687b      	ldr	r3, [r7, #4]
3418621a:	fa01 f303 	lsl.w	r3, r1, r3
3418621e:	429a      	cmp	r2, r3
34186220:	d102      	bne.n	34186228 <RCC_PLL_IsNewConfig+0xb0>
    {
      pllState = RCC_PLL_ON;
34186222:	2302      	movs	r3, #2
34186224:	61bb      	str	r3, [r7, #24]
34186226:	e00a      	b.n	3418623e <RCC_PLL_IsNewConfig+0xc6>
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
34186228:	697b      	ldr	r3, [r7, #20]
3418622a:	681b      	ldr	r3, [r3, #0]
3418622c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34186230:	2b00      	cmp	r3, #0
34186232:	d002      	beq.n	3418623a <RCC_PLL_IsNewConfig+0xc2>
      {
        pllState = RCC_PLL_BYPASS;
34186234:	2303      	movs	r3, #3
34186236:	61bb      	str	r3, [r7, #24]
34186238:	e001      	b.n	3418623e <RCC_PLL_IsNewConfig+0xc6>
      }
      else
      {
        pllState = RCC_PLL_OFF;
3418623a:	2301      	movs	r3, #1
3418623c:	61bb      	str	r3, [r7, #24]
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
3418623e:	683b      	ldr	r3, [r7, #0]
34186240:	681b      	ldr	r3, [r3, #0]
34186242:	69ba      	ldr	r2, [r7, #24]
34186244:	429a      	cmp	r2, r3
34186246:	d001      	beq.n	3418624c <RCC_PLL_IsNewConfig+0xd4>
    {
      ret = 1U; /* New PLL configuration */
34186248:	2301      	movs	r3, #1
3418624a:	61fb      	str	r3, [r7, #28]
    }
  }

  return ret;
3418624c:	69fb      	ldr	r3, [r7, #28]
}
3418624e:	4618      	mov	r0, r3
34186250:	3724      	adds	r7, #36	@ 0x24
34186252:	46bd      	mov	sp, r7
34186254:	f85d 7b04 	ldr.w	r7, [sp], #4
34186258:	4770      	bx	lr
3418625a:	bf00      	nop
3418625c:	56028080 	.word	0x56028080
34186260:	56028084 	.word	0x56028084
34186264:	56028088 	.word	0x56028088
34186268:	56028000 	.word	0x56028000

3418626c <RCC_PLL_Source_IsReady>:
  * @brief  Check whether the PLL source is ready
  * @param  PLLSource PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_Source_IsReady(uint32_t PLLSource)
{
3418626c:	b580      	push	{r7, lr}
3418626e:	b084      	sub	sp, #16
34186270:	af00      	add	r7, sp, #0
34186272:	6078      	str	r0, [r7, #4]
  uint32_t ret = 1U;
34186274:	2301      	movs	r3, #1
34186276:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  switch (PLLSource)
34186278:	687b      	ldr	r3, [r7, #4]
3418627a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418627e:	d01b      	beq.n	341862b8 <RCC_PLL_Source_IsReady+0x4c>
34186280:	687b      	ldr	r3, [r7, #4]
34186282:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34186286:	d81f      	bhi.n	341862c8 <RCC_PLL_Source_IsReady+0x5c>
34186288:	687b      	ldr	r3, [r7, #4]
3418628a:	2b00      	cmp	r3, #0
3418628c:	d004      	beq.n	34186298 <RCC_PLL_Source_IsReady+0x2c>
3418628e:	687b      	ldr	r3, [r7, #4]
34186290:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34186294:	d008      	beq.n	341862a8 <RCC_PLL_Source_IsReady+0x3c>
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_PIN:
    default:
      break;
34186296:	e017      	b.n	341862c8 <RCC_PLL_Source_IsReady+0x5c>
      if (LL_RCC_HSI_IsReady() == 0U)
34186298:	f7fe fc40 	bl	34184b1c <LL_RCC_HSI_IsReady>
3418629c:	4603      	mov	r3, r0
3418629e:	2b00      	cmp	r3, #0
341862a0:	d114      	bne.n	341862cc <RCC_PLL_Source_IsReady+0x60>
        ret = 0U;
341862a2:	2300      	movs	r3, #0
341862a4:	60fb      	str	r3, [r7, #12]
      break;
341862a6:	e011      	b.n	341862cc <RCC_PLL_Source_IsReady+0x60>
      if (LL_RCC_MSI_IsReady() == 0U)
341862a8:	f7fe fca0 	bl	34184bec <LL_RCC_MSI_IsReady>
341862ac:	4603      	mov	r3, r0
341862ae:	2b00      	cmp	r3, #0
341862b0:	d10e      	bne.n	341862d0 <RCC_PLL_Source_IsReady+0x64>
        ret = 0U;
341862b2:	2300      	movs	r3, #0
341862b4:	60fb      	str	r3, [r7, #12]
      break;
341862b6:	e00b      	b.n	341862d0 <RCC_PLL_Source_IsReady+0x64>
      if (LL_RCC_HSE_IsReady() == 0U)
341862b8:	f7fe fc00 	bl	34184abc <LL_RCC_HSE_IsReady>
341862bc:	4603      	mov	r3, r0
341862be:	2b00      	cmp	r3, #0
341862c0:	d108      	bne.n	341862d4 <RCC_PLL_Source_IsReady+0x68>
        ret = 0U;
341862c2:	2300      	movs	r3, #0
341862c4:	60fb      	str	r3, [r7, #12]
      break;
341862c6:	e005      	b.n	341862d4 <RCC_PLL_Source_IsReady+0x68>
      break;
341862c8:	bf00      	nop
341862ca:	e004      	b.n	341862d6 <RCC_PLL_Source_IsReady+0x6a>
      break;
341862cc:	bf00      	nop
341862ce:	e002      	b.n	341862d6 <RCC_PLL_Source_IsReady+0x6a>
      break;
341862d0:	bf00      	nop
341862d2:	e000      	b.n	341862d6 <RCC_PLL_Source_IsReady+0x6a>
      break;
341862d4:	bf00      	nop
  }

  return ret;
341862d6:	68fb      	ldr	r3, [r7, #12]
}
341862d8:	4618      	mov	r0, r3
341862da:	3710      	adds	r7, #16
341862dc:	46bd      	mov	sp, r7
341862de:	bd80      	pop	{r7, pc}

341862e0 <RCC_IC_CheckPLLSources>:
  * @param  PLLSource1 First PLL source
  * @param  PLLSource2 Second PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_IC_CheckPLLSources(uint32_t PLLSource1, uint32_t PLLSource2)
{
341862e0:	b580      	push	{r7, lr}
341862e2:	b084      	sub	sp, #16
341862e4:	af00      	add	r7, sp, #0
341862e6:	6078      	str	r0, [r7, #4]
341862e8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 1U;
341862ea:	2301      	movs	r3, #1
341862ec:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
341862ee:	687b      	ldr	r3, [r7, #4]
341862f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341862f4:	d03a      	beq.n	3418636c <RCC_IC_CheckPLLSources+0x8c>
341862f6:	687b      	ldr	r3, [r7, #4]
341862f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341862fc:	d843      	bhi.n	34186386 <RCC_IC_CheckPLLSources+0xa6>
341862fe:	687b      	ldr	r3, [r7, #4]
34186300:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34186304:	d025      	beq.n	34186352 <RCC_IC_CheckPLLSources+0x72>
34186306:	687b      	ldr	r3, [r7, #4]
34186308:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418630c:	d83b      	bhi.n	34186386 <RCC_IC_CheckPLLSources+0xa6>
3418630e:	687b      	ldr	r3, [r7, #4]
34186310:	2b00      	cmp	r3, #0
34186312:	d004      	beq.n	3418631e <RCC_IC_CheckPLLSources+0x3e>
34186314:	687b      	ldr	r3, [r7, #4]
34186316:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418631a:	d00d      	beq.n	34186338 <RCC_IC_CheckPLLSources+0x58>
3418631c:	e033      	b.n	34186386 <RCC_IC_CheckPLLSources+0xa6>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
3418631e:	f7fe fd33 	bl	34184d88 <LL_RCC_PLL1_IsReady>
34186322:	4603      	mov	r3, r0
34186324:	2b00      	cmp	r3, #0
34186326:	d131      	bne.n	3418638c <RCC_IC_CheckPLLSources+0xac>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
34186328:	f7fe fd42 	bl	34184db0 <LL_RCC_PLL1_IsEnabledBypass>
3418632c:	4603      	mov	r3, r0
3418632e:	2b00      	cmp	r3, #0
34186330:	d12c      	bne.n	3418638c <RCC_IC_CheckPLLSources+0xac>
        {
          ret = 0U;
34186332:	2300      	movs	r3, #0
34186334:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34186336:	e029      	b.n	3418638c <RCC_IC_CheckPLLSources+0xac>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
34186338:	f7fe fd5c 	bl	34184df4 <LL_RCC_PLL2_IsReady>
3418633c:	4603      	mov	r3, r0
3418633e:	2b00      	cmp	r3, #0
34186340:	d126      	bne.n	34186390 <RCC_IC_CheckPLLSources+0xb0>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
34186342:	f7fe fd6b 	bl	34184e1c <LL_RCC_PLL2_IsEnabledBypass>
34186346:	4603      	mov	r3, r0
34186348:	2b00      	cmp	r3, #0
3418634a:	d121      	bne.n	34186390 <RCC_IC_CheckPLLSources+0xb0>
        {
          ret = 0U;
3418634c:	2300      	movs	r3, #0
3418634e:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34186350:	e01e      	b.n	34186390 <RCC_IC_CheckPLLSources+0xb0>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
34186352:	f7fe fd85 	bl	34184e60 <LL_RCC_PLL3_IsReady>
34186356:	4603      	mov	r3, r0
34186358:	2b00      	cmp	r3, #0
3418635a:	d11b      	bne.n	34186394 <RCC_IC_CheckPLLSources+0xb4>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
3418635c:	f7fe fd94 	bl	34184e88 <LL_RCC_PLL3_IsEnabledBypass>
34186360:	4603      	mov	r3, r0
34186362:	2b00      	cmp	r3, #0
34186364:	d116      	bne.n	34186394 <RCC_IC_CheckPLLSources+0xb4>
        {
          ret = 0U;
34186366:	2300      	movs	r3, #0
34186368:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418636a:	e013      	b.n	34186394 <RCC_IC_CheckPLLSources+0xb4>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
3418636c:	f7fe fdae 	bl	34184ecc <LL_RCC_PLL4_IsReady>
34186370:	4603      	mov	r3, r0
34186372:	2b00      	cmp	r3, #0
34186374:	d110      	bne.n	34186398 <RCC_IC_CheckPLLSources+0xb8>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
34186376:	f7fe fdbd 	bl	34184ef4 <LL_RCC_PLL4_IsEnabledBypass>
3418637a:	4603      	mov	r3, r0
3418637c:	2b00      	cmp	r3, #0
3418637e:	d10b      	bne.n	34186398 <RCC_IC_CheckPLLSources+0xb8>
        {
          ret = 0U;
34186380:	2300      	movs	r3, #0
34186382:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34186384:	e008      	b.n	34186398 <RCC_IC_CheckPLLSources+0xb8>
    default:
      /* Unexpected */
      ret = 0U;
34186386:	2300      	movs	r3, #0
34186388:	60fb      	str	r3, [r7, #12]
      break;
3418638a:	e006      	b.n	3418639a <RCC_IC_CheckPLLSources+0xba>
      break;
3418638c:	bf00      	nop
3418638e:	e004      	b.n	3418639a <RCC_IC_CheckPLLSources+0xba>
      break;
34186390:	bf00      	nop
34186392:	e002      	b.n	3418639a <RCC_IC_CheckPLLSources+0xba>
      break;
34186394:	bf00      	nop
34186396:	e000      	b.n	3418639a <RCC_IC_CheckPLLSources+0xba>
      break;
34186398:	bf00      	nop
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
3418639a:	683b      	ldr	r3, [r7, #0]
3418639c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341863a0:	d03a      	beq.n	34186418 <RCC_IC_CheckPLLSources+0x138>
341863a2:	683b      	ldr	r3, [r7, #0]
341863a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341863a8:	d843      	bhi.n	34186432 <RCC_IC_CheckPLLSources+0x152>
341863aa:	683b      	ldr	r3, [r7, #0]
341863ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341863b0:	d025      	beq.n	341863fe <RCC_IC_CheckPLLSources+0x11e>
341863b2:	683b      	ldr	r3, [r7, #0]
341863b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341863b8:	d83b      	bhi.n	34186432 <RCC_IC_CheckPLLSources+0x152>
341863ba:	683b      	ldr	r3, [r7, #0]
341863bc:	2b00      	cmp	r3, #0
341863be:	d004      	beq.n	341863ca <RCC_IC_CheckPLLSources+0xea>
341863c0:	683b      	ldr	r3, [r7, #0]
341863c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341863c6:	d00d      	beq.n	341863e4 <RCC_IC_CheckPLLSources+0x104>
341863c8:	e033      	b.n	34186432 <RCC_IC_CheckPLLSources+0x152>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
341863ca:	f7fe fcdd 	bl	34184d88 <LL_RCC_PLL1_IsReady>
341863ce:	4603      	mov	r3, r0
341863d0:	2b00      	cmp	r3, #0
341863d2:	d131      	bne.n	34186438 <RCC_IC_CheckPLLSources+0x158>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
341863d4:	f7fe fcec 	bl	34184db0 <LL_RCC_PLL1_IsEnabledBypass>
341863d8:	4603      	mov	r3, r0
341863da:	2b00      	cmp	r3, #0
341863dc:	d12c      	bne.n	34186438 <RCC_IC_CheckPLLSources+0x158>
        {
          ret = 0U;
341863de:	2300      	movs	r3, #0
341863e0:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341863e2:	e029      	b.n	34186438 <RCC_IC_CheckPLLSources+0x158>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
341863e4:	f7fe fd06 	bl	34184df4 <LL_RCC_PLL2_IsReady>
341863e8:	4603      	mov	r3, r0
341863ea:	2b00      	cmp	r3, #0
341863ec:	d126      	bne.n	3418643c <RCC_IC_CheckPLLSources+0x15c>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
341863ee:	f7fe fd15 	bl	34184e1c <LL_RCC_PLL2_IsEnabledBypass>
341863f2:	4603      	mov	r3, r0
341863f4:	2b00      	cmp	r3, #0
341863f6:	d121      	bne.n	3418643c <RCC_IC_CheckPLLSources+0x15c>
        {
          ret = 0U;
341863f8:	2300      	movs	r3, #0
341863fa:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341863fc:	e01e      	b.n	3418643c <RCC_IC_CheckPLLSources+0x15c>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
341863fe:	f7fe fd2f 	bl	34184e60 <LL_RCC_PLL3_IsReady>
34186402:	4603      	mov	r3, r0
34186404:	2b00      	cmp	r3, #0
34186406:	d11b      	bne.n	34186440 <RCC_IC_CheckPLLSources+0x160>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
34186408:	f7fe fd3e 	bl	34184e88 <LL_RCC_PLL3_IsEnabledBypass>
3418640c:	4603      	mov	r3, r0
3418640e:	2b00      	cmp	r3, #0
34186410:	d116      	bne.n	34186440 <RCC_IC_CheckPLLSources+0x160>
        {
          ret = 0U;
34186412:	2300      	movs	r3, #0
34186414:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34186416:	e013      	b.n	34186440 <RCC_IC_CheckPLLSources+0x160>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
34186418:	f7fe fd58 	bl	34184ecc <LL_RCC_PLL4_IsReady>
3418641c:	4603      	mov	r3, r0
3418641e:	2b00      	cmp	r3, #0
34186420:	d110      	bne.n	34186444 <RCC_IC_CheckPLLSources+0x164>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
34186422:	f7fe fd67 	bl	34184ef4 <LL_RCC_PLL4_IsEnabledBypass>
34186426:	4603      	mov	r3, r0
34186428:	2b00      	cmp	r3, #0
3418642a:	d10b      	bne.n	34186444 <RCC_IC_CheckPLLSources+0x164>
        {
          ret = 0U;
3418642c:	2300      	movs	r3, #0
3418642e:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34186430:	e008      	b.n	34186444 <RCC_IC_CheckPLLSources+0x164>
    default:
      /* Unexpected */
      ret = 0U;
34186432:	2300      	movs	r3, #0
34186434:	60fb      	str	r3, [r7, #12]
      break;
34186436:	e006      	b.n	34186446 <RCC_IC_CheckPLLSources+0x166>
      break;
34186438:	bf00      	nop
3418643a:	e004      	b.n	34186446 <RCC_IC_CheckPLLSources+0x166>
      break;
3418643c:	bf00      	nop
3418643e:	e002      	b.n	34186446 <RCC_IC_CheckPLLSources+0x166>
      break;
34186440:	bf00      	nop
34186442:	e000      	b.n	34186446 <RCC_IC_CheckPLLSources+0x166>
      break;
34186444:	bf00      	nop
  }

  return ret;
34186446:	68fb      	ldr	r3, [r7, #12]
}
34186448:	4618      	mov	r0, r3
3418644a:	3710      	adds	r7, #16
3418644c:	46bd      	mov	sp, r7
3418644e:	bd80      	pop	{r7, pc}

34186450 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
{
34186450:	b480      	push	{r7}
34186452:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34186454:	4b05      	ldr	r3, [pc, #20]	@ (3418646c <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
34186456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34186458:	4a04      	ldr	r2, [pc, #16]	@ (3418646c <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
3418645a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
3418645e:	6553      	str	r3, [r2, #84]	@ 0x54
}
34186460:	bf00      	nop
34186462:	46bd      	mov	sp, r7
34186464:	f85d 7b04 	ldr.w	r7, [sp], #4
34186468:	4770      	bx	lr
3418646a:	bf00      	nop
3418646c:	56028000 	.word	0x56028000

34186470 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
{
34186470:	b480      	push	{r7}
34186472:	af00      	add	r7, sp, #0
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34186474:	4b05      	ldr	r3, [pc, #20]	@ (3418648c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
34186476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34186478:	4a04      	ldr	r2, [pc, #16]	@ (3418648c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
3418647a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3418647e:	6553      	str	r3, [r2, #84]	@ 0x54
}
34186480:	bf00      	nop
34186482:	46bd      	mov	sp, r7
34186484:	f85d 7b04 	ldr.w	r7, [sp], #4
34186488:	4770      	bx	lr
3418648a:	bf00      	nop
3418648c:	56028000 	.word	0x56028000

34186490 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
{
34186490:	b480      	push	{r7}
34186492:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
34186494:	4b06      	ldr	r3, [pc, #24]	@ (341864b0 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x20>)
34186496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34186498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418649c:	2b40      	cmp	r3, #64	@ 0x40
3418649e:	d101      	bne.n	341864a4 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x14>
341864a0:	2301      	movs	r3, #1
341864a2:	e000      	b.n	341864a6 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x16>
341864a4:	2300      	movs	r3, #0
}
341864a6:	4618      	mov	r0, r3
341864a8:	46bd      	mov	sp, r7
341864aa:	f85d 7b04 	ldr.w	r7, [sp], #4
341864ae:	4770      	bx	lr
341864b0:	56028000 	.word	0x56028000

341864b4 <LL_RCC_HSE_IsReady>:
{
341864b4:	b480      	push	{r7}
341864b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
341864b8:	4b06      	ldr	r3, [pc, #24]	@ (341864d4 <LL_RCC_HSE_IsReady+0x20>)
341864ba:	685b      	ldr	r3, [r3, #4]
341864bc:	f003 0310 	and.w	r3, r3, #16
341864c0:	2b00      	cmp	r3, #0
341864c2:	d001      	beq.n	341864c8 <LL_RCC_HSE_IsReady+0x14>
341864c4:	2301      	movs	r3, #1
341864c6:	e000      	b.n	341864ca <LL_RCC_HSE_IsReady+0x16>
341864c8:	2300      	movs	r3, #0
}
341864ca:	4618      	mov	r0, r3
341864cc:	46bd      	mov	sp, r7
341864ce:	f85d 7b04 	ldr.w	r7, [sp], #4
341864d2:	4770      	bx	lr
341864d4:	56028000 	.word	0x56028000

341864d8 <LL_RCC_HSI_IsReady>:
{
341864d8:	b480      	push	{r7}
341864da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
341864dc:	4b06      	ldr	r3, [pc, #24]	@ (341864f8 <LL_RCC_HSI_IsReady+0x20>)
341864de:	685b      	ldr	r3, [r3, #4]
341864e0:	f003 0308 	and.w	r3, r3, #8
341864e4:	2b00      	cmp	r3, #0
341864e6:	d001      	beq.n	341864ec <LL_RCC_HSI_IsReady+0x14>
341864e8:	2301      	movs	r3, #1
341864ea:	e000      	b.n	341864ee <LL_RCC_HSI_IsReady+0x16>
341864ec:	2300      	movs	r3, #0
}
341864ee:	4618      	mov	r0, r3
341864f0:	46bd      	mov	sp, r7
341864f2:	f85d 7b04 	ldr.w	r7, [sp], #4
341864f6:	4770      	bx	lr
341864f8:	56028000 	.word	0x56028000

341864fc <LL_RCC_HSI_GetDivider>:
{
341864fc:	b480      	push	{r7}
341864fe:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34186500:	4b04      	ldr	r3, [pc, #16]	@ (34186514 <LL_RCC_HSI_GetDivider+0x18>)
34186502:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34186504:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
34186508:	4618      	mov	r0, r3
3418650a:	46bd      	mov	sp, r7
3418650c:	f85d 7b04 	ldr.w	r7, [sp], #4
34186510:	4770      	bx	lr
34186512:	bf00      	nop
34186514:	56028000 	.word	0x56028000

34186518 <LL_RCC_MSI_IsReady>:
{
34186518:	b480      	push	{r7}
3418651a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
3418651c:	4b06      	ldr	r3, [pc, #24]	@ (34186538 <LL_RCC_MSI_IsReady+0x20>)
3418651e:	685b      	ldr	r3, [r3, #4]
34186520:	f003 0304 	and.w	r3, r3, #4
34186524:	2b00      	cmp	r3, #0
34186526:	d001      	beq.n	3418652c <LL_RCC_MSI_IsReady+0x14>
34186528:	2301      	movs	r3, #1
3418652a:	e000      	b.n	3418652e <LL_RCC_MSI_IsReady+0x16>
3418652c:	2300      	movs	r3, #0
}
3418652e:	4618      	mov	r0, r3
34186530:	46bd      	mov	sp, r7
34186532:	f85d 7b04 	ldr.w	r7, [sp], #4
34186536:	4770      	bx	lr
34186538:	56028000 	.word	0x56028000

3418653c <LL_RCC_MSI_GetFrequency>:
{
3418653c:	b480      	push	{r7}
3418653e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34186540:	4b04      	ldr	r3, [pc, #16]	@ (34186554 <LL_RCC_MSI_GetFrequency+0x18>)
34186542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186544:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
34186548:	4618      	mov	r0, r3
3418654a:	46bd      	mov	sp, r7
3418654c:	f85d 7b04 	ldr.w	r7, [sp], #4
34186550:	4770      	bx	lr
34186552:	bf00      	nop
34186554:	56028000 	.word	0x56028000

34186558 <LL_RCC_LSE_IsReady>:
{
34186558:	b480      	push	{r7}
3418655a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
3418655c:	4b06      	ldr	r3, [pc, #24]	@ (34186578 <LL_RCC_LSE_IsReady+0x20>)
3418655e:	685b      	ldr	r3, [r3, #4]
34186560:	f003 0302 	and.w	r3, r3, #2
34186564:	2b00      	cmp	r3, #0
34186566:	d001      	beq.n	3418656c <LL_RCC_LSE_IsReady+0x14>
34186568:	2301      	movs	r3, #1
3418656a:	e000      	b.n	3418656e <LL_RCC_LSE_IsReady+0x16>
3418656c:	2300      	movs	r3, #0
}
3418656e:	4618      	mov	r0, r3
34186570:	46bd      	mov	sp, r7
34186572:	f85d 7b04 	ldr.w	r7, [sp], #4
34186576:	4770      	bx	lr
34186578:	56028000 	.word	0x56028000

3418657c <LL_RCC_LSI_IsReady>:
{
3418657c:	b480      	push	{r7}
3418657e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34186580:	4b04      	ldr	r3, [pc, #16]	@ (34186594 <LL_RCC_LSI_IsReady+0x18>)
34186582:	685b      	ldr	r3, [r3, #4]
34186584:	f003 0301 	and.w	r3, r3, #1
}
34186588:	4618      	mov	r0, r3
3418658a:	46bd      	mov	sp, r7
3418658c:	f85d 7b04 	ldr.w	r7, [sp], #4
34186590:	4770      	bx	lr
34186592:	bf00      	nop
34186594:	56028000 	.word	0x56028000

34186598 <LL_RCC_GetAHBPrescaler>:
{
34186598:	b480      	push	{r7}
3418659a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
3418659c:	4b04      	ldr	r3, [pc, #16]	@ (341865b0 <LL_RCC_GetAHBPrescaler+0x18>)
3418659e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341865a0:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
341865a4:	4618      	mov	r0, r3
341865a6:	46bd      	mov	sp, r7
341865a8:	f85d 7b04 	ldr.w	r7, [sp], #4
341865ac:	4770      	bx	lr
341865ae:	bf00      	nop
341865b0:	56028000 	.word	0x56028000

341865b4 <LL_RCC_GetAPB1Prescaler>:
{
341865b4:	b480      	push	{r7}
341865b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
341865b8:	4b04      	ldr	r3, [pc, #16]	@ (341865cc <LL_RCC_GetAPB1Prescaler+0x18>)
341865ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341865bc:	f003 0307 	and.w	r3, r3, #7
}
341865c0:	4618      	mov	r0, r3
341865c2:	46bd      	mov	sp, r7
341865c4:	f85d 7b04 	ldr.w	r7, [sp], #4
341865c8:	4770      	bx	lr
341865ca:	bf00      	nop
341865cc:	56028000 	.word	0x56028000

341865d0 <LL_RCC_GetAPB2Prescaler>:
{
341865d0:	b480      	push	{r7}
341865d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
341865d4:	4b04      	ldr	r3, [pc, #16]	@ (341865e8 <LL_RCC_GetAPB2Prescaler+0x18>)
341865d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341865d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
341865dc:	4618      	mov	r0, r3
341865de:	46bd      	mov	sp, r7
341865e0:	f85d 7b04 	ldr.w	r7, [sp], #4
341865e4:	4770      	bx	lr
341865e6:	bf00      	nop
341865e8:	56028000 	.word	0x56028000

341865ec <LL_RCC_GetAPB4Prescaler>:
{
341865ec:	b480      	push	{r7}
341865ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
341865f0:	4b04      	ldr	r3, [pc, #16]	@ (34186604 <LL_RCC_GetAPB4Prescaler+0x18>)
341865f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341865f4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
}
341865f8:	4618      	mov	r0, r3
341865fa:	46bd      	mov	sp, r7
341865fc:	f85d 7b04 	ldr.w	r7, [sp], #4
34186600:	4770      	bx	lr
34186602:	bf00      	nop
34186604:	56028000 	.word	0x56028000

34186608 <LL_RCC_GetAPB5Prescaler>:
{
34186608:	b480      	push	{r7}
3418660a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
3418660c:	4b04      	ldr	r3, [pc, #16]	@ (34186620 <LL_RCC_GetAPB5Prescaler+0x18>)
3418660e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34186610:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
34186614:	4618      	mov	r0, r3
34186616:	46bd      	mov	sp, r7
34186618:	f85d 7b04 	ldr.w	r7, [sp], #4
3418661c:	4770      	bx	lr
3418661e:	bf00      	nop
34186620:	56028000 	.word	0x56028000

34186624 <LL_RCC_SetClockSource>:
{
34186624:	b480      	push	{r7}
34186626:	b085      	sub	sp, #20
34186628:	af00      	add	r7, sp, #0
3418662a:	6078      	str	r0, [r7, #4]
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
3418662c:	687b      	ldr	r3, [r7, #4]
3418662e:	b2da      	uxtb	r2, r3
34186630:	4b10      	ldr	r3, [pc, #64]	@ (34186674 <LL_RCC_SetClockSource+0x50>)
34186632:	4413      	add	r3, r2
34186634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
34186636:	68fb      	ldr	r3, [r7, #12]
34186638:	681a      	ldr	r2, [r3, #0]
3418663a:	687b      	ldr	r3, [r7, #4]
3418663c:	0e19      	lsrs	r1, r3, #24
3418663e:	687b      	ldr	r3, [r7, #4]
34186640:	0a1b      	lsrs	r3, r3, #8
34186642:	f003 031f 	and.w	r3, r3, #31
34186646:	fa01 f303 	lsl.w	r3, r1, r3
3418664a:	43db      	mvns	r3, r3
3418664c:	401a      	ands	r2, r3
3418664e:	687b      	ldr	r3, [r7, #4]
34186650:	0c1b      	lsrs	r3, r3, #16
34186652:	b2d9      	uxtb	r1, r3
34186654:	687b      	ldr	r3, [r7, #4]
34186656:	0a1b      	lsrs	r3, r3, #8
34186658:	f003 031f 	and.w	r3, r3, #31
3418665c:	fa01 f303 	lsl.w	r3, r1, r3
34186660:	431a      	orrs	r2, r3
34186662:	68fb      	ldr	r3, [r7, #12]
34186664:	601a      	str	r2, [r3, #0]
}
34186666:	bf00      	nop
34186668:	3714      	adds	r7, #20
3418666a:	46bd      	mov	sp, r7
3418666c:	f85d 7b04 	ldr.w	r7, [sp], #4
34186670:	4770      	bx	lr
34186672:	bf00      	nop
34186674:	56028144 	.word	0x56028144

34186678 <LL_RCC_GetADCPrescaler>:
{
34186678:	b480      	push	{r7}
3418667a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
3418667c:	4b04      	ldr	r3, [pc, #16]	@ (34186690 <LL_RCC_GetADCPrescaler+0x18>)
3418667e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34186682:	0a1b      	lsrs	r3, r3, #8
34186684:	b2db      	uxtb	r3, r3
}
34186686:	4618      	mov	r0, r3
34186688:	46bd      	mov	sp, r7
3418668a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418668e:	4770      	bx	lr
34186690:	56028000 	.word	0x56028000

34186694 <LL_RCC_SetADFClockSource>:
{
34186694:	b480      	push	{r7}
34186696:	b083      	sub	sp, #12
34186698:	af00      	add	r7, sp, #0
3418669a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
3418669c:	4b07      	ldr	r3, [pc, #28]	@ (341866bc <LL_RCC_SetADFClockSource+0x28>)
3418669e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
341866a2:	f023 0207 	bic.w	r2, r3, #7
341866a6:	4905      	ldr	r1, [pc, #20]	@ (341866bc <LL_RCC_SetADFClockSource+0x28>)
341866a8:	687b      	ldr	r3, [r7, #4]
341866aa:	4313      	orrs	r3, r2
341866ac:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
341866b0:	bf00      	nop
341866b2:	370c      	adds	r7, #12
341866b4:	46bd      	mov	sp, r7
341866b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341866ba:	4770      	bx	lr
341866bc:	56028000 	.word	0x56028000

341866c0 <LL_RCC_SetCLKPClockSource>:
{
341866c0:	b480      	push	{r7}
341866c2:	b083      	sub	sp, #12
341866c4:	af00      	add	r7, sp, #0
341866c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
341866c8:	4b07      	ldr	r3, [pc, #28]	@ (341866e8 <LL_RCC_SetCLKPClockSource+0x28>)
341866ca:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
341866ce:	f023 0207 	bic.w	r2, r3, #7
341866d2:	4905      	ldr	r1, [pc, #20]	@ (341866e8 <LL_RCC_SetCLKPClockSource+0x28>)
341866d4:	687b      	ldr	r3, [r7, #4]
341866d6:	4313      	orrs	r3, r2
341866d8:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
341866dc:	bf00      	nop
341866de:	370c      	adds	r7, #12
341866e0:	46bd      	mov	sp, r7
341866e2:	f85d 7b04 	ldr.w	r7, [sp], #4
341866e6:	4770      	bx	lr
341866e8:	56028000 	.word	0x56028000

341866ec <LL_RCC_SetDCMIPPClockSource>:
{
341866ec:	b480      	push	{r7}
341866ee:	b083      	sub	sp, #12
341866f0:	af00      	add	r7, sp, #0
341866f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
341866f4:	4b07      	ldr	r3, [pc, #28]	@ (34186714 <LL_RCC_SetDCMIPPClockSource+0x28>)
341866f6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
341866fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
341866fe:	4905      	ldr	r1, [pc, #20]	@ (34186714 <LL_RCC_SetDCMIPPClockSource+0x28>)
34186700:	687b      	ldr	r3, [r7, #4]
34186702:	4313      	orrs	r3, r2
34186704:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
34186708:	bf00      	nop
3418670a:	370c      	adds	r7, #12
3418670c:	46bd      	mov	sp, r7
3418670e:	f85d 7b04 	ldr.w	r7, [sp], #4
34186712:	4770      	bx	lr
34186714:	56028000 	.word	0x56028000

34186718 <LL_RCC_SetETHClockSource>:
{
34186718:	b480      	push	{r7}
3418671a:	b083      	sub	sp, #12
3418671c:	af00      	add	r7, sp, #0
3418671e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34186720:	4b07      	ldr	r3, [pc, #28]	@ (34186740 <LL_RCC_SetETHClockSource+0x28>)
34186722:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34186726:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
3418672a:	4905      	ldr	r1, [pc, #20]	@ (34186740 <LL_RCC_SetETHClockSource+0x28>)
3418672c:	687b      	ldr	r3, [r7, #4]
3418672e:	4313      	orrs	r3, r2
34186730:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34186734:	bf00      	nop
34186736:	370c      	adds	r7, #12
34186738:	46bd      	mov	sp, r7
3418673a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418673e:	4770      	bx	lr
34186740:	56028000 	.word	0x56028000

34186744 <LL_RCC_SetETHPHYInterface>:
{
34186744:	b480      	push	{r7}
34186746:	b083      	sub	sp, #12
34186748:	af00      	add	r7, sp, #0
3418674a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
3418674c:	4b07      	ldr	r3, [pc, #28]	@ (3418676c <LL_RCC_SetETHPHYInterface+0x28>)
3418674e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34186752:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34186756:	4905      	ldr	r1, [pc, #20]	@ (3418676c <LL_RCC_SetETHPHYInterface+0x28>)
34186758:	687b      	ldr	r3, [r7, #4]
3418675a:	4313      	orrs	r3, r2
3418675c:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34186760:	bf00      	nop
34186762:	370c      	adds	r7, #12
34186764:	46bd      	mov	sp, r7
34186766:	f85d 7b04 	ldr.w	r7, [sp], #4
3418676a:	4770      	bx	lr
3418676c:	56028000 	.word	0x56028000

34186770 <LL_RCC_GetETH1PTPDivider>:
{
34186770:	b480      	push	{r7}
34186772:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
34186774:	4b04      	ldr	r3, [pc, #16]	@ (34186788 <LL_RCC_GetETH1PTPDivider+0x18>)
34186776:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418677a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
3418677e:	4618      	mov	r0, r3
34186780:	46bd      	mov	sp, r7
34186782:	f85d 7b04 	ldr.w	r7, [sp], #4
34186786:	4770      	bx	lr
34186788:	56028000 	.word	0x56028000

3418678c <LL_RCC_SetETHREFRXClockSource>:
{
3418678c:	b480      	push	{r7}
3418678e:	b083      	sub	sp, #12
34186790:	af00      	add	r7, sp, #0
34186792:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
34186794:	4b07      	ldr	r3, [pc, #28]	@ (341867b4 <LL_RCC_SetETHREFRXClockSource+0x28>)
34186796:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418679a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
3418679e:	4905      	ldr	r1, [pc, #20]	@ (341867b4 <LL_RCC_SetETHREFRXClockSource+0x28>)
341867a0:	687b      	ldr	r3, [r7, #4]
341867a2:	4313      	orrs	r3, r2
341867a4:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
341867a8:	bf00      	nop
341867aa:	370c      	adds	r7, #12
341867ac:	46bd      	mov	sp, r7
341867ae:	f85d 7b04 	ldr.w	r7, [sp], #4
341867b2:	4770      	bx	lr
341867b4:	56028000 	.word	0x56028000

341867b8 <LL_RCC_SetETHREFTXClockSource>:
{
341867b8:	b480      	push	{r7}
341867ba:	b083      	sub	sp, #12
341867bc:	af00      	add	r7, sp, #0
341867be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
341867c0:	4b07      	ldr	r3, [pc, #28]	@ (341867e0 <LL_RCC_SetETHREFTXClockSource+0x28>)
341867c2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
341867c6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
341867ca:	4905      	ldr	r1, [pc, #20]	@ (341867e0 <LL_RCC_SetETHREFTXClockSource+0x28>)
341867cc:	687b      	ldr	r3, [r7, #4]
341867ce:	4313      	orrs	r3, r2
341867d0:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
341867d4:	bf00      	nop
341867d6:	370c      	adds	r7, #12
341867d8:	46bd      	mov	sp, r7
341867da:	f85d 7b04 	ldr.w	r7, [sp], #4
341867de:	4770      	bx	lr
341867e0:	56028000 	.word	0x56028000

341867e4 <LL_RCC_SetFDCANClockSource>:
{
341867e4:	b480      	push	{r7}
341867e6:	b083      	sub	sp, #12
341867e8:	af00      	add	r7, sp, #0
341867ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
341867ec:	4b07      	ldr	r3, [pc, #28]	@ (3418680c <LL_RCC_SetFDCANClockSource+0x28>)
341867ee:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
341867f2:	f023 0203 	bic.w	r2, r3, #3
341867f6:	4905      	ldr	r1, [pc, #20]	@ (3418680c <LL_RCC_SetFDCANClockSource+0x28>)
341867f8:	687b      	ldr	r3, [r7, #4]
341867fa:	4313      	orrs	r3, r2
341867fc:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34186800:	bf00      	nop
34186802:	370c      	adds	r7, #12
34186804:	46bd      	mov	sp, r7
34186806:	f85d 7b04 	ldr.w	r7, [sp], #4
3418680a:	4770      	bx	lr
3418680c:	56028000 	.word	0x56028000

34186810 <LL_RCC_SetFMCClockSource>:
{
34186810:	b480      	push	{r7}
34186812:	b083      	sub	sp, #12
34186814:	af00      	add	r7, sp, #0
34186816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
34186818:	4b07      	ldr	r3, [pc, #28]	@ (34186838 <LL_RCC_SetFMCClockSource+0x28>)
3418681a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418681e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34186822:	4905      	ldr	r1, [pc, #20]	@ (34186838 <LL_RCC_SetFMCClockSource+0x28>)
34186824:	687b      	ldr	r3, [r7, #4]
34186826:	4313      	orrs	r3, r2
34186828:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
3418682c:	bf00      	nop
3418682e:	370c      	adds	r7, #12
34186830:	46bd      	mov	sp, r7
34186832:	f85d 7b04 	ldr.w	r7, [sp], #4
34186836:	4770      	bx	lr
34186838:	56028000 	.word	0x56028000

3418683c <LL_RCC_SetI2CClockSource>:
{
3418683c:	b580      	push	{r7, lr}
3418683e:	b082      	sub	sp, #8
34186840:	af00      	add	r7, sp, #0
34186842:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34186844:	6878      	ldr	r0, [r7, #4]
34186846:	f7ff feed 	bl	34186624 <LL_RCC_SetClockSource>
}
3418684a:	bf00      	nop
3418684c:	3708      	adds	r7, #8
3418684e:	46bd      	mov	sp, r7
34186850:	bd80      	pop	{r7, pc}

34186852 <LL_RCC_SetI3CClockSource>:
{
34186852:	b580      	push	{r7, lr}
34186854:	b082      	sub	sp, #8
34186856:	af00      	add	r7, sp, #0
34186858:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418685a:	6878      	ldr	r0, [r7, #4]
3418685c:	f7ff fee2 	bl	34186624 <LL_RCC_SetClockSource>
}
34186860:	bf00      	nop
34186862:	3708      	adds	r7, #8
34186864:	46bd      	mov	sp, r7
34186866:	bd80      	pop	{r7, pc}

34186868 <LL_RCC_SetLPTIMClockSource>:
{
34186868:	b580      	push	{r7, lr}
3418686a:	b082      	sub	sp, #8
3418686c:	af00      	add	r7, sp, #0
3418686e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34186870:	6878      	ldr	r0, [r7, #4]
34186872:	f7ff fed7 	bl	34186624 <LL_RCC_SetClockSource>
}
34186876:	bf00      	nop
34186878:	3708      	adds	r7, #8
3418687a:	46bd      	mov	sp, r7
3418687c:	bd80      	pop	{r7, pc}
	...

34186880 <LL_RCC_SetLPUARTClockSource>:
{
34186880:	b480      	push	{r7}
34186882:	b083      	sub	sp, #12
34186884:	af00      	add	r7, sp, #0
34186886:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
34186888:	4b07      	ldr	r3, [pc, #28]	@ (341868a8 <LL_RCC_SetLPUARTClockSource+0x28>)
3418688a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3418688e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
34186892:	4905      	ldr	r1, [pc, #20]	@ (341868a8 <LL_RCC_SetLPUARTClockSource+0x28>)
34186894:	687b      	ldr	r3, [r7, #4]
34186896:	4313      	orrs	r3, r2
34186898:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
}
3418689c:	bf00      	nop
3418689e:	370c      	adds	r7, #12
341868a0:	46bd      	mov	sp, r7
341868a2:	f85d 7b04 	ldr.w	r7, [sp], #4
341868a6:	4770      	bx	lr
341868a8:	56028000 	.word	0x56028000

341868ac <LL_RCC_SetLTDCClockSource>:
{
341868ac:	b480      	push	{r7}
341868ae:	b083      	sub	sp, #12
341868b0:	af00      	add	r7, sp, #0
341868b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
341868b4:	4b07      	ldr	r3, [pc, #28]	@ (341868d4 <LL_RCC_SetLTDCClockSource+0x28>)
341868b6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
341868ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
341868be:	4905      	ldr	r1, [pc, #20]	@ (341868d4 <LL_RCC_SetLTDCClockSource+0x28>)
341868c0:	687b      	ldr	r3, [r7, #4]
341868c2:	4313      	orrs	r3, r2
341868c4:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
}
341868c8:	bf00      	nop
341868ca:	370c      	adds	r7, #12
341868cc:	46bd      	mov	sp, r7
341868ce:	f85d 7b04 	ldr.w	r7, [sp], #4
341868d2:	4770      	bx	lr
341868d4:	56028000 	.word	0x56028000

341868d8 <LL_RCC_SetMDFClockSource>:
{
341868d8:	b480      	push	{r7}
341868da:	b083      	sub	sp, #12
341868dc:	af00      	add	r7, sp, #0
341868de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
341868e0:	4b07      	ldr	r3, [pc, #28]	@ (34186900 <LL_RCC_SetMDFClockSource+0x28>)
341868e2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
341868e6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
341868ea:	4905      	ldr	r1, [pc, #20]	@ (34186900 <LL_RCC_SetMDFClockSource+0x28>)
341868ec:	687b      	ldr	r3, [r7, #4]
341868ee:	4313      	orrs	r3, r2
341868f0:	f8c1 3154 	str.w	r3, [r1, #340]	@ 0x154
}
341868f4:	bf00      	nop
341868f6:	370c      	adds	r7, #12
341868f8:	46bd      	mov	sp, r7
341868fa:	f85d 7b04 	ldr.w	r7, [sp], #4
341868fe:	4770      	bx	lr
34186900:	56028000 	.word	0x56028000

34186904 <LL_RCC_SetOTGPHYClockSource>:
{
34186904:	b580      	push	{r7, lr}
34186906:	b082      	sub	sp, #8
34186908:	af00      	add	r7, sp, #0
3418690a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418690c:	6878      	ldr	r0, [r7, #4]
3418690e:	f7ff fe89 	bl	34186624 <LL_RCC_SetClockSource>
}
34186912:	bf00      	nop
34186914:	3708      	adds	r7, #8
34186916:	46bd      	mov	sp, r7
34186918:	bd80      	pop	{r7, pc}

3418691a <LL_RCC_SetOTGPHYCKREFClockSource>:
{
3418691a:	b580      	push	{r7, lr}
3418691c:	b082      	sub	sp, #8
3418691e:	af00      	add	r7, sp, #0
34186920:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34186922:	6878      	ldr	r0, [r7, #4]
34186924:	f7ff fe7e 	bl	34186624 <LL_RCC_SetClockSource>
}
34186928:	bf00      	nop
3418692a:	3708      	adds	r7, #8
3418692c:	46bd      	mov	sp, r7
3418692e:	bd80      	pop	{r7, pc}

34186930 <LL_RCC_SetPSSIClockSource>:
{
34186930:	b480      	push	{r7}
34186932:	b083      	sub	sp, #12
34186934:	af00      	add	r7, sp, #0
34186936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
34186938:	4b07      	ldr	r3, [pc, #28]	@ (34186958 <LL_RCC_SetPSSIClockSource+0x28>)
3418693a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418693e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34186942:	4905      	ldr	r1, [pc, #20]	@ (34186958 <LL_RCC_SetPSSIClockSource+0x28>)
34186944:	687b      	ldr	r3, [r7, #4]
34186946:	4313      	orrs	r3, r2
34186948:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3418694c:	bf00      	nop
3418694e:	370c      	adds	r7, #12
34186950:	46bd      	mov	sp, r7
34186952:	f85d 7b04 	ldr.w	r7, [sp], #4
34186956:	4770      	bx	lr
34186958:	56028000 	.word	0x56028000

3418695c <LL_RCC_SetSAIClockSource>:
{
3418695c:	b580      	push	{r7, lr}
3418695e:	b082      	sub	sp, #8
34186960:	af00      	add	r7, sp, #0
34186962:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34186964:	6878      	ldr	r0, [r7, #4]
34186966:	f7ff fe5d 	bl	34186624 <LL_RCC_SetClockSource>
}
3418696a:	bf00      	nop
3418696c:	3708      	adds	r7, #8
3418696e:	46bd      	mov	sp, r7
34186970:	bd80      	pop	{r7, pc}

34186972 <LL_RCC_SetSDMMCClockSource>:
{
34186972:	b580      	push	{r7, lr}
34186974:	b082      	sub	sp, #8
34186976:	af00      	add	r7, sp, #0
34186978:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418697a:	6878      	ldr	r0, [r7, #4]
3418697c:	f7ff fe52 	bl	34186624 <LL_RCC_SetClockSource>
}
34186980:	bf00      	nop
34186982:	3708      	adds	r7, #8
34186984:	46bd      	mov	sp, r7
34186986:	bd80      	pop	{r7, pc}

34186988 <LL_RCC_SetSPDIFRXClockSource>:
{
34186988:	b480      	push	{r7}
3418698a:	b083      	sub	sp, #12
3418698c:	af00      	add	r7, sp, #0
3418698e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
34186990:	4b07      	ldr	r3, [pc, #28]	@ (341869b0 <LL_RCC_SetSPDIFRXClockSource+0x28>)
34186992:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34186996:	f023 0207 	bic.w	r2, r3, #7
3418699a:	4905      	ldr	r1, [pc, #20]	@ (341869b0 <LL_RCC_SetSPDIFRXClockSource+0x28>)
3418699c:	687b      	ldr	r3, [r7, #4]
3418699e:	4313      	orrs	r3, r2
341869a0:	f8c1 3164 	str.w	r3, [r1, #356]	@ 0x164
}
341869a4:	bf00      	nop
341869a6:	370c      	adds	r7, #12
341869a8:	46bd      	mov	sp, r7
341869aa:	f85d 7b04 	ldr.w	r7, [sp], #4
341869ae:	4770      	bx	lr
341869b0:	56028000 	.word	0x56028000

341869b4 <LL_RCC_SetSPIClockSource>:
{
341869b4:	b580      	push	{r7, lr}
341869b6:	b082      	sub	sp, #8
341869b8:	af00      	add	r7, sp, #0
341869ba:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
341869bc:	6878      	ldr	r0, [r7, #4]
341869be:	f7ff fe31 	bl	34186624 <LL_RCC_SetClockSource>
}
341869c2:	bf00      	nop
341869c4:	3708      	adds	r7, #8
341869c6:	46bd      	mov	sp, r7
341869c8:	bd80      	pop	{r7, pc}

341869ca <LL_RCC_SetUSARTClockSource>:
{
341869ca:	b580      	push	{r7, lr}
341869cc:	b082      	sub	sp, #8
341869ce:	af00      	add	r7, sp, #0
341869d0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
341869d2:	6878      	ldr	r0, [r7, #4]
341869d4:	f7ff fe26 	bl	34186624 <LL_RCC_SetClockSource>
}
341869d8:	bf00      	nop
341869da:	3708      	adds	r7, #8
341869dc:	46bd      	mov	sp, r7
341869de:	bd80      	pop	{r7, pc}

341869e0 <LL_RCC_SetXSPIClockSource>:
{
341869e0:	b580      	push	{r7, lr}
341869e2:	b082      	sub	sp, #8
341869e4:	af00      	add	r7, sp, #0
341869e6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
341869e8:	6878      	ldr	r0, [r7, #4]
341869ea:	f7ff fe1b 	bl	34186624 <LL_RCC_SetClockSource>
}
341869ee:	bf00      	nop
341869f0:	3708      	adds	r7, #8
341869f2:	46bd      	mov	sp, r7
341869f4:	bd80      	pop	{r7, pc}
	...

341869f8 <LL_RCC_GetClockSource>:
{
341869f8:	b480      	push	{r7}
341869fa:	b085      	sub	sp, #20
341869fc:	af00      	add	r7, sp, #0
341869fe:	6078      	str	r0, [r7, #4]
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
34186a00:	687b      	ldr	r3, [r7, #4]
34186a02:	b2da      	uxtb	r2, r3
34186a04:	4b0e      	ldr	r3, [pc, #56]	@ (34186a40 <LL_RCC_GetClockSource+0x48>)
34186a06:	4413      	add	r3, r2
34186a08:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
34186a0a:	68fb      	ldr	r3, [r7, #12]
34186a0c:	681a      	ldr	r2, [r3, #0]
34186a0e:	687b      	ldr	r3, [r7, #4]
34186a10:	0e19      	lsrs	r1, r3, #24
34186a12:	687b      	ldr	r3, [r7, #4]
34186a14:	0a1b      	lsrs	r3, r3, #8
34186a16:	f003 031f 	and.w	r3, r3, #31
34186a1a:	fa01 f303 	lsl.w	r3, r1, r3
34186a1e:	401a      	ands	r2, r3
34186a20:	687b      	ldr	r3, [r7, #4]
34186a22:	0a1b      	lsrs	r3, r3, #8
34186a24:	f003 031f 	and.w	r3, r3, #31
34186a28:	fa22 f303 	lsr.w	r3, r2, r3
34186a2c:	041a      	lsls	r2, r3, #16
34186a2e:	687b      	ldr	r3, [r7, #4]
34186a30:	4313      	orrs	r3, r2
}
34186a32:	4618      	mov	r0, r3
34186a34:	3714      	adds	r7, #20
34186a36:	46bd      	mov	sp, r7
34186a38:	f85d 7b04 	ldr.w	r7, [sp], #4
34186a3c:	4770      	bx	lr
34186a3e:	bf00      	nop
34186a40:	56028144 	.word	0x56028144

34186a44 <LL_RCC_GetADCClockSource>:
{
34186a44:	b480      	push	{r7}
34186a46:	b083      	sub	sp, #12
34186a48:	af00      	add	r7, sp, #0
34186a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
34186a4c:	4b05      	ldr	r3, [pc, #20]	@ (34186a64 <LL_RCC_GetADCClockSource+0x20>)
34186a4e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34186a52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
34186a56:	4618      	mov	r0, r3
34186a58:	370c      	adds	r7, #12
34186a5a:	46bd      	mov	sp, r7
34186a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
34186a60:	4770      	bx	lr
34186a62:	bf00      	nop
34186a64:	56028000 	.word	0x56028000

34186a68 <LL_RCC_GetADFClockSource>:
{
34186a68:	b480      	push	{r7}
34186a6a:	b083      	sub	sp, #12
34186a6c:	af00      	add	r7, sp, #0
34186a6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
34186a70:	4b05      	ldr	r3, [pc, #20]	@ (34186a88 <LL_RCC_GetADFClockSource+0x20>)
34186a72:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34186a76:	f003 0307 	and.w	r3, r3, #7
}
34186a7a:	4618      	mov	r0, r3
34186a7c:	370c      	adds	r7, #12
34186a7e:	46bd      	mov	sp, r7
34186a80:	f85d 7b04 	ldr.w	r7, [sp], #4
34186a84:	4770      	bx	lr
34186a86:	bf00      	nop
34186a88:	56028000 	.word	0x56028000

34186a8c <LL_RCC_GetCLKPClockSource>:
{
34186a8c:	b480      	push	{r7}
34186a8e:	b083      	sub	sp, #12
34186a90:	af00      	add	r7, sp, #0
34186a92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
34186a94:	4b05      	ldr	r3, [pc, #20]	@ (34186aac <LL_RCC_GetCLKPClockSource+0x20>)
34186a96:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34186a9a:	f003 0307 	and.w	r3, r3, #7
}
34186a9e:	4618      	mov	r0, r3
34186aa0:	370c      	adds	r7, #12
34186aa2:	46bd      	mov	sp, r7
34186aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
34186aa8:	4770      	bx	lr
34186aaa:	bf00      	nop
34186aac:	56028000 	.word	0x56028000

34186ab0 <LL_RCC_GetDCMIPPClockSource>:
{
34186ab0:	b480      	push	{r7}
34186ab2:	b083      	sub	sp, #12
34186ab4:	af00      	add	r7, sp, #0
34186ab6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
34186ab8:	4b05      	ldr	r3, [pc, #20]	@ (34186ad0 <LL_RCC_GetDCMIPPClockSource+0x20>)
34186aba:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34186abe:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
34186ac2:	4618      	mov	r0, r3
34186ac4:	370c      	adds	r7, #12
34186ac6:	46bd      	mov	sp, r7
34186ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
34186acc:	4770      	bx	lr
34186ace:	bf00      	nop
34186ad0:	56028000 	.word	0x56028000

34186ad4 <LL_RCC_GetETHClockSource>:
{
34186ad4:	b480      	push	{r7}
34186ad6:	b083      	sub	sp, #12
34186ad8:	af00      	add	r7, sp, #0
34186ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
34186adc:	4b05      	ldr	r3, [pc, #20]	@ (34186af4 <LL_RCC_GetETHClockSource+0x20>)
34186ade:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34186ae2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
}
34186ae6:	4618      	mov	r0, r3
34186ae8:	370c      	adds	r7, #12
34186aea:	46bd      	mov	sp, r7
34186aec:	f85d 7b04 	ldr.w	r7, [sp], #4
34186af0:	4770      	bx	lr
34186af2:	bf00      	nop
34186af4:	56028000 	.word	0x56028000

34186af8 <LL_RCC_GetETHPTPClockSource>:
{
34186af8:	b480      	push	{r7}
34186afa:	b083      	sub	sp, #12
34186afc:	af00      	add	r7, sp, #0
34186afe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
34186b00:	4b05      	ldr	r3, [pc, #20]	@ (34186b18 <LL_RCC_GetETHPTPClockSource+0x20>)
34186b02:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34186b06:	f003 0303 	and.w	r3, r3, #3
}
34186b0a:	4618      	mov	r0, r3
34186b0c:	370c      	adds	r7, #12
34186b0e:	46bd      	mov	sp, r7
34186b10:	f85d 7b04 	ldr.w	r7, [sp], #4
34186b14:	4770      	bx	lr
34186b16:	bf00      	nop
34186b18:	56028000 	.word	0x56028000

34186b1c <LL_RCC_GetFDCANClockSource>:
{
34186b1c:	b480      	push	{r7}
34186b1e:	b083      	sub	sp, #12
34186b20:	af00      	add	r7, sp, #0
34186b22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
34186b24:	4b05      	ldr	r3, [pc, #20]	@ (34186b3c <LL_RCC_GetFDCANClockSource+0x20>)
34186b26:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34186b2a:	f003 0303 	and.w	r3, r3, #3
}
34186b2e:	4618      	mov	r0, r3
34186b30:	370c      	adds	r7, #12
34186b32:	46bd      	mov	sp, r7
34186b34:	f85d 7b04 	ldr.w	r7, [sp], #4
34186b38:	4770      	bx	lr
34186b3a:	bf00      	nop
34186b3c:	56028000 	.word	0x56028000

34186b40 <LL_RCC_GetFMCClockSource>:
{
34186b40:	b480      	push	{r7}
34186b42:	b083      	sub	sp, #12
34186b44:	af00      	add	r7, sp, #0
34186b46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
34186b48:	4b05      	ldr	r3, [pc, #20]	@ (34186b60 <LL_RCC_GetFMCClockSource+0x20>)
34186b4a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34186b4e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
34186b52:	4618      	mov	r0, r3
34186b54:	370c      	adds	r7, #12
34186b56:	46bd      	mov	sp, r7
34186b58:	f85d 7b04 	ldr.w	r7, [sp], #4
34186b5c:	4770      	bx	lr
34186b5e:	bf00      	nop
34186b60:	56028000 	.word	0x56028000

34186b64 <LL_RCC_GetI2CClockSource>:
{
34186b64:	b580      	push	{r7, lr}
34186b66:	b082      	sub	sp, #8
34186b68:	af00      	add	r7, sp, #0
34186b6a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186b6c:	6878      	ldr	r0, [r7, #4]
34186b6e:	f7ff ff43 	bl	341869f8 <LL_RCC_GetClockSource>
34186b72:	4603      	mov	r3, r0
}
34186b74:	4618      	mov	r0, r3
34186b76:	3708      	adds	r7, #8
34186b78:	46bd      	mov	sp, r7
34186b7a:	bd80      	pop	{r7, pc}

34186b7c <LL_RCC_GetI3CClockSource>:
{
34186b7c:	b580      	push	{r7, lr}
34186b7e:	b082      	sub	sp, #8
34186b80:	af00      	add	r7, sp, #0
34186b82:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186b84:	6878      	ldr	r0, [r7, #4]
34186b86:	f7ff ff37 	bl	341869f8 <LL_RCC_GetClockSource>
34186b8a:	4603      	mov	r3, r0
}
34186b8c:	4618      	mov	r0, r3
34186b8e:	3708      	adds	r7, #8
34186b90:	46bd      	mov	sp, r7
34186b92:	bd80      	pop	{r7, pc}

34186b94 <LL_RCC_GetLPTIMClockSource>:
{
34186b94:	b580      	push	{r7, lr}
34186b96:	b082      	sub	sp, #8
34186b98:	af00      	add	r7, sp, #0
34186b9a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186b9c:	6878      	ldr	r0, [r7, #4]
34186b9e:	f7ff ff2b 	bl	341869f8 <LL_RCC_GetClockSource>
34186ba2:	4603      	mov	r3, r0
}
34186ba4:	4618      	mov	r0, r3
34186ba6:	3708      	adds	r7, #8
34186ba8:	46bd      	mov	sp, r7
34186baa:	bd80      	pop	{r7, pc}

34186bac <LL_RCC_GetLPUARTClockSource>:
{
34186bac:	b480      	push	{r7}
34186bae:	b083      	sub	sp, #12
34186bb0:	af00      	add	r7, sp, #0
34186bb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
34186bb4:	4b05      	ldr	r3, [pc, #20]	@ (34186bcc <LL_RCC_GetLPUARTClockSource+0x20>)
34186bb6:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34186bba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
34186bbe:	4618      	mov	r0, r3
34186bc0:	370c      	adds	r7, #12
34186bc2:	46bd      	mov	sp, r7
34186bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
34186bc8:	4770      	bx	lr
34186bca:	bf00      	nop
34186bcc:	56028000 	.word	0x56028000

34186bd0 <LL_RCC_GetLTDCClockSource>:
{
34186bd0:	b480      	push	{r7}
34186bd2:	b083      	sub	sp, #12
34186bd4:	af00      	add	r7, sp, #0
34186bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
34186bd8:	4b05      	ldr	r3, [pc, #20]	@ (34186bf0 <LL_RCC_GetLTDCClockSource+0x20>)
34186bda:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34186bde:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
}
34186be2:	4618      	mov	r0, r3
34186be4:	370c      	adds	r7, #12
34186be6:	46bd      	mov	sp, r7
34186be8:	f85d 7b04 	ldr.w	r7, [sp], #4
34186bec:	4770      	bx	lr
34186bee:	bf00      	nop
34186bf0:	56028000 	.word	0x56028000

34186bf4 <LL_RCC_GetMDFClockSource>:
{
34186bf4:	b480      	push	{r7}
34186bf6:	b083      	sub	sp, #12
34186bf8:	af00      	add	r7, sp, #0
34186bfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
34186bfc:	4b05      	ldr	r3, [pc, #20]	@ (34186c14 <LL_RCC_GetMDFClockSource+0x20>)
34186bfe:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34186c02:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
34186c06:	4618      	mov	r0, r3
34186c08:	370c      	adds	r7, #12
34186c0a:	46bd      	mov	sp, r7
34186c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
34186c10:	4770      	bx	lr
34186c12:	bf00      	nop
34186c14:	56028000 	.word	0x56028000

34186c18 <LL_RCC_GetPSSIClockSource>:
{
34186c18:	b480      	push	{r7}
34186c1a:	b083      	sub	sp, #12
34186c1c:	af00      	add	r7, sp, #0
34186c1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
34186c20:	4b05      	ldr	r3, [pc, #20]	@ (34186c38 <LL_RCC_GetPSSIClockSource+0x20>)
34186c22:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34186c26:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
34186c2a:	4618      	mov	r0, r3
34186c2c:	370c      	adds	r7, #12
34186c2e:	46bd      	mov	sp, r7
34186c30:	f85d 7b04 	ldr.w	r7, [sp], #4
34186c34:	4770      	bx	lr
34186c36:	bf00      	nop
34186c38:	56028000 	.word	0x56028000

34186c3c <LL_RCC_GetSAIClockSource>:
{
34186c3c:	b580      	push	{r7, lr}
34186c3e:	b082      	sub	sp, #8
34186c40:	af00      	add	r7, sp, #0
34186c42:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186c44:	6878      	ldr	r0, [r7, #4]
34186c46:	f7ff fed7 	bl	341869f8 <LL_RCC_GetClockSource>
34186c4a:	4603      	mov	r3, r0
}
34186c4c:	4618      	mov	r0, r3
34186c4e:	3708      	adds	r7, #8
34186c50:	46bd      	mov	sp, r7
34186c52:	bd80      	pop	{r7, pc}

34186c54 <LL_RCC_GetSDMMCClockSource>:
{
34186c54:	b580      	push	{r7, lr}
34186c56:	b082      	sub	sp, #8
34186c58:	af00      	add	r7, sp, #0
34186c5a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186c5c:	6878      	ldr	r0, [r7, #4]
34186c5e:	f7ff fecb 	bl	341869f8 <LL_RCC_GetClockSource>
34186c62:	4603      	mov	r3, r0
}
34186c64:	4618      	mov	r0, r3
34186c66:	3708      	adds	r7, #8
34186c68:	46bd      	mov	sp, r7
34186c6a:	bd80      	pop	{r7, pc}

34186c6c <LL_RCC_GetSPDIFRXClockSource>:
{
34186c6c:	b480      	push	{r7}
34186c6e:	b083      	sub	sp, #12
34186c70:	af00      	add	r7, sp, #0
34186c72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
34186c74:	4b05      	ldr	r3, [pc, #20]	@ (34186c8c <LL_RCC_GetSPDIFRXClockSource+0x20>)
34186c76:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34186c7a:	f003 0307 	and.w	r3, r3, #7
}
34186c7e:	4618      	mov	r0, r3
34186c80:	370c      	adds	r7, #12
34186c82:	46bd      	mov	sp, r7
34186c84:	f85d 7b04 	ldr.w	r7, [sp], #4
34186c88:	4770      	bx	lr
34186c8a:	bf00      	nop
34186c8c:	56028000 	.word	0x56028000

34186c90 <LL_RCC_GetSPIClockSource>:
{
34186c90:	b580      	push	{r7, lr}
34186c92:	b082      	sub	sp, #8
34186c94:	af00      	add	r7, sp, #0
34186c96:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186c98:	6878      	ldr	r0, [r7, #4]
34186c9a:	f7ff fead 	bl	341869f8 <LL_RCC_GetClockSource>
34186c9e:	4603      	mov	r3, r0
}
34186ca0:	4618      	mov	r0, r3
34186ca2:	3708      	adds	r7, #8
34186ca4:	46bd      	mov	sp, r7
34186ca6:	bd80      	pop	{r7, pc}

34186ca8 <LL_RCC_GetUSARTClockSource>:
{
34186ca8:	b580      	push	{r7, lr}
34186caa:	b082      	sub	sp, #8
34186cac:	af00      	add	r7, sp, #0
34186cae:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186cb0:	6878      	ldr	r0, [r7, #4]
34186cb2:	f7ff fea1 	bl	341869f8 <LL_RCC_GetClockSource>
34186cb6:	4603      	mov	r3, r0
}
34186cb8:	4618      	mov	r0, r3
34186cba:	3708      	adds	r7, #8
34186cbc:	46bd      	mov	sp, r7
34186cbe:	bd80      	pop	{r7, pc}

34186cc0 <LL_RCC_GetUARTClockSource>:
{
34186cc0:	b580      	push	{r7, lr}
34186cc2:	b082      	sub	sp, #8
34186cc4:	af00      	add	r7, sp, #0
34186cc6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186cc8:	6878      	ldr	r0, [r7, #4]
34186cca:	f7ff fe95 	bl	341869f8 <LL_RCC_GetClockSource>
34186cce:	4603      	mov	r3, r0
}
34186cd0:	4618      	mov	r0, r3
34186cd2:	3708      	adds	r7, #8
34186cd4:	46bd      	mov	sp, r7
34186cd6:	bd80      	pop	{r7, pc}

34186cd8 <LL_RCC_GetUSBClockSource>:
{
34186cd8:	b580      	push	{r7, lr}
34186cda:	b082      	sub	sp, #8
34186cdc:	af00      	add	r7, sp, #0
34186cde:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186ce0:	6878      	ldr	r0, [r7, #4]
34186ce2:	f7ff fe89 	bl	341869f8 <LL_RCC_GetClockSource>
34186ce6:	4603      	mov	r3, r0
}
34186ce8:	4618      	mov	r0, r3
34186cea:	3708      	adds	r7, #8
34186cec:	46bd      	mov	sp, r7
34186cee:	bd80      	pop	{r7, pc}

34186cf0 <LL_RCC_GetXSPIClockSource>:
{
34186cf0:	b580      	push	{r7, lr}
34186cf2:	b082      	sub	sp, #8
34186cf4:	af00      	add	r7, sp, #0
34186cf6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186cf8:	6878      	ldr	r0, [r7, #4]
34186cfa:	f7ff fe7d 	bl	341869f8 <LL_RCC_GetClockSource>
34186cfe:	4603      	mov	r3, r0
}
34186d00:	4618      	mov	r0, r3
34186d02:	3708      	adds	r7, #8
34186d04:	46bd      	mov	sp, r7
34186d06:	bd80      	pop	{r7, pc}

34186d08 <LL_RCC_SetRTCClockSource>:
{
34186d08:	b480      	push	{r7}
34186d0a:	b083      	sub	sp, #12
34186d0c:	af00      	add	r7, sp, #0
34186d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
34186d10:	4b07      	ldr	r3, [pc, #28]	@ (34186d30 <LL_RCC_SetRTCClockSource+0x28>)
34186d12:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34186d16:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
34186d1a:	4905      	ldr	r1, [pc, #20]	@ (34186d30 <LL_RCC_SetRTCClockSource+0x28>)
34186d1c:	687b      	ldr	r3, [r7, #4]
34186d1e:	4313      	orrs	r3, r2
34186d20:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34186d24:	bf00      	nop
34186d26:	370c      	adds	r7, #12
34186d28:	46bd      	mov	sp, r7
34186d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
34186d2e:	4770      	bx	lr
34186d30:	56028000 	.word	0x56028000

34186d34 <LL_RCC_GetRTCClockSource>:
{
34186d34:	b480      	push	{r7}
34186d36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34186d38:	4b04      	ldr	r3, [pc, #16]	@ (34186d4c <LL_RCC_GetRTCClockSource+0x18>)
34186d3a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34186d3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
34186d42:	4618      	mov	r0, r3
34186d44:	46bd      	mov	sp, r7
34186d46:	f85d 7b04 	ldr.w	r7, [sp], #4
34186d4a:	4770      	bx	lr
34186d4c:	56028000 	.word	0x56028000

34186d50 <LL_RCC_SetRTC_HSEPrescaler>:
{
34186d50:	b480      	push	{r7}
34186d52:	b083      	sub	sp, #12
34186d54:	af00      	add	r7, sp, #0
34186d56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34186d58:	4b07      	ldr	r3, [pc, #28]	@ (34186d78 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34186d5a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34186d5e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
34186d62:	4905      	ldr	r1, [pc, #20]	@ (34186d78 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34186d64:	687b      	ldr	r3, [r7, #4]
34186d66:	4313      	orrs	r3, r2
34186d68:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34186d6c:	bf00      	nop
34186d6e:	370c      	adds	r7, #12
34186d70:	46bd      	mov	sp, r7
34186d72:	f85d 7b04 	ldr.w	r7, [sp], #4
34186d76:	4770      	bx	lr
34186d78:	56028000 	.word	0x56028000

34186d7c <LL_RCC_SetTIMPrescaler>:
{
34186d7c:	b480      	push	{r7}
34186d7e:	b083      	sub	sp, #12
34186d80:	af00      	add	r7, sp, #0
34186d82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
34186d84:	4b07      	ldr	r3, [pc, #28]	@ (34186da4 <LL_RCC_SetTIMPrescaler+0x28>)
34186d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34186d88:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34186d8c:	687b      	ldr	r3, [r7, #4]
34186d8e:	061b      	lsls	r3, r3, #24
34186d90:	4904      	ldr	r1, [pc, #16]	@ (34186da4 <LL_RCC_SetTIMPrescaler+0x28>)
34186d92:	4313      	orrs	r3, r2
34186d94:	624b      	str	r3, [r1, #36]	@ 0x24
}
34186d96:	bf00      	nop
34186d98:	370c      	adds	r7, #12
34186d9a:	46bd      	mov	sp, r7
34186d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
34186da0:	4770      	bx	lr
34186da2:	bf00      	nop
34186da4:	56028000 	.word	0x56028000

34186da8 <LL_RCC_GetTIMPrescaler>:
{
34186da8:	b480      	push	{r7}
34186daa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34186dac:	4b04      	ldr	r3, [pc, #16]	@ (34186dc0 <LL_RCC_GetTIMPrescaler+0x18>)
34186dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34186db0:	0e1b      	lsrs	r3, r3, #24
34186db2:	f003 0303 	and.w	r3, r3, #3
}
34186db6:	4618      	mov	r0, r3
34186db8:	46bd      	mov	sp, r7
34186dba:	f85d 7b04 	ldr.w	r7, [sp], #4
34186dbe:	4770      	bx	lr
34186dc0:	56028000 	.word	0x56028000

34186dc4 <LL_RCC_PLL1_GetSource>:
{
34186dc4:	b480      	push	{r7}
34186dc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34186dc8:	4b04      	ldr	r3, [pc, #16]	@ (34186ddc <LL_RCC_PLL1_GetSource+0x18>)
34186dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34186dce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34186dd2:	4618      	mov	r0, r3
34186dd4:	46bd      	mov	sp, r7
34186dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
34186dda:	4770      	bx	lr
34186ddc:	56028000 	.word	0x56028000

34186de0 <LL_RCC_PLL1_IsReady>:
{
34186de0:	b480      	push	{r7}
34186de2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34186de4:	4b07      	ldr	r3, [pc, #28]	@ (34186e04 <LL_RCC_PLL1_IsReady+0x24>)
34186de6:	685b      	ldr	r3, [r3, #4]
34186de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34186dec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34186df0:	d101      	bne.n	34186df6 <LL_RCC_PLL1_IsReady+0x16>
34186df2:	2301      	movs	r3, #1
34186df4:	e000      	b.n	34186df8 <LL_RCC_PLL1_IsReady+0x18>
34186df6:	2300      	movs	r3, #0
}
34186df8:	4618      	mov	r0, r3
34186dfa:	46bd      	mov	sp, r7
34186dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
34186e00:	4770      	bx	lr
34186e02:	bf00      	nop
34186e04:	56028000 	.word	0x56028000

34186e08 <LL_RCC_PLL1_IsEnabledBypass>:
{
34186e08:	b480      	push	{r7}
34186e0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34186e0c:	4b07      	ldr	r3, [pc, #28]	@ (34186e2c <LL_RCC_PLL1_IsEnabledBypass+0x24>)
34186e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34186e12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34186e16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34186e1a:	d101      	bne.n	34186e20 <LL_RCC_PLL1_IsEnabledBypass+0x18>
34186e1c:	2301      	movs	r3, #1
34186e1e:	e000      	b.n	34186e22 <LL_RCC_PLL1_IsEnabledBypass+0x1a>
34186e20:	2300      	movs	r3, #0
}
34186e22:	4618      	mov	r0, r3
34186e24:	46bd      	mov	sp, r7
34186e26:	f85d 7b04 	ldr.w	r7, [sp], #4
34186e2a:	4770      	bx	lr
34186e2c:	56028000 	.word	0x56028000

34186e30 <LL_RCC_PLL1_GetN>:
{
34186e30:	b480      	push	{r7}
34186e32:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
34186e34:	4b05      	ldr	r3, [pc, #20]	@ (34186e4c <LL_RCC_PLL1_GetN+0x1c>)
34186e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34186e3a:	0a1b      	lsrs	r3, r3, #8
34186e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34186e40:	4618      	mov	r0, r3
34186e42:	46bd      	mov	sp, r7
34186e44:	f85d 7b04 	ldr.w	r7, [sp], #4
34186e48:	4770      	bx	lr
34186e4a:	bf00      	nop
34186e4c:	56028000 	.word	0x56028000

34186e50 <LL_RCC_PLL1_GetM>:
{
34186e50:	b480      	push	{r7}
34186e52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
34186e54:	4b05      	ldr	r3, [pc, #20]	@ (34186e6c <LL_RCC_PLL1_GetM+0x1c>)
34186e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34186e5a:	0d1b      	lsrs	r3, r3, #20
34186e5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34186e60:	4618      	mov	r0, r3
34186e62:	46bd      	mov	sp, r7
34186e64:	f85d 7b04 	ldr.w	r7, [sp], #4
34186e68:	4770      	bx	lr
34186e6a:	bf00      	nop
34186e6c:	56028000 	.word	0x56028000

34186e70 <LL_RCC_PLL1_GetP1>:
{
34186e70:	b480      	push	{r7}
34186e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34186e74:	4b05      	ldr	r3, [pc, #20]	@ (34186e8c <LL_RCC_PLL1_GetP1+0x1c>)
34186e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34186e7a:	0edb      	lsrs	r3, r3, #27
34186e7c:	f003 0307 	and.w	r3, r3, #7
}
34186e80:	4618      	mov	r0, r3
34186e82:	46bd      	mov	sp, r7
34186e84:	f85d 7b04 	ldr.w	r7, [sp], #4
34186e88:	4770      	bx	lr
34186e8a:	bf00      	nop
34186e8c:	56028000 	.word	0x56028000

34186e90 <LL_RCC_PLL1_GetP2>:
{
34186e90:	b480      	push	{r7}
34186e92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34186e94:	4b05      	ldr	r3, [pc, #20]	@ (34186eac <LL_RCC_PLL1_GetP2+0x1c>)
34186e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34186e9a:	0e1b      	lsrs	r3, r3, #24
34186e9c:	f003 0307 	and.w	r3, r3, #7
}
34186ea0:	4618      	mov	r0, r3
34186ea2:	46bd      	mov	sp, r7
34186ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
34186ea8:	4770      	bx	lr
34186eaa:	bf00      	nop
34186eac:	56028000 	.word	0x56028000

34186eb0 <LL_RCC_PLL1P_IsEnabled>:
{
34186eb0:	b480      	push	{r7}
34186eb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
34186eb4:	4b07      	ldr	r3, [pc, #28]	@ (34186ed4 <LL_RCC_PLL1P_IsEnabled+0x24>)
34186eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34186eba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34186ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34186ec2:	d101      	bne.n	34186ec8 <LL_RCC_PLL1P_IsEnabled+0x18>
34186ec4:	2301      	movs	r3, #1
34186ec6:	e000      	b.n	34186eca <LL_RCC_PLL1P_IsEnabled+0x1a>
34186ec8:	2300      	movs	r3, #0
}
34186eca:	4618      	mov	r0, r3
34186ecc:	46bd      	mov	sp, r7
34186ece:	f85d 7b04 	ldr.w	r7, [sp], #4
34186ed2:	4770      	bx	lr
34186ed4:	56028000 	.word	0x56028000

34186ed8 <LL_RCC_PLL1_GetFRACN>:
{
34186ed8:	b480      	push	{r7}
34186eda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
34186edc:	4b04      	ldr	r3, [pc, #16]	@ (34186ef0 <LL_RCC_PLL1_GetFRACN+0x18>)
34186ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34186ee2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34186ee6:	4618      	mov	r0, r3
34186ee8:	46bd      	mov	sp, r7
34186eea:	f85d 7b04 	ldr.w	r7, [sp], #4
34186eee:	4770      	bx	lr
34186ef0:	56028000 	.word	0x56028000

34186ef4 <LL_RCC_PLL2_GetSource>:
{
34186ef4:	b480      	push	{r7}
34186ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34186ef8:	4b04      	ldr	r3, [pc, #16]	@ (34186f0c <LL_RCC_PLL2_GetSource+0x18>)
34186efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34186efe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34186f02:	4618      	mov	r0, r3
34186f04:	46bd      	mov	sp, r7
34186f06:	f85d 7b04 	ldr.w	r7, [sp], #4
34186f0a:	4770      	bx	lr
34186f0c:	56028000 	.word	0x56028000

34186f10 <LL_RCC_PLL2_IsReady>:
{
34186f10:	b480      	push	{r7}
34186f12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34186f14:	4b07      	ldr	r3, [pc, #28]	@ (34186f34 <LL_RCC_PLL2_IsReady+0x24>)
34186f16:	685b      	ldr	r3, [r3, #4]
34186f18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34186f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34186f20:	d101      	bne.n	34186f26 <LL_RCC_PLL2_IsReady+0x16>
34186f22:	2301      	movs	r3, #1
34186f24:	e000      	b.n	34186f28 <LL_RCC_PLL2_IsReady+0x18>
34186f26:	2300      	movs	r3, #0
}
34186f28:	4618      	mov	r0, r3
34186f2a:	46bd      	mov	sp, r7
34186f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
34186f30:	4770      	bx	lr
34186f32:	bf00      	nop
34186f34:	56028000 	.word	0x56028000

34186f38 <LL_RCC_PLL2_IsEnabledBypass>:
{
34186f38:	b480      	push	{r7}
34186f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34186f3c:	4b07      	ldr	r3, [pc, #28]	@ (34186f5c <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34186f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34186f42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34186f46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34186f4a:	d101      	bne.n	34186f50 <LL_RCC_PLL2_IsEnabledBypass+0x18>
34186f4c:	2301      	movs	r3, #1
34186f4e:	e000      	b.n	34186f52 <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34186f50:	2300      	movs	r3, #0
}
34186f52:	4618      	mov	r0, r3
34186f54:	46bd      	mov	sp, r7
34186f56:	f85d 7b04 	ldr.w	r7, [sp], #4
34186f5a:	4770      	bx	lr
34186f5c:	56028000 	.word	0x56028000

34186f60 <LL_RCC_PLL2_GetN>:
{
34186f60:	b480      	push	{r7}
34186f62:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
34186f64:	4b05      	ldr	r3, [pc, #20]	@ (34186f7c <LL_RCC_PLL2_GetN+0x1c>)
34186f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34186f6a:	0a1b      	lsrs	r3, r3, #8
34186f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34186f70:	4618      	mov	r0, r3
34186f72:	46bd      	mov	sp, r7
34186f74:	f85d 7b04 	ldr.w	r7, [sp], #4
34186f78:	4770      	bx	lr
34186f7a:	bf00      	nop
34186f7c:	56028000 	.word	0x56028000

34186f80 <LL_RCC_PLL2_GetM>:
{
34186f80:	b480      	push	{r7}
34186f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
34186f84:	4b05      	ldr	r3, [pc, #20]	@ (34186f9c <LL_RCC_PLL2_GetM+0x1c>)
34186f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34186f8a:	0d1b      	lsrs	r3, r3, #20
34186f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34186f90:	4618      	mov	r0, r3
34186f92:	46bd      	mov	sp, r7
34186f94:	f85d 7b04 	ldr.w	r7, [sp], #4
34186f98:	4770      	bx	lr
34186f9a:	bf00      	nop
34186f9c:	56028000 	.word	0x56028000

34186fa0 <LL_RCC_PLL2_GetP1>:
{
34186fa0:	b480      	push	{r7}
34186fa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
34186fa4:	4b05      	ldr	r3, [pc, #20]	@ (34186fbc <LL_RCC_PLL2_GetP1+0x1c>)
34186fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34186faa:	0edb      	lsrs	r3, r3, #27
34186fac:	f003 0307 	and.w	r3, r3, #7
}
34186fb0:	4618      	mov	r0, r3
34186fb2:	46bd      	mov	sp, r7
34186fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
34186fb8:	4770      	bx	lr
34186fba:	bf00      	nop
34186fbc:	56028000 	.word	0x56028000

34186fc0 <LL_RCC_PLL2_GetP2>:
{
34186fc0:	b480      	push	{r7}
34186fc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
34186fc4:	4b05      	ldr	r3, [pc, #20]	@ (34186fdc <LL_RCC_PLL2_GetP2+0x1c>)
34186fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34186fca:	0e1b      	lsrs	r3, r3, #24
34186fcc:	f003 0307 	and.w	r3, r3, #7
}
34186fd0:	4618      	mov	r0, r3
34186fd2:	46bd      	mov	sp, r7
34186fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
34186fd8:	4770      	bx	lr
34186fda:	bf00      	nop
34186fdc:	56028000 	.word	0x56028000

34186fe0 <LL_RCC_PLL2P_IsEnabled>:
{
34186fe0:	b480      	push	{r7}
34186fe2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
34186fe4:	4b07      	ldr	r3, [pc, #28]	@ (34187004 <LL_RCC_PLL2P_IsEnabled+0x24>)
34186fe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34186fea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34186fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34186ff2:	d101      	bne.n	34186ff8 <LL_RCC_PLL2P_IsEnabled+0x18>
34186ff4:	2301      	movs	r3, #1
34186ff6:	e000      	b.n	34186ffa <LL_RCC_PLL2P_IsEnabled+0x1a>
34186ff8:	2300      	movs	r3, #0
}
34186ffa:	4618      	mov	r0, r3
34186ffc:	46bd      	mov	sp, r7
34186ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
34187002:	4770      	bx	lr
34187004:	56028000 	.word	0x56028000

34187008 <LL_RCC_PLL2_GetFRACN>:
{
34187008:	b480      	push	{r7}
3418700a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
3418700c:	4b04      	ldr	r3, [pc, #16]	@ (34187020 <LL_RCC_PLL2_GetFRACN+0x18>)
3418700e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34187012:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34187016:	4618      	mov	r0, r3
34187018:	46bd      	mov	sp, r7
3418701a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418701e:	4770      	bx	lr
34187020:	56028000 	.word	0x56028000

34187024 <LL_RCC_PLL3_GetSource>:
{
34187024:	b480      	push	{r7}
34187026:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34187028:	4b04      	ldr	r3, [pc, #16]	@ (3418703c <LL_RCC_PLL3_GetSource+0x18>)
3418702a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418702e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34187032:	4618      	mov	r0, r3
34187034:	46bd      	mov	sp, r7
34187036:	f85d 7b04 	ldr.w	r7, [sp], #4
3418703a:	4770      	bx	lr
3418703c:	56028000 	.word	0x56028000

34187040 <LL_RCC_PLL3_IsReady>:
{
34187040:	b480      	push	{r7}
34187042:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34187044:	4b07      	ldr	r3, [pc, #28]	@ (34187064 <LL_RCC_PLL3_IsReady+0x24>)
34187046:	685b      	ldr	r3, [r3, #4]
34187048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418704c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34187050:	d101      	bne.n	34187056 <LL_RCC_PLL3_IsReady+0x16>
34187052:	2301      	movs	r3, #1
34187054:	e000      	b.n	34187058 <LL_RCC_PLL3_IsReady+0x18>
34187056:	2300      	movs	r3, #0
}
34187058:	4618      	mov	r0, r3
3418705a:	46bd      	mov	sp, r7
3418705c:	f85d 7b04 	ldr.w	r7, [sp], #4
34187060:	4770      	bx	lr
34187062:	bf00      	nop
34187064:	56028000 	.word	0x56028000

34187068 <LL_RCC_PLL3_IsEnabledBypass>:
{
34187068:	b480      	push	{r7}
3418706a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3418706c:	4b07      	ldr	r3, [pc, #28]	@ (3418708c <LL_RCC_PLL3_IsEnabledBypass+0x24>)
3418706e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34187072:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34187076:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418707a:	d101      	bne.n	34187080 <LL_RCC_PLL3_IsEnabledBypass+0x18>
3418707c:	2301      	movs	r3, #1
3418707e:	e000      	b.n	34187082 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34187080:	2300      	movs	r3, #0
}
34187082:	4618      	mov	r0, r3
34187084:	46bd      	mov	sp, r7
34187086:	f85d 7b04 	ldr.w	r7, [sp], #4
3418708a:	4770      	bx	lr
3418708c:	56028000 	.word	0x56028000

34187090 <LL_RCC_PLL3_GetN>:
{
34187090:	b480      	push	{r7}
34187092:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
34187094:	4b05      	ldr	r3, [pc, #20]	@ (341870ac <LL_RCC_PLL3_GetN+0x1c>)
34187096:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418709a:	0a1b      	lsrs	r3, r3, #8
3418709c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
341870a0:	4618      	mov	r0, r3
341870a2:	46bd      	mov	sp, r7
341870a4:	f85d 7b04 	ldr.w	r7, [sp], #4
341870a8:	4770      	bx	lr
341870aa:	bf00      	nop
341870ac:	56028000 	.word	0x56028000

341870b0 <LL_RCC_PLL3_GetM>:
{
341870b0:	b480      	push	{r7}
341870b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
341870b4:	4b05      	ldr	r3, [pc, #20]	@ (341870cc <LL_RCC_PLL3_GetM+0x1c>)
341870b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
341870ba:	0d1b      	lsrs	r3, r3, #20
341870bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
341870c0:	4618      	mov	r0, r3
341870c2:	46bd      	mov	sp, r7
341870c4:	f85d 7b04 	ldr.w	r7, [sp], #4
341870c8:	4770      	bx	lr
341870ca:	bf00      	nop
341870cc:	56028000 	.word	0x56028000

341870d0 <LL_RCC_PLL3_GetP1>:
{
341870d0:	b480      	push	{r7}
341870d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
341870d4:	4b05      	ldr	r3, [pc, #20]	@ (341870ec <LL_RCC_PLL3_GetP1+0x1c>)
341870d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341870da:	0edb      	lsrs	r3, r3, #27
341870dc:	f003 0307 	and.w	r3, r3, #7
}
341870e0:	4618      	mov	r0, r3
341870e2:	46bd      	mov	sp, r7
341870e4:	f85d 7b04 	ldr.w	r7, [sp], #4
341870e8:	4770      	bx	lr
341870ea:	bf00      	nop
341870ec:	56028000 	.word	0x56028000

341870f0 <LL_RCC_PLL3_GetP2>:
{
341870f0:	b480      	push	{r7}
341870f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
341870f4:	4b05      	ldr	r3, [pc, #20]	@ (3418710c <LL_RCC_PLL3_GetP2+0x1c>)
341870f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341870fa:	0e1b      	lsrs	r3, r3, #24
341870fc:	f003 0307 	and.w	r3, r3, #7
}
34187100:	4618      	mov	r0, r3
34187102:	46bd      	mov	sp, r7
34187104:	f85d 7b04 	ldr.w	r7, [sp], #4
34187108:	4770      	bx	lr
3418710a:	bf00      	nop
3418710c:	56028000 	.word	0x56028000

34187110 <LL_RCC_PLL3P_IsEnabled>:
{
34187110:	b480      	push	{r7}
34187112:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
34187114:	4b07      	ldr	r3, [pc, #28]	@ (34187134 <LL_RCC_PLL3P_IsEnabled+0x24>)
34187116:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418711a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3418711e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34187122:	d101      	bne.n	34187128 <LL_RCC_PLL3P_IsEnabled+0x18>
34187124:	2301      	movs	r3, #1
34187126:	e000      	b.n	3418712a <LL_RCC_PLL3P_IsEnabled+0x1a>
34187128:	2300      	movs	r3, #0
}
3418712a:	4618      	mov	r0, r3
3418712c:	46bd      	mov	sp, r7
3418712e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187132:	4770      	bx	lr
34187134:	56028000 	.word	0x56028000

34187138 <LL_RCC_PLL3_GetFRACN>:
{
34187138:	b480      	push	{r7}
3418713a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
3418713c:	4b04      	ldr	r3, [pc, #16]	@ (34187150 <LL_RCC_PLL3_GetFRACN+0x18>)
3418713e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34187142:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34187146:	4618      	mov	r0, r3
34187148:	46bd      	mov	sp, r7
3418714a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418714e:	4770      	bx	lr
34187150:	56028000 	.word	0x56028000

34187154 <LL_RCC_PLL4_GetSource>:
{
34187154:	b480      	push	{r7}
34187156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34187158:	4b04      	ldr	r3, [pc, #16]	@ (3418716c <LL_RCC_PLL4_GetSource+0x18>)
3418715a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418715e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34187162:	4618      	mov	r0, r3
34187164:	46bd      	mov	sp, r7
34187166:	f85d 7b04 	ldr.w	r7, [sp], #4
3418716a:	4770      	bx	lr
3418716c:	56028000 	.word	0x56028000

34187170 <LL_RCC_PLL4_IsReady>:
{
34187170:	b480      	push	{r7}
34187172:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34187174:	4b07      	ldr	r3, [pc, #28]	@ (34187194 <LL_RCC_PLL4_IsReady+0x24>)
34187176:	685b      	ldr	r3, [r3, #4]
34187178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418717c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34187180:	d101      	bne.n	34187186 <LL_RCC_PLL4_IsReady+0x16>
34187182:	2301      	movs	r3, #1
34187184:	e000      	b.n	34187188 <LL_RCC_PLL4_IsReady+0x18>
34187186:	2300      	movs	r3, #0
}
34187188:	4618      	mov	r0, r3
3418718a:	46bd      	mov	sp, r7
3418718c:	f85d 7b04 	ldr.w	r7, [sp], #4
34187190:	4770      	bx	lr
34187192:	bf00      	nop
34187194:	56028000 	.word	0x56028000

34187198 <LL_RCC_PLL4_IsEnabledBypass>:
{
34187198:	b480      	push	{r7}
3418719a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3418719c:	4b07      	ldr	r3, [pc, #28]	@ (341871bc <LL_RCC_PLL4_IsEnabledBypass+0x24>)
3418719e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341871a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341871a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
341871aa:	d101      	bne.n	341871b0 <LL_RCC_PLL4_IsEnabledBypass+0x18>
341871ac:	2301      	movs	r3, #1
341871ae:	e000      	b.n	341871b2 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
341871b0:	2300      	movs	r3, #0
}
341871b2:	4618      	mov	r0, r3
341871b4:	46bd      	mov	sp, r7
341871b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341871ba:	4770      	bx	lr
341871bc:	56028000 	.word	0x56028000

341871c0 <LL_RCC_PLL4_GetN>:
{
341871c0:	b480      	push	{r7}
341871c2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
341871c4:	4b05      	ldr	r3, [pc, #20]	@ (341871dc <LL_RCC_PLL4_GetN+0x1c>)
341871c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341871ca:	0a1b      	lsrs	r3, r3, #8
341871cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
341871d0:	4618      	mov	r0, r3
341871d2:	46bd      	mov	sp, r7
341871d4:	f85d 7b04 	ldr.w	r7, [sp], #4
341871d8:	4770      	bx	lr
341871da:	bf00      	nop
341871dc:	56028000 	.word	0x56028000

341871e0 <LL_RCC_PLL4_GetM>:
{
341871e0:	b480      	push	{r7}
341871e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
341871e4:	4b05      	ldr	r3, [pc, #20]	@ (341871fc <LL_RCC_PLL4_GetM+0x1c>)
341871e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341871ea:	0d1b      	lsrs	r3, r3, #20
341871ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
341871f0:	4618      	mov	r0, r3
341871f2:	46bd      	mov	sp, r7
341871f4:	f85d 7b04 	ldr.w	r7, [sp], #4
341871f8:	4770      	bx	lr
341871fa:	bf00      	nop
341871fc:	56028000 	.word	0x56028000

34187200 <LL_RCC_PLL4_GetP1>:
{
34187200:	b480      	push	{r7}
34187202:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
34187204:	4b05      	ldr	r3, [pc, #20]	@ (3418721c <LL_RCC_PLL4_GetP1+0x1c>)
34187206:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418720a:	0edb      	lsrs	r3, r3, #27
3418720c:	f003 0307 	and.w	r3, r3, #7
}
34187210:	4618      	mov	r0, r3
34187212:	46bd      	mov	sp, r7
34187214:	f85d 7b04 	ldr.w	r7, [sp], #4
34187218:	4770      	bx	lr
3418721a:	bf00      	nop
3418721c:	56028000 	.word	0x56028000

34187220 <LL_RCC_PLL4_GetP2>:
{
34187220:	b480      	push	{r7}
34187222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
34187224:	4b05      	ldr	r3, [pc, #20]	@ (3418723c <LL_RCC_PLL4_GetP2+0x1c>)
34187226:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418722a:	0e1b      	lsrs	r3, r3, #24
3418722c:	f003 0307 	and.w	r3, r3, #7
}
34187230:	4618      	mov	r0, r3
34187232:	46bd      	mov	sp, r7
34187234:	f85d 7b04 	ldr.w	r7, [sp], #4
34187238:	4770      	bx	lr
3418723a:	bf00      	nop
3418723c:	56028000 	.word	0x56028000

34187240 <LL_RCC_PLL4P_IsEnabled>:
{
34187240:	b480      	push	{r7}
34187242:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
34187244:	4b07      	ldr	r3, [pc, #28]	@ (34187264 <LL_RCC_PLL4P_IsEnabled+0x24>)
34187246:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418724a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3418724e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34187252:	d101      	bne.n	34187258 <LL_RCC_PLL4P_IsEnabled+0x18>
34187254:	2301      	movs	r3, #1
34187256:	e000      	b.n	3418725a <LL_RCC_PLL4P_IsEnabled+0x1a>
34187258:	2300      	movs	r3, #0
}
3418725a:	4618      	mov	r0, r3
3418725c:	46bd      	mov	sp, r7
3418725e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187262:	4770      	bx	lr
34187264:	56028000 	.word	0x56028000

34187268 <LL_RCC_PLL4_GetFRACN>:
{
34187268:	b480      	push	{r7}
3418726a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
3418726c:	4b04      	ldr	r3, [pc, #16]	@ (34187280 <LL_RCC_PLL4_GetFRACN+0x18>)
3418726e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34187272:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34187276:	4618      	mov	r0, r3
34187278:	46bd      	mov	sp, r7
3418727a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418727e:	4770      	bx	lr
34187280:	56028000 	.word	0x56028000

34187284 <LL_RCC_IC3_Enable>:
{
34187284:	b480      	push	{r7}
34187286:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34187288:	4b04      	ldr	r3, [pc, #16]	@ (3418729c <LL_RCC_IC3_Enable+0x18>)
3418728a:	2204      	movs	r2, #4
3418728c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187290:	bf00      	nop
34187292:	46bd      	mov	sp, r7
34187294:	f85d 7b04 	ldr.w	r7, [sp], #4
34187298:	4770      	bx	lr
3418729a:	bf00      	nop
3418729c:	56028000 	.word	0x56028000

341872a0 <LL_RCC_IC3_IsEnabled>:
{
341872a0:	b480      	push	{r7}
341872a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
341872a4:	4b07      	ldr	r3, [pc, #28]	@ (341872c4 <LL_RCC_IC3_IsEnabled+0x24>)
341872a6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
341872aa:	f003 0304 	and.w	r3, r3, #4
341872ae:	2b04      	cmp	r3, #4
341872b0:	d101      	bne.n	341872b6 <LL_RCC_IC3_IsEnabled+0x16>
341872b2:	2301      	movs	r3, #1
341872b4:	e000      	b.n	341872b8 <LL_RCC_IC3_IsEnabled+0x18>
341872b6:	2300      	movs	r3, #0
}
341872b8:	4618      	mov	r0, r3
341872ba:	46bd      	mov	sp, r7
341872bc:	f85d 7b04 	ldr.w	r7, [sp], #4
341872c0:	4770      	bx	lr
341872c2:	bf00      	nop
341872c4:	56028000 	.word	0x56028000

341872c8 <LL_RCC_IC3_GetSource>:
{
341872c8:	b480      	push	{r7}
341872ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
341872cc:	4b04      	ldr	r3, [pc, #16]	@ (341872e0 <LL_RCC_IC3_GetSource+0x18>)
341872ce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341872d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341872d6:	4618      	mov	r0, r3
341872d8:	46bd      	mov	sp, r7
341872da:	f85d 7b04 	ldr.w	r7, [sp], #4
341872de:	4770      	bx	lr
341872e0:	56028000 	.word	0x56028000

341872e4 <LL_RCC_IC3_GetDivider>:
{
341872e4:	b480      	push	{r7}
341872e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
341872e8:	4b05      	ldr	r3, [pc, #20]	@ (34187300 <LL_RCC_IC3_GetDivider+0x1c>)
341872ea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341872ee:	0c1b      	lsrs	r3, r3, #16
341872f0:	b2db      	uxtb	r3, r3
341872f2:	3301      	adds	r3, #1
}
341872f4:	4618      	mov	r0, r3
341872f6:	46bd      	mov	sp, r7
341872f8:	f85d 7b04 	ldr.w	r7, [sp], #4
341872fc:	4770      	bx	lr
341872fe:	bf00      	nop
34187300:	56028000 	.word	0x56028000

34187304 <LL_RCC_IC4_Enable>:
{
34187304:	b480      	push	{r7}
34187306:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34187308:	4b04      	ldr	r3, [pc, #16]	@ (3418731c <LL_RCC_IC4_Enable+0x18>)
3418730a:	2208      	movs	r2, #8
3418730c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187310:	bf00      	nop
34187312:	46bd      	mov	sp, r7
34187314:	f85d 7b04 	ldr.w	r7, [sp], #4
34187318:	4770      	bx	lr
3418731a:	bf00      	nop
3418731c:	56028000 	.word	0x56028000

34187320 <LL_RCC_IC4_IsEnabled>:
{
34187320:	b480      	push	{r7}
34187322:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34187324:	4b07      	ldr	r3, [pc, #28]	@ (34187344 <LL_RCC_IC4_IsEnabled+0x24>)
34187326:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418732a:	f003 0308 	and.w	r3, r3, #8
3418732e:	2b08      	cmp	r3, #8
34187330:	d101      	bne.n	34187336 <LL_RCC_IC4_IsEnabled+0x16>
34187332:	2301      	movs	r3, #1
34187334:	e000      	b.n	34187338 <LL_RCC_IC4_IsEnabled+0x18>
34187336:	2300      	movs	r3, #0
}
34187338:	4618      	mov	r0, r3
3418733a:	46bd      	mov	sp, r7
3418733c:	f85d 7b04 	ldr.w	r7, [sp], #4
34187340:	4770      	bx	lr
34187342:	bf00      	nop
34187344:	56028000 	.word	0x56028000

34187348 <LL_RCC_IC4_GetSource>:
{
34187348:	b480      	push	{r7}
3418734a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
3418734c:	4b04      	ldr	r3, [pc, #16]	@ (34187360 <LL_RCC_IC4_GetSource+0x18>)
3418734e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34187352:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34187356:	4618      	mov	r0, r3
34187358:	46bd      	mov	sp, r7
3418735a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418735e:	4770      	bx	lr
34187360:	56028000 	.word	0x56028000

34187364 <LL_RCC_IC4_GetDivider>:
{
34187364:	b480      	push	{r7}
34187366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34187368:	4b05      	ldr	r3, [pc, #20]	@ (34187380 <LL_RCC_IC4_GetDivider+0x1c>)
3418736a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418736e:	0c1b      	lsrs	r3, r3, #16
34187370:	b2db      	uxtb	r3, r3
34187372:	3301      	adds	r3, #1
}
34187374:	4618      	mov	r0, r3
34187376:	46bd      	mov	sp, r7
34187378:	f85d 7b04 	ldr.w	r7, [sp], #4
3418737c:	4770      	bx	lr
3418737e:	bf00      	nop
34187380:	56028000 	.word	0x56028000

34187384 <LL_RCC_IC5_Enable>:
{
34187384:	b480      	push	{r7}
34187386:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34187388:	4b04      	ldr	r3, [pc, #16]	@ (3418739c <LL_RCC_IC5_Enable+0x18>)
3418738a:	2210      	movs	r2, #16
3418738c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187390:	bf00      	nop
34187392:	46bd      	mov	sp, r7
34187394:	f85d 7b04 	ldr.w	r7, [sp], #4
34187398:	4770      	bx	lr
3418739a:	bf00      	nop
3418739c:	56028000 	.word	0x56028000

341873a0 <LL_RCC_IC5_IsEnabled>:
{
341873a0:	b480      	push	{r7}
341873a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
341873a4:	4b07      	ldr	r3, [pc, #28]	@ (341873c4 <LL_RCC_IC5_IsEnabled+0x24>)
341873a6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
341873aa:	f003 0310 	and.w	r3, r3, #16
341873ae:	2b10      	cmp	r3, #16
341873b0:	d101      	bne.n	341873b6 <LL_RCC_IC5_IsEnabled+0x16>
341873b2:	2301      	movs	r3, #1
341873b4:	e000      	b.n	341873b8 <LL_RCC_IC5_IsEnabled+0x18>
341873b6:	2300      	movs	r3, #0
}
341873b8:	4618      	mov	r0, r3
341873ba:	46bd      	mov	sp, r7
341873bc:	f85d 7b04 	ldr.w	r7, [sp], #4
341873c0:	4770      	bx	lr
341873c2:	bf00      	nop
341873c4:	56028000 	.word	0x56028000

341873c8 <LL_RCC_IC5_GetSource>:
{
341873c8:	b480      	push	{r7}
341873ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
341873cc:	4b04      	ldr	r3, [pc, #16]	@ (341873e0 <LL_RCC_IC5_GetSource+0x18>)
341873ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
341873d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341873d6:	4618      	mov	r0, r3
341873d8:	46bd      	mov	sp, r7
341873da:	f85d 7b04 	ldr.w	r7, [sp], #4
341873de:	4770      	bx	lr
341873e0:	56028000 	.word	0x56028000

341873e4 <LL_RCC_IC5_GetDivider>:
{
341873e4:	b480      	push	{r7}
341873e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
341873e8:	4b05      	ldr	r3, [pc, #20]	@ (34187400 <LL_RCC_IC5_GetDivider+0x1c>)
341873ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
341873ee:	0c1b      	lsrs	r3, r3, #16
341873f0:	b2db      	uxtb	r3, r3
341873f2:	3301      	adds	r3, #1
}
341873f4:	4618      	mov	r0, r3
341873f6:	46bd      	mov	sp, r7
341873f8:	f85d 7b04 	ldr.w	r7, [sp], #4
341873fc:	4770      	bx	lr
341873fe:	bf00      	nop
34187400:	56028000 	.word	0x56028000

34187404 <LL_RCC_IC7_Enable>:
{
34187404:	b480      	push	{r7}
34187406:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34187408:	4b04      	ldr	r3, [pc, #16]	@ (3418741c <LL_RCC_IC7_Enable+0x18>)
3418740a:	2240      	movs	r2, #64	@ 0x40
3418740c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187410:	bf00      	nop
34187412:	46bd      	mov	sp, r7
34187414:	f85d 7b04 	ldr.w	r7, [sp], #4
34187418:	4770      	bx	lr
3418741a:	bf00      	nop
3418741c:	56028000 	.word	0x56028000

34187420 <LL_RCC_IC7_IsEnabled>:
{
34187420:	b480      	push	{r7}
34187422:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
34187424:	4b07      	ldr	r3, [pc, #28]	@ (34187444 <LL_RCC_IC7_IsEnabled+0x24>)
34187426:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418742a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418742e:	2b40      	cmp	r3, #64	@ 0x40
34187430:	d101      	bne.n	34187436 <LL_RCC_IC7_IsEnabled+0x16>
34187432:	2301      	movs	r3, #1
34187434:	e000      	b.n	34187438 <LL_RCC_IC7_IsEnabled+0x18>
34187436:	2300      	movs	r3, #0
}
34187438:	4618      	mov	r0, r3
3418743a:	46bd      	mov	sp, r7
3418743c:	f85d 7b04 	ldr.w	r7, [sp], #4
34187440:	4770      	bx	lr
34187442:	bf00      	nop
34187444:	56028000 	.word	0x56028000

34187448 <LL_RCC_IC7_GetSource>:
{
34187448:	b480      	push	{r7}
3418744a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
3418744c:	4b04      	ldr	r3, [pc, #16]	@ (34187460 <LL_RCC_IC7_GetSource+0x18>)
3418744e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34187452:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34187456:	4618      	mov	r0, r3
34187458:	46bd      	mov	sp, r7
3418745a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418745e:	4770      	bx	lr
34187460:	56028000 	.word	0x56028000

34187464 <LL_RCC_IC7_GetDivider>:
{
34187464:	b480      	push	{r7}
34187466:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
34187468:	4b05      	ldr	r3, [pc, #20]	@ (34187480 <LL_RCC_IC7_GetDivider+0x1c>)
3418746a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418746e:	0c1b      	lsrs	r3, r3, #16
34187470:	b2db      	uxtb	r3, r3
34187472:	3301      	adds	r3, #1
}
34187474:	4618      	mov	r0, r3
34187476:	46bd      	mov	sp, r7
34187478:	f85d 7b04 	ldr.w	r7, [sp], #4
3418747c:	4770      	bx	lr
3418747e:	bf00      	nop
34187480:	56028000 	.word	0x56028000

34187484 <LL_RCC_IC8_Enable>:
{
34187484:	b480      	push	{r7}
34187486:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34187488:	4b04      	ldr	r3, [pc, #16]	@ (3418749c <LL_RCC_IC8_Enable+0x18>)
3418748a:	2280      	movs	r2, #128	@ 0x80
3418748c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187490:	bf00      	nop
34187492:	46bd      	mov	sp, r7
34187494:	f85d 7b04 	ldr.w	r7, [sp], #4
34187498:	4770      	bx	lr
3418749a:	bf00      	nop
3418749c:	56028000 	.word	0x56028000

341874a0 <LL_RCC_IC8_IsEnabled>:
{
341874a0:	b480      	push	{r7}
341874a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
341874a4:	4b07      	ldr	r3, [pc, #28]	@ (341874c4 <LL_RCC_IC8_IsEnabled+0x24>)
341874a6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
341874aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
341874ae:	2b80      	cmp	r3, #128	@ 0x80
341874b0:	d101      	bne.n	341874b6 <LL_RCC_IC8_IsEnabled+0x16>
341874b2:	2301      	movs	r3, #1
341874b4:	e000      	b.n	341874b8 <LL_RCC_IC8_IsEnabled+0x18>
341874b6:	2300      	movs	r3, #0
}
341874b8:	4618      	mov	r0, r3
341874ba:	46bd      	mov	sp, r7
341874bc:	f85d 7b04 	ldr.w	r7, [sp], #4
341874c0:	4770      	bx	lr
341874c2:	bf00      	nop
341874c4:	56028000 	.word	0x56028000

341874c8 <LL_RCC_IC8_GetSource>:
{
341874c8:	b480      	push	{r7}
341874ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
341874cc:	4b04      	ldr	r3, [pc, #16]	@ (341874e0 <LL_RCC_IC8_GetSource+0x18>)
341874ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341874d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341874d6:	4618      	mov	r0, r3
341874d8:	46bd      	mov	sp, r7
341874da:	f85d 7b04 	ldr.w	r7, [sp], #4
341874de:	4770      	bx	lr
341874e0:	56028000 	.word	0x56028000

341874e4 <LL_RCC_IC8_GetDivider>:
{
341874e4:	b480      	push	{r7}
341874e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
341874e8:	4b05      	ldr	r3, [pc, #20]	@ (34187500 <LL_RCC_IC8_GetDivider+0x1c>)
341874ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341874ee:	0c1b      	lsrs	r3, r3, #16
341874f0:	b2db      	uxtb	r3, r3
341874f2:	3301      	adds	r3, #1
}
341874f4:	4618      	mov	r0, r3
341874f6:	46bd      	mov	sp, r7
341874f8:	f85d 7b04 	ldr.w	r7, [sp], #4
341874fc:	4770      	bx	lr
341874fe:	bf00      	nop
34187500:	56028000 	.word	0x56028000

34187504 <LL_RCC_IC9_Enable>:
{
34187504:	b480      	push	{r7}
34187506:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34187508:	4b04      	ldr	r3, [pc, #16]	@ (3418751c <LL_RCC_IC9_Enable+0x18>)
3418750a:	f44f 7280 	mov.w	r2, #256	@ 0x100
3418750e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187512:	bf00      	nop
34187514:	46bd      	mov	sp, r7
34187516:	f85d 7b04 	ldr.w	r7, [sp], #4
3418751a:	4770      	bx	lr
3418751c:	56028000 	.word	0x56028000

34187520 <LL_RCC_IC9_IsEnabled>:
{
34187520:	b480      	push	{r7}
34187522:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
34187524:	4b07      	ldr	r3, [pc, #28]	@ (34187544 <LL_RCC_IC9_IsEnabled+0x24>)
34187526:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418752a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418752e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34187532:	d101      	bne.n	34187538 <LL_RCC_IC9_IsEnabled+0x18>
34187534:	2301      	movs	r3, #1
34187536:	e000      	b.n	3418753a <LL_RCC_IC9_IsEnabled+0x1a>
34187538:	2300      	movs	r3, #0
}
3418753a:	4618      	mov	r0, r3
3418753c:	46bd      	mov	sp, r7
3418753e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187542:	4770      	bx	lr
34187544:	56028000 	.word	0x56028000

34187548 <LL_RCC_IC9_GetSource>:
{
34187548:	b480      	push	{r7}
3418754a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
3418754c:	4b04      	ldr	r3, [pc, #16]	@ (34187560 <LL_RCC_IC9_GetSource+0x18>)
3418754e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187552:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34187556:	4618      	mov	r0, r3
34187558:	46bd      	mov	sp, r7
3418755a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418755e:	4770      	bx	lr
34187560:	56028000 	.word	0x56028000

34187564 <LL_RCC_IC9_GetDivider>:
{
34187564:	b480      	push	{r7}
34187566:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
34187568:	4b05      	ldr	r3, [pc, #20]	@ (34187580 <LL_RCC_IC9_GetDivider+0x1c>)
3418756a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418756e:	0c1b      	lsrs	r3, r3, #16
34187570:	b2db      	uxtb	r3, r3
34187572:	3301      	adds	r3, #1
}
34187574:	4618      	mov	r0, r3
34187576:	46bd      	mov	sp, r7
34187578:	f85d 7b04 	ldr.w	r7, [sp], #4
3418757c:	4770      	bx	lr
3418757e:	bf00      	nop
34187580:	56028000 	.word	0x56028000

34187584 <LL_RCC_IC10_Enable>:
{
34187584:	b480      	push	{r7}
34187586:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34187588:	4b04      	ldr	r3, [pc, #16]	@ (3418759c <LL_RCC_IC10_Enable+0x18>)
3418758a:	f44f 7200 	mov.w	r2, #512	@ 0x200
3418758e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187592:	bf00      	nop
34187594:	46bd      	mov	sp, r7
34187596:	f85d 7b04 	ldr.w	r7, [sp], #4
3418759a:	4770      	bx	lr
3418759c:	56028000 	.word	0x56028000

341875a0 <LL_RCC_IC10_IsEnabled>:
{
341875a0:	b480      	push	{r7}
341875a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
341875a4:	4b07      	ldr	r3, [pc, #28]	@ (341875c4 <LL_RCC_IC10_IsEnabled+0x24>)
341875a6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
341875aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341875ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
341875b2:	d101      	bne.n	341875b8 <LL_RCC_IC10_IsEnabled+0x18>
341875b4:	2301      	movs	r3, #1
341875b6:	e000      	b.n	341875ba <LL_RCC_IC10_IsEnabled+0x1a>
341875b8:	2300      	movs	r3, #0
}
341875ba:	4618      	mov	r0, r3
341875bc:	46bd      	mov	sp, r7
341875be:	f85d 7b04 	ldr.w	r7, [sp], #4
341875c2:	4770      	bx	lr
341875c4:	56028000 	.word	0x56028000

341875c8 <LL_RCC_IC10_GetSource>:
{
341875c8:	b480      	push	{r7}
341875ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
341875cc:	4b04      	ldr	r3, [pc, #16]	@ (341875e0 <LL_RCC_IC10_GetSource+0x18>)
341875ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
341875d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341875d6:	4618      	mov	r0, r3
341875d8:	46bd      	mov	sp, r7
341875da:	f85d 7b04 	ldr.w	r7, [sp], #4
341875de:	4770      	bx	lr
341875e0:	56028000 	.word	0x56028000

341875e4 <LL_RCC_IC10_GetDivider>:
{
341875e4:	b480      	push	{r7}
341875e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
341875e8:	4b05      	ldr	r3, [pc, #20]	@ (34187600 <LL_RCC_IC10_GetDivider+0x1c>)
341875ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
341875ee:	0c1b      	lsrs	r3, r3, #16
341875f0:	b2db      	uxtb	r3, r3
341875f2:	3301      	adds	r3, #1
}
341875f4:	4618      	mov	r0, r3
341875f6:	46bd      	mov	sp, r7
341875f8:	f85d 7b04 	ldr.w	r7, [sp], #4
341875fc:	4770      	bx	lr
341875fe:	bf00      	nop
34187600:	56028000 	.word	0x56028000

34187604 <LL_RCC_IC12_Enable>:
  * @brief  Enable IC12
  * @rmtoll DIVENSR       IC12ENS        LL_RCC_IC12_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC12_Enable(void)
{
34187604:	b480      	push	{r7}
34187606:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
34187608:	4b04      	ldr	r3, [pc, #16]	@ (3418761c <LL_RCC_IC12_Enable+0x18>)
3418760a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3418760e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187612:	bf00      	nop
34187614:	46bd      	mov	sp, r7
34187616:	f85d 7b04 	ldr.w	r7, [sp], #4
3418761a:	4770      	bx	lr
3418761c:	56028000 	.word	0x56028000

34187620 <LL_RCC_IC12_IsEnabled>:
  * @brief  Check if IC12 is enabled
  * @rmtoll DIVENR       IC12EN         LL_RCC_IC12_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_IsEnabled(void)
{
34187620:	b480      	push	{r7}
34187622:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
34187624:	4b07      	ldr	r3, [pc, #28]	@ (34187644 <LL_RCC_IC12_IsEnabled+0x24>)
34187626:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418762a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418762e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34187632:	d101      	bne.n	34187638 <LL_RCC_IC12_IsEnabled+0x18>
34187634:	2301      	movs	r3, #1
34187636:	e000      	b.n	3418763a <LL_RCC_IC12_IsEnabled+0x1a>
34187638:	2300      	movs	r3, #0
}
3418763a:	4618      	mov	r0, r3
3418763c:	46bd      	mov	sp, r7
3418763e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187642:	4770      	bx	lr
34187644:	56028000 	.word	0x56028000

34187648 <LL_RCC_IC12_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetSource(void)
{
34187648:	b480      	push	{r7}
3418764a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
3418764c:	4b04      	ldr	r3, [pc, #16]	@ (34187660 <LL_RCC_IC12_GetSource+0x18>)
3418764e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34187652:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34187656:	4618      	mov	r0, r3
34187658:	46bd      	mov	sp, r7
3418765a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418765e:	4770      	bx	lr
34187660:	56028000 	.word	0x56028000

34187664 <LL_RCC_IC12_GetDivider>:
  * @brief  Get IC12 divider
  * @rmtoll IC12CFGR      IC12INT        LL_RCC_IC12_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetDivider(void)
{
34187664:	b480      	push	{r7}
34187666:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34187668:	4b05      	ldr	r3, [pc, #20]	@ (34187680 <LL_RCC_IC12_GetDivider+0x1c>)
3418766a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3418766e:	0c1b      	lsrs	r3, r3, #16
34187670:	b2db      	uxtb	r3, r3
34187672:	3301      	adds	r3, #1
}
34187674:	4618      	mov	r0, r3
34187676:	46bd      	mov	sp, r7
34187678:	f85d 7b04 	ldr.w	r7, [sp], #4
3418767c:	4770      	bx	lr
3418767e:	bf00      	nop
34187680:	56028000 	.word	0x56028000

34187684 <LL_RCC_IC13_Enable>:
  * @brief  Enable IC13
  * @rmtoll DIVENSR       IC13ENS        LL_RCC_IC13_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC13_Enable(void)
{
34187684:	b480      	push	{r7}
34187686:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
34187688:	4b04      	ldr	r3, [pc, #16]	@ (3418769c <LL_RCC_IC13_Enable+0x18>)
3418768a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3418768e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187692:	bf00      	nop
34187694:	46bd      	mov	sp, r7
34187696:	f85d 7b04 	ldr.w	r7, [sp], #4
3418769a:	4770      	bx	lr
3418769c:	56028000 	.word	0x56028000

341876a0 <LL_RCC_IC13_IsEnabled>:
  * @brief  Check if IC13 is enabled
  * @rmtoll DIVENR       IC13EN         LL_RCC_IC13_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_IsEnabled(void)
{
341876a0:	b480      	push	{r7}
341876a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
341876a4:	4b07      	ldr	r3, [pc, #28]	@ (341876c4 <LL_RCC_IC13_IsEnabled+0x24>)
341876a6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
341876aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
341876ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
341876b2:	d101      	bne.n	341876b8 <LL_RCC_IC13_IsEnabled+0x18>
341876b4:	2301      	movs	r3, #1
341876b6:	e000      	b.n	341876ba <LL_RCC_IC13_IsEnabled+0x1a>
341876b8:	2300      	movs	r3, #0
}
341876ba:	4618      	mov	r0, r3
341876bc:	46bd      	mov	sp, r7
341876be:	f85d 7b04 	ldr.w	r7, [sp], #4
341876c2:	4770      	bx	lr
341876c4:	56028000 	.word	0x56028000

341876c8 <LL_RCC_IC13_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetSource(void)
{
341876c8:	b480      	push	{r7}
341876ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
341876cc:	4b04      	ldr	r3, [pc, #16]	@ (341876e0 <LL_RCC_IC13_GetSource+0x18>)
341876ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
341876d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341876d6:	4618      	mov	r0, r3
341876d8:	46bd      	mov	sp, r7
341876da:	f85d 7b04 	ldr.w	r7, [sp], #4
341876de:	4770      	bx	lr
341876e0:	56028000 	.word	0x56028000

341876e4 <LL_RCC_IC13_GetDivider>:
  * @brief  Get IC13 divider
  * @rmtoll IC13CFGR      IC13INT        LL_RCC_IC13_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetDivider(void)
{
341876e4:	b480      	push	{r7}
341876e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
341876e8:	4b05      	ldr	r3, [pc, #20]	@ (34187700 <LL_RCC_IC13_GetDivider+0x1c>)
341876ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
341876ee:	0c1b      	lsrs	r3, r3, #16
341876f0:	b2db      	uxtb	r3, r3
341876f2:	3301      	adds	r3, #1
}
341876f4:	4618      	mov	r0, r3
341876f6:	46bd      	mov	sp, r7
341876f8:	f85d 7b04 	ldr.w	r7, [sp], #4
341876fc:	4770      	bx	lr
341876fe:	bf00      	nop
34187700:	56028000 	.word	0x56028000

34187704 <LL_RCC_IC14_Enable>:
  * @brief  Enable IC14
  * @rmtoll DIVENSR       IC14ENS        LL_RCC_IC14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC14_Enable(void)
{
34187704:	b480      	push	{r7}
34187706:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34187708:	4b04      	ldr	r3, [pc, #16]	@ (3418771c <LL_RCC_IC14_Enable+0x18>)
3418770a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3418770e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187712:	bf00      	nop
34187714:	46bd      	mov	sp, r7
34187716:	f85d 7b04 	ldr.w	r7, [sp], #4
3418771a:	4770      	bx	lr
3418771c:	56028000 	.word	0x56028000

34187720 <LL_RCC_IC14_IsEnabled>:
  * @brief  Check if IC14 is enabled
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
34187720:	b480      	push	{r7}
34187722:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34187724:	4b07      	ldr	r3, [pc, #28]	@ (34187744 <LL_RCC_IC14_IsEnabled+0x24>)
34187726:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418772a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3418772e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34187732:	d101      	bne.n	34187738 <LL_RCC_IC14_IsEnabled+0x18>
34187734:	2301      	movs	r3, #1
34187736:	e000      	b.n	3418773a <LL_RCC_IC14_IsEnabled+0x1a>
34187738:	2300      	movs	r3, #0
}
3418773a:	4618      	mov	r0, r3
3418773c:	46bd      	mov	sp, r7
3418773e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187742:	4770      	bx	lr
34187744:	56028000 	.word	0x56028000

34187748 <LL_RCC_IC14_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetSource(void)
{
34187748:	b480      	push	{r7}
3418774a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
3418774c:	4b04      	ldr	r3, [pc, #16]	@ (34187760 <LL_RCC_IC14_GetSource+0x18>)
3418774e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34187752:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34187756:	4618      	mov	r0, r3
34187758:	46bd      	mov	sp, r7
3418775a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418775e:	4770      	bx	lr
34187760:	56028000 	.word	0x56028000

34187764 <LL_RCC_IC14_GetDivider>:
  * @brief  Get IC14 divider
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
34187764:	b480      	push	{r7}
34187766:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
34187768:	4b05      	ldr	r3, [pc, #20]	@ (34187780 <LL_RCC_IC14_GetDivider+0x1c>)
3418776a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418776e:	0c1b      	lsrs	r3, r3, #16
34187770:	b2db      	uxtb	r3, r3
34187772:	3301      	adds	r3, #1
}
34187774:	4618      	mov	r0, r3
34187776:	46bd      	mov	sp, r7
34187778:	f85d 7b04 	ldr.w	r7, [sp], #4
3418777c:	4770      	bx	lr
3418777e:	bf00      	nop
34187780:	56028000 	.word	0x56028000

34187784 <LL_RCC_IC15_Enable>:
  * @brief  Enable IC15
  * @rmtoll DIVENSR       IC15ENS        LL_RCC_IC15_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC15_Enable(void)
{
34187784:	b480      	push	{r7}
34187786:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34187788:	4b04      	ldr	r3, [pc, #16]	@ (3418779c <LL_RCC_IC15_Enable+0x18>)
3418778a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
3418778e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187792:	bf00      	nop
34187794:	46bd      	mov	sp, r7
34187796:	f85d 7b04 	ldr.w	r7, [sp], #4
3418779a:	4770      	bx	lr
3418779c:	56028000 	.word	0x56028000

341877a0 <LL_RCC_IC15_IsEnabled>:
  * @brief  Check if IC15 is enabled
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
341877a0:	b480      	push	{r7}
341877a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
341877a4:	4b07      	ldr	r3, [pc, #28]	@ (341877c4 <LL_RCC_IC15_IsEnabled+0x24>)
341877a6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
341877aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
341877ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
341877b2:	d101      	bne.n	341877b8 <LL_RCC_IC15_IsEnabled+0x18>
341877b4:	2301      	movs	r3, #1
341877b6:	e000      	b.n	341877ba <LL_RCC_IC15_IsEnabled+0x1a>
341877b8:	2300      	movs	r3, #0
}
341877ba:	4618      	mov	r0, r3
341877bc:	46bd      	mov	sp, r7
341877be:	f85d 7b04 	ldr.w	r7, [sp], #4
341877c2:	4770      	bx	lr
341877c4:	56028000 	.word	0x56028000

341877c8 <LL_RCC_IC15_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetSource(void)
{
341877c8:	b480      	push	{r7}
341877ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
341877cc:	4b04      	ldr	r3, [pc, #16]	@ (341877e0 <LL_RCC_IC15_GetSource+0x18>)
341877ce:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341877d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341877d6:	4618      	mov	r0, r3
341877d8:	46bd      	mov	sp, r7
341877da:	f85d 7b04 	ldr.w	r7, [sp], #4
341877de:	4770      	bx	lr
341877e0:	56028000 	.word	0x56028000

341877e4 <LL_RCC_IC15_GetDivider>:
  * @brief  Get IC15 divider
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
341877e4:	b480      	push	{r7}
341877e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
341877e8:	4b05      	ldr	r3, [pc, #20]	@ (34187800 <LL_RCC_IC15_GetDivider+0x1c>)
341877ea:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341877ee:	0c1b      	lsrs	r3, r3, #16
341877f0:	b2db      	uxtb	r3, r3
341877f2:	3301      	adds	r3, #1
}
341877f4:	4618      	mov	r0, r3
341877f6:	46bd      	mov	sp, r7
341877f8:	f85d 7b04 	ldr.w	r7, [sp], #4
341877fc:	4770      	bx	lr
341877fe:	bf00      	nop
34187800:	56028000 	.word	0x56028000

34187804 <LL_RCC_IC16_Enable>:
  * @brief  Enable IC16
  * @rmtoll DIVENSR       IC16ENS        LL_RCC_IC16_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC16_Enable(void)
{
34187804:	b480      	push	{r7}
34187806:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
34187808:	4b04      	ldr	r3, [pc, #16]	@ (3418781c <LL_RCC_IC16_Enable+0x18>)
3418780a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3418780e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187812:	bf00      	nop
34187814:	46bd      	mov	sp, r7
34187816:	f85d 7b04 	ldr.w	r7, [sp], #4
3418781a:	4770      	bx	lr
3418781c:	56028000 	.word	0x56028000

34187820 <LL_RCC_IC16_IsEnabled>:
  * @brief  Check if IC16 is enabled
  * @rmtoll DIVENR       IC16EN         LL_RCC_IC16_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_IsEnabled(void)
{
34187820:	b480      	push	{r7}
34187822:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34187824:	4b07      	ldr	r3, [pc, #28]	@ (34187844 <LL_RCC_IC16_IsEnabled+0x24>)
34187826:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418782a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3418782e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34187832:	d101      	bne.n	34187838 <LL_RCC_IC16_IsEnabled+0x18>
34187834:	2301      	movs	r3, #1
34187836:	e000      	b.n	3418783a <LL_RCC_IC16_IsEnabled+0x1a>
34187838:	2300      	movs	r3, #0
}
3418783a:	4618      	mov	r0, r3
3418783c:	46bd      	mov	sp, r7
3418783e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187842:	4770      	bx	lr
34187844:	56028000 	.word	0x56028000

34187848 <LL_RCC_IC16_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetSource(void)
{
34187848:	b480      	push	{r7}
3418784a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
3418784c:	4b04      	ldr	r3, [pc, #16]	@ (34187860 <LL_RCC_IC16_GetSource+0x18>)
3418784e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34187852:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34187856:	4618      	mov	r0, r3
34187858:	46bd      	mov	sp, r7
3418785a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418785e:	4770      	bx	lr
34187860:	56028000 	.word	0x56028000

34187864 <LL_RCC_IC16_GetDivider>:
  * @brief  Get IC16 divider
  * @rmtoll IC16CFGR      IC16INT        LL_RCC_IC16_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetDivider(void)
{
34187864:	b480      	push	{r7}
34187866:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34187868:	4b05      	ldr	r3, [pc, #20]	@ (34187880 <LL_RCC_IC16_GetDivider+0x1c>)
3418786a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418786e:	0c1b      	lsrs	r3, r3, #16
34187870:	b2db      	uxtb	r3, r3
34187872:	3301      	adds	r3, #1
}
34187874:	4618      	mov	r0, r3
34187876:	46bd      	mov	sp, r7
34187878:	f85d 7b04 	ldr.w	r7, [sp], #4
3418787c:	4770      	bx	lr
3418787e:	bf00      	nop
34187880:	56028000 	.word	0x56028000

34187884 <LL_RCC_IC17_Enable>:
  * @brief  Enable IC17
  * @rmtoll DIVENSR       IC17ENS        LL_RCC_IC17_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC17_Enable(void)
{
34187884:	b480      	push	{r7}
34187886:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
34187888:	4b04      	ldr	r3, [pc, #16]	@ (3418789c <LL_RCC_IC17_Enable+0x18>)
3418788a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3418788e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187892:	bf00      	nop
34187894:	46bd      	mov	sp, r7
34187896:	f85d 7b04 	ldr.w	r7, [sp], #4
3418789a:	4770      	bx	lr
3418789c:	56028000 	.word	0x56028000

341878a0 <LL_RCC_IC17_IsEnabled>:
  * @brief  Check if IC17 is enabled
  * @rmtoll DIVENR       IC17EN         LL_RCC_IC17_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_IsEnabled(void)
{
341878a0:	b480      	push	{r7}
341878a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
341878a4:	4b07      	ldr	r3, [pc, #28]	@ (341878c4 <LL_RCC_IC17_IsEnabled+0x24>)
341878a6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
341878aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
341878ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
341878b2:	d101      	bne.n	341878b8 <LL_RCC_IC17_IsEnabled+0x18>
341878b4:	2301      	movs	r3, #1
341878b6:	e000      	b.n	341878ba <LL_RCC_IC17_IsEnabled+0x1a>
341878b8:	2300      	movs	r3, #0
}
341878ba:	4618      	mov	r0, r3
341878bc:	46bd      	mov	sp, r7
341878be:	f85d 7b04 	ldr.w	r7, [sp], #4
341878c2:	4770      	bx	lr
341878c4:	56028000 	.word	0x56028000

341878c8 <LL_RCC_IC17_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetSource(void)
{
341878c8:	b480      	push	{r7}
341878ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
341878cc:	4b04      	ldr	r3, [pc, #16]	@ (341878e0 <LL_RCC_IC17_GetSource+0x18>)
341878ce:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
341878d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341878d6:	4618      	mov	r0, r3
341878d8:	46bd      	mov	sp, r7
341878da:	f85d 7b04 	ldr.w	r7, [sp], #4
341878de:	4770      	bx	lr
341878e0:	56028000 	.word	0x56028000

341878e4 <LL_RCC_IC17_GetDivider>:
  * @brief  Get IC17 divider
  * @rmtoll IC17CFGR      IC17INT        LL_RCC_IC17_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetDivider(void)
{
341878e4:	b480      	push	{r7}
341878e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
341878e8:	4b05      	ldr	r3, [pc, #20]	@ (34187900 <LL_RCC_IC17_GetDivider+0x1c>)
341878ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
341878ee:	0c1b      	lsrs	r3, r3, #16
341878f0:	b2db      	uxtb	r3, r3
341878f2:	3301      	adds	r3, #1
}
341878f4:	4618      	mov	r0, r3
341878f6:	46bd      	mov	sp, r7
341878f8:	f85d 7b04 	ldr.w	r7, [sp], #4
341878fc:	4770      	bx	lr
341878fe:	bf00      	nop
34187900:	56028000 	.word	0x56028000

34187904 <LL_RCC_IC18_Enable>:
  * @brief  Enable IC18
  * @rmtoll DIVENSR       IC18ENS        LL_RCC_IC18_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC18_Enable(void)
{
34187904:	b480      	push	{r7}
34187906:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
34187908:	4b04      	ldr	r3, [pc, #16]	@ (3418791c <LL_RCC_IC18_Enable+0x18>)
3418790a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
3418790e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187912:	bf00      	nop
34187914:	46bd      	mov	sp, r7
34187916:	f85d 7b04 	ldr.w	r7, [sp], #4
3418791a:	4770      	bx	lr
3418791c:	56028000 	.word	0x56028000

34187920 <LL_RCC_IC18_IsEnabled>:
  * @brief  Check if IC18 is enabled
  * @rmtoll DIVENR       IC18EN         LL_RCC_IC18_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_IsEnabled(void)
{
34187920:	b480      	push	{r7}
34187922:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34187924:	4b07      	ldr	r3, [pc, #28]	@ (34187944 <LL_RCC_IC18_IsEnabled+0x24>)
34187926:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418792a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3418792e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34187932:	d101      	bne.n	34187938 <LL_RCC_IC18_IsEnabled+0x18>
34187934:	2301      	movs	r3, #1
34187936:	e000      	b.n	3418793a <LL_RCC_IC18_IsEnabled+0x1a>
34187938:	2300      	movs	r3, #0
}
3418793a:	4618      	mov	r0, r3
3418793c:	46bd      	mov	sp, r7
3418793e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187942:	4770      	bx	lr
34187944:	56028000 	.word	0x56028000

34187948 <LL_RCC_IC18_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetSource(void)
{
34187948:	b480      	push	{r7}
3418794a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
3418794c:	4b04      	ldr	r3, [pc, #16]	@ (34187960 <LL_RCC_IC18_GetSource+0x18>)
3418794e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34187952:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34187956:	4618      	mov	r0, r3
34187958:	46bd      	mov	sp, r7
3418795a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418795e:	4770      	bx	lr
34187960:	56028000 	.word	0x56028000

34187964 <LL_RCC_IC18_GetDivider>:
  * @brief  Get IC18 divider
  * @rmtoll IC18CFGR      IC18INT        LL_RCC_IC18_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetDivider(void)
{
34187964:	b480      	push	{r7}
34187966:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34187968:	4b05      	ldr	r3, [pc, #20]	@ (34187980 <LL_RCC_IC18_GetDivider+0x1c>)
3418796a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3418796e:	0c1b      	lsrs	r3, r3, #16
34187970:	b2db      	uxtb	r3, r3
34187972:	3301      	adds	r3, #1
}
34187974:	4618      	mov	r0, r3
34187976:	46bd      	mov	sp, r7
34187978:	f85d 7b04 	ldr.w	r7, [sp], #4
3418797c:	4770      	bx	lr
3418797e:	bf00      	nop
34187980:	56028000 	.word	0x56028000

34187984 <LL_RCC_IC19_Enable>:
  * @brief  Enable IC19
  * @rmtoll DIVENSR       IC19ENS        LL_RCC_IC19_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC19_Enable(void)
{
34187984:	b480      	push	{r7}
34187986:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34187988:	4b04      	ldr	r3, [pc, #16]	@ (3418799c <LL_RCC_IC19_Enable+0x18>)
3418798a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
3418798e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187992:	bf00      	nop
34187994:	46bd      	mov	sp, r7
34187996:	f85d 7b04 	ldr.w	r7, [sp], #4
3418799a:	4770      	bx	lr
3418799c:	56028000 	.word	0x56028000

341879a0 <LL_RCC_IC19_IsEnabled>:
  * @brief  Check if IC19 is enabled
  * @rmtoll DIVENR       IC19EN         LL_RCC_IC19_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_IsEnabled(void)
{
341879a0:	b480      	push	{r7}
341879a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
341879a4:	4b07      	ldr	r3, [pc, #28]	@ (341879c4 <LL_RCC_IC19_IsEnabled+0x24>)
341879a6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
341879aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
341879ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
341879b2:	d101      	bne.n	341879b8 <LL_RCC_IC19_IsEnabled+0x18>
341879b4:	2301      	movs	r3, #1
341879b6:	e000      	b.n	341879ba <LL_RCC_IC19_IsEnabled+0x1a>
341879b8:	2300      	movs	r3, #0
}
341879ba:	4618      	mov	r0, r3
341879bc:	46bd      	mov	sp, r7
341879be:	f85d 7b04 	ldr.w	r7, [sp], #4
341879c2:	4770      	bx	lr
341879c4:	56028000 	.word	0x56028000

341879c8 <LL_RCC_IC19_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetSource(void)
{
341879c8:	b480      	push	{r7}
341879ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
341879cc:	4b04      	ldr	r3, [pc, #16]	@ (341879e0 <LL_RCC_IC19_GetSource+0x18>)
341879ce:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
341879d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341879d6:	4618      	mov	r0, r3
341879d8:	46bd      	mov	sp, r7
341879da:	f85d 7b04 	ldr.w	r7, [sp], #4
341879de:	4770      	bx	lr
341879e0:	56028000 	.word	0x56028000

341879e4 <LL_RCC_IC19_GetDivider>:
  * @brief  Get IC19 divider
  * @rmtoll IC19CFGR      IC19INT        LL_RCC_IC19_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetDivider(void)
{
341879e4:	b480      	push	{r7}
341879e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
341879e8:	4b05      	ldr	r3, [pc, #20]	@ (34187a00 <LL_RCC_IC19_GetDivider+0x1c>)
341879ea:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
341879ee:	0c1b      	lsrs	r3, r3, #16
341879f0:	b2db      	uxtb	r3, r3
341879f2:	3301      	adds	r3, #1
}
341879f4:	4618      	mov	r0, r3
341879f6:	46bd      	mov	sp, r7
341879f8:	f85d 7b04 	ldr.w	r7, [sp], #4
341879fc:	4770      	bx	lr
341879fe:	bf00      	nop
34187a00:	56028000 	.word	0x56028000

34187a04 <LL_RCC_IC20_Enable>:
  * @brief  Enable IC20
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
34187a04:	b480      	push	{r7}
34187a06:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34187a08:	4b04      	ldr	r3, [pc, #16]	@ (34187a1c <LL_RCC_IC20_Enable+0x18>)
34187a0a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
34187a0e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187a12:	bf00      	nop
34187a14:	46bd      	mov	sp, r7
34187a16:	f85d 7b04 	ldr.w	r7, [sp], #4
34187a1a:	4770      	bx	lr
34187a1c:	56028000 	.word	0x56028000

34187a20 <LL_RCC_IC20_IsEnabled>:
  * @brief  Check if IC20 is enabled
  * @rmtoll DIVENR       IC20EN         LL_RCC_IC20_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_IsEnabled(void)
{
34187a20:	b480      	push	{r7}
34187a22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34187a24:	4b07      	ldr	r3, [pc, #28]	@ (34187a44 <LL_RCC_IC20_IsEnabled+0x24>)
34187a26:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34187a2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
34187a2e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
34187a32:	d101      	bne.n	34187a38 <LL_RCC_IC20_IsEnabled+0x18>
34187a34:	2301      	movs	r3, #1
34187a36:	e000      	b.n	34187a3a <LL_RCC_IC20_IsEnabled+0x1a>
34187a38:	2300      	movs	r3, #0
}
34187a3a:	4618      	mov	r0, r3
34187a3c:	46bd      	mov	sp, r7
34187a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187a42:	4770      	bx	lr
34187a44:	56028000 	.word	0x56028000

34187a48 <LL_RCC_IC20_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetSource(void)
{
34187a48:	b480      	push	{r7}
34187a4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34187a4c:	4b04      	ldr	r3, [pc, #16]	@ (34187a60 <LL_RCC_IC20_GetSource+0x18>)
34187a4e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34187a52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34187a56:	4618      	mov	r0, r3
34187a58:	46bd      	mov	sp, r7
34187a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
34187a5e:	4770      	bx	lr
34187a60:	56028000 	.word	0x56028000

34187a64 <LL_RCC_IC20_GetDivider>:
  * @brief  Get IC20 divider
  * @rmtoll IC20CFGR      IC20INT        LL_RCC_IC20_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetDivider(void)
{
34187a64:	b480      	push	{r7}
34187a66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34187a68:	4b05      	ldr	r3, [pc, #20]	@ (34187a80 <LL_RCC_IC20_GetDivider+0x1c>)
34187a6a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34187a6e:	0c1b      	lsrs	r3, r3, #16
34187a70:	b2db      	uxtb	r3, r3
34187a72:	3301      	adds	r3, #1
}
34187a74:	4618      	mov	r0, r3
34187a76:	46bd      	mov	sp, r7
34187a78:	f85d 7b04 	ldr.w	r7, [sp], #4
34187a7c:	4770      	bx	lr
34187a7e:	bf00      	nop
34187a80:	56028000 	.word	0x56028000

34187a84 <LL_RCC_CLKP_Enable>:
  * @brief  Enable CLKP
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
34187a84:	b480      	push	{r7}
34187a86:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34187a88:	4b04      	ldr	r3, [pc, #16]	@ (34187a9c <LL_RCC_CLKP_Enable+0x18>)
34187a8a:	2240      	movs	r2, #64	@ 0x40
34187a8c:	f8c3 2a48 	str.w	r2, [r3, #2632]	@ 0xa48
}
34187a90:	bf00      	nop
34187a92:	46bd      	mov	sp, r7
34187a94:	f85d 7b04 	ldr.w	r7, [sp], #4
34187a98:	4770      	bx	lr
34187a9a:	bf00      	nop
34187a9c:	56028000 	.word	0x56028000

34187aa0 <LL_RCC_CLKP_IsEnabled>:
  * @brief  Check if CLKP is enabled
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
34187aa0:	b480      	push	{r7}
34187aa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
34187aa4:	4b07      	ldr	r3, [pc, #28]	@ (34187ac4 <LL_RCC_CLKP_IsEnabled+0x24>)
34187aa6:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
34187aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34187aae:	2b40      	cmp	r3, #64	@ 0x40
34187ab0:	d101      	bne.n	34187ab6 <LL_RCC_CLKP_IsEnabled+0x16>
34187ab2:	2301      	movs	r3, #1
34187ab4:	e000      	b.n	34187ab8 <LL_RCC_CLKP_IsEnabled+0x18>
34187ab6:	2300      	movs	r3, #0
}
34187ab8:	4618      	mov	r0, r3
34187aba:	46bd      	mov	sp, r7
34187abc:	f85d 7b04 	ldr.w	r7, [sp], #4
34187ac0:	4770      	bx	lr
34187ac2:	bf00      	nop
34187ac4:	56028000 	.word	0x56028000

34187ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         modification indeed impacts all peripherals using this ICx as clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
34187ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
34187acc:	b0f2      	sub	sp, #456	@ 0x1c8
34187ace:	af00      	add	r7, sp, #0
34187ad0:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
34187ad4:	2300      	movs	r3, #0
34187ad6:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
34187ada:	2300      	movs	r3, #0
34187adc:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
34187ae0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
34187ae8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
34187aec:	2500      	movs	r5, #0
34187aee:	ea54 0305 	orrs.w	r3, r4, r5
34187af2:	d06c      	beq.n	34187bce <HAL_RCCEx_PeriphCLKConfig+0x106>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = LL_RCC_GetRTCClockSource();
34187af4:	f7ff f91e 	bl	34186d34 <LL_RCC_GetRTCClockSource>
34187af8:	f8c7 01c0 	str.w	r0, [r7, #448]	@ 0x1c0

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
34187afc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
34187b00:	2b00      	cmp	r3, #0
34187b02:	d018      	beq.n	34187b36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
34187b04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187b08:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34187b0c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
34187b10:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
34187b14:	4293      	cmp	r3, r2
34187b16:	d00e      	beq.n	34187b36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
34187b18:	4bc3      	ldr	r3, [pc, #780]	@ (34187e28 <HAL_RCCEx_PeriphCLKConfig+0x360>)
34187b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34187b1c:	4ac2      	ldr	r2, [pc, #776]	@ (34187e28 <HAL_RCCEx_PeriphCLKConfig+0x360>)
34187b1e:	f043 0301 	orr.w	r3, r3, #1
34187b22:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
34187b24:	4bc0      	ldr	r3, [pc, #768]	@ (34187e28 <HAL_RCCEx_PeriphCLKConfig+0x360>)
34187b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34187b28:	f003 0301 	and.w	r3, r3, #1
34187b2c:	2b00      	cmp	r3, #0
34187b2e:	d102      	bne.n	34187b36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      {
        ret = HAL_ERROR;
34187b30:	2301      	movs	r3, #1
34187b32:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
        WRITE_REG(RCC->BDCR, tmpreg);
#endif /* #if 0  TO DO */
      }
    }

    if (ret == HAL_OK)
34187b36:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34187b3a:	2b00      	cmp	r3, #0
34187b3c:	d143      	bne.n	34187bc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
34187b3e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187b42:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34187b46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34187b4a:	d117      	bne.n	34187b7c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34187b4c:	f7fa fe50 	bl	341827f0 <HAL_GetTick>
34187b50:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() == 0U)
34187b54:	e00d      	b.n	34187b72 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34187b56:	f7fa fe4b 	bl	341827f0 <HAL_GetTick>
34187b5a:	4602      	mov	r2, r0
34187b5c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
34187b60:	1ad2      	subs	r2, r2, r3
34187b62:	f241 3388 	movw	r3, #5000	@ 0x1388
34187b66:	429a      	cmp	r2, r3
34187b68:	d903      	bls.n	34187b72 <HAL_RCCEx_PeriphCLKConfig+0xaa>
          {
            ret = HAL_TIMEOUT;
34187b6a:	2303      	movs	r3, #3
34187b6c:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
            break;
34187b70:	e004      	b.n	34187b7c <HAL_RCCEx_PeriphCLKConfig+0xb4>
        while (LL_RCC_LSE_IsReady() == 0U)
34187b72:	f7fe fcf1 	bl	34186558 <LL_RCC_LSE_IsReady>
34187b76:	4603      	mov	r3, r0
34187b78:	2b00      	cmp	r3, #0
34187b7a:	d0ec      	beq.n	34187b56 <HAL_RCCEx_PeriphCLKConfig+0x8e>
          }
        }
      }

      if (ret == HAL_OK)
34187b7c:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34187b80:	2b00      	cmp	r3, #0
34187b82:	d11b      	bne.n	34187bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
34187b84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187b88:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34187b8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
34187b90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34187b94:	d108      	bne.n	34187ba8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
34187b96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187b9a:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34187b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34187ba2:	4618      	mov	r0, r3
34187ba4:	f7ff f8d4 	bl	34186d50 <LL_RCC_SetRTC_HSEPrescaler>
34187ba8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187bac:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34187bb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
34187bb4:	4618      	mov	r0, r3
34187bb6:	f7ff f8a7 	bl	34186d08 <LL_RCC_SetRTCClockSource>
34187bba:	e008      	b.n	34187bce <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
      else
      {
        /* set overall return value */
        status = ret;
34187bbc:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34187bc0:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
34187bc4:	e003      	b.n	34187bce <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
34187bc6:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34187bca:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
34187bce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
34187bd6:	f002 0804 	and.w	r8, r2, #4
34187bda:	f04f 0900 	mov.w	r9, #0
34187bde:	ea58 0309 	orrs.w	r3, r8, r9
34187be2:	f000 809b 	beq.w	34187d1c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
34187be6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187bea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34187bee:	2b04      	cmp	r3, #4
34187bf0:	d116      	bne.n	34187c20 <HAL_RCCEx_PeriphCLKConfig+0x158>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34187bf2:	4b8e      	ldr	r3, [pc, #568]	@ (34187e2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187bf4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34187bf8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187bfc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187c00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34187c06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34187c0c:	3b01      	subs	r3, #1
34187c0e:	041b      	lsls	r3, r3, #16
34187c10:	4313      	orrs	r3, r2
34187c12:	4a86      	ldr	r2, [pc, #536]	@ (34187e2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187c14:	430b      	orrs	r3, r1
34187c16:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34187c1a:	f7ff fbb3 	bl	34187384 <LL_RCC_IC5_Enable>
34187c1e:	e076      	b.n	34187d0e <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
34187c20:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34187c28:	2b05      	cmp	r3, #5
34187c2a:	d116      	bne.n	34187c5a <HAL_RCCEx_PeriphCLKConfig+0x192>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34187c2c:	4b7f      	ldr	r3, [pc, #508]	@ (34187e2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187c2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34187c32:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187c36:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187c3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34187c40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34187c46:	3b01      	subs	r3, #1
34187c48:	041b      	lsls	r3, r3, #16
34187c4a:	4313      	orrs	r3, r2
34187c4c:	4a77      	ldr	r2, [pc, #476]	@ (34187e2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187c4e:	430b      	orrs	r3, r1
34187c50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34187c54:	f7ff fc96 	bl	34187584 <LL_RCC_IC10_Enable>
34187c58:	e059      	b.n	34187d0e <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC15)
34187c5a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34187c62:	2b06      	cmp	r3, #6
34187c64:	d116      	bne.n	34187c94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34187c66:	4b71      	ldr	r3, [pc, #452]	@ (34187e2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187c68:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34187c6c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187c70:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187c74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c78:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34187c7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34187c80:	3b01      	subs	r3, #1
34187c82:	041b      	lsls	r3, r3, #16
34187c84:	4313      	orrs	r3, r2
34187c86:	4a69      	ldr	r2, [pc, #420]	@ (34187e2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187c88:	430b      	orrs	r3, r1
34187c8a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34187c8e:	f7ff fd79 	bl	34187784 <LL_RCC_IC15_Enable>
34187c92:	e03c      	b.n	34187d0e <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC19)
34187c94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34187c9c:	2b03      	cmp	r3, #3
34187c9e:	d118      	bne.n	34187cd2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34187ca0:	4b62      	ldr	r3, [pc, #392]	@ (34187e2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187ca2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34187ca6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187caa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187cae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187cb2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
34187cb6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
34187cbe:	3b01      	subs	r3, #1
34187cc0:	041b      	lsls	r3, r3, #16
34187cc2:	4313      	orrs	r3, r2
34187cc4:	4a59      	ldr	r2, [pc, #356]	@ (34187e2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187cc6:	430b      	orrs	r3, r1
34187cc8:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
34187ccc:	f7ff fe5a 	bl	34187984 <LL_RCC_IC19_Enable>
34187cd0:	e01d      	b.n	34187d0e <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC20)
34187cd2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187cd6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34187cda:	2b07      	cmp	r3, #7
34187cdc:	d117      	bne.n	34187d0e <HAL_RCCEx_PeriphCLKConfig+0x246>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34187cde:	4b53      	ldr	r3, [pc, #332]	@ (34187e2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187ce0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34187ce4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187ce8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187cec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187cf0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34187cf4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187cf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34187cfc:	3b01      	subs	r3, #1
34187cfe:	041b      	lsls	r3, r3, #16
34187d00:	4313      	orrs	r3, r2
34187d02:	4a4a      	ldr	r2, [pc, #296]	@ (34187e2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187d04:	430b      	orrs	r3, r1
34187d06:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
34187d0a:	f7ff fe7b 	bl	34187a04 <LL_RCC_IC20_Enable>
    {
      /* No ICx selected as source */
    }

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
34187d0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34187d16:	4618      	mov	r0, r3
34187d18:	f7fe fcd2 	bl	341866c0 <LL_RCC_SetCLKPClockSource>
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
34187d1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d20:	e9d3 2300 	ldrd	r2, r3, [r3]
34187d24:	f04f 0a00 	mov.w	sl, #0
34187d28:	f403 0b80 	and.w	fp, r3, #4194304	@ 0x400000
34187d2c:	ea5a 030b 	orrs.w	r3, sl, fp
34187d30:	d04b      	beq.n	34187dca <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
34187d32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d36:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34187d3a:	4b3d      	ldr	r3, [pc, #244]	@ (34187e30 <HAL_RCCEx_PeriphCLKConfig+0x368>)
34187d3c:	429a      	cmp	r2, r3
34187d3e:	d116      	bne.n	34187d6e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34187d40:	4b3a      	ldr	r3, [pc, #232]	@ (34187e2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187d42:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34187d46:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187d4a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187d4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d52:	699a      	ldr	r2, [r3, #24]
34187d54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d58:	69db      	ldr	r3, [r3, #28]
34187d5a:	3b01      	subs	r3, #1
34187d5c:	041b      	lsls	r3, r3, #16
34187d5e:	4313      	orrs	r3, r2
34187d60:	4a32      	ldr	r2, [pc, #200]	@ (34187e2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187d62:	430b      	orrs	r3, r1
34187d64:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34187d68:	f7ff fa8c 	bl	34187284 <LL_RCC_IC3_Enable>
34187d6c:	e026      	b.n	34187dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
34187d6e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d72:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34187d76:	4b2f      	ldr	r3, [pc, #188]	@ (34187e34 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
34187d78:	429a      	cmp	r2, r3
34187d7a:	d116      	bne.n	34187daa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34187d7c:	4b2b      	ldr	r3, [pc, #172]	@ (34187e2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187d7e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34187d82:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187d86:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187d8a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d8e:	6a1a      	ldr	r2, [r3, #32]
34187d90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34187d96:	3b01      	subs	r3, #1
34187d98:	041b      	lsls	r3, r3, #16
34187d9a:	4313      	orrs	r3, r2
34187d9c:	4a23      	ldr	r2, [pc, #140]	@ (34187e2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187d9e:	430b      	orrs	r3, r1
34187da0:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34187da4:	f7ff faae 	bl	34187304 <LL_RCC_IC4_Enable>
34187da8:	e008      	b.n	34187dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
34187daa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187dae:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34187db2:	4b21      	ldr	r3, [pc, #132]	@ (34187e38 <HAL_RCCEx_PeriphCLKConfig+0x370>)
34187db4:	429a      	cmp	r2, r3
34187db6:	d101      	bne.n	34187dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      LL_RCC_CLKP_Enable();
34187db8:	f7ff fe64 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI1 clock source */
    __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
34187dbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187dc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
34187dc4:	4618      	mov	r0, r3
34187dc6:	f7fe fe0b 	bl	341869e0 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
34187dca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187dce:	e9d3 2300 	ldrd	r2, r3, [r3]
34187dd2:	2100      	movs	r1, #0
34187dd4:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
34187dd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
34187ddc:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
34187de0:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
34187de4:	4603      	mov	r3, r0
34187de6:	460a      	mov	r2, r1
34187de8:	4313      	orrs	r3, r2
34187dea:	d057      	beq.n	34187e9c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
34187dec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187df0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34187df4:	4b11      	ldr	r3, [pc, #68]	@ (34187e3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
34187df6:	429a      	cmp	r2, r3
34187df8:	d122      	bne.n	34187e40 <HAL_RCCEx_PeriphCLKConfig+0x378>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34187dfa:	4b0c      	ldr	r3, [pc, #48]	@ (34187e2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187dfc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34187e00:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187e04:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187e08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e0c:	699a      	ldr	r2, [r3, #24]
34187e0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e12:	69db      	ldr	r3, [r3, #28]
34187e14:	3b01      	subs	r3, #1
34187e16:	041b      	lsls	r3, r3, #16
34187e18:	4313      	orrs	r3, r2
34187e1a:	4a04      	ldr	r2, [pc, #16]	@ (34187e2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187e1c:	430b      	orrs	r3, r1
34187e1e:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34187e22:	f7ff fa2f 	bl	34187284 <LL_RCC_IC3_Enable>
34187e26:	e032      	b.n	34187e8e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
34187e28:	56024800 	.word	0x56024800
34187e2c:	56028000 	.word	0x56028000
34187e30:	03020014 	.word	0x03020014
34187e34:	03030014 	.word	0x03030014
34187e38:	03010014 	.word	0x03010014
34187e3c:	03020414 	.word	0x03020414
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
34187e40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e44:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34187e48:	4bc5      	ldr	r3, [pc, #788]	@ (34188160 <HAL_RCCEx_PeriphCLKConfig+0x698>)
34187e4a:	429a      	cmp	r2, r3
34187e4c:	d116      	bne.n	34187e7c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34187e4e:	4bc5      	ldr	r3, [pc, #788]	@ (34188164 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34187e50:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34187e54:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187e58:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187e5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e60:	6a1a      	ldr	r2, [r3, #32]
34187e62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34187e68:	3b01      	subs	r3, #1
34187e6a:	041b      	lsls	r3, r3, #16
34187e6c:	4313      	orrs	r3, r2
34187e6e:	4abd      	ldr	r2, [pc, #756]	@ (34188164 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34187e70:	430b      	orrs	r3, r1
34187e72:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34187e76:	f7ff fa45 	bl	34187304 <LL_RCC_IC4_Enable>
34187e7a:	e008      	b.n	34187e8e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
34187e7c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e80:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34187e84:	4bb8      	ldr	r3, [pc, #736]	@ (34188168 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
34187e86:	429a      	cmp	r2, r3
34187e88:	d101      	bne.n	34187e8e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    {
      LL_RCC_CLKP_Enable();
34187e8a:	f7ff fdfb 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI2 clock source */
    __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
34187e8e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34187e96:	4618      	mov	r0, r3
34187e98:	f7fe fda2 	bl	341869e0 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI3 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
34187e9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
34187ea4:	2100      	movs	r1, #0
34187ea6:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
34187eaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34187eae:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
34187eb2:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
34187eb6:	4603      	mov	r3, r0
34187eb8:	460a      	mov	r2, r1
34187eba:	4313      	orrs	r3, r2
34187ebc:	d04b      	beq.n	34187f56 <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));

    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
34187ebe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ec2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34187ec6:	4ba9      	ldr	r3, [pc, #676]	@ (3418816c <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
34187ec8:	429a      	cmp	r2, r3
34187eca:	d116      	bne.n	34187efa <HAL_RCCEx_PeriphCLKConfig+0x432>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34187ecc:	4ba5      	ldr	r3, [pc, #660]	@ (34188164 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34187ece:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34187ed2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187ed6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187eda:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ede:	699a      	ldr	r2, [r3, #24]
34187ee0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ee4:	69db      	ldr	r3, [r3, #28]
34187ee6:	3b01      	subs	r3, #1
34187ee8:	041b      	lsls	r3, r3, #16
34187eea:	4313      	orrs	r3, r2
34187eec:	4a9d      	ldr	r2, [pc, #628]	@ (34188164 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34187eee:	430b      	orrs	r3, r1
34187ef0:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34187ef4:	f7ff f9c6 	bl	34187284 <LL_RCC_IC3_Enable>
34187ef8:	e026      	b.n	34187f48 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
34187efa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187efe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34187f02:	4b9b      	ldr	r3, [pc, #620]	@ (34188170 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
34187f04:	429a      	cmp	r2, r3
34187f06:	d116      	bne.n	34187f36 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34187f08:	4b96      	ldr	r3, [pc, #600]	@ (34188164 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34187f0a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34187f0e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187f12:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187f16:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f1a:	6a1a      	ldr	r2, [r3, #32]
34187f1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34187f22:	3b01      	subs	r3, #1
34187f24:	041b      	lsls	r3, r3, #16
34187f26:	4313      	orrs	r3, r2
34187f28:	4a8e      	ldr	r2, [pc, #568]	@ (34188164 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34187f2a:	430b      	orrs	r3, r1
34187f2c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34187f30:	f7ff f9e8 	bl	34187304 <LL_RCC_IC4_Enable>
34187f34:	e008      	b.n	34187f48 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
34187f36:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f3a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34187f3e:	4b8d      	ldr	r3, [pc, #564]	@ (34188174 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
34187f40:	429a      	cmp	r2, r3
34187f42:	d101      	bne.n	34187f48 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      LL_RCC_CLKP_Enable();
34187f44:	f7ff fd9e 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI3 clock source */
    __HAL_RCC_XSPI3_CONFIG(PeriphClkInit->Xspi3ClockSelection);
34187f48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34187f50:	4618      	mov	r0, r3
34187f52:	f7fe fd45 	bl	341869e0 <LL_RCC_SetXSPIClockSource>
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
34187f56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
34187f5e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
34187f62:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
34187f66:	2300      	movs	r3, #0
34187f68:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
34187f6c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
34187f70:	4603      	mov	r3, r0
34187f72:	460a      	mov	r2, r1
34187f74:	4313      	orrs	r3, r2
34187f76:	d048      	beq.n	3418800a <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
34187f78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34187f80:	2b20      	cmp	r3, #32
34187f82:	d116      	bne.n	34187fb2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34187f84:	4b77      	ldr	r3, [pc, #476]	@ (34188164 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34187f86:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34187f8a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187f8e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187f92:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f96:	699a      	ldr	r2, [r3, #24]
34187f98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f9c:	69db      	ldr	r3, [r3, #28]
34187f9e:	3b01      	subs	r3, #1
34187fa0:	041b      	lsls	r3, r3, #16
34187fa2:	4313      	orrs	r3, r2
34187fa4:	4a6f      	ldr	r2, [pc, #444]	@ (34188164 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34187fa6:	430b      	orrs	r3, r1
34187fa8:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34187fac:	f7ff f96a 	bl	34187284 <LL_RCC_IC3_Enable>
34187fb0:	e024      	b.n	34187ffc <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
34187fb2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187fb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34187fba:	2b30      	cmp	r3, #48	@ 0x30
34187fbc:	d116      	bne.n	34187fec <HAL_RCCEx_PeriphCLKConfig+0x524>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34187fbe:	4b69      	ldr	r3, [pc, #420]	@ (34188164 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34187fc0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34187fc4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187fc8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187fcc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187fd0:	6a1a      	ldr	r2, [r3, #32]
34187fd2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34187fd8:	3b01      	subs	r3, #1
34187fda:	041b      	lsls	r3, r3, #16
34187fdc:	4313      	orrs	r3, r2
34187fde:	4a61      	ldr	r2, [pc, #388]	@ (34188164 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34187fe0:	430b      	orrs	r3, r1
34187fe2:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34187fe6:	f7ff f98d 	bl	34187304 <LL_RCC_IC4_Enable>
34187fea:	e007      	b.n	34187ffc <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
34187fec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ff0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34187ff4:	2b10      	cmp	r3, #16
34187ff6:	d101      	bne.n	34187ffc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      LL_RCC_CLKP_Enable();
34187ff8:	f7ff fd44 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FMC kernel clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
34187ffc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188000:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34188004:	4618      	mov	r0, r3
34188006:	f7fe fc03 	bl	34186810 <LL_RCC_SetFMCClockSource>
  }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
3418800a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418800e:	e9d3 2300 	ldrd	r2, r3, [r3]
34188012:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
34188016:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
3418801a:	2300      	movs	r3, #0
3418801c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
34188020:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
34188024:	4603      	mov	r3, r0
34188026:	460a      	mov	r2, r1
34188028:	4313      	orrs	r3, r2
3418802a:	d04b      	beq.n	341880c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
3418802c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188030:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34188034:	4b50      	ldr	r3, [pc, #320]	@ (34188178 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
34188036:	429a      	cmp	r2, r3
34188038:	d116      	bne.n	34188068 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3418803a:	4b4a      	ldr	r3, [pc, #296]	@ (34188164 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418803c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34188040:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188044:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188048:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418804c:	6a1a      	ldr	r2, [r3, #32]
3418804e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188054:	3b01      	subs	r3, #1
34188056:	041b      	lsls	r3, r3, #16
34188058:	4313      	orrs	r3, r2
3418805a:	4a42      	ldr	r2, [pc, #264]	@ (34188164 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418805c:	430b      	orrs	r3, r1
3418805e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34188062:	f7ff f94f 	bl	34187304 <LL_RCC_IC4_Enable>
34188066:	e026      	b.n	341880b6 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
34188068:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418806c:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34188070:	4b42      	ldr	r3, [pc, #264]	@ (3418817c <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
34188072:	429a      	cmp	r2, r3
34188074:	d116      	bne.n	341880a4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34188076:	4b3b      	ldr	r3, [pc, #236]	@ (34188164 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34188078:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418807c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188080:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188084:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188088:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418808a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418808e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34188090:	3b01      	subs	r3, #1
34188092:	041b      	lsls	r3, r3, #16
34188094:	4313      	orrs	r3, r2
34188096:	4a33      	ldr	r2, [pc, #204]	@ (34188164 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34188098:	430b      	orrs	r3, r1
3418809a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3418809e:	f7ff f971 	bl	34187384 <LL_RCC_IC5_Enable>
341880a2:	e008      	b.n	341880b6 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
341880a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341880a8:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
341880ac:	4b34      	ldr	r3, [pc, #208]	@ (34188180 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
341880ae:	429a      	cmp	r2, r3
341880b0:	d101      	bne.n	341880b6 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    {
      LL_RCC_CLKP_Enable();
341880b2:	f7ff fce7 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC1 clock*/
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
341880b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341880ba:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
341880be:	4618      	mov	r0, r3
341880c0:	f7fe fc57 	bl	34186972 <LL_RCC_SetSDMMCClockSource>
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
341880c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341880c8:	e9d3 2300 	ldrd	r2, r3, [r3]
341880cc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
341880d0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
341880d4:	2300      	movs	r3, #0
341880d6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
341880da:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
341880de:	4603      	mov	r3, r0
341880e0:	460a      	mov	r2, r1
341880e2:	4313      	orrs	r3, r2
341880e4:	d062      	beq.n	341881ac <HAL_RCCEx_PeriphCLKConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
341880e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341880ea:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
341880ee:	4b25      	ldr	r3, [pc, #148]	@ (34188184 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
341880f0:	429a      	cmp	r2, r3
341880f2:	d116      	bne.n	34188122 <HAL_RCCEx_PeriphCLKConfig+0x65a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
341880f4:	4b1b      	ldr	r3, [pc, #108]	@ (34188164 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341880f6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341880fa:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341880fe:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188102:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188106:	6a1a      	ldr	r2, [r3, #32]
34188108:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418810c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418810e:	3b01      	subs	r3, #1
34188110:	041b      	lsls	r3, r3, #16
34188112:	4313      	orrs	r3, r2
34188114:	4a13      	ldr	r2, [pc, #76]	@ (34188164 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34188116:	430b      	orrs	r3, r1
34188118:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418811c:	f7ff f8f2 	bl	34187304 <LL_RCC_IC4_Enable>
34188120:	e03d      	b.n	3418819e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
34188122:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188126:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3418812a:	4b17      	ldr	r3, [pc, #92]	@ (34188188 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
3418812c:	429a      	cmp	r2, r3
3418812e:	d12d      	bne.n	3418818c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34188130:	4b0c      	ldr	r3, [pc, #48]	@ (34188164 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34188132:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34188136:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418813a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418813e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188142:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34188144:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418814a:	3b01      	subs	r3, #1
3418814c:	041b      	lsls	r3, r3, #16
3418814e:	4313      	orrs	r3, r2
34188150:	4a04      	ldr	r2, [pc, #16]	@ (34188164 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34188152:	430b      	orrs	r3, r1
34188154:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34188158:	f7ff f914 	bl	34187384 <LL_RCC_IC5_Enable>
3418815c:	e01f      	b.n	3418819e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
3418815e:	bf00      	nop
34188160:	03030414 	.word	0x03030414
34188164:	56028000 	.word	0x56028000
34188168:	03010414 	.word	0x03010414
3418816c:	03020814 	.word	0x03020814
34188170:	03030814 	.word	0x03030814
34188174:	03010814 	.word	0x03010814
34188178:	0302001c 	.word	0x0302001c
3418817c:	0303001c 	.word	0x0303001c
34188180:	0301001c 	.word	0x0301001c
34188184:	0302041c 	.word	0x0302041c
34188188:	0303041c 	.word	0x0303041c
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
3418818c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188190:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34188194:	4bb3      	ldr	r3, [pc, #716]	@ (34188464 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
34188196:	429a      	cmp	r2, r3
34188198:	d101      	bne.n	3418819e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      LL_RCC_CLKP_Enable();
3418819a:	f7ff fc73 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC2 clock*/
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
3418819e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341881a2:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
341881a6:	4618      	mov	r0, r3
341881a8:	f7fe fbe3 	bl	34186972 <LL_RCC_SetSDMMCClockSource>
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
341881ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341881b0:	e9d3 2300 	ldrd	r2, r3, [r3]
341881b4:	f002 0301 	and.w	r3, r2, #1
341881b8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
341881bc:	2300      	movs	r3, #0
341881be:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
341881c2:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
341881c6:	4603      	mov	r3, r0
341881c8:	460a      	mov	r2, r1
341881ca:	4313      	orrs	r3, r2
341881cc:	d057      	beq.n	3418827e <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
341881ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341881d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
341881d6:	2b20      	cmp	r3, #32
341881d8:	d116      	bne.n	34188208 <HAL_RCCEx_PeriphCLKConfig+0x740>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341881da:	4ba3      	ldr	r3, [pc, #652]	@ (34188468 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341881dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341881e0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341881e4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341881e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341881ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341881ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341881f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341881f4:	3b01      	subs	r3, #1
341881f6:	041b      	lsls	r3, r3, #16
341881f8:	4313      	orrs	r3, r2
341881fa:	4a9b      	ldr	r2, [pc, #620]	@ (34188468 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341881fc:	430b      	orrs	r3, r1
341881fe:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34188202:	f7ff f8ff 	bl	34187404 <LL_RCC_IC7_Enable>
34188206:	e024      	b.n	34188252 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
34188208:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418820c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34188210:	2b30      	cmp	r3, #48	@ 0x30
34188212:	d116      	bne.n	34188242 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34188214:	4b94      	ldr	r3, [pc, #592]	@ (34188468 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34188216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418821a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418821e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188222:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188226:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34188228:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418822c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418822e:	3b01      	subs	r3, #1
34188230:	041b      	lsls	r3, r3, #16
34188232:	4313      	orrs	r3, r2
34188234:	4a8c      	ldr	r2, [pc, #560]	@ (34188468 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34188236:	430b      	orrs	r3, r1
34188238:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418823c:	f7ff f922 	bl	34187484 <LL_RCC_IC8_Enable>
34188240:	e007      	b.n	34188252 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
34188242:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188246:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3418824a:	2b10      	cmp	r3, #16
3418824c:	d101      	bne.n	34188252 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      LL_RCC_CLKP_Enable();
3418824e:	f7ff fc19 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ADC clock source and divider */
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
34188252:	4b85      	ldr	r3, [pc, #532]	@ (34188468 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34188254:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34188258:	f423 417f 	bic.w	r1, r3, #65280	@ 0xff00
3418825c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
34188260:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188264:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
34188268:	3b01      	subs	r3, #1
3418826a:	021a      	lsls	r2, r3, #8
3418826c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188270:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34188274:	4313      	orrs	r3, r2
34188276:	4a7c      	ldr	r2, [pc, #496]	@ (34188468 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34188278:	430b      	orrs	r3, r1
3418827a:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
               (((PeriphClkInit->AdcDivider - 1U) << RCC_CCIPR1_ADCPRE_Pos) | (PeriphClkInit->AdcClockSelection)));
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
3418827e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188282:	e9d3 2300 	ldrd	r2, r3, [r3]
34188286:	f002 0302 	and.w	r3, r2, #2
3418828a:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
3418828e:	2300      	movs	r3, #0
34188290:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
34188294:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
34188298:	4603      	mov	r3, r0
3418829a:	460a      	mov	r2, r1
3418829c:	4313      	orrs	r3, r2
3418829e:	d048      	beq.n	34188332 <HAL_RCCEx_PeriphCLKConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
341882a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341882a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341882a8:	2b02      	cmp	r3, #2
341882aa:	d116      	bne.n	341882da <HAL_RCCEx_PeriphCLKConfig+0x812>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341882ac:	4b6e      	ldr	r3, [pc, #440]	@ (34188468 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341882ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341882b2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341882b6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341882ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341882be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341882c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341882c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341882c6:	3b01      	subs	r3, #1
341882c8:	041b      	lsls	r3, r3, #16
341882ca:	4313      	orrs	r3, r2
341882cc:	4a66      	ldr	r2, [pc, #408]	@ (34188468 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341882ce:	430b      	orrs	r3, r1
341882d0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341882d4:	f7ff f896 	bl	34187404 <LL_RCC_IC7_Enable>
341882d8:	e024      	b.n	34188324 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
341882da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341882de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341882e2:	2b03      	cmp	r3, #3
341882e4:	d116      	bne.n	34188314 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341882e6:	4b60      	ldr	r3, [pc, #384]	@ (34188468 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341882e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341882ec:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341882f0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341882f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341882f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341882fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341882fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34188300:	3b01      	subs	r3, #1
34188302:	041b      	lsls	r3, r3, #16
34188304:	4313      	orrs	r3, r2
34188306:	4a58      	ldr	r2, [pc, #352]	@ (34188468 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34188308:	430b      	orrs	r3, r1
3418830a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418830e:	f7ff f8b9 	bl	34187484 <LL_RCC_IC8_Enable>
34188312:	e007      	b.n	34188324 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
34188314:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188318:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418831c:	2b01      	cmp	r3, #1
3418831e:	d101      	bne.n	34188324 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      LL_RCC_CLKP_Enable();
34188320:	f7ff fbb0 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
34188324:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188328:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418832c:	4618      	mov	r0, r3
3418832e:	f7fe f9b1 	bl	34186694 <LL_RCC_SetADFClockSource>
  }

  /*------------------------------------ CSI configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
34188332:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188336:	e9d3 2300 	ldrd	r2, r3, [r3]
3418833a:	f002 0308 	and.w	r3, r2, #8
3418833e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
34188342:	2300      	movs	r3, #0
34188344:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
34188348:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
3418834c:	4603      	mov	r3, r0
3418834e:	460a      	mov	r2, r1
34188350:	4313      	orrs	r3, r2
34188352:	d017      	beq.n	34188384 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
    /* Check the parameters */
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));

    /* Set IC18 configuration */
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
34188354:	4b44      	ldr	r3, [pc, #272]	@ (34188468 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34188356:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3418835a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418835e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188362:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188366:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
3418836a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418836e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34188372:	3b01      	subs	r3, #1
34188374:	041b      	lsls	r3, r3, #16
34188376:	4313      	orrs	r3, r2
34188378:	4a3b      	ldr	r2, [pc, #236]	@ (34188468 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418837a:	430b      	orrs	r3, r1
3418837c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
               PeriphClkInit->ICSelection[RCC_IC18].ClockSelection | \
               ((PeriphClkInit->ICSelection[RCC_IC18].ClockDivider - 1U) << RCC_IC18CFGR_IC18INT_Pos));

    LL_RCC_IC18_Enable();
34188380:	f7ff fac0 	bl	34187904 <LL_RCC_IC18_Enable>
  }

  /*---------------------- DCMIPP configuration ------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
34188384:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188388:	e9d3 2300 	ldrd	r2, r3, [r3]
3418838c:	f002 0310 	and.w	r3, r2, #16
34188390:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
34188394:	2300      	movs	r3, #0
34188396:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
3418839a:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
3418839e:	4603      	mov	r3, r0
341883a0:	460a      	mov	r2, r1
341883a2:	4313      	orrs	r3, r2
341883a4:	d02f      	beq.n	34188406 <HAL_RCCEx_PeriphCLKConfig+0x93e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));

    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
341883a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341883aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341883ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
341883b2:	d118      	bne.n	341883e6 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));

      /* Set IC17 configuration */
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
341883b4:	4b2c      	ldr	r3, [pc, #176]	@ (34188468 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341883b6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
341883ba:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341883be:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341883c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341883c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
341883ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341883ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
341883d2:	3b01      	subs	r3, #1
341883d4:	041b      	lsls	r3, r3, #16
341883d6:	4313      	orrs	r3, r2
341883d8:	4a23      	ldr	r2, [pc, #140]	@ (34188468 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341883da:	430b      	orrs	r3, r1
341883dc:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
                 PeriphClkInit->ICSelection[RCC_IC17].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC17].ClockDivider - 1U) << RCC_IC17CFGR_IC17INT_Pos));

      LL_RCC_IC17_Enable();
341883e0:	f7ff fa50 	bl	34187884 <LL_RCC_IC17_Enable>
341883e4:	e008      	b.n	341883f8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
341883e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341883ea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341883ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
341883f2:	d101      	bne.n	341883f8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      LL_RCC_CLKP_Enable();
341883f4:	f7ff fb46 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the CEC clock source */
    __HAL_RCC_DCMIPP_CONFIG(PeriphClkInit->DcmippClockSelection);
341883f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341883fc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34188400:	4618      	mov	r0, r3
34188402:	f7fe f973 	bl	341866ec <LL_RCC_SetDCMIPPClockSource>
  }

  /*---------------------- ETH1 configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
34188406:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418840a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418840e:	f002 0320 	and.w	r3, r2, #32
34188412:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
34188416:	2300      	movs	r3, #0
34188418:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
3418841c:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
34188420:	4603      	mov	r3, r0
34188422:	460a      	mov	r2, r1
34188424:	4313      	orrs	r3, r2
34188426:	d031      	beq.n	3418848c <HAL_RCCEx_PeriphCLKConfig+0x9c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));

    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
34188428:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418842c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34188430:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34188434:	d11a      	bne.n	3418846c <HAL_RCCEx_PeriphCLKConfig+0x9a4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));

      /* Set IC12 configuration */
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
34188436:	4b0c      	ldr	r3, [pc, #48]	@ (34188468 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34188438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3418843c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188440:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188444:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188448:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
3418844a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418844e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34188450:	3b01      	subs	r3, #1
34188452:	041b      	lsls	r3, r3, #16
34188454:	4313      	orrs	r3, r2
34188456:	4a04      	ldr	r2, [pc, #16]	@ (34188468 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34188458:	430b      	orrs	r3, r1
3418845a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
                 PeriphClkInit->ICSelection[RCC_IC12].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC12].ClockDivider - 1U) << RCC_IC12CFGR_IC12INT_Pos));

      LL_RCC_IC12_Enable();
3418845e:	f7ff f8d1 	bl	34187604 <LL_RCC_IC12_Enable>
34188462:	e00c      	b.n	3418847e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
34188464:	0301041c 	.word	0x0301041c
34188468:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
3418846c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188470:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34188474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34188478:	d101      	bne.n	3418847e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      LL_RCC_CLKP_Enable();
3418847a:	f7ff fb03 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 clock source */
    __HAL_RCC_ETH1_CONFIG(PeriphClkInit->Eth1ClockSelection);
3418847e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188482:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34188486:	4618      	mov	r0, r3
34188488:	f7fe f946 	bl	34186718 <LL_RCC_SetETHClockSource>
  }

  /*---------------------- ETH1PHY configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
3418848c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188490:	e9d3 2300 	ldrd	r2, r3, [r3]
34188494:	f002 0340 	and.w	r3, r2, #64	@ 0x40
34188498:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
3418849c:	2300      	movs	r3, #0
3418849e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
341884a2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
341884a6:	4603      	mov	r3, r0
341884a8:	460a      	mov	r2, r1
341884aa:	4313      	orrs	r3, r2
341884ac:	d006      	beq.n	341884bc <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));

    /* Configure the source of ETH1 PHY interface */
    __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyInterfaceSelection);
341884ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341884b2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341884b6:	4618      	mov	r0, r3
341884b8:	f7fe f944 	bl	34186744 <LL_RCC_SetETHPHYInterface>
  }

  /*---------------------- ETH1 RX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
341884bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341884c0:	e9d3 2300 	ldrd	r2, r3, [r3]
341884c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
341884c8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
341884cc:	2300      	movs	r3, #0
341884ce:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
341884d2:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
341884d6:	4603      	mov	r3, r0
341884d8:	460a      	mov	r2, r1
341884da:	4313      	orrs	r3, r2
341884dc:	d006      	beq.n	341884ec <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));

    /* Configure the ETH1 RX clock source */
    __HAL_RCC_ETH1RX_CONFIG(PeriphClkInit->Eth1RxClockSelection);
341884de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341884e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
341884e6:	4618      	mov	r0, r3
341884e8:	f7fe f950 	bl	3418678c <LL_RCC_SetETHREFRXClockSource>
  }

  /*---------------------- ETH1 TX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
341884ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341884f0:	e9d3 2300 	ldrd	r2, r3, [r3]
341884f4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
341884f8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
341884fc:	2300      	movs	r3, #0
341884fe:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
34188502:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
34188506:	4603      	mov	r3, r0
34188508:	460a      	mov	r2, r1
3418850a:	4313      	orrs	r3, r2
3418850c:	d006      	beq.n	3418851c <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));

    /* Configure the ETH1 TX clock source */
    __HAL_RCC_ETH1TX_CONFIG(PeriphClkInit->Eth1TxClockSelection);
3418850e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188512:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
34188516:	4618      	mov	r0, r3
34188518:	f7fe f94e 	bl	341867b8 <LL_RCC_SetETHREFTXClockSource>
  }

  /*---------------------- ETH1 PTP configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
3418851c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188520:	e9d3 2300 	ldrd	r2, r3, [r3]
34188524:	f402 7300 	and.w	r3, r2, #512	@ 0x200
34188528:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
3418852c:	2300      	movs	r3, #0
3418852e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
34188532:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
34188536:	4603      	mov	r3, r0
34188538:	460a      	mov	r2, r1
3418853a:	4313      	orrs	r3, r2
3418853c:	d038      	beq.n	341885b0 <HAL_RCCEx_PeriphCLKConfig+0xae8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));

    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
3418853e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188542:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34188546:	2b02      	cmp	r3, #2
34188548:	d116      	bne.n	34188578 <HAL_RCCEx_PeriphCLKConfig+0xab0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));

      /* Set IC13 configuration */
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
3418854a:	4bbc      	ldr	r3, [pc, #752]	@ (3418883c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418854c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34188550:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188554:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188558:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418855c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
3418855e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34188564:	3b01      	subs	r3, #1
34188566:	041b      	lsls	r3, r3, #16
34188568:	4313      	orrs	r3, r2
3418856a:	4ab4      	ldr	r2, [pc, #720]	@ (3418883c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418856c:	430b      	orrs	r3, r1
3418856e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
                 PeriphClkInit->ICSelection[RCC_IC13].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC13].ClockDivider - 1U) << RCC_IC13CFGR_IC13INT_Pos));

      LL_RCC_IC13_Enable();
34188572:	f7ff f887 	bl	34187684 <LL_RCC_IC13_Enable>
34188576:	e007      	b.n	34188588 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    }
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
34188578:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418857c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34188580:	2b01      	cmp	r3, #1
34188582:	d101      	bne.n	34188588 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    {
      LL_RCC_CLKP_Enable();
34188584:	f7ff fa7e 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 PTP clock source and divider */
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
34188588:	4bac      	ldr	r3, [pc, #688]	@ (3418883c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418858a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418858e:	f023 01f3 	bic.w	r1, r3, #243	@ 0xf3
34188592:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418859a:	3b01      	subs	r3, #1
3418859c:	011a      	lsls	r2, r3, #4
3418859e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341885a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341885a6:	4313      	orrs	r3, r2
341885a8:	4aa4      	ldr	r2, [pc, #656]	@ (3418883c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341885aa:	430b      	orrs	r3, r1
341885ac:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
               (((PeriphClkInit->Eth1PtpDivider - 1U) << RCC_CCIPR2_ETH1PTPDIV_Pos) | PeriphClkInit->Eth1PtpClockSelection));
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
341885b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341885b4:	e9d3 2300 	ldrd	r2, r3, [r3]
341885b8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
341885bc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
341885c0:	2300      	movs	r3, #0
341885c2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
341885c6:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
341885ca:	4603      	mov	r3, r0
341885cc:	460a      	mov	r2, r1
341885ce:	4313      	orrs	r3, r2
341885d0:	d02d      	beq.n	3418862e <HAL_RCCEx_PeriphCLKConfig+0xb66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
341885d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341885d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341885da:	2b02      	cmp	r3, #2
341885dc:	d118      	bne.n	34188610 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
341885de:	4b97      	ldr	r3, [pc, #604]	@ (3418883c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341885e0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
341885e4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341885e8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341885ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341885f0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
341885f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341885f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
341885fc:	3b01      	subs	r3, #1
341885fe:	041b      	lsls	r3, r3, #16
34188600:	4313      	orrs	r3, r2
34188602:	4a8e      	ldr	r2, [pc, #568]	@ (3418883c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188604:	430b      	orrs	r3, r1
34188606:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
3418860a:	f7ff f9bb 	bl	34187984 <LL_RCC_IC19_Enable>
3418860e:	e007      	b.n	34188620 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    }
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
34188610:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188614:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34188618:	2b01      	cmp	r3, #1
3418861a:	d101      	bne.n	34188620 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
      LL_RCC_CLKP_Enable();
3418861c:	f7ff fa32 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
34188620:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188624:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34188628:	4618      	mov	r0, r3
3418862a:	f7fe f8db 	bl	341867e4 <LL_RCC_SetFDCANClockSource>
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
3418862e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188632:	e9d3 2300 	ldrd	r2, r3, [r3]
34188636:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
3418863a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
3418863e:	2300      	movs	r3, #0
34188640:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
34188644:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
34188648:	4603      	mov	r3, r0
3418864a:	460a      	mov	r2, r1
3418864c:	4313      	orrs	r3, r2
3418864e:	d04b      	beq.n	341886e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
34188650:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188654:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
34188658:	4b79      	ldr	r3, [pc, #484]	@ (34188840 <HAL_RCCEx_PeriphCLKConfig+0xd78>)
3418865a:	429a      	cmp	r2, r3
3418865c:	d116      	bne.n	3418868c <HAL_RCCEx_PeriphCLKConfig+0xbc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3418865e:	4b77      	ldr	r3, [pc, #476]	@ (3418883c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188660:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34188664:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188668:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418866c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188670:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34188672:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34188678:	3b01      	subs	r3, #1
3418867a:	041b      	lsls	r3, r3, #16
3418867c:	4313      	orrs	r3, r2
3418867e:	4a6f      	ldr	r2, [pc, #444]	@ (3418883c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188680:	430b      	orrs	r3, r1
34188682:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34188686:	f7fe ff7d 	bl	34187584 <LL_RCC_IC10_Enable>
3418868a:	e026      	b.n	341886da <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
3418868c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188690:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
34188694:	4b6b      	ldr	r3, [pc, #428]	@ (34188844 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
34188696:	429a      	cmp	r2, r3
34188698:	d116      	bne.n	341886c8 <HAL_RCCEx_PeriphCLKConfig+0xc00>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418869a:	4b68      	ldr	r3, [pc, #416]	@ (3418883c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418869c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341886a0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341886a4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341886a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341886ac:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
341886ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341886b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341886b4:	3b01      	subs	r3, #1
341886b6:	041b      	lsls	r3, r3, #16
341886b8:	4313      	orrs	r3, r2
341886ba:	4a60      	ldr	r2, [pc, #384]	@ (3418883c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341886bc:	430b      	orrs	r3, r1
341886be:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341886c2:	f7ff f85f 	bl	34187784 <LL_RCC_IC15_Enable>
341886c6:	e008      	b.n	341886da <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
341886c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341886cc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
341886d0:	4b5d      	ldr	r3, [pc, #372]	@ (34188848 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
341886d2:	429a      	cmp	r2, r3
341886d4:	d101      	bne.n	341886da <HAL_RCCEx_PeriphCLKConfig+0xc12>
    {
      LL_RCC_CLKP_Enable();
341886d6:	f7ff f9d5 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C1 clock*/
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
341886da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341886de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
341886e2:	4618      	mov	r0, r3
341886e4:	f7fe f8aa 	bl	3418683c <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
341886e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341886ec:	e9d3 2300 	ldrd	r2, r3, [r3]
341886f0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
341886f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
341886f8:	2300      	movs	r3, #0
341886fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
341886fe:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
34188702:	4603      	mov	r3, r0
34188704:	460a      	mov	r2, r1
34188706:	4313      	orrs	r3, r2
34188708:	d04b      	beq.n	341887a2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
3418870a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418870e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34188712:	4b4e      	ldr	r3, [pc, #312]	@ (3418884c <HAL_RCCEx_PeriphCLKConfig+0xd84>)
34188714:	429a      	cmp	r2, r3
34188716:	d116      	bne.n	34188746 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34188718:	4b48      	ldr	r3, [pc, #288]	@ (3418883c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418871a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418871e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188722:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188726:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418872a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3418872c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34188732:	3b01      	subs	r3, #1
34188734:	041b      	lsls	r3, r3, #16
34188736:	4313      	orrs	r3, r2
34188738:	4a40      	ldr	r2, [pc, #256]	@ (3418883c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418873a:	430b      	orrs	r3, r1
3418873c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34188740:	f7fe ff20 	bl	34187584 <LL_RCC_IC10_Enable>
34188744:	e026      	b.n	34188794 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
34188746:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418874a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3418874e:	4b40      	ldr	r3, [pc, #256]	@ (34188850 <HAL_RCCEx_PeriphCLKConfig+0xd88>)
34188750:	429a      	cmp	r2, r3
34188752:	d116      	bne.n	34188782 <HAL_RCCEx_PeriphCLKConfig+0xcba>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34188754:	4b39      	ldr	r3, [pc, #228]	@ (3418883c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188756:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418875a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418875e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188762:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188766:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188768:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418876c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418876e:	3b01      	subs	r3, #1
34188770:	041b      	lsls	r3, r3, #16
34188772:	4313      	orrs	r3, r2
34188774:	4a31      	ldr	r2, [pc, #196]	@ (3418883c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188776:	430b      	orrs	r3, r1
34188778:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418877c:	f7ff f802 	bl	34187784 <LL_RCC_IC15_Enable>
34188780:	e008      	b.n	34188794 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
34188782:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188786:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3418878a:	4b32      	ldr	r3, [pc, #200]	@ (34188854 <HAL_RCCEx_PeriphCLKConfig+0xd8c>)
3418878c:	429a      	cmp	r2, r3
3418878e:	d101      	bne.n	34188794 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      LL_RCC_CLKP_Enable();
34188790:	f7ff f978 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C2 clock*/
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
34188794:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188798:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3418879c:	4618      	mov	r0, r3
3418879e:	f7fe f84d 	bl	3418683c <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C3 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
341887a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341887a6:	e9d3 2300 	ldrd	r2, r3, [r3]
341887aa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
341887ae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
341887b2:	2300      	movs	r3, #0
341887b4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
341887b8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
341887bc:	4603      	mov	r3, r0
341887be:	460a      	mov	r2, r1
341887c0:	4313      	orrs	r3, r2
341887c2:	d05d      	beq.n	34188880 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
341887c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341887c8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
341887cc:	4b22      	ldr	r3, [pc, #136]	@ (34188858 <HAL_RCCEx_PeriphCLKConfig+0xd90>)
341887ce:	429a      	cmp	r2, r3
341887d0:	d116      	bne.n	34188800 <HAL_RCCEx_PeriphCLKConfig+0xd38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
341887d2:	4b1a      	ldr	r3, [pc, #104]	@ (3418883c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341887d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
341887d8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341887dc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341887e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341887e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
341887e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341887ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341887ec:	3b01      	subs	r3, #1
341887ee:	041b      	lsls	r3, r3, #16
341887f0:	4313      	orrs	r3, r2
341887f2:	4a12      	ldr	r2, [pc, #72]	@ (3418883c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341887f4:	430b      	orrs	r3, r1
341887f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
341887fa:	f7fe fec3 	bl	34187584 <LL_RCC_IC10_Enable>
341887fe:	e038      	b.n	34188872 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
34188800:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188804:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34188808:	4b14      	ldr	r3, [pc, #80]	@ (3418885c <HAL_RCCEx_PeriphCLKConfig+0xd94>)
3418880a:	429a      	cmp	r2, r3
3418880c:	d128      	bne.n	34188860 <HAL_RCCEx_PeriphCLKConfig+0xd98>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418880e:	4b0b      	ldr	r3, [pc, #44]	@ (3418883c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188810:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188814:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188818:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418881c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188820:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188822:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188826:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188828:	3b01      	subs	r3, #1
3418882a:	041b      	lsls	r3, r3, #16
3418882c:	4313      	orrs	r3, r2
3418882e:	4a03      	ldr	r2, [pc, #12]	@ (3418883c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188830:	430b      	orrs	r3, r1
34188832:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34188836:	f7fe ffa5 	bl	34187784 <LL_RCC_IC15_Enable>
3418883a:	e01a      	b.n	34188872 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
3418883c:	56028000 	.word	0x56028000
34188840:	0702000c 	.word	0x0702000c
34188844:	0703000c 	.word	0x0703000c
34188848:	0701000c 	.word	0x0701000c
3418884c:	0702040c 	.word	0x0702040c
34188850:	0703040c 	.word	0x0703040c
34188854:	0701040c 	.word	0x0701040c
34188858:	0702080c 	.word	0x0702080c
3418885c:	0703080c 	.word	0x0703080c
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
34188860:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188864:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34188868:	4bc8      	ldr	r3, [pc, #800]	@ (34188b8c <HAL_RCCEx_PeriphCLKConfig+0x10c4>)
3418886a:	429a      	cmp	r2, r3
3418886c:	d101      	bne.n	34188872 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      LL_RCC_CLKP_Enable();
3418886e:	f7ff f909 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C3 clock*/
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
34188872:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3418887a:	4618      	mov	r0, r3
3418887c:	f7fd ffde 	bl	3418683c <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
34188880:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188884:	e9d3 2300 	ldrd	r2, r3, [r3]
34188888:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
3418888c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
34188890:	2300      	movs	r3, #0
34188892:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
34188896:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
3418889a:	4603      	mov	r3, r0
3418889c:	460a      	mov	r2, r1
3418889e:	4313      	orrs	r3, r2
341888a0:	d04b      	beq.n	3418893a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
341888a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341888a6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
341888aa:	4bb9      	ldr	r3, [pc, #740]	@ (34188b90 <HAL_RCCEx_PeriphCLKConfig+0x10c8>)
341888ac:	429a      	cmp	r2, r3
341888ae:	d116      	bne.n	341888de <HAL_RCCEx_PeriphCLKConfig+0xe16>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
341888b0:	4bb8      	ldr	r3, [pc, #736]	@ (34188b94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341888b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
341888b6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341888ba:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341888be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341888c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
341888c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341888c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341888ca:	3b01      	subs	r3, #1
341888cc:	041b      	lsls	r3, r3, #16
341888ce:	4313      	orrs	r3, r2
341888d0:	4ab0      	ldr	r2, [pc, #704]	@ (34188b94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341888d2:	430b      	orrs	r3, r1
341888d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
341888d8:	f7fe fe54 	bl	34187584 <LL_RCC_IC10_Enable>
341888dc:	e026      	b.n	3418892c <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
341888de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341888e2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
341888e6:	4bac      	ldr	r3, [pc, #688]	@ (34188b98 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
341888e8:	429a      	cmp	r2, r3
341888ea:	d116      	bne.n	3418891a <HAL_RCCEx_PeriphCLKConfig+0xe52>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341888ec:	4ba9      	ldr	r3, [pc, #676]	@ (34188b94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341888ee:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341888f2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341888f6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341888fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341888fe:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188900:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188904:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188906:	3b01      	subs	r3, #1
34188908:	041b      	lsls	r3, r3, #16
3418890a:	4313      	orrs	r3, r2
3418890c:	4aa1      	ldr	r2, [pc, #644]	@ (34188b94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418890e:	430b      	orrs	r3, r1
34188910:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34188914:	f7fe ff36 	bl	34187784 <LL_RCC_IC15_Enable>
34188918:	e008      	b.n	3418892c <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
3418891a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418891e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34188922:	4b9e      	ldr	r3, [pc, #632]	@ (34188b9c <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
34188924:	429a      	cmp	r2, r3
34188926:	d101      	bne.n	3418892c <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      LL_RCC_CLKP_Enable();
34188928:	f7ff f8ac 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C4 clock*/
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
3418892c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188930:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34188934:	4618      	mov	r0, r3
34188936:	f7fd ff81 	bl	3418683c <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
3418893a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418893e:	e9d3 2300 	ldrd	r2, r3, [r3]
34188942:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
34188946:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
3418894a:	2300      	movs	r3, #0
3418894c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
34188950:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
34188954:	4603      	mov	r3, r0
34188956:	460a      	mov	r2, r1
34188958:	4313      	orrs	r3, r2
3418895a:	d04b      	beq.n	341889f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
3418895c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188960:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34188964:	4b8e      	ldr	r3, [pc, #568]	@ (34188ba0 <HAL_RCCEx_PeriphCLKConfig+0x10d8>)
34188966:	429a      	cmp	r2, r3
34188968:	d116      	bne.n	34188998 <HAL_RCCEx_PeriphCLKConfig+0xed0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3418896a:	4b8a      	ldr	r3, [pc, #552]	@ (34188b94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418896c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34188970:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188974:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188978:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418897c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3418897e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34188984:	3b01      	subs	r3, #1
34188986:	041b      	lsls	r3, r3, #16
34188988:	4313      	orrs	r3, r2
3418898a:	4a82      	ldr	r2, [pc, #520]	@ (34188b94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418898c:	430b      	orrs	r3, r1
3418898e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34188992:	f7fe fdf7 	bl	34187584 <LL_RCC_IC10_Enable>
34188996:	e026      	b.n	341889e6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
34188998:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418899c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
341889a0:	4b80      	ldr	r3, [pc, #512]	@ (34188ba4 <HAL_RCCEx_PeriphCLKConfig+0x10dc>)
341889a2:	429a      	cmp	r2, r3
341889a4:	d116      	bne.n	341889d4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341889a6:	4b7b      	ldr	r3, [pc, #492]	@ (34188b94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341889a8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341889ac:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341889b0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341889b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341889b8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
341889ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341889be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341889c0:	3b01      	subs	r3, #1
341889c2:	041b      	lsls	r3, r3, #16
341889c4:	4313      	orrs	r3, r2
341889c6:	4a73      	ldr	r2, [pc, #460]	@ (34188b94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341889c8:	430b      	orrs	r3, r1
341889ca:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341889ce:	f7fe fed9 	bl	34187784 <LL_RCC_IC15_Enable>
341889d2:	e008      	b.n	341889e6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
341889d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341889d8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
341889dc:	4b72      	ldr	r3, [pc, #456]	@ (34188ba8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
341889de:	429a      	cmp	r2, r3
341889e0:	d101      	bne.n	341889e6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    {
      LL_RCC_CLKP_Enable();
341889e2:	f7ff f84f 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C1 clock*/
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
341889e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341889ea:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341889ee:	4618      	mov	r0, r3
341889f0:	f7fd ff2f 	bl	34186852 <LL_RCC_SetI3CClockSource>
  }

  /*------------------------------ I3C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
341889f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341889f8:	e9d3 2300 	ldrd	r2, r3, [r3]
341889fc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
34188a00:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
34188a04:	2300      	movs	r3, #0
34188a06:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
34188a0a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
34188a0e:	4603      	mov	r3, r0
34188a10:	460a      	mov	r2, r1
34188a12:	4313      	orrs	r3, r2
34188a14:	d04b      	beq.n	34188aae <HAL_RCCEx_PeriphCLKConfig+0xfe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
34188a16:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188a1a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34188a1e:	4b63      	ldr	r3, [pc, #396]	@ (34188bac <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
34188a20:	429a      	cmp	r2, r3
34188a22:	d116      	bne.n	34188a52 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34188a24:	4b5b      	ldr	r3, [pc, #364]	@ (34188b94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34188a2a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188a2e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188a32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188a36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34188a38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34188a3e:	3b01      	subs	r3, #1
34188a40:	041b      	lsls	r3, r3, #16
34188a42:	4313      	orrs	r3, r2
34188a44:	4a53      	ldr	r2, [pc, #332]	@ (34188b94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188a46:	430b      	orrs	r3, r1
34188a48:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34188a4c:	f7fe fd9a 	bl	34187584 <LL_RCC_IC10_Enable>
34188a50:	e026      	b.n	34188aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
34188a52:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188a56:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34188a5a:	4b55      	ldr	r3, [pc, #340]	@ (34188bb0 <HAL_RCCEx_PeriphCLKConfig+0x10e8>)
34188a5c:	429a      	cmp	r2, r3
34188a5e:	d116      	bne.n	34188a8e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34188a60:	4b4c      	ldr	r3, [pc, #304]	@ (34188b94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188a62:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188a66:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188a6a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188a6e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188a72:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188a74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188a78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188a7a:	3b01      	subs	r3, #1
34188a7c:	041b      	lsls	r3, r3, #16
34188a7e:	4313      	orrs	r3, r2
34188a80:	4a44      	ldr	r2, [pc, #272]	@ (34188b94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188a82:	430b      	orrs	r3, r1
34188a84:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34188a88:	f7fe fe7c 	bl	34187784 <LL_RCC_IC15_Enable>
34188a8c:	e008      	b.n	34188aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
34188a8e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188a92:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34188a96:	4b47      	ldr	r3, [pc, #284]	@ (34188bb4 <HAL_RCCEx_PeriphCLKConfig+0x10ec>)
34188a98:	429a      	cmp	r2, r3
34188a9a:	d101      	bne.n	34188aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    {
      LL_RCC_CLKP_Enable();
34188a9c:	f7fe fff2 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C2 clock*/
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
34188aa0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188aa4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188aa8:	4618      	mov	r0, r3
34188aaa:	f7fd fed2 	bl	34186852 <LL_RCC_SetI3CClockSource>
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
34188aae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
34188ab6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
34188aba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
34188abe:	2300      	movs	r3, #0
34188ac0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
34188ac4:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
34188ac8:	4603      	mov	r3, r0
34188aca:	460a      	mov	r2, r1
34188acc:	4313      	orrs	r3, r2
34188ace:	d02d      	beq.n	34188b2c <HAL_RCCEx_PeriphCLKConfig+0x1064>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
34188ad0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188ad4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
34188ad8:	4b37      	ldr	r3, [pc, #220]	@ (34188bb8 <HAL_RCCEx_PeriphCLKConfig+0x10f0>)
34188ada:	429a      	cmp	r2, r3
34188adc:	d116      	bne.n	34188b0c <HAL_RCCEx_PeriphCLKConfig+0x1044>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34188ade:	4b2d      	ldr	r3, [pc, #180]	@ (34188b94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188ae0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188ae4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188ae8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188aec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188af0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188af2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188af6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188af8:	3b01      	subs	r3, #1
34188afa:	041b      	lsls	r3, r3, #16
34188afc:	4313      	orrs	r3, r2
34188afe:	4a25      	ldr	r2, [pc, #148]	@ (34188b94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188b00:	430b      	orrs	r3, r1
34188b02:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34188b06:	f7fe fe3d 	bl	34187784 <LL_RCC_IC15_Enable>
34188b0a:	e008      	b.n	34188b1e <HAL_RCCEx_PeriphCLKConfig+0x1056>
    }
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
34188b0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188b10:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
34188b14:	4b29      	ldr	r3, [pc, #164]	@ (34188bbc <HAL_RCCEx_PeriphCLKConfig+0x10f4>)
34188b16:	429a      	cmp	r2, r3
34188b18:	d101      	bne.n	34188b1e <HAL_RCCEx_PeriphCLKConfig+0x1056>
    {
      LL_RCC_CLKP_Enable();
34188b1a:	f7fe ffb3 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
34188b1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188b22:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34188b26:	4618      	mov	r0, r3
34188b28:	f7fd fe9e 	bl	34186868 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM2 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
34188b2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188b30:	e9d3 2300 	ldrd	r2, r3, [r3]
34188b34:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
34188b38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
34188b3c:	2300      	movs	r3, #0
34188b3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
34188b42:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
34188b46:	4603      	mov	r3, r0
34188b48:	460a      	mov	r2, r1
34188b4a:	4313      	orrs	r3, r2
34188b4c:	d04a      	beq.n	34188be4 <HAL_RCCEx_PeriphCLKConfig+0x111c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
34188b4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188b52:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
34188b56:	4b1a      	ldr	r3, [pc, #104]	@ (34188bc0 <HAL_RCCEx_PeriphCLKConfig+0x10f8>)
34188b58:	429a      	cmp	r2, r3
34188b5a:	d133      	bne.n	34188bc4 <HAL_RCCEx_PeriphCLKConfig+0x10fc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34188b5c:	4b0d      	ldr	r3, [pc, #52]	@ (34188b94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188b5e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188b62:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188b66:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188b6a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188b6e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188b70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188b74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188b76:	3b01      	subs	r3, #1
34188b78:	041b      	lsls	r3, r3, #16
34188b7a:	4313      	orrs	r3, r2
34188b7c:	4a05      	ldr	r2, [pc, #20]	@ (34188b94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188b7e:	430b      	orrs	r3, r1
34188b80:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34188b84:	f7fe fdfe 	bl	34187784 <LL_RCC_IC15_Enable>
34188b88:	e025      	b.n	34188bd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
34188b8a:	bf00      	nop
34188b8c:	0701080c 	.word	0x0701080c
34188b90:	07020c0c 	.word	0x07020c0c
34188b94:	56028000 	.word	0x56028000
34188b98:	07030c0c 	.word	0x07030c0c
34188b9c:	07010c0c 	.word	0x07010c0c
34188ba0:	0702100c 	.word	0x0702100c
34188ba4:	0703100c 	.word	0x0703100c
34188ba8:	0701100c 	.word	0x0701100c
34188bac:	0702140c 	.word	0x0702140c
34188bb0:	0703140c 	.word	0x0703140c
34188bb4:	0701140c 	.word	0x0701140c
34188bb8:	0702082c 	.word	0x0702082c
34188bbc:	0701082c 	.word	0x0701082c
34188bc0:	07020c2c 	.word	0x07020c2c
    }
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
34188bc4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188bc8:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
34188bcc:	4bca      	ldr	r3, [pc, #808]	@ (34188ef8 <HAL_RCCEx_PeriphCLKConfig+0x1430>)
34188bce:	429a      	cmp	r2, r3
34188bd0:	d101      	bne.n	34188bd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      LL_RCC_CLKP_Enable();
34188bd2:	f7fe ff57 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM2 clock*/
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
34188bd6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188bda:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34188bde:	4618      	mov	r0, r3
34188be0:	f7fd fe42 	bl	34186868 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
34188be4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188be8:	e9d3 2300 	ldrd	r2, r3, [r3]
34188bec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
34188bf0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
34188bf4:	2300      	movs	r3, #0
34188bf6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
34188bfa:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
34188bfe:	4603      	mov	r3, r0
34188c00:	460a      	mov	r2, r1
34188c02:	4313      	orrs	r3, r2
34188c04:	d02d      	beq.n	34188c62 <HAL_RCCEx_PeriphCLKConfig+0x119a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
34188c06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188c0a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34188c0e:	4bbb      	ldr	r3, [pc, #748]	@ (34188efc <HAL_RCCEx_PeriphCLKConfig+0x1434>)
34188c10:	429a      	cmp	r2, r3
34188c12:	d116      	bne.n	34188c42 <HAL_RCCEx_PeriphCLKConfig+0x117a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34188c14:	4bba      	ldr	r3, [pc, #744]	@ (34188f00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188c16:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188c1a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188c1e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188c22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188c26:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188c28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188c2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188c2e:	3b01      	subs	r3, #1
34188c30:	041b      	lsls	r3, r3, #16
34188c32:	4313      	orrs	r3, r2
34188c34:	4ab2      	ldr	r2, [pc, #712]	@ (34188f00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188c36:	430b      	orrs	r3, r1
34188c38:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34188c3c:	f7fe fda2 	bl	34187784 <LL_RCC_IC15_Enable>
34188c40:	e008      	b.n	34188c54 <HAL_RCCEx_PeriphCLKConfig+0x118c>
    }
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
34188c42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188c46:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34188c4a:	4bae      	ldr	r3, [pc, #696]	@ (34188f04 <HAL_RCCEx_PeriphCLKConfig+0x143c>)
34188c4c:	429a      	cmp	r2, r3
34188c4e:	d101      	bne.n	34188c54 <HAL_RCCEx_PeriphCLKConfig+0x118c>
    {
      LL_RCC_CLKP_Enable();
34188c50:	f7fe ff18 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM3 clock */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
34188c54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188c58:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34188c5c:	4618      	mov	r0, r3
34188c5e:	f7fd fe03 	bl	34186868 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM4 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
34188c62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188c66:	e9d3 2300 	ldrd	r2, r3, [r3]
34188c6a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
34188c6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
34188c72:	2300      	movs	r3, #0
34188c74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
34188c78:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
34188c7c:	4603      	mov	r3, r0
34188c7e:	460a      	mov	r2, r1
34188c80:	4313      	orrs	r3, r2
34188c82:	d02d      	beq.n	34188ce0 <HAL_RCCEx_PeriphCLKConfig+0x1218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));

    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
34188c84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188c88:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
34188c8c:	4b9e      	ldr	r3, [pc, #632]	@ (34188f08 <HAL_RCCEx_PeriphCLKConfig+0x1440>)
34188c8e:	429a      	cmp	r2, r3
34188c90:	d116      	bne.n	34188cc0 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34188c92:	4b9b      	ldr	r3, [pc, #620]	@ (34188f00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188c94:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188c98:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188c9c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188ca0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188ca4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188ca6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188caa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188cac:	3b01      	subs	r3, #1
34188cae:	041b      	lsls	r3, r3, #16
34188cb0:	4313      	orrs	r3, r2
34188cb2:	4a93      	ldr	r2, [pc, #588]	@ (34188f00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188cb4:	430b      	orrs	r3, r1
34188cb6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34188cba:	f7fe fd63 	bl	34187784 <LL_RCC_IC15_Enable>
34188cbe:	e008      	b.n	34188cd2 <HAL_RCCEx_PeriphCLKConfig+0x120a>
    }
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
34188cc0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188cc4:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
34188cc8:	4b90      	ldr	r3, [pc, #576]	@ (34188f0c <HAL_RCCEx_PeriphCLKConfig+0x1444>)
34188cca:	429a      	cmp	r2, r3
34188ccc:	d101      	bne.n	34188cd2 <HAL_RCCEx_PeriphCLKConfig+0x120a>
    {
      LL_RCC_CLKP_Enable();
34188cce:	f7fe fed9 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM4 clock */
    __HAL_RCC_LPTIM4_CONFIG(PeriphClkInit->Lptim4ClockSelection);
34188cd2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188cd6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34188cda:	4618      	mov	r0, r3
34188cdc:	f7fd fdc4 	bl	34186868 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
34188ce0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
34188ce8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
34188cec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
34188cf0:	2300      	movs	r3, #0
34188cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
34188cf6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
34188cfa:	4603      	mov	r3, r0
34188cfc:	460a      	mov	r2, r1
34188cfe:	4313      	orrs	r3, r2
34188d00:	d02d      	beq.n	34188d5e <HAL_RCCEx_PeriphCLKConfig+0x1296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));

    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
34188d02:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188d06:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
34188d0a:	4b81      	ldr	r3, [pc, #516]	@ (34188f10 <HAL_RCCEx_PeriphCLKConfig+0x1448>)
34188d0c:	429a      	cmp	r2, r3
34188d0e:	d116      	bne.n	34188d3e <HAL_RCCEx_PeriphCLKConfig+0x1276>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34188d10:	4b7b      	ldr	r3, [pc, #492]	@ (34188f00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188d12:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188d16:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188d1a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188d1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188d22:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188d24:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188d28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188d2a:	3b01      	subs	r3, #1
34188d2c:	041b      	lsls	r3, r3, #16
34188d2e:	4313      	orrs	r3, r2
34188d30:	4a73      	ldr	r2, [pc, #460]	@ (34188f00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188d32:	430b      	orrs	r3, r1
34188d34:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34188d38:	f7fe fd24 	bl	34187784 <LL_RCC_IC15_Enable>
34188d3c:	e008      	b.n	34188d50 <HAL_RCCEx_PeriphCLKConfig+0x1288>
    }
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
34188d3e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188d42:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
34188d46:	4b73      	ldr	r3, [pc, #460]	@ (34188f14 <HAL_RCCEx_PeriphCLKConfig+0x144c>)
34188d48:	429a      	cmp	r2, r3
34188d4a:	d101      	bne.n	34188d50 <HAL_RCCEx_PeriphCLKConfig+0x1288>
    {
      LL_RCC_CLKP_Enable();
34188d4c:	f7fe fe9a 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM5 clock */
    __HAL_RCC_LPTIM5_CONFIG(PeriphClkInit->Lptim5ClockSelection);
34188d50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188d54:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34188d58:	4618      	mov	r0, r3
34188d5a:	f7fd fd85 	bl	34186868 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
34188d5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188d62:	e9d3 2300 	ldrd	r2, r3, [r3]
34188d66:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
34188d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
34188d6e:	2300      	movs	r3, #0
34188d70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
34188d74:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
34188d78:	4603      	mov	r3, r0
34188d7a:	460a      	mov	r2, r1
34188d7c:	4313      	orrs	r3, r2
34188d7e:	d04b      	beq.n	34188e18 <HAL_RCCEx_PeriphCLKConfig+0x1350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
34188d80:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188d84:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34188d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34188d8c:	d116      	bne.n	34188dbc <HAL_RCCEx_PeriphCLKConfig+0x12f4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34188d8e:	4b5c      	ldr	r3, [pc, #368]	@ (34188f00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188d90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34188d94:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188d98:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188d9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188da0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34188da2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34188da8:	3b01      	subs	r3, #1
34188daa:	041b      	lsls	r3, r3, #16
34188dac:	4313      	orrs	r3, r2
34188dae:	4a54      	ldr	r2, [pc, #336]	@ (34188f00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188db0:	430b      	orrs	r3, r1
34188db2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34188db6:	f7fe fba5 	bl	34187504 <LL_RCC_IC9_Enable>
34188dba:	e026      	b.n	34188e0a <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
34188dbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188dc0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34188dc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34188dc8:	d116      	bne.n	34188df8 <HAL_RCCEx_PeriphCLKConfig+0x1330>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34188dca:	4b4d      	ldr	r3, [pc, #308]	@ (34188f00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188dcc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34188dd0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188dd4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188dd8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188ddc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34188dde:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34188de4:	3b01      	subs	r3, #1
34188de6:	041b      	lsls	r3, r3, #16
34188de8:	4313      	orrs	r3, r2
34188dea:	4a45      	ldr	r2, [pc, #276]	@ (34188f00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188dec:	430b      	orrs	r3, r1
34188dee:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34188df2:	f7fe fc87 	bl	34187704 <LL_RCC_IC14_Enable>
34188df6:	e008      	b.n	34188e0a <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
34188df8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188dfc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34188e00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34188e04:	d101      	bne.n	34188e0a <HAL_RCCEx_PeriphCLKConfig+0x1342>
    {
      LL_RCC_CLKP_Enable();
34188e06:	f7fe fe3d 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPUART1 clock */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
34188e0a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188e0e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34188e12:	4618      	mov	r0, r3
34188e14:	f7fd fd34 	bl	34186880 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
34188e18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
34188e20:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
34188e24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
34188e28:	2300      	movs	r3, #0
34188e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
34188e2e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
34188e32:	4603      	mov	r3, r0
34188e34:	460a      	mov	r2, r1
34188e36:	4313      	orrs	r3, r2
34188e38:	d02f      	beq.n	34188e9a <HAL_RCCEx_PeriphCLKConfig+0x13d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
34188e3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188e3e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34188e42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34188e46:	d118      	bne.n	34188e7a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));

      /* Set IC16 configuration */
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
34188e48:	4b2d      	ldr	r3, [pc, #180]	@ (34188f00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188e4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34188e4e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188e52:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188e56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188e5a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34188e5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34188e66:	3b01      	subs	r3, #1
34188e68:	041b      	lsls	r3, r3, #16
34188e6a:	4313      	orrs	r3, r2
34188e6c:	4a24      	ldr	r2, [pc, #144]	@ (34188f00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188e6e:	430b      	orrs	r3, r1
34188e70:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                 PeriphClkInit->ICSelection[RCC_IC16].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC16].ClockDivider - 1U) << RCC_IC16CFGR_IC16INT_Pos));

      LL_RCC_IC16_Enable();
34188e74:	f7fe fcc6 	bl	34187804 <LL_RCC_IC16_Enable>
34188e78:	e008      	b.n	34188e8c <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    }
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
34188e7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188e7e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34188e82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34188e86:	d101      	bne.n	34188e8c <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    {
      LL_RCC_CLKP_Enable();
34188e88:	f7fe fdfc 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LTDC clock */
    __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
34188e8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188e90:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34188e94:	4618      	mov	r0, r3
34188e96:	f7fd fd09 	bl	341868ac <LL_RCC_SetLTDCClockSource>
  }

  /*---------------------------- MDF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
34188e9a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
34188ea2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
34188ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
34188eaa:	2300      	movs	r3, #0
34188eac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
34188eb0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
34188eb4:	4603      	mov	r3, r0
34188eb6:	460a      	mov	r2, r1
34188eb8:	4313      	orrs	r3, r2
34188eba:	d05b      	beq.n	34188f74 <HAL_RCCEx_PeriphCLKConfig+0x14ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));

    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
34188ebc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188ec0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34188ec4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34188ec8:	d126      	bne.n	34188f18 <HAL_RCCEx_PeriphCLKConfig+0x1450>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34188eca:	4b0d      	ldr	r3, [pc, #52]	@ (34188f00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188ecc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34188ed0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188ed4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188ed8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188edc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34188ede:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34188ee4:	3b01      	subs	r3, #1
34188ee6:	041b      	lsls	r3, r3, #16
34188ee8:	4313      	orrs	r3, r2
34188eea:	4a05      	ldr	r2, [pc, #20]	@ (34188f00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188eec:	430b      	orrs	r3, r1
34188eee:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34188ef2:	f7fe fa87 	bl	34187404 <LL_RCC_IC7_Enable>
34188ef6:	e036      	b.n	34188f66 <HAL_RCCEx_PeriphCLKConfig+0x149e>
34188ef8:	07010c2c 	.word	0x07010c2c
34188efc:	0702102c 	.word	0x0702102c
34188f00:	56028000 	.word	0x56028000
34188f04:	0701102c 	.word	0x0701102c
34188f08:	0702142c 	.word	0x0702142c
34188f0c:	0701142c 	.word	0x0701142c
34188f10:	0702182c 	.word	0x0702182c
34188f14:	0701182c 	.word	0x0701182c
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
34188f18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188f1c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34188f20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34188f24:	d116      	bne.n	34188f54 <HAL_RCCEx_PeriphCLKConfig+0x148c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34188f26:	4bb5      	ldr	r3, [pc, #724]	@ (341891fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34188f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34188f2c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188f30:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188f34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188f38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34188f3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34188f40:	3b01      	subs	r3, #1
34188f42:	041b      	lsls	r3, r3, #16
34188f44:	4313      	orrs	r3, r2
34188f46:	4aad      	ldr	r2, [pc, #692]	@ (341891fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34188f48:	430b      	orrs	r3, r1
34188f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34188f4e:	f7fe fa99 	bl	34187484 <LL_RCC_IC8_Enable>
34188f52:	e008      	b.n	34188f66 <HAL_RCCEx_PeriphCLKConfig+0x149e>
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
34188f54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188f58:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34188f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34188f60:	d101      	bne.n	34188f66 <HAL_RCCEx_PeriphCLKConfig+0x149e>
    {
      LL_RCC_CLKP_Enable();
34188f62:	f7fe fd8f 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of MDF1 clock*/
    __HAL_RCC_MDF1_CONFIG(PeriphClkInit->Mdf1ClockSelection);
34188f66:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188f6a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34188f6e:	4618      	mov	r0, r3
34188f70:	f7fd fcb2 	bl	341868d8 <LL_RCC_SetMDFClockSource>
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
34188f74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188f78:	e9d3 2300 	ldrd	r2, r3, [r3]
34188f7c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
34188f80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
34188f84:	2300      	movs	r3, #0
34188f86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
34188f8a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
34188f8e:	4603      	mov	r3, r0
34188f90:	460a      	mov	r2, r1
34188f92:	4313      	orrs	r3, r2
34188f94:	d02d      	beq.n	34188ff2 <HAL_RCCEx_PeriphCLKConfig+0x152a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
34188f96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188f9a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
34188f9e:	2b20      	cmp	r3, #32
34188fa0:	d118      	bne.n	34188fd4 <HAL_RCCEx_PeriphCLKConfig+0x150c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34188fa2:	4b96      	ldr	r3, [pc, #600]	@ (341891fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34188fa4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34188fa8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188fac:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188fb0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188fb4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34188fb8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188fbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34188fc0:	3b01      	subs	r3, #1
34188fc2:	041b      	lsls	r3, r3, #16
34188fc4:	4313      	orrs	r3, r2
34188fc6:	4a8d      	ldr	r2, [pc, #564]	@ (341891fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34188fc8:	430b      	orrs	r3, r1
34188fca:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
34188fce:	f7fe fd19 	bl	34187a04 <LL_RCC_IC20_Enable>
34188fd2:	e007      	b.n	34188fe4 <HAL_RCCEx_PeriphCLKConfig+0x151c>
    }
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
34188fd4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188fd8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
34188fdc:	2b10      	cmp	r3, #16
34188fde:	d101      	bne.n	34188fe4 <HAL_RCCEx_PeriphCLKConfig+0x151c>
    {
      LL_RCC_CLKP_Enable();
34188fe0:	f7fe fd50 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of PSSI clock*/
    __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
34188fe4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188fe8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
34188fec:	4618      	mov	r0, r3
34188fee:	f7fd fc9f 	bl	34186930 <LL_RCC_SetPSSIClockSource>
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
34188ff2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
34188ffa:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
34188ffe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
34189002:	2300      	movs	r3, #0
34189004:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
34189008:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
3418900c:	4603      	mov	r3, r0
3418900e:	460a      	mov	r2, r1
34189010:	4313      	orrs	r3, r2
34189012:	d04b      	beq.n	341890ac <HAL_RCCEx_PeriphCLKConfig+0x15e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
34189014:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189018:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3418901c:	4b78      	ldr	r3, [pc, #480]	@ (34189200 <HAL_RCCEx_PeriphCLKConfig+0x1738>)
3418901e:	429a      	cmp	r2, r3
34189020:	d116      	bne.n	34189050 <HAL_RCCEx_PeriphCLKConfig+0x1588>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34189022:	4b76      	ldr	r3, [pc, #472]	@ (341891fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34189024:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34189028:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418902c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189030:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34189036:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418903a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418903c:	3b01      	subs	r3, #1
3418903e:	041b      	lsls	r3, r3, #16
34189040:	4313      	orrs	r3, r2
34189042:	4a6e      	ldr	r2, [pc, #440]	@ (341891fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34189044:	430b      	orrs	r3, r1
34189046:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418904a:	f7fe f9db 	bl	34187404 <LL_RCC_IC7_Enable>
3418904e:	e026      	b.n	3418909e <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
34189050:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189054:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34189058:	4b6a      	ldr	r3, [pc, #424]	@ (34189204 <HAL_RCCEx_PeriphCLKConfig+0x173c>)
3418905a:	429a      	cmp	r2, r3
3418905c:	d116      	bne.n	3418908c <HAL_RCCEx_PeriphCLKConfig+0x15c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418905e:	4b67      	ldr	r3, [pc, #412]	@ (341891fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34189060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34189064:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189068:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418906c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189070:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34189072:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34189078:	3b01      	subs	r3, #1
3418907a:	041b      	lsls	r3, r3, #16
3418907c:	4313      	orrs	r3, r2
3418907e:	4a5f      	ldr	r2, [pc, #380]	@ (341891fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34189080:	430b      	orrs	r3, r1
34189082:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34189086:	f7fe f9fd 	bl	34187484 <LL_RCC_IC8_Enable>
3418908a:	e008      	b.n	3418909e <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
3418908c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189090:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34189094:	4b5c      	ldr	r3, [pc, #368]	@ (34189208 <HAL_RCCEx_PeriphCLKConfig+0x1740>)
34189096:	429a      	cmp	r2, r3
34189098:	d101      	bne.n	3418909e <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    {
      LL_RCC_CLKP_Enable();
3418909a:	f7fe fcf3 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
3418909e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341890a2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
341890a6:	4618      	mov	r0, r3
341890a8:	f7fd fc58 	bl	3418695c <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
341890ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341890b0:	e9d3 2300 	ldrd	r2, r3, [r3]
341890b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
341890b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
341890bc:	2300      	movs	r3, #0
341890be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
341890c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
341890c6:	4603      	mov	r3, r0
341890c8:	460a      	mov	r2, r1
341890ca:	4313      	orrs	r3, r2
341890cc:	d04b      	beq.n	34189166 <HAL_RCCEx_PeriphCLKConfig+0x169e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
341890ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341890d2:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
341890d6:	4b4d      	ldr	r3, [pc, #308]	@ (3418920c <HAL_RCCEx_PeriphCLKConfig+0x1744>)
341890d8:	429a      	cmp	r2, r3
341890da:	d116      	bne.n	3418910a <HAL_RCCEx_PeriphCLKConfig+0x1642>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341890dc:	4b47      	ldr	r3, [pc, #284]	@ (341891fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341890de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341890e2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341890e6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341890ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341890ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341890f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341890f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341890f6:	3b01      	subs	r3, #1
341890f8:	041b      	lsls	r3, r3, #16
341890fa:	4313      	orrs	r3, r2
341890fc:	4a3f      	ldr	r2, [pc, #252]	@ (341891fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341890fe:	430b      	orrs	r3, r1
34189100:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34189104:	f7fe f97e 	bl	34187404 <LL_RCC_IC7_Enable>
34189108:	e026      	b.n	34189158 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
3418910a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418910e:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
34189112:	4b3f      	ldr	r3, [pc, #252]	@ (34189210 <HAL_RCCEx_PeriphCLKConfig+0x1748>)
34189114:	429a      	cmp	r2, r3
34189116:	d116      	bne.n	34189146 <HAL_RCCEx_PeriphCLKConfig+0x167e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34189118:	4b38      	ldr	r3, [pc, #224]	@ (341891fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418911a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418911e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189122:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189126:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418912a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418912c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34189132:	3b01      	subs	r3, #1
34189134:	041b      	lsls	r3, r3, #16
34189136:	4313      	orrs	r3, r2
34189138:	4a30      	ldr	r2, [pc, #192]	@ (341891fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418913a:	430b      	orrs	r3, r1
3418913c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34189140:	f7fe f9a0 	bl	34187484 <LL_RCC_IC8_Enable>
34189144:	e008      	b.n	34189158 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
34189146:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418914a:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3418914e:	4b31      	ldr	r3, [pc, #196]	@ (34189214 <HAL_RCCEx_PeriphCLKConfig+0x174c>)
34189150:	429a      	cmp	r2, r3
34189152:	d101      	bne.n	34189158 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    {
      LL_RCC_CLKP_Enable();
34189154:	f7fe fc96 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
34189158:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418915c:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
34189160:	4618      	mov	r0, r3
34189162:	f7fd fbfb 	bl	3418695c <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SPDIFRX1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
34189166:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418916a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418916e:	2100      	movs	r1, #0
34189170:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
34189174:	f003 0301 	and.w	r3, r3, #1
34189178:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
3418917c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
34189180:	4603      	mov	r3, r0
34189182:	460a      	mov	r2, r1
34189184:	4313      	orrs	r3, r2
34189186:	d056      	beq.n	34189236 <HAL_RCCEx_PeriphCLKConfig+0x176e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));

    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
34189188:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418918c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34189190:	2b02      	cmp	r3, #2
34189192:	d116      	bne.n	341891c2 <HAL_RCCEx_PeriphCLKConfig+0x16fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34189194:	4b19      	ldr	r3, [pc, #100]	@ (341891fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34189196:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418919a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418919e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341891a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341891a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341891a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341891ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341891ae:	3b01      	subs	r3, #1
341891b0:	041b      	lsls	r3, r3, #16
341891b2:	4313      	orrs	r3, r2
341891b4:	4a11      	ldr	r2, [pc, #68]	@ (341891fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341891b6:	430b      	orrs	r3, r1
341891b8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341891bc:	f7fe f922 	bl	34187404 <LL_RCC_IC7_Enable>
341891c0:	e032      	b.n	34189228 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
341891c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341891c6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
341891ca:	2b03      	cmp	r3, #3
341891cc:	d124      	bne.n	34189218 <HAL_RCCEx_PeriphCLKConfig+0x1750>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341891ce:	4b0b      	ldr	r3, [pc, #44]	@ (341891fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341891d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341891d4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341891d8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341891dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341891e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341891e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341891e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341891e8:	3b01      	subs	r3, #1
341891ea:	041b      	lsls	r3, r3, #16
341891ec:	4313      	orrs	r3, r2
341891ee:	4a03      	ldr	r2, [pc, #12]	@ (341891fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341891f0:	430b      	orrs	r3, r1
341891f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341891f6:	f7fe f945 	bl	34187484 <LL_RCC_IC8_Enable>
341891fa:	e015      	b.n	34189228 <HAL_RCCEx_PeriphCLKConfig+0x1760>
341891fc:	56028000 	.word	0x56028000
34189200:	07021418 	.word	0x07021418
34189204:	07031418 	.word	0x07031418
34189208:	07011418 	.word	0x07011418
3418920c:	07021818 	.word	0x07021818
34189210:	07031818 	.word	0x07031818
34189214:	07011818 	.word	0x07011818
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
34189218:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418921c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34189220:	2b01      	cmp	r3, #1
34189222:	d101      	bne.n	34189228 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    {
      LL_RCC_CLKP_Enable();
34189224:	f7fe fc2e 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPDIFRX1 clock */
    __HAL_RCC_SPDIFRX1_CONFIG(PeriphClkInit->Spdifrx1ClockSelection);
34189228:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418922c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34189230:	4618      	mov	r0, r3
34189232:	f7fd fba9 	bl	34186988 <LL_RCC_SetSPDIFRXClockSource>
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
34189236:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418923a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418923e:	2100      	movs	r1, #0
34189240:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
34189244:	f003 0302 	and.w	r3, r3, #2
34189248:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
3418924c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
34189250:	4603      	mov	r3, r0
34189252:	460a      	mov	r2, r1
34189254:	4313      	orrs	r3, r2
34189256:	d04b      	beq.n	341892f0 <HAL_RCCEx_PeriphCLKConfig+0x1828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
34189258:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418925c:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34189260:	4bc6      	ldr	r3, [pc, #792]	@ (3418957c <HAL_RCCEx_PeriphCLKConfig+0x1ab4>)
34189262:	429a      	cmp	r2, r3
34189264:	d116      	bne.n	34189294 <HAL_RCCEx_PeriphCLKConfig+0x17cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34189266:	4bc6      	ldr	r3, [pc, #792]	@ (34189580 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34189268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418926c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189270:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189274:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189278:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418927a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418927e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34189280:	3b01      	subs	r3, #1
34189282:	041b      	lsls	r3, r3, #16
34189284:	4313      	orrs	r3, r2
34189286:	4abe      	ldr	r2, [pc, #760]	@ (34189580 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34189288:	430b      	orrs	r3, r1
3418928a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418928e:	f7fe f8f9 	bl	34187484 <LL_RCC_IC8_Enable>
34189292:	e026      	b.n	341892e2 <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
34189294:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189298:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3418929c:	4bb9      	ldr	r3, [pc, #740]	@ (34189584 <HAL_RCCEx_PeriphCLKConfig+0x1abc>)
3418929e:	429a      	cmp	r2, r3
341892a0:	d116      	bne.n	341892d0 <HAL_RCCEx_PeriphCLKConfig+0x1808>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341892a2:	4bb7      	ldr	r3, [pc, #732]	@ (34189580 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341892a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341892a8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341892ac:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341892b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341892b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341892b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341892ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341892bc:	3b01      	subs	r3, #1
341892be:	041b      	lsls	r3, r3, #16
341892c0:	4313      	orrs	r3, r2
341892c2:	4aaf      	ldr	r2, [pc, #700]	@ (34189580 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341892c4:	430b      	orrs	r3, r1
341892c6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341892ca:	f7fe f91b 	bl	34187504 <LL_RCC_IC9_Enable>
341892ce:	e008      	b.n	341892e2 <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
341892d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341892d4:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
341892d8:	4bab      	ldr	r3, [pc, #684]	@ (34189588 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>)
341892da:	429a      	cmp	r2, r3
341892dc:	d101      	bne.n	341892e2 <HAL_RCCEx_PeriphCLKConfig+0x181a>
    {
      LL_RCC_CLKP_Enable();
341892de:	f7fe fbd1 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
341892e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341892e6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
341892ea:	4618      	mov	r0, r3
341892ec:	f7fd fb62 	bl	341869b4 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI2 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
341892f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341892f4:	e9d3 2300 	ldrd	r2, r3, [r3]
341892f8:	2100      	movs	r1, #0
341892fa:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
341892fe:	f003 0304 	and.w	r3, r3, #4
34189302:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
34189306:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
3418930a:	4603      	mov	r3, r0
3418930c:	460a      	mov	r2, r1
3418930e:	4313      	orrs	r3, r2
34189310:	d04b      	beq.n	341893aa <HAL_RCCEx_PeriphCLKConfig+0x18e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
34189312:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189316:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3418931a:	4b9c      	ldr	r3, [pc, #624]	@ (3418958c <HAL_RCCEx_PeriphCLKConfig+0x1ac4>)
3418931c:	429a      	cmp	r2, r3
3418931e:	d116      	bne.n	3418934e <HAL_RCCEx_PeriphCLKConfig+0x1886>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34189320:	4b97      	ldr	r3, [pc, #604]	@ (34189580 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34189322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34189326:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418932a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418932e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189332:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34189334:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418933a:	3b01      	subs	r3, #1
3418933c:	041b      	lsls	r3, r3, #16
3418933e:	4313      	orrs	r3, r2
34189340:	4a8f      	ldr	r2, [pc, #572]	@ (34189580 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34189342:	430b      	orrs	r3, r1
34189344:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34189348:	f7fe f89c 	bl	34187484 <LL_RCC_IC8_Enable>
3418934c:	e026      	b.n	3418939c <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
3418934e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189352:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
34189356:	4b8e      	ldr	r3, [pc, #568]	@ (34189590 <HAL_RCCEx_PeriphCLKConfig+0x1ac8>)
34189358:	429a      	cmp	r2, r3
3418935a:	d116      	bne.n	3418938a <HAL_RCCEx_PeriphCLKConfig+0x18c2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418935c:	4b88      	ldr	r3, [pc, #544]	@ (34189580 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418935e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189362:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189366:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418936a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418936e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189370:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189376:	3b01      	subs	r3, #1
34189378:	041b      	lsls	r3, r3, #16
3418937a:	4313      	orrs	r3, r2
3418937c:	4a80      	ldr	r2, [pc, #512]	@ (34189580 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418937e:	430b      	orrs	r3, r1
34189380:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189384:	f7fe f8be 	bl	34187504 <LL_RCC_IC9_Enable>
34189388:	e008      	b.n	3418939c <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
3418938a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418938e:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
34189392:	4b80      	ldr	r3, [pc, #512]	@ (34189594 <HAL_RCCEx_PeriphCLKConfig+0x1acc>)
34189394:	429a      	cmp	r2, r3
34189396:	d101      	bne.n	3418939c <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    {
      LL_RCC_CLKP_Enable();
34189398:	f7fe fb74 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
3418939c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341893a0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
341893a4:	4618      	mov	r0, r3
341893a6:	f7fd fb05 	bl	341869b4 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
341893aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341893ae:	e9d3 2300 	ldrd	r2, r3, [r3]
341893b2:	2100      	movs	r1, #0
341893b4:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
341893b8:	f003 0308 	and.w	r3, r3, #8
341893bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
341893c0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
341893c4:	4603      	mov	r3, r0
341893c6:	460a      	mov	r2, r1
341893c8:	4313      	orrs	r3, r2
341893ca:	d04b      	beq.n	34189464 <HAL_RCCEx_PeriphCLKConfig+0x199c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
341893cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341893d0:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
341893d4:	4b70      	ldr	r3, [pc, #448]	@ (34189598 <HAL_RCCEx_PeriphCLKConfig+0x1ad0>)
341893d6:	429a      	cmp	r2, r3
341893d8:	d116      	bne.n	34189408 <HAL_RCCEx_PeriphCLKConfig+0x1940>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341893da:	4b69      	ldr	r3, [pc, #420]	@ (34189580 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341893dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341893e0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341893e4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341893e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341893ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341893ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341893f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341893f4:	3b01      	subs	r3, #1
341893f6:	041b      	lsls	r3, r3, #16
341893f8:	4313      	orrs	r3, r2
341893fa:	4a61      	ldr	r2, [pc, #388]	@ (34189580 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341893fc:	430b      	orrs	r3, r1
341893fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34189402:	f7fe f83f 	bl	34187484 <LL_RCC_IC8_Enable>
34189406:	e026      	b.n	34189456 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
34189408:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418940c:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34189410:	4b62      	ldr	r3, [pc, #392]	@ (3418959c <HAL_RCCEx_PeriphCLKConfig+0x1ad4>)
34189412:	429a      	cmp	r2, r3
34189414:	d116      	bne.n	34189444 <HAL_RCCEx_PeriphCLKConfig+0x197c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189416:	4b5a      	ldr	r3, [pc, #360]	@ (34189580 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34189418:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418941c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189420:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189424:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189428:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418942a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418942e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189430:	3b01      	subs	r3, #1
34189432:	041b      	lsls	r3, r3, #16
34189434:	4313      	orrs	r3, r2
34189436:	4a52      	ldr	r2, [pc, #328]	@ (34189580 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34189438:	430b      	orrs	r3, r1
3418943a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418943e:	f7fe f861 	bl	34187504 <LL_RCC_IC9_Enable>
34189442:	e008      	b.n	34189456 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
34189444:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189448:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3418944c:	4b54      	ldr	r3, [pc, #336]	@ (341895a0 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>)
3418944e:	429a      	cmp	r2, r3
34189450:	d101      	bne.n	34189456 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    {
      LL_RCC_CLKP_Enable();
34189452:	f7fe fb17 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI3 clock*/
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
34189456:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418945a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
3418945e:	4618      	mov	r0, r3
34189460:	f7fd faa8 	bl	341869b4 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI4 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
34189464:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189468:	e9d3 2300 	ldrd	r2, r3, [r3]
3418946c:	2100      	movs	r1, #0
3418946e:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
34189472:	f003 0310 	and.w	r3, r3, #16
34189476:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
3418947a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
3418947e:	4603      	mov	r3, r0
34189480:	460a      	mov	r2, r1
34189482:	4313      	orrs	r3, r2
34189484:	d04b      	beq.n	3418951e <HAL_RCCEx_PeriphCLKConfig+0x1a56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));

    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
34189486:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418948a:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3418948e:	4b45      	ldr	r3, [pc, #276]	@ (341895a4 <HAL_RCCEx_PeriphCLKConfig+0x1adc>)
34189490:	429a      	cmp	r2, r3
34189492:	d116      	bne.n	341894c2 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189494:	4b3a      	ldr	r3, [pc, #232]	@ (34189580 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34189496:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418949a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418949e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341894a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341894a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341894a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341894ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341894ae:	3b01      	subs	r3, #1
341894b0:	041b      	lsls	r3, r3, #16
341894b2:	4313      	orrs	r3, r2
341894b4:	4a32      	ldr	r2, [pc, #200]	@ (34189580 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341894b6:	430b      	orrs	r3, r1
341894b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341894bc:	f7fe f822 	bl	34187504 <LL_RCC_IC9_Enable>
341894c0:	e026      	b.n	34189510 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
341894c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341894c6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
341894ca:	4b37      	ldr	r3, [pc, #220]	@ (341895a8 <HAL_RCCEx_PeriphCLKConfig+0x1ae0>)
341894cc:	429a      	cmp	r2, r3
341894ce:	d116      	bne.n	341894fe <HAL_RCCEx_PeriphCLKConfig+0x1a36>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341894d0:	4b2b      	ldr	r3, [pc, #172]	@ (34189580 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341894d2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341894d6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341894da:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341894de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341894e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341894e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341894e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341894ea:	3b01      	subs	r3, #1
341894ec:	041b      	lsls	r3, r3, #16
341894ee:	4313      	orrs	r3, r2
341894f0:	4a23      	ldr	r2, [pc, #140]	@ (34189580 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341894f2:	430b      	orrs	r3, r1
341894f4:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341894f8:	f7fe f904 	bl	34187704 <LL_RCC_IC14_Enable>
341894fc:	e008      	b.n	34189510 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
341894fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189502:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34189506:	4b29      	ldr	r3, [pc, #164]	@ (341895ac <HAL_RCCEx_PeriphCLKConfig+0x1ae4>)
34189508:	429a      	cmp	r2, r3
3418950a:	d101      	bne.n	34189510 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    {
      LL_RCC_CLKP_Enable();
3418950c:	f7fe faba 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI4 clock */
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
34189510:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189514:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
34189518:	4618      	mov	r0, r3
3418951a:	f7fd fa4b 	bl	341869b4 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
3418951e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189522:	e9d3 2300 	ldrd	r2, r3, [r3]
34189526:	2100      	movs	r1, #0
34189528:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
3418952c:	f003 0320 	and.w	r3, r3, #32
34189530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
34189534:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
34189538:	4603      	mov	r3, r0
3418953a:	460a      	mov	r2, r1
3418953c:	4313      	orrs	r3, r2
3418953e:	d067      	beq.n	34189610 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));

    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
34189540:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189544:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34189548:	4b19      	ldr	r3, [pc, #100]	@ (341895b0 <HAL_RCCEx_PeriphCLKConfig+0x1ae8>)
3418954a:	429a      	cmp	r2, r3
3418954c:	d132      	bne.n	341895b4 <HAL_RCCEx_PeriphCLKConfig+0x1aec>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418954e:	4b0c      	ldr	r3, [pc, #48]	@ (34189580 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34189550:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189554:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189558:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418955c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189560:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189562:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189568:	3b01      	subs	r3, #1
3418956a:	041b      	lsls	r3, r3, #16
3418956c:	4313      	orrs	r3, r2
3418956e:	4a04      	ldr	r2, [pc, #16]	@ (34189580 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34189570:	430b      	orrs	r3, r1
34189572:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189576:	f7fd ffc5 	bl	34187504 <LL_RCC_IC9_Enable>
3418957a:	e042      	b.n	34189602 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
3418957c:	07020420 	.word	0x07020420
34189580:	56028000 	.word	0x56028000
34189584:	07030420 	.word	0x07030420
34189588:	07010420 	.word	0x07010420
3418958c:	07020820 	.word	0x07020820
34189590:	07030820 	.word	0x07030820
34189594:	07010820 	.word	0x07010820
34189598:	07020c20 	.word	0x07020c20
3418959c:	07030c20 	.word	0x07030c20
341895a0:	07010c20 	.word	0x07010c20
341895a4:	07021020 	.word	0x07021020
341895a8:	07031020 	.word	0x07031020
341895ac:	07011020 	.word	0x07011020
341895b0:	07021420 	.word	0x07021420
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
341895b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341895b8:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
341895bc:	4bc2      	ldr	r3, [pc, #776]	@ (341898c8 <HAL_RCCEx_PeriphCLKConfig+0x1e00>)
341895be:	429a      	cmp	r2, r3
341895c0:	d116      	bne.n	341895f0 <HAL_RCCEx_PeriphCLKConfig+0x1b28>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341895c2:	4bc2      	ldr	r3, [pc, #776]	@ (341898cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341895c4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341895c8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341895cc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341895d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341895d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341895d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341895da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341895dc:	3b01      	subs	r3, #1
341895de:	041b      	lsls	r3, r3, #16
341895e0:	4313      	orrs	r3, r2
341895e2:	4aba      	ldr	r2, [pc, #744]	@ (341898cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341895e4:	430b      	orrs	r3, r1
341895e6:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341895ea:	f7fe f88b 	bl	34187704 <LL_RCC_IC14_Enable>
341895ee:	e008      	b.n	34189602 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
341895f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341895f4:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
341895f8:	4bb5      	ldr	r3, [pc, #724]	@ (341898d0 <HAL_RCCEx_PeriphCLKConfig+0x1e08>)
341895fa:	429a      	cmp	r2, r3
341895fc:	d101      	bne.n	34189602 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    {
      LL_RCC_CLKP_Enable();
341895fe:	f7fe fa41 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI5 clock */
    __HAL_RCC_SPI5_CONFIG(PeriphClkInit->Spi5ClockSelection);
34189602:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189606:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418960a:	4618      	mov	r0, r3
3418960c:	f7fd f9d2 	bl	341869b4 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
34189610:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189614:	e9d3 2300 	ldrd	r2, r3, [r3]
34189618:	2100      	movs	r1, #0
3418961a:	67b9      	str	r1, [r7, #120]	@ 0x78
3418961c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34189620:	67fb      	str	r3, [r7, #124]	@ 0x7c
34189622:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
34189626:	4603      	mov	r3, r0
34189628:	460a      	mov	r2, r1
3418962a:	4313      	orrs	r3, r2
3418962c:	d04b      	beq.n	341896c6 <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
3418962e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189632:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34189636:	4ba7      	ldr	r3, [pc, #668]	@ (341898d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>)
34189638:	429a      	cmp	r2, r3
3418963a:	d116      	bne.n	3418966a <HAL_RCCEx_PeriphCLKConfig+0x1ba2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418963c:	4ba3      	ldr	r3, [pc, #652]	@ (341898cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418963e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34189642:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189646:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418964a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418964e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34189650:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34189656:	3b01      	subs	r3, #1
34189658:	041b      	lsls	r3, r3, #16
3418965a:	4313      	orrs	r3, r2
3418965c:	4a9b      	ldr	r2, [pc, #620]	@ (341898cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418965e:	430b      	orrs	r3, r1
34189660:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34189664:	f7fd ff0e 	bl	34187484 <LL_RCC_IC8_Enable>
34189668:	e026      	b.n	341896b8 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
3418966a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418966e:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34189672:	4b99      	ldr	r3, [pc, #612]	@ (341898d8 <HAL_RCCEx_PeriphCLKConfig+0x1e10>)
34189674:	429a      	cmp	r2, r3
34189676:	d116      	bne.n	341896a6 <HAL_RCCEx_PeriphCLKConfig+0x1bde>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189678:	4b94      	ldr	r3, [pc, #592]	@ (341898cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418967a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418967e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189682:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189686:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418968a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418968c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189692:	3b01      	subs	r3, #1
34189694:	041b      	lsls	r3, r3, #16
34189696:	4313      	orrs	r3, r2
34189698:	4a8c      	ldr	r2, [pc, #560]	@ (341898cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418969a:	430b      	orrs	r3, r1
3418969c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341896a0:	f7fd ff30 	bl	34187504 <LL_RCC_IC9_Enable>
341896a4:	e008      	b.n	341896b8 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
341896a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341896aa:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
341896ae:	4b8b      	ldr	r3, [pc, #556]	@ (341898dc <HAL_RCCEx_PeriphCLKConfig+0x1e14>)
341896b0:	429a      	cmp	r2, r3
341896b2:	d101      	bne.n	341896b8 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    {
      LL_RCC_CLKP_Enable();
341896b4:	f7fe f9e6 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
341896b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341896bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
341896c0:	4618      	mov	r0, r3
341896c2:	f7fd f977 	bl	341869b4 <LL_RCC_SetSPIClockSource>
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
341896c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341896ca:	e9d3 2300 	ldrd	r2, r3, [r3]
341896ce:	2100      	movs	r1, #0
341896d0:	6739      	str	r1, [r7, #112]	@ 0x70
341896d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341896d6:	677b      	str	r3, [r7, #116]	@ 0x74
341896d8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
341896dc:	4603      	mov	r3, r0
341896de:	460a      	mov	r2, r1
341896e0:	4313      	orrs	r3, r2
341896e2:	d04b      	beq.n	3418977c <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
341896e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341896e8:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
341896ec:	4b7c      	ldr	r3, [pc, #496]	@ (341898e0 <HAL_RCCEx_PeriphCLKConfig+0x1e18>)
341896ee:	429a      	cmp	r2, r3
341896f0:	d116      	bne.n	34189720 <HAL_RCCEx_PeriphCLKConfig+0x1c58>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341896f2:	4b76      	ldr	r3, [pc, #472]	@ (341898cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341896f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341896f8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341896fc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189700:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189704:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189706:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418970a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418970c:	3b01      	subs	r3, #1
3418970e:	041b      	lsls	r3, r3, #16
34189710:	4313      	orrs	r3, r2
34189712:	4a6e      	ldr	r2, [pc, #440]	@ (341898cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189714:	430b      	orrs	r3, r1
34189716:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418971a:	f7fd fef3 	bl	34187504 <LL_RCC_IC9_Enable>
3418971e:	e026      	b.n	3418976e <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
34189720:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189724:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34189728:	4b6e      	ldr	r3, [pc, #440]	@ (341898e4 <HAL_RCCEx_PeriphCLKConfig+0x1e1c>)
3418972a:	429a      	cmp	r2, r3
3418972c:	d116      	bne.n	3418975c <HAL_RCCEx_PeriphCLKConfig+0x1c94>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418972e:	4b67      	ldr	r3, [pc, #412]	@ (341898cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189730:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34189734:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189738:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418973c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189740:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34189742:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34189748:	3b01      	subs	r3, #1
3418974a:	041b      	lsls	r3, r3, #16
3418974c:	4313      	orrs	r3, r2
3418974e:	4a5f      	ldr	r2, [pc, #380]	@ (341898cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189750:	430b      	orrs	r3, r1
34189752:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34189756:	f7fd ffd5 	bl	34187704 <LL_RCC_IC14_Enable>
3418975a:	e008      	b.n	3418976e <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
3418975c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189760:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34189764:	4b60      	ldr	r3, [pc, #384]	@ (341898e8 <HAL_RCCEx_PeriphCLKConfig+0x1e20>)
34189766:	429a      	cmp	r2, r3
34189768:	d101      	bne.n	3418976e <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    {
      LL_RCC_CLKP_Enable();
3418976a:	f7fe f98b 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART1 clock */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
3418976e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189772:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34189776:	4618      	mov	r0, r3
34189778:	f7fd f927 	bl	341869ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
3418977c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189780:	e9d3 2300 	ldrd	r2, r3, [r3]
34189784:	2100      	movs	r1, #0
34189786:	66b9      	str	r1, [r7, #104]	@ 0x68
34189788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418978c:	66fb      	str	r3, [r7, #108]	@ 0x6c
3418978e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
34189792:	4603      	mov	r3, r0
34189794:	460a      	mov	r2, r1
34189796:	4313      	orrs	r3, r2
34189798:	d04b      	beq.n	34189832 <HAL_RCCEx_PeriphCLKConfig+0x1d6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
3418979a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418979e:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
341897a2:	4b52      	ldr	r3, [pc, #328]	@ (341898ec <HAL_RCCEx_PeriphCLKConfig+0x1e24>)
341897a4:	429a      	cmp	r2, r3
341897a6:	d116      	bne.n	341897d6 <HAL_RCCEx_PeriphCLKConfig+0x1d0e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341897a8:	4b48      	ldr	r3, [pc, #288]	@ (341898cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341897aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341897ae:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341897b2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341897b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341897ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341897bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341897c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341897c2:	3b01      	subs	r3, #1
341897c4:	041b      	lsls	r3, r3, #16
341897c6:	4313      	orrs	r3, r2
341897c8:	4a40      	ldr	r2, [pc, #256]	@ (341898cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341897ca:	430b      	orrs	r3, r1
341897cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341897d0:	f7fd fe98 	bl	34187504 <LL_RCC_IC9_Enable>
341897d4:	e026      	b.n	34189824 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
341897d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341897da:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
341897de:	4b44      	ldr	r3, [pc, #272]	@ (341898f0 <HAL_RCCEx_PeriphCLKConfig+0x1e28>)
341897e0:	429a      	cmp	r2, r3
341897e2:	d116      	bne.n	34189812 <HAL_RCCEx_PeriphCLKConfig+0x1d4a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341897e4:	4b39      	ldr	r3, [pc, #228]	@ (341898cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341897e6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341897ea:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341897ee:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341897f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341897f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341897f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341897fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341897fe:	3b01      	subs	r3, #1
34189800:	041b      	lsls	r3, r3, #16
34189802:	4313      	orrs	r3, r2
34189804:	4a31      	ldr	r2, [pc, #196]	@ (341898cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189806:	430b      	orrs	r3, r1
34189808:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418980c:	f7fd ff7a 	bl	34187704 <LL_RCC_IC14_Enable>
34189810:	e008      	b.n	34189824 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
34189812:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189816:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3418981a:	4b36      	ldr	r3, [pc, #216]	@ (341898f4 <HAL_RCCEx_PeriphCLKConfig+0x1e2c>)
3418981c:	429a      	cmp	r2, r3
3418981e:	d101      	bne.n	34189824 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    {
      LL_RCC_CLKP_Enable();
34189820:	f7fe f930 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART2 clock */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
34189824:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189828:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
3418982c:	4618      	mov	r0, r3
3418982e:	f7fd f8cc 	bl	341869ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART3 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
34189832:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189836:	e9d3 2300 	ldrd	r2, r3, [r3]
3418983a:	2100      	movs	r1, #0
3418983c:	6639      	str	r1, [r7, #96]	@ 0x60
3418983e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34189842:	667b      	str	r3, [r7, #100]	@ 0x64
34189844:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
34189848:	4603      	mov	r3, r0
3418984a:	460a      	mov	r2, r1
3418984c:	4313      	orrs	r3, r2
3418984e:	d067      	beq.n	34189920 <HAL_RCCEx_PeriphCLKConfig+0x1e58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
34189850:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189854:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34189858:	4b27      	ldr	r3, [pc, #156]	@ (341898f8 <HAL_RCCEx_PeriphCLKConfig+0x1e30>)
3418985a:	429a      	cmp	r2, r3
3418985c:	d116      	bne.n	3418988c <HAL_RCCEx_PeriphCLKConfig+0x1dc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418985e:	4b1b      	ldr	r3, [pc, #108]	@ (341898cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189860:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189864:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189868:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418986c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189870:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189872:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189878:	3b01      	subs	r3, #1
3418987a:	041b      	lsls	r3, r3, #16
3418987c:	4313      	orrs	r3, r2
3418987e:	4a13      	ldr	r2, [pc, #76]	@ (341898cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189880:	430b      	orrs	r3, r1
34189882:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189886:	f7fd fe3d 	bl	34187504 <LL_RCC_IC9_Enable>
3418988a:	e042      	b.n	34189912 <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
3418988c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189890:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34189894:	4b19      	ldr	r3, [pc, #100]	@ (341898fc <HAL_RCCEx_PeriphCLKConfig+0x1e34>)
34189896:	429a      	cmp	r2, r3
34189898:	d132      	bne.n	34189900 <HAL_RCCEx_PeriphCLKConfig+0x1e38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418989a:	4b0c      	ldr	r3, [pc, #48]	@ (341898cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418989c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341898a0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341898a4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341898a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341898ac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341898ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341898b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341898b4:	3b01      	subs	r3, #1
341898b6:	041b      	lsls	r3, r3, #16
341898b8:	4313      	orrs	r3, r2
341898ba:	4a04      	ldr	r2, [pc, #16]	@ (341898cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341898bc:	430b      	orrs	r3, r1
341898be:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341898c2:	f7fd ff1f 	bl	34187704 <LL_RCC_IC14_Enable>
341898c6:	e024      	b.n	34189912 <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
341898c8:	07031420 	.word	0x07031420
341898cc:	56028000 	.word	0x56028000
341898d0:	07011420 	.word	0x07011420
341898d4:	07021820 	.word	0x07021820
341898d8:	07031820 	.word	0x07031820
341898dc:	07011820 	.word	0x07011820
341898e0:	07020030 	.word	0x07020030
341898e4:	07030030 	.word	0x07030030
341898e8:	07010030 	.word	0x07010030
341898ec:	07020430 	.word	0x07020430
341898f0:	07030430 	.word	0x07030430
341898f4:	07010430 	.word	0x07010430
341898f8:	07020830 	.word	0x07020830
341898fc:	07030830 	.word	0x07030830
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
34189900:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189904:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34189908:	4bb3      	ldr	r3, [pc, #716]	@ (34189bd8 <HAL_RCCEx_PeriphCLKConfig+0x2110>)
3418990a:	429a      	cmp	r2, r3
3418990c:	d101      	bne.n	34189912 <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    {
      LL_RCC_CLKP_Enable();
3418990e:	f7fe f8b9 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART3 clock */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
34189912:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189916:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
3418991a:	4618      	mov	r0, r3
3418991c:	f7fd f855 	bl	341869ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART4 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
34189920:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189924:	e9d3 2300 	ldrd	r2, r3, [r3]
34189928:	2100      	movs	r1, #0
3418992a:	65b9      	str	r1, [r7, #88]	@ 0x58
3418992c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34189930:	65fb      	str	r3, [r7, #92]	@ 0x5c
34189932:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
34189936:	4603      	mov	r3, r0
34189938:	460a      	mov	r2, r1
3418993a:	4313      	orrs	r3, r2
3418993c:	d04b      	beq.n	341899d6 <HAL_RCCEx_PeriphCLKConfig+0x1f0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
3418993e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189942:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34189946:	4ba5      	ldr	r3, [pc, #660]	@ (34189bdc <HAL_RCCEx_PeriphCLKConfig+0x2114>)
34189948:	429a      	cmp	r2, r3
3418994a:	d116      	bne.n	3418997a <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418994c:	4ba4      	ldr	r3, [pc, #656]	@ (34189be0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418994e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189952:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189956:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418995a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418995e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189960:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189966:	3b01      	subs	r3, #1
34189968:	041b      	lsls	r3, r3, #16
3418996a:	4313      	orrs	r3, r2
3418996c:	4a9c      	ldr	r2, [pc, #624]	@ (34189be0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418996e:	430b      	orrs	r3, r1
34189970:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189974:	f7fd fdc6 	bl	34187504 <LL_RCC_IC9_Enable>
34189978:	e026      	b.n	341899c8 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
3418997a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418997e:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34189982:	4b98      	ldr	r3, [pc, #608]	@ (34189be4 <HAL_RCCEx_PeriphCLKConfig+0x211c>)
34189984:	429a      	cmp	r2, r3
34189986:	d116      	bne.n	341899b6 <HAL_RCCEx_PeriphCLKConfig+0x1eee>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34189988:	4b95      	ldr	r3, [pc, #596]	@ (34189be0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418998a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418998e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189992:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189996:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418999a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418999c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341899a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341899a2:	3b01      	subs	r3, #1
341899a4:	041b      	lsls	r3, r3, #16
341899a6:	4313      	orrs	r3, r2
341899a8:	4a8d      	ldr	r2, [pc, #564]	@ (34189be0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
341899aa:	430b      	orrs	r3, r1
341899ac:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341899b0:	f7fd fea8 	bl	34187704 <LL_RCC_IC14_Enable>
341899b4:	e008      	b.n	341899c8 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
341899b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341899ba:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
341899be:	4b8a      	ldr	r3, [pc, #552]	@ (34189be8 <HAL_RCCEx_PeriphCLKConfig+0x2120>)
341899c0:	429a      	cmp	r2, r3
341899c2:	d101      	bne.n	341899c8 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    {
      LL_RCC_CLKP_Enable();
341899c4:	f7fe f85e 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART4 clock */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
341899c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341899cc:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
341899d0:	4618      	mov	r0, r3
341899d2:	f7fc fffa 	bl	341869ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART5 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
341899d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341899da:	e9d3 2300 	ldrd	r2, r3, [r3]
341899de:	2100      	movs	r1, #0
341899e0:	6539      	str	r1, [r7, #80]	@ 0x50
341899e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
341899e6:	657b      	str	r3, [r7, #84]	@ 0x54
341899e8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
341899ec:	4603      	mov	r3, r0
341899ee:	460a      	mov	r2, r1
341899f0:	4313      	orrs	r3, r2
341899f2:	d04b      	beq.n	34189a8c <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
341899f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341899f8:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
341899fc:	4b7b      	ldr	r3, [pc, #492]	@ (34189bec <HAL_RCCEx_PeriphCLKConfig+0x2124>)
341899fe:	429a      	cmp	r2, r3
34189a00:	d116      	bne.n	34189a30 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189a02:	4b77      	ldr	r3, [pc, #476]	@ (34189be0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189a04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189a08:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189a0c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189a10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189a14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189a16:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189a1c:	3b01      	subs	r3, #1
34189a1e:	041b      	lsls	r3, r3, #16
34189a20:	4313      	orrs	r3, r2
34189a22:	4a6f      	ldr	r2, [pc, #444]	@ (34189be0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189a24:	430b      	orrs	r3, r1
34189a26:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189a2a:	f7fd fd6b 	bl	34187504 <LL_RCC_IC9_Enable>
34189a2e:	e026      	b.n	34189a7e <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
34189a30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189a34:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34189a38:	4b6d      	ldr	r3, [pc, #436]	@ (34189bf0 <HAL_RCCEx_PeriphCLKConfig+0x2128>)
34189a3a:	429a      	cmp	r2, r3
34189a3c:	d116      	bne.n	34189a6c <HAL_RCCEx_PeriphCLKConfig+0x1fa4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34189a3e:	4b68      	ldr	r3, [pc, #416]	@ (34189be0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189a40:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34189a44:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189a48:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189a4c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189a50:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34189a52:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34189a58:	3b01      	subs	r3, #1
34189a5a:	041b      	lsls	r3, r3, #16
34189a5c:	4313      	orrs	r3, r2
34189a5e:	4a60      	ldr	r2, [pc, #384]	@ (34189be0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189a60:	430b      	orrs	r3, r1
34189a62:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34189a66:	f7fd fe4d 	bl	34187704 <LL_RCC_IC14_Enable>
34189a6a:	e008      	b.n	34189a7e <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
34189a6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189a70:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34189a74:	4b5f      	ldr	r3, [pc, #380]	@ (34189bf4 <HAL_RCCEx_PeriphCLKConfig+0x212c>)
34189a76:	429a      	cmp	r2, r3
34189a78:	d101      	bne.n	34189a7e <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    {
      LL_RCC_CLKP_Enable();
34189a7a:	f7fe f803 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART5 clock */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
34189a7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189a82:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
34189a86:	4618      	mov	r0, r3
34189a88:	f7fc ff9f 	bl	341869ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
34189a8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189a90:	e9d3 2300 	ldrd	r2, r3, [r3]
34189a94:	2100      	movs	r1, #0
34189a96:	64b9      	str	r1, [r7, #72]	@ 0x48
34189a98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34189a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
34189a9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
34189aa2:	4603      	mov	r3, r0
34189aa4:	460a      	mov	r2, r1
34189aa6:	4313      	orrs	r3, r2
34189aa8:	d04b      	beq.n	34189b42 <HAL_RCCEx_PeriphCLKConfig+0x207a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
34189aaa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189aae:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34189ab2:	4b51      	ldr	r3, [pc, #324]	@ (34189bf8 <HAL_RCCEx_PeriphCLKConfig+0x2130>)
34189ab4:	429a      	cmp	r2, r3
34189ab6:	d116      	bne.n	34189ae6 <HAL_RCCEx_PeriphCLKConfig+0x201e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189ab8:	4b49      	ldr	r3, [pc, #292]	@ (34189be0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189aba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189abe:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189ac2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189ac6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189aca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189acc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189ad2:	3b01      	subs	r3, #1
34189ad4:	041b      	lsls	r3, r3, #16
34189ad6:	4313      	orrs	r3, r2
34189ad8:	4a41      	ldr	r2, [pc, #260]	@ (34189be0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189ada:	430b      	orrs	r3, r1
34189adc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189ae0:	f7fd fd10 	bl	34187504 <LL_RCC_IC9_Enable>
34189ae4:	e026      	b.n	34189b34 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
34189ae6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189aea:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34189aee:	4b43      	ldr	r3, [pc, #268]	@ (34189bfc <HAL_RCCEx_PeriphCLKConfig+0x2134>)
34189af0:	429a      	cmp	r2, r3
34189af2:	d116      	bne.n	34189b22 <HAL_RCCEx_PeriphCLKConfig+0x205a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34189af4:	4b3a      	ldr	r3, [pc, #232]	@ (34189be0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189af6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34189afa:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189afe:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189b02:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189b06:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34189b08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34189b0e:	3b01      	subs	r3, #1
34189b10:	041b      	lsls	r3, r3, #16
34189b12:	4313      	orrs	r3, r2
34189b14:	4a32      	ldr	r2, [pc, #200]	@ (34189be0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189b16:	430b      	orrs	r3, r1
34189b18:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34189b1c:	f7fd fdf2 	bl	34187704 <LL_RCC_IC14_Enable>
34189b20:	e008      	b.n	34189b34 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
34189b22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189b26:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34189b2a:	4b35      	ldr	r3, [pc, #212]	@ (34189c00 <HAL_RCCEx_PeriphCLKConfig+0x2138>)
34189b2c:	429a      	cmp	r2, r3
34189b2e:	d101      	bne.n	34189b34 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    {
      LL_RCC_CLKP_Enable();
34189b30:	f7fd ffa8 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART6 clock */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
34189b34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189b38:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34189b3c:	4618      	mov	r0, r3
34189b3e:	f7fc ff44 	bl	341869ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART7 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
34189b42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189b46:	e9d3 2300 	ldrd	r2, r3, [r3]
34189b4a:	2100      	movs	r1, #0
34189b4c:	6439      	str	r1, [r7, #64]	@ 0x40
34189b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34189b52:	647b      	str	r3, [r7, #68]	@ 0x44
34189b54:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
34189b58:	4603      	mov	r3, r0
34189b5a:	460a      	mov	r2, r1
34189b5c:	4313      	orrs	r3, r2
34189b5e:	d065      	beq.n	34189c2c <HAL_RCCEx_PeriphCLKConfig+0x2164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
34189b60:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189b64:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34189b68:	4b26      	ldr	r3, [pc, #152]	@ (34189c04 <HAL_RCCEx_PeriphCLKConfig+0x213c>)
34189b6a:	429a      	cmp	r2, r3
34189b6c:	d116      	bne.n	34189b9c <HAL_RCCEx_PeriphCLKConfig+0x20d4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189b6e:	4b1c      	ldr	r3, [pc, #112]	@ (34189be0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189b70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189b74:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189b78:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189b7c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189b80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189b82:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189b88:	3b01      	subs	r3, #1
34189b8a:	041b      	lsls	r3, r3, #16
34189b8c:	4313      	orrs	r3, r2
34189b8e:	4a14      	ldr	r2, [pc, #80]	@ (34189be0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189b90:	430b      	orrs	r3, r1
34189b92:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189b96:	f7fd fcb5 	bl	34187504 <LL_RCC_IC9_Enable>
34189b9a:	e040      	b.n	34189c1e <HAL_RCCEx_PeriphCLKConfig+0x2156>
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
34189b9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189ba0:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34189ba4:	4b18      	ldr	r3, [pc, #96]	@ (34189c08 <HAL_RCCEx_PeriphCLKConfig+0x2140>)
34189ba6:	429a      	cmp	r2, r3
34189ba8:	d130      	bne.n	34189c0c <HAL_RCCEx_PeriphCLKConfig+0x2144>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34189baa:	4b0d      	ldr	r3, [pc, #52]	@ (34189be0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189bac:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34189bb0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189bb4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189bb8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189bbc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34189bbe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34189bc4:	3b01      	subs	r3, #1
34189bc6:	041b      	lsls	r3, r3, #16
34189bc8:	4313      	orrs	r3, r2
34189bca:	4a05      	ldr	r2, [pc, #20]	@ (34189be0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189bcc:	430b      	orrs	r3, r1
34189bce:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34189bd2:	f7fd fd97 	bl	34187704 <LL_RCC_IC14_Enable>
34189bd6:	e022      	b.n	34189c1e <HAL_RCCEx_PeriphCLKConfig+0x2156>
34189bd8:	07010830 	.word	0x07010830
34189bdc:	07020c30 	.word	0x07020c30
34189be0:	56028000 	.word	0x56028000
34189be4:	07030c30 	.word	0x07030c30
34189be8:	07010c30 	.word	0x07010c30
34189bec:	07021030 	.word	0x07021030
34189bf0:	07031030 	.word	0x07031030
34189bf4:	07011030 	.word	0x07011030
34189bf8:	07021430 	.word	0x07021430
34189bfc:	07031430 	.word	0x07031430
34189c00:	07011430 	.word	0x07011430
34189c04:	07021830 	.word	0x07021830
34189c08:	07031830 	.word	0x07031830
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
34189c0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189c10:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34189c14:	4bc8      	ldr	r3, [pc, #800]	@ (34189f38 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34189c16:	429a      	cmp	r2, r3
34189c18:	d101      	bne.n	34189c1e <HAL_RCCEx_PeriphCLKConfig+0x2156>
    {
      LL_RCC_CLKP_Enable();
34189c1a:	f7fd ff33 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART7 clock */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
34189c1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189c22:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
34189c26:	4618      	mov	r0, r3
34189c28:	f7fc fecf 	bl	341869ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART8 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34189c2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189c30:	e9d3 2300 	ldrd	r2, r3, [r3]
34189c34:	2100      	movs	r1, #0
34189c36:	63b9      	str	r1, [r7, #56]	@ 0x38
34189c38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34189c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
34189c3e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
34189c42:	4603      	mov	r3, r0
34189c44:	460a      	mov	r2, r1
34189c46:	4313      	orrs	r3, r2
34189c48:	d04b      	beq.n	34189ce2 <HAL_RCCEx_PeriphCLKConfig+0x221a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
34189c4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189c4e:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34189c52:	4bba      	ldr	r3, [pc, #744]	@ (34189f3c <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34189c54:	429a      	cmp	r2, r3
34189c56:	d116      	bne.n	34189c86 <HAL_RCCEx_PeriphCLKConfig+0x21be>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189c58:	4bb9      	ldr	r3, [pc, #740]	@ (34189f40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189c5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189c5e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189c62:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189c66:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189c6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189c6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189c72:	3b01      	subs	r3, #1
34189c74:	041b      	lsls	r3, r3, #16
34189c76:	4313      	orrs	r3, r2
34189c78:	4ab1      	ldr	r2, [pc, #708]	@ (34189f40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189c7a:	430b      	orrs	r3, r1
34189c7c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189c80:	f7fd fc40 	bl	34187504 <LL_RCC_IC9_Enable>
34189c84:	e026      	b.n	34189cd4 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
34189c86:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189c8a:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34189c8e:	4bad      	ldr	r3, [pc, #692]	@ (34189f44 <HAL_RCCEx_PeriphCLKConfig+0x247c>)
34189c90:	429a      	cmp	r2, r3
34189c92:	d116      	bne.n	34189cc2 <HAL_RCCEx_PeriphCLKConfig+0x21fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34189c94:	4baa      	ldr	r3, [pc, #680]	@ (34189f40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189c96:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34189c9a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189c9e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189ca2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189ca6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34189ca8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34189cae:	3b01      	subs	r3, #1
34189cb0:	041b      	lsls	r3, r3, #16
34189cb2:	4313      	orrs	r3, r2
34189cb4:	4aa2      	ldr	r2, [pc, #648]	@ (34189f40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189cb6:	430b      	orrs	r3, r1
34189cb8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34189cbc:	f7fd fd22 	bl	34187704 <LL_RCC_IC14_Enable>
34189cc0:	e008      	b.n	34189cd4 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
34189cc2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189cc6:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34189cca:	4b9f      	ldr	r3, [pc, #636]	@ (34189f48 <HAL_RCCEx_PeriphCLKConfig+0x2480>)
34189ccc:	429a      	cmp	r2, r3
34189cce:	d101      	bne.n	34189cd4 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    {
      LL_RCC_CLKP_Enable();
34189cd0:	f7fd fed8 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART8 clock */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
34189cd4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189cd8:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
34189cdc:	4618      	mov	r0, r3
34189cde:	f7fc fe74 	bl	341869ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART9 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
34189ce2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
34189cea:	2100      	movs	r1, #0
34189cec:	6339      	str	r1, [r7, #48]	@ 0x30
34189cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34189cf2:	637b      	str	r3, [r7, #52]	@ 0x34
34189cf4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34189cf8:	4603      	mov	r3, r0
34189cfa:	460a      	mov	r2, r1
34189cfc:	4313      	orrs	r3, r2
34189cfe:	d04b      	beq.n	34189d98 <HAL_RCCEx_PeriphCLKConfig+0x22d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));

    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
34189d00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189d04:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34189d08:	4a90      	ldr	r2, [pc, #576]	@ (34189f4c <HAL_RCCEx_PeriphCLKConfig+0x2484>)
34189d0a:	4293      	cmp	r3, r2
34189d0c:	d116      	bne.n	34189d3c <HAL_RCCEx_PeriphCLKConfig+0x2274>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189d0e:	4b8c      	ldr	r3, [pc, #560]	@ (34189f40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189d10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189d14:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189d18:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189d1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189d20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189d22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189d28:	3b01      	subs	r3, #1
34189d2a:	041b      	lsls	r3, r3, #16
34189d2c:	4313      	orrs	r3, r2
34189d2e:	4a84      	ldr	r2, [pc, #528]	@ (34189f40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189d30:	430b      	orrs	r3, r1
34189d32:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189d36:	f7fd fbe5 	bl	34187504 <LL_RCC_IC9_Enable>
34189d3a:	e026      	b.n	34189d8a <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
34189d3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189d40:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34189d44:	4a82      	ldr	r2, [pc, #520]	@ (34189f50 <HAL_RCCEx_PeriphCLKConfig+0x2488>)
34189d46:	4293      	cmp	r3, r2
34189d48:	d116      	bne.n	34189d78 <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34189d4a:	4b7d      	ldr	r3, [pc, #500]	@ (34189f40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189d4c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34189d50:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189d54:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189d58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189d5c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34189d5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189d62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34189d64:	3b01      	subs	r3, #1
34189d66:	041b      	lsls	r3, r3, #16
34189d68:	4313      	orrs	r3, r2
34189d6a:	4a75      	ldr	r2, [pc, #468]	@ (34189f40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189d6c:	430b      	orrs	r3, r1
34189d6e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34189d72:	f7fd fcc7 	bl	34187704 <LL_RCC_IC14_Enable>
34189d76:	e008      	b.n	34189d8a <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
34189d78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189d7c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34189d80:	4a74      	ldr	r2, [pc, #464]	@ (34189f54 <HAL_RCCEx_PeriphCLKConfig+0x248c>)
34189d82:	4293      	cmp	r3, r2
34189d84:	d101      	bne.n	34189d8a <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    {
      LL_RCC_CLKP_Enable();
34189d86:	f7fd fe7d 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART9 clock */
    __HAL_RCC_UART9_CONFIG(PeriphClkInit->Uart9ClockSelection);
34189d8a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189d8e:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34189d92:	4618      	mov	r0, r3
34189d94:	f7fc fe19 	bl	341869ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART10 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
34189d98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
34189da0:	2100      	movs	r1, #0
34189da2:	62b9      	str	r1, [r7, #40]	@ 0x28
34189da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34189da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
34189daa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
34189dae:	4603      	mov	r3, r0
34189db0:	460a      	mov	r2, r1
34189db2:	4313      	orrs	r3, r2
34189db4:	d04b      	beq.n	34189e4e <HAL_RCCEx_PeriphCLKConfig+0x2386>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));

    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
34189db6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189dba:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34189dbe:	4a66      	ldr	r2, [pc, #408]	@ (34189f58 <HAL_RCCEx_PeriphCLKConfig+0x2490>)
34189dc0:	4293      	cmp	r3, r2
34189dc2:	d116      	bne.n	34189df2 <HAL_RCCEx_PeriphCLKConfig+0x232a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189dc4:	4b5e      	ldr	r3, [pc, #376]	@ (34189f40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189dc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189dca:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34189dce:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34189dd2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34189dd6:	6c91      	ldr	r1, [r2, #72]	@ 0x48
34189dd8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34189ddc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
34189dde:	3a01      	subs	r2, #1
34189de0:	0412      	lsls	r2, r2, #16
34189de2:	430a      	orrs	r2, r1
34189de4:	4956      	ldr	r1, [pc, #344]	@ (34189f40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189de6:	4313      	orrs	r3, r2
34189de8:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189dec:	f7fd fb8a 	bl	34187504 <LL_RCC_IC9_Enable>
34189df0:	e026      	b.n	34189e40 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
34189df2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189df6:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34189dfa:	4a58      	ldr	r2, [pc, #352]	@ (34189f5c <HAL_RCCEx_PeriphCLKConfig+0x2494>)
34189dfc:	4293      	cmp	r3, r2
34189dfe:	d116      	bne.n	34189e2e <HAL_RCCEx_PeriphCLKConfig+0x2366>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34189e00:	4b4f      	ldr	r3, [pc, #316]	@ (34189f40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189e02:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34189e06:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34189e0a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34189e0e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34189e12:	6f11      	ldr	r1, [r2, #112]	@ 0x70
34189e14:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34189e18:	6f52      	ldr	r2, [r2, #116]	@ 0x74
34189e1a:	3a01      	subs	r2, #1
34189e1c:	0412      	lsls	r2, r2, #16
34189e1e:	430a      	orrs	r2, r1
34189e20:	4947      	ldr	r1, [pc, #284]	@ (34189f40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189e22:	4313      	orrs	r3, r2
34189e24:	f8c1 30f8 	str.w	r3, [r1, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34189e28:	f7fd fc6c 	bl	34187704 <LL_RCC_IC14_Enable>
34189e2c:	e008      	b.n	34189e40 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
34189e2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189e32:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34189e36:	4a4a      	ldr	r2, [pc, #296]	@ (34189f60 <HAL_RCCEx_PeriphCLKConfig+0x2498>)
34189e38:	4293      	cmp	r3, r2
34189e3a:	d101      	bne.n	34189e40 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    {
      LL_RCC_CLKP_Enable();
34189e3c:	f7fd fe22 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART10 clock */
    __HAL_RCC_USART10_CONFIG(PeriphClkInit->Usart10ClockSelection);
34189e40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189e44:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34189e48:	4618      	mov	r0, r3
34189e4a:	f7fc fdbe 	bl	341869ca <LL_RCC_SetUSARTClockSource>
  }

  /*------------------------------ USBPHY1 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
34189e4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189e52:	e9d3 2300 	ldrd	r2, r3, [r3]
34189e56:	2100      	movs	r1, #0
34189e58:	6239      	str	r1, [r7, #32]
34189e5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34189e5e:	627b      	str	r3, [r7, #36]	@ 0x24
34189e60:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
34189e64:	4603      	mov	r3, r0
34189e66:	460a      	mov	r2, r1
34189e68:	4313      	orrs	r3, r2
34189e6a:	d014      	beq.n	34189e96 <HAL_RCCEx_PeriphCLKConfig+0x23ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));

    /* Set the source of USBPHY1 clock*/
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34189e6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189e70:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34189e74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34189e78:	4618      	mov	r0, r3
34189e7a:	f7fc fd4e 	bl	3418691a <LL_RCC_SetOTGPHYCKREFClockSource>
34189e7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189e82:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34189e86:	0fdb      	lsrs	r3, r3, #31
34189e88:	2b01      	cmp	r3, #1
34189e8a:	d102      	bne.n	34189e92 <HAL_RCCEx_PeriphCLKConfig+0x23ca>
34189e8c:	f7fc faf0 	bl	34186470 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34189e90:	e001      	b.n	34189e96 <HAL_RCCEx_PeriphCLKConfig+0x23ce>
34189e92:	f7fc fadd 	bl	34186450 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBPHY2 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
34189e96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
34189e9e:	2100      	movs	r1, #0
34189ea0:	61b9      	str	r1, [r7, #24]
34189ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34189ea6:	61fb      	str	r3, [r7, #28]
34189ea8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
34189eac:	4603      	mov	r3, r0
34189eae:	460a      	mov	r2, r1
34189eb0:	4313      	orrs	r3, r2
34189eb2:	d014      	beq.n	34189ede <HAL_RCCEx_PeriphCLKConfig+0x2416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));

    /* Set the source of USBPHY2 clock*/
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
34189eb4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189eb8:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
34189ebc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34189ec0:	4618      	mov	r0, r3
34189ec2:	f7fc fd2a 	bl	3418691a <LL_RCC_SetOTGPHYCKREFClockSource>
34189ec6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189eca:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
34189ece:	0fdb      	lsrs	r3, r3, #31
34189ed0:	2b01      	cmp	r3, #1
34189ed2:	d102      	bne.n	34189eda <HAL_RCCEx_PeriphCLKConfig+0x2412>
34189ed4:	f7fc facc 	bl	34186470 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34189ed8:	e001      	b.n	34189ede <HAL_RCCEx_PeriphCLKConfig+0x2416>
34189eda:	f7fc fab9 	bl	34186450 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS1 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
34189ede:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
34189ee6:	2100      	movs	r1, #0
34189ee8:	6139      	str	r1, [r7, #16]
34189eea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
34189eee:	617b      	str	r3, [r7, #20]
34189ef0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
34189ef4:	4603      	mov	r3, r0
34189ef6:	460a      	mov	r2, r1
34189ef8:	4313      	orrs	r3, r2
34189efa:	d053      	beq.n	34189fa4 <HAL_RCCEx_PeriphCLKConfig+0x24dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));

    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
34189efc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189f00:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34189f04:	4a17      	ldr	r2, [pc, #92]	@ (34189f64 <HAL_RCCEx_PeriphCLKConfig+0x249c>)
34189f06:	4293      	cmp	r3, r2
34189f08:	d12e      	bne.n	34189f68 <HAL_RCCEx_PeriphCLKConfig+0x24a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34189f0a:	4b0d      	ldr	r3, [pc, #52]	@ (34189f40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189f0c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34189f10:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34189f14:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34189f18:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34189f1c:	6f91      	ldr	r1, [r2, #120]	@ 0x78
34189f1e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34189f22:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
34189f24:	3a01      	subs	r2, #1
34189f26:	0412      	lsls	r2, r2, #16
34189f28:	430a      	orrs	r2, r1
34189f2a:	4905      	ldr	r1, [pc, #20]	@ (34189f40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189f2c:	4313      	orrs	r3, r2
34189f2e:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34189f32:	f7fd fc27 	bl	34187784 <LL_RCC_IC15_Enable>
34189f36:	e020      	b.n	34189f7a <HAL_RCCEx_PeriphCLKConfig+0x24b2>
34189f38:	07011830 	.word	0x07011830
34189f3c:	07021c30 	.word	0x07021c30
34189f40:	56028000 	.word	0x56028000
34189f44:	07031c30 	.word	0x07031c30
34189f48:	07011c30 	.word	0x07011c30
34189f4c:	07020034 	.word	0x07020034
34189f50:	07030034 	.word	0x07030034
34189f54:	07010034 	.word	0x07010034
34189f58:	07020434 	.word	0x07020434
34189f5c:	07030434 	.word	0x07030434
34189f60:	07010434 	.word	0x07010434
34189f64:	03020c14 	.word	0x03020c14
    }
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
34189f68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189f6c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34189f70:	4a43      	ldr	r2, [pc, #268]	@ (3418a080 <HAL_RCCEx_PeriphCLKConfig+0x25b8>)
34189f72:	4293      	cmp	r3, r2
34189f74:	d101      	bne.n	34189f7a <HAL_RCCEx_PeriphCLKConfig+0x24b2>
    {
      LL_RCC_CLKP_Enable();
34189f76:	f7fd fd85 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS1 clock */
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34189f7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189f7e:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34189f82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34189f86:	4618      	mov	r0, r3
34189f88:	f7fc fcbc 	bl	34186904 <LL_RCC_SetOTGPHYClockSource>
34189f8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189f90:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34189f94:	0fdb      	lsrs	r3, r3, #31
34189f96:	2b01      	cmp	r3, #1
34189f98:	d102      	bne.n	34189fa0 <HAL_RCCEx_PeriphCLKConfig+0x24d8>
34189f9a:	f7fc fa69 	bl	34186470 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34189f9e:	e001      	b.n	34189fa4 <HAL_RCCEx_PeriphCLKConfig+0x24dc>
34189fa0:	f7fc fa56 	bl	34186450 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS2 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
34189fa4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
34189fac:	2100      	movs	r1, #0
34189fae:	60b9      	str	r1, [r7, #8]
34189fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34189fb4:	60fb      	str	r3, [r7, #12]
34189fb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
34189fba:	4603      	mov	r3, r0
34189fbc:	460a      	mov	r2, r1
34189fbe:	4313      	orrs	r3, r2
34189fc0:	d03b      	beq.n	3418a03a <HAL_RCCEx_PeriphCLKConfig+0x2572>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));

    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
34189fc2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189fc6:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34189fca:	4a2e      	ldr	r2, [pc, #184]	@ (3418a084 <HAL_RCCEx_PeriphCLKConfig+0x25bc>)
34189fcc:	4293      	cmp	r3, r2
34189fce:	d116      	bne.n	34189ffe <HAL_RCCEx_PeriphCLKConfig+0x2536>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34189fd0:	4b2d      	ldr	r3, [pc, #180]	@ (3418a088 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
34189fd2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34189fd6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34189fda:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34189fde:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34189fe2:	6f91      	ldr	r1, [r2, #120]	@ 0x78
34189fe4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34189fe8:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
34189fea:	3a01      	subs	r2, #1
34189fec:	0412      	lsls	r2, r2, #16
34189fee:	430a      	orrs	r2, r1
34189ff0:	4925      	ldr	r1, [pc, #148]	@ (3418a088 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
34189ff2:	4313      	orrs	r3, r2
34189ff4:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34189ff8:	f7fd fbc4 	bl	34187784 <LL_RCC_IC15_Enable>
34189ffc:	e008      	b.n	3418a010 <HAL_RCCEx_PeriphCLKConfig+0x2548>
    }
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
34189ffe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a002:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3418a006:	4a21      	ldr	r2, [pc, #132]	@ (3418a08c <HAL_RCCEx_PeriphCLKConfig+0x25c4>)
3418a008:	4293      	cmp	r3, r2
3418a00a:	d101      	bne.n	3418a010 <HAL_RCCEx_PeriphCLKConfig+0x2548>
    {
      LL_RCC_CLKP_Enable();
3418a00c:	f7fd fd3a 	bl	34187a84 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS2 clock */
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
3418a010:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a014:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3418a018:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3418a01c:	4618      	mov	r0, r3
3418a01e:	f7fc fc71 	bl	34186904 <LL_RCC_SetOTGPHYClockSource>
3418a022:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a026:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3418a02a:	0fdb      	lsrs	r3, r3, #31
3418a02c:	2b01      	cmp	r3, #1
3418a02e:	d102      	bne.n	3418a036 <HAL_RCCEx_PeriphCLKConfig+0x256e>
3418a030:	f7fc fa1e 	bl	34186470 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3418a034:	e001      	b.n	3418a03a <HAL_RCCEx_PeriphCLKConfig+0x2572>
3418a036:	f7fc fa0b 	bl	34186450 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
3418a03a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a03e:	e9d3 2300 	ldrd	r2, r3, [r3]
3418a042:	2100      	movs	r1, #0
3418a044:	6039      	str	r1, [r7, #0]
3418a046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418a04a:	607b      	str	r3, [r7, #4]
3418a04c:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a050:	4603      	mov	r3, r0
3418a052:	460a      	mov	r2, r1
3418a054:	4313      	orrs	r3, r2
3418a056:	d006      	beq.n	3418a066 <HAL_RCCEx_PeriphCLKConfig+0x259e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
3418a058:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a05c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
3418a060:	4618      	mov	r0, r3
3418a062:	f7fc fe8b 	bl	34186d7c <LL_RCC_SetTIMPrescaler>
  }

  if (status == HAL_OK)
3418a066:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
3418a06a:	2b00      	cmp	r3, #0
3418a06c:	d101      	bne.n	3418a072 <HAL_RCCEx_PeriphCLKConfig+0x25aa>
  {
    return HAL_OK;
3418a06e:	2300      	movs	r3, #0
3418a070:	e000      	b.n	3418a074 <HAL_RCCEx_PeriphCLKConfig+0x25ac>
  }
  return HAL_ERROR;
3418a072:	2301      	movs	r3, #1
}
3418a074:	4618      	mov	r0, r3
3418a076:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
3418a07a:	46bd      	mov	sp, r7
3418a07c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
3418a080:	03010c14 	.word	0x03010c14
3418a084:	03021414 	.word	0x03021414
3418a088:	56028000 	.word	0x56028000
3418a08c:	03011414 	.word	0x03011414

3418a090 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_XSPI2    : XSPI2 peripheral clock
  *            @arg RCC_PERIPHCLK_XSPI3    : XSPI3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
3418a090:	b590      	push	{r4, r7, lr}
3418a092:	b085      	sub	sp, #20
3418a094:	af00      	add	r7, sp, #0
3418a096:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0;   /* Set to 0 for returned value if no source clock */
3418a09a:	2100      	movs	r1, #0
3418a09c:	60f9      	str	r1, [r7, #12]

  switch (PeriphClk)
3418a09e:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a0a2:	f101 447f 	add.w	r4, r1, #4278190080	@ 0xff000000
3418a0a6:	ea50 0104 	orrs.w	r1, r0, r4
3418a0aa:	f000 8436 	beq.w	3418a91a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
3418a0ae:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a0b2:	2801      	cmp	r0, #1
3418a0b4:	f171 7180 	sbcs.w	r1, r1, #16777216	@ 0x1000000
3418a0b8:	f080 8434 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a0bc:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a0c0:	f5a1 0400 	sub.w	r4, r1, #8388608	@ 0x800000
3418a0c4:	ea50 0104 	orrs.w	r1, r0, r4
3418a0c8:	f000 8422 	beq.w	3418a910 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
3418a0cc:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a0d0:	2801      	cmp	r0, #1
3418a0d2:	f571 0100 	sbcs.w	r1, r1, #8388608	@ 0x800000
3418a0d6:	f080 8425 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a0da:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a0de:	f5a1 0480 	sub.w	r4, r1, #4194304	@ 0x400000
3418a0e2:	ea50 0104 	orrs.w	r1, r0, r4
3418a0e6:	f000 840e 	beq.w	3418a906 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
3418a0ea:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a0ee:	2801      	cmp	r0, #1
3418a0f0:	f571 0180 	sbcs.w	r1, r1, #4194304	@ 0x400000
3418a0f4:	f080 8416 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a0f8:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a0fc:	f5a1 1400 	sub.w	r4, r1, #2097152	@ 0x200000
3418a100:	ea50 0104 	orrs.w	r1, r0, r4
3418a104:	f000 83fa 	beq.w	3418a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
3418a108:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a10c:	2801      	cmp	r0, #1
3418a10e:	f571 1100 	sbcs.w	r1, r1, #2097152	@ 0x200000
3418a112:	f080 8407 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a116:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a11a:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
3418a11e:	ea50 0104 	orrs.w	r1, r0, r4
3418a122:	f000 83e6 	beq.w	3418a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
3418a126:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a12a:	2801      	cmp	r0, #1
3418a12c:	f571 1180 	sbcs.w	r1, r1, #1048576	@ 0x100000
3418a130:	f080 83f8 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a134:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a138:	f5a1 2400 	sub.w	r4, r1, #524288	@ 0x80000
3418a13c:	ea50 0104 	orrs.w	r1, r0, r4
3418a140:	f000 83d2 	beq.w	3418a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
3418a144:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a148:	2801      	cmp	r0, #1
3418a14a:	f571 2100 	sbcs.w	r1, r1, #524288	@ 0x80000
3418a14e:	f080 83e9 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a152:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a156:	f5a1 2480 	sub.w	r4, r1, #262144	@ 0x40000
3418a15a:	ea50 0104 	orrs.w	r1, r0, r4
3418a15e:	f000 83be 	beq.w	3418a8de <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
3418a162:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a166:	2801      	cmp	r0, #1
3418a168:	f571 2180 	sbcs.w	r1, r1, #262144	@ 0x40000
3418a16c:	f080 83da 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a170:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a174:	f5a1 3400 	sub.w	r4, r1, #131072	@ 0x20000
3418a178:	ea50 0104 	orrs.w	r1, r0, r4
3418a17c:	f000 83aa 	beq.w	3418a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
3418a180:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a184:	2801      	cmp	r0, #1
3418a186:	f571 3100 	sbcs.w	r1, r1, #131072	@ 0x20000
3418a18a:	f080 83cb 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a18e:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a192:	f5a1 3480 	sub.w	r4, r1, #65536	@ 0x10000
3418a196:	ea50 0104 	orrs.w	r1, r0, r4
3418a19a:	f000 8396 	beq.w	3418a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
3418a19e:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a1a2:	2801      	cmp	r0, #1
3418a1a4:	f571 3180 	sbcs.w	r1, r1, #65536	@ 0x10000
3418a1a8:	f080 83bc 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a1ac:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a1b0:	f5a1 4400 	sub.w	r4, r1, #32768	@ 0x8000
3418a1b4:	ea50 0104 	orrs.w	r1, r0, r4
3418a1b8:	f000 8382 	beq.w	3418a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
3418a1bc:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a1c0:	2801      	cmp	r0, #1
3418a1c2:	f571 4100 	sbcs.w	r1, r1, #32768	@ 0x8000
3418a1c6:	f080 83ad 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a1ca:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a1ce:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
3418a1d2:	ea50 0104 	orrs.w	r1, r0, r4
3418a1d6:	f000 836e 	beq.w	3418a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
3418a1da:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a1de:	2801      	cmp	r0, #1
3418a1e0:	f571 4180 	sbcs.w	r1, r1, #16384	@ 0x4000
3418a1e4:	f080 839e 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a1e8:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a1ec:	f5a1 5400 	sub.w	r4, r1, #8192	@ 0x2000
3418a1f0:	ea50 0104 	orrs.w	r1, r0, r4
3418a1f4:	f000 835a 	beq.w	3418a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
3418a1f8:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a1fc:	2801      	cmp	r0, #1
3418a1fe:	f571 5100 	sbcs.w	r1, r1, #8192	@ 0x2000
3418a202:	f080 838f 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a206:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a20a:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
3418a20e:	ea50 0104 	orrs.w	r1, r0, r4
3418a212:	f000 8346 	beq.w	3418a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
3418a216:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a21a:	2801      	cmp	r0, #1
3418a21c:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
3418a220:	f080 8380 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a224:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a228:	f5a1 6400 	sub.w	r4, r1, #2048	@ 0x800
3418a22c:	ea50 0104 	orrs.w	r1, r0, r4
3418a230:	f000 8332 	beq.w	3418a898 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
3418a234:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a238:	2801      	cmp	r0, #1
3418a23a:	f571 6100 	sbcs.w	r1, r1, #2048	@ 0x800
3418a23e:	f080 8371 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a242:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a246:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
3418a24a:	ea50 0104 	orrs.w	r1, r0, r4
3418a24e:	f000 831e 	beq.w	3418a88e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
3418a252:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a256:	2801      	cmp	r0, #1
3418a258:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
3418a25c:	f080 8362 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a260:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a264:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
3418a268:	ea50 0104 	orrs.w	r1, r0, r4
3418a26c:	f000 830a 	beq.w	3418a884 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
3418a270:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a274:	2801      	cmp	r0, #1
3418a276:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
3418a27a:	f080 8353 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a27e:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a282:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
3418a286:	ea50 0104 	orrs.w	r1, r0, r4
3418a28a:	f000 82f6 	beq.w	3418a87a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
3418a28e:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a292:	2801      	cmp	r0, #1
3418a294:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
3418a298:	f080 8344 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a29c:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a2a0:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
3418a2a4:	ea50 0104 	orrs.w	r1, r0, r4
3418a2a8:	f000 82e2 	beq.w	3418a870 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
3418a2ac:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a2b0:	2801      	cmp	r0, #1
3418a2b2:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
3418a2b6:	f080 8335 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a2ba:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a2be:	f1a1 0420 	sub.w	r4, r1, #32
3418a2c2:	ea50 0104 	orrs.w	r1, r0, r4
3418a2c6:	f000 82ce 	beq.w	3418a866 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
3418a2ca:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a2ce:	2801      	cmp	r0, #1
3418a2d0:	f171 0120 	sbcs.w	r1, r1, #32
3418a2d4:	f080 8326 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a2d8:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a2dc:	f1a1 0410 	sub.w	r4, r1, #16
3418a2e0:	ea50 0104 	orrs.w	r1, r0, r4
3418a2e4:	f000 82ba 	beq.w	3418a85c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
3418a2e8:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a2ec:	2801      	cmp	r0, #1
3418a2ee:	f171 0110 	sbcs.w	r1, r1, #16
3418a2f2:	f080 8317 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a2f6:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a2fa:	f1a1 0408 	sub.w	r4, r1, #8
3418a2fe:	ea50 0104 	orrs.w	r1, r0, r4
3418a302:	f000 82a6 	beq.w	3418a852 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
3418a306:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a30a:	2801      	cmp	r0, #1
3418a30c:	f171 0108 	sbcs.w	r1, r1, #8
3418a310:	f080 8308 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a314:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a318:	1f0c      	subs	r4, r1, #4
3418a31a:	ea50 0104 	orrs.w	r1, r0, r4
3418a31e:	f000 8293 	beq.w	3418a848 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
3418a322:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a326:	2801      	cmp	r0, #1
3418a328:	f171 0104 	sbcs.w	r1, r1, #4
3418a32c:	f080 82fa 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a330:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a334:	1e8c      	subs	r4, r1, #2
3418a336:	ea50 0104 	orrs.w	r1, r0, r4
3418a33a:	f000 8280 	beq.w	3418a83e <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
3418a33e:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a342:	2801      	cmp	r0, #1
3418a344:	f171 0102 	sbcs.w	r1, r1, #2
3418a348:	f080 82ec 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a34c:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a350:	1e4c      	subs	r4, r1, #1
3418a352:	ea50 0104 	orrs.w	r1, r0, r4
3418a356:	f000 826d 	beq.w	3418a834 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
3418a35a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a35e:	2801      	cmp	r0, #1
3418a360:	f171 0101 	sbcs.w	r1, r1, #1
3418a364:	f080 82de 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a368:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a36c:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
3418a370:	4321      	orrs	r1, r4
3418a372:	f000 825a 	beq.w	3418a82a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
3418a376:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a37a:	4cda      	ldr	r4, [pc, #872]	@ (3418a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>)
3418a37c:	42a0      	cmp	r0, r4
3418a37e:	f171 0100 	sbcs.w	r1, r1, #0
3418a382:	f080 82cf 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a386:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a38a:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
3418a38e:	4321      	orrs	r1, r4
3418a390:	f000 8246 	beq.w	3418a820 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
3418a394:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a398:	4cd3      	ldr	r4, [pc, #844]	@ (3418a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>)
3418a39a:	42a0      	cmp	r0, r4
3418a39c:	f171 0100 	sbcs.w	r1, r1, #0
3418a3a0:	f080 82c0 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a3a4:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a3a8:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
3418a3ac:	4321      	orrs	r1, r4
3418a3ae:	f000 8232 	beq.w	3418a816 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
3418a3b2:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a3b6:	4ccd      	ldr	r4, [pc, #820]	@ (3418a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x65c>)
3418a3b8:	42a0      	cmp	r0, r4
3418a3ba:	f171 0100 	sbcs.w	r1, r1, #0
3418a3be:	f080 82b1 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a3c2:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a3c6:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
3418a3ca:	4321      	orrs	r1, r4
3418a3cc:	f000 821e 	beq.w	3418a80c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
3418a3d0:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a3d4:	4cc6      	ldr	r4, [pc, #792]	@ (3418a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>)
3418a3d6:	42a0      	cmp	r0, r4
3418a3d8:	f171 0100 	sbcs.w	r1, r1, #0
3418a3dc:	f080 82a2 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a3e0:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a3e4:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
3418a3e8:	4321      	orrs	r1, r4
3418a3ea:	f000 820b 	beq.w	3418a804 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
3418a3ee:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a3f2:	4cc0      	ldr	r4, [pc, #768]	@ (3418a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>)
3418a3f4:	42a0      	cmp	r0, r4
3418a3f6:	f171 0100 	sbcs.w	r1, r1, #0
3418a3fa:	f080 8293 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a3fe:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a402:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
3418a406:	4321      	orrs	r1, r4
3418a408:	f000 81f7 	beq.w	3418a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
3418a40c:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a410:	4cb9      	ldr	r4, [pc, #740]	@ (3418a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>)
3418a412:	42a0      	cmp	r0, r4
3418a414:	f171 0100 	sbcs.w	r1, r1, #0
3418a418:	f080 8284 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a41c:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a420:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
3418a424:	4321      	orrs	r1, r4
3418a426:	f000 81e2 	beq.w	3418a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
3418a42a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a42e:	4cb3      	ldr	r4, [pc, #716]	@ (3418a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
3418a430:	42a0      	cmp	r0, r4
3418a432:	f171 0100 	sbcs.w	r1, r1, #0
3418a436:	f080 8275 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a43a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a43e:	f100 447f 	add.w	r4, r0, #4278190080	@ 0xff000000
3418a442:	4321      	orrs	r1, r4
3418a444:	f000 81cd 	beq.w	3418a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
3418a448:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a44c:	4cac      	ldr	r4, [pc, #688]	@ (3418a700 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
3418a44e:	42a0      	cmp	r0, r4
3418a450:	f171 0100 	sbcs.w	r1, r1, #0
3418a454:	f080 8266 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a458:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a45c:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
3418a460:	4321      	orrs	r1, r4
3418a462:	f000 81b8 	beq.w	3418a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
3418a466:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a46a:	4ca6      	ldr	r4, [pc, #664]	@ (3418a704 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
3418a46c:	42a0      	cmp	r0, r4
3418a46e:	f171 0100 	sbcs.w	r1, r1, #0
3418a472:	f080 8257 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a476:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a47a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
3418a47e:	4321      	orrs	r1, r4
3418a480:	f000 81a4 	beq.w	3418a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
3418a484:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a488:	4c9f      	ldr	r4, [pc, #636]	@ (3418a708 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
3418a48a:	42a0      	cmp	r0, r4
3418a48c:	f171 0100 	sbcs.w	r1, r1, #0
3418a490:	f080 8248 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a494:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a498:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
3418a49c:	4321      	orrs	r1, r4
3418a49e:	f000 8190 	beq.w	3418a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
3418a4a2:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a4a6:	4c99      	ldr	r4, [pc, #612]	@ (3418a70c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>)
3418a4a8:	42a0      	cmp	r0, r4
3418a4aa:	f171 0100 	sbcs.w	r1, r1, #0
3418a4ae:	f080 8239 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a4b2:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a4b6:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
3418a4ba:	4321      	orrs	r1, r4
3418a4bc:	f000 817c 	beq.w	3418a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
3418a4c0:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a4c4:	4c92      	ldr	r4, [pc, #584]	@ (3418a710 <HAL_RCCEx_GetPeriphCLKFreq+0x680>)
3418a4c6:	42a0      	cmp	r0, r4
3418a4c8:	f171 0100 	sbcs.w	r1, r1, #0
3418a4cc:	f080 822a 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a4d0:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a4d4:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
3418a4d8:	4321      	orrs	r1, r4
3418a4da:	f000 8168 	beq.w	3418a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
3418a4de:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a4e2:	4c8c      	ldr	r4, [pc, #560]	@ (3418a714 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
3418a4e4:	42a0      	cmp	r0, r4
3418a4e6:	f171 0100 	sbcs.w	r1, r1, #0
3418a4ea:	f080 821b 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a4ee:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a4f2:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
3418a4f6:	4321      	orrs	r1, r4
3418a4f8:	f000 8154 	beq.w	3418a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
3418a4fc:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a500:	4c85      	ldr	r4, [pc, #532]	@ (3418a718 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
3418a502:	42a0      	cmp	r0, r4
3418a504:	f171 0100 	sbcs.w	r1, r1, #0
3418a508:	f080 820c 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a50c:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a510:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
3418a514:	4321      	orrs	r1, r4
3418a516:	f000 8140 	beq.w	3418a79a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
3418a51a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a51e:	4c7f      	ldr	r4, [pc, #508]	@ (3418a71c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
3418a520:	42a0      	cmp	r0, r4
3418a522:	f171 0100 	sbcs.w	r1, r1, #0
3418a526:	f080 81fd 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a52a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a52e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
3418a532:	4321      	orrs	r1, r4
3418a534:	f000 812c 	beq.w	3418a790 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
3418a538:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a53c:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
3418a540:	f171 0100 	sbcs.w	r1, r1, #0
3418a544:	f080 81ee 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a548:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a54c:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
3418a550:	4321      	orrs	r1, r4
3418a552:	f000 8118 	beq.w	3418a786 <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
3418a556:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a55a:	f248 0401 	movw	r4, #32769	@ 0x8001
3418a55e:	42a0      	cmp	r0, r4
3418a560:	f171 0100 	sbcs.w	r1, r1, #0
3418a564:	f080 81de 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a568:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a56c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
3418a570:	4321      	orrs	r1, r4
3418a572:	f000 8103 	beq.w	3418a77c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
3418a576:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a57a:	f244 0401 	movw	r4, #16385	@ 0x4001
3418a57e:	42a0      	cmp	r0, r4
3418a580:	f171 0100 	sbcs.w	r1, r1, #0
3418a584:	f080 81ce 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a588:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a58c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
3418a590:	4321      	orrs	r1, r4
3418a592:	f000 80ee 	beq.w	3418a772 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
3418a596:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a59a:	f242 0401 	movw	r4, #8193	@ 0x2001
3418a59e:	42a0      	cmp	r0, r4
3418a5a0:	f171 0100 	sbcs.w	r1, r1, #0
3418a5a4:	f080 81be 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a5a8:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a5ac:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
3418a5b0:	4321      	orrs	r1, r4
3418a5b2:	f000 80d9 	beq.w	3418a768 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
3418a5b6:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a5ba:	f241 0401 	movw	r4, #4097	@ 0x1001
3418a5be:	42a0      	cmp	r0, r4
3418a5c0:	f171 0100 	sbcs.w	r1, r1, #0
3418a5c4:	f080 81ae 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a5c8:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a5cc:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
3418a5d0:	4321      	orrs	r1, r4
3418a5d2:	f000 80c4 	beq.w	3418a75e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
3418a5d6:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a5da:	f640 0401 	movw	r4, #2049	@ 0x801
3418a5de:	42a0      	cmp	r0, r4
3418a5e0:	f171 0100 	sbcs.w	r1, r1, #0
3418a5e4:	f080 819e 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a5e8:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a5ec:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
3418a5f0:	4321      	orrs	r1, r4
3418a5f2:	f000 80af 	beq.w	3418a754 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
3418a5f6:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a5fa:	f240 4401 	movw	r4, #1025	@ 0x401
3418a5fe:	42a0      	cmp	r0, r4
3418a600:	f171 0100 	sbcs.w	r1, r1, #0
3418a604:	f080 818e 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a608:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a60c:	2821      	cmp	r0, #33	@ 0x21
3418a60e:	f171 0100 	sbcs.w	r1, r1, #0
3418a612:	d255      	bcs.n	3418a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
3418a614:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a618:	4301      	orrs	r1, r0
3418a61a:	f000 8183 	beq.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a61e:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a622:	1e42      	subs	r2, r0, #1
3418a624:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
3418a628:	2a20      	cmp	r2, #32
3418a62a:	f173 0100 	sbcs.w	r1, r3, #0
3418a62e:	f080 8179 	bcs.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a632:	2a1f      	cmp	r2, #31
3418a634:	f200 8176 	bhi.w	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a638:	a101      	add	r1, pc, #4	@ (adr r1, 3418a640 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
3418a63a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
3418a63e:	bf00      	nop
3418a640:	3418a6cf 	.word	0x3418a6cf
3418a644:	3418a6d9 	.word	0x3418a6d9
3418a648:	3418a925 	.word	0x3418a925
3418a64c:	3418a729 	.word	0x3418a729
3418a650:	3418a925 	.word	0x3418a925
3418a654:	3418a925 	.word	0x3418a925
3418a658:	3418a925 	.word	0x3418a925
3418a65c:	3418a721 	.word	0x3418a721
3418a660:	3418a925 	.word	0x3418a925
3418a664:	3418a925 	.word	0x3418a925
3418a668:	3418a925 	.word	0x3418a925
3418a66c:	3418a925 	.word	0x3418a925
3418a670:	3418a925 	.word	0x3418a925
3418a674:	3418a925 	.word	0x3418a925
3418a678:	3418a925 	.word	0x3418a925
3418a67c:	3418a733 	.word	0x3418a733
3418a680:	3418a925 	.word	0x3418a925
3418a684:	3418a925 	.word	0x3418a925
3418a688:	3418a925 	.word	0x3418a925
3418a68c:	3418a925 	.word	0x3418a925
3418a690:	3418a925 	.word	0x3418a925
3418a694:	3418a925 	.word	0x3418a925
3418a698:	3418a925 	.word	0x3418a925
3418a69c:	3418a925 	.word	0x3418a925
3418a6a0:	3418a925 	.word	0x3418a925
3418a6a4:	3418a925 	.word	0x3418a925
3418a6a8:	3418a925 	.word	0x3418a925
3418a6ac:	3418a925 	.word	0x3418a925
3418a6b0:	3418a925 	.word	0x3418a925
3418a6b4:	3418a925 	.word	0x3418a925
3418a6b8:	3418a925 	.word	0x3418a925
3418a6bc:	3418a73f 	.word	0x3418a73f
3418a6c0:	e9d7 2300 	ldrd	r2, r3, [r7]
3418a6c4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
3418a6c8:	430b      	orrs	r3, r1
3418a6ca:	d03e      	beq.n	3418a74a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
      break;

    default:
      /* Unexpected case, frequency is by default set to 0 */
      break;
3418a6cc:	e12a      	b.n	3418a924 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      frequency = RCCEx_GetADCCLKFreq(LL_RCC_ADC_CLKSOURCE);
3418a6ce:	2070      	movs	r0, #112	@ 0x70
3418a6d0:	f000 fb90 	bl	3418adf4 <RCCEx_GetADCCLKFreq>
3418a6d4:	60f8      	str	r0, [r7, #12]
      break;
3418a6d6:	e126      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetADFCLKFreq(LL_RCC_ADF1_CLKSOURCE);
3418a6d8:	2007      	movs	r0, #7
3418a6da:	f000 fc8d 	bl	3418aff8 <RCCEx_GetADFCLKFreq>
3418a6de:	60f8      	str	r0, [r7, #12]
      break;
3418a6e0:	e121      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
3418a6e2:	bf00      	nop
3418a6e4:	80000001 	.word	0x80000001
3418a6e8:	40000001 	.word	0x40000001
3418a6ec:	20000001 	.word	0x20000001
3418a6f0:	10000001 	.word	0x10000001
3418a6f4:	08000001 	.word	0x08000001
3418a6f8:	04000001 	.word	0x04000001
3418a6fc:	02000001 	.word	0x02000001
3418a700:	01000001 	.word	0x01000001
3418a704:	00800001 	.word	0x00800001
3418a708:	00400001 	.word	0x00400001
3418a70c:	00200001 	.word	0x00200001
3418a710:	00100001 	.word	0x00100001
3418a714:	00080001 	.word	0x00080001
3418a718:	00040001 	.word	0x00040001
3418a71c:	00020001 	.word	0x00020001
      frequency = RCCEx_GetCSICLKFreq();
3418a720:	f000 ff0c 	bl	3418b53c <RCCEx_GetCSICLKFreq>
3418a724:	60f8      	str	r0, [r7, #12]
      break;
3418a726:	e0fe      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a728:	2007      	movs	r0, #7
3418a72a:	f000 fd51 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418a72e:	60f8      	str	r0, [r7, #12]
      break;
3418a730:	e0f9      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetDCMIPPCLKFreq(LL_RCC_DCMIPP_CLKSOURCE);
3418a732:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
3418a736:	f000 ff4d 	bl	3418b5d4 <RCCEx_GetDCMIPPCLKFreq>
3418a73a:	60f8      	str	r0, [r7, #12]
      break;
3418a73c:	e0f3      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1CLKFreq(LL_RCC_ETH1_CLKSOURCE);
3418a73e:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
3418a742:	f000 ffd1 	bl	3418b6e8 <RCCEx_GetETH1CLKFreq>
3418a746:	60f8      	str	r0, [r7, #12]
      break;
3418a748:	e0ed      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1PTPCLKFreq(LL_RCC_ETH1PTP_CLKSOURCE);
3418a74a:	2003      	movs	r0, #3
3418a74c:	f001 f84c 	bl	3418b7e8 <RCCEx_GetETH1PTPCLKFreq>
3418a750:	60f8      	str	r0, [r7, #12]
      break;
3418a752:	e0e8      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFDCANCLKFreq(LL_RCC_FDCAN_CLKSOURCE);
3418a754:	2003      	movs	r0, #3
3418a756:	f001 f8cb 	bl	3418b8f0 <RCCEx_GetFDCANCLKFreq>
3418a75a:	60f8      	str	r0, [r7, #12]
      break;
3418a75c:	e0e3      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFMCCLKFreq(LL_RCC_FMC_CLKSOURCE);
3418a75e:	2030      	movs	r0, #48	@ 0x30
3418a760:	f001 f946 	bl	3418b9f0 <RCCEx_GetFMCCLKFreq>
3418a764:	60f8      	str	r0, [r7, #12]
      break;
3418a766:	e0de      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
3418a768:	4871      	ldr	r0, [pc, #452]	@ (3418a930 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
3418a76a:	f001 f9f9 	bl	3418bb60 <RCCEx_GetI2CCLKFreq>
3418a76e:	60f8      	str	r0, [r7, #12]
      break;
3418a770:	e0d9      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
3418a772:	4870      	ldr	r0, [pc, #448]	@ (3418a934 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>)
3418a774:	f001 f9f4 	bl	3418bb60 <RCCEx_GetI2CCLKFreq>
3418a778:	60f8      	str	r0, [r7, #12]
      break;
3418a77a:	e0d4      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
3418a77c:	486e      	ldr	r0, [pc, #440]	@ (3418a938 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
3418a77e:	f001 f9ef 	bl	3418bb60 <RCCEx_GetI2CCLKFreq>
3418a782:	60f8      	str	r0, [r7, #12]
      break;
3418a784:	e0cf      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
3418a786:	486d      	ldr	r0, [pc, #436]	@ (3418a93c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
3418a788:	f001 f9ea 	bl	3418bb60 <RCCEx_GetI2CCLKFreq>
3418a78c:	60f8      	str	r0, [r7, #12]
      break;
3418a78e:	e0ca      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
3418a790:	486b      	ldr	r0, [pc, #428]	@ (3418a940 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
3418a792:	f001 fb8d 	bl	3418beb0 <RCCEx_GetI3CCLKFreq>
3418a796:	60f8      	str	r0, [r7, #12]
      break;
3418a798:	e0c5      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
3418a79a:	486a      	ldr	r0, [pc, #424]	@ (3418a944 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
3418a79c:	f001 fb88 	bl	3418beb0 <RCCEx_GetI3CCLKFreq>
3418a7a0:	60f8      	str	r0, [r7, #12]
      break;
3418a7a2:	e0c0      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
3418a7a4:	4868      	ldr	r0, [pc, #416]	@ (3418a948 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
3418a7a6:	f001 fcb7 	bl	3418c118 <RCCEx_GetLPTIMCLKFreq>
3418a7aa:	60f8      	str	r0, [r7, #12]
      break;
3418a7ac:	e0bb      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
3418a7ae:	4867      	ldr	r0, [pc, #412]	@ (3418a94c <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>)
3418a7b0:	f001 fcb2 	bl	3418c118 <RCCEx_GetLPTIMCLKFreq>
3418a7b4:	60f8      	str	r0, [r7, #12]
      break;
3418a7b6:	e0b6      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
3418a7b8:	4865      	ldr	r0, [pc, #404]	@ (3418a950 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
3418a7ba:	f001 fcad 	bl	3418c118 <RCCEx_GetLPTIMCLKFreq>
3418a7be:	60f8      	str	r0, [r7, #12]
      break;
3418a7c0:	e0b1      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
3418a7c2:	4864      	ldr	r0, [pc, #400]	@ (3418a954 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
3418a7c4:	f001 fca8 	bl	3418c118 <RCCEx_GetLPTIMCLKFreq>
3418a7c8:	60f8      	str	r0, [r7, #12]
      break;
3418a7ca:	e0ac      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
3418a7cc:	4862      	ldr	r0, [pc, #392]	@ (3418a958 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>)
3418a7ce:	f001 fca3 	bl	3418c118 <RCCEx_GetLPTIMCLKFreq>
3418a7d2:	60f8      	str	r0, [r7, #12]
      break;
3418a7d4:	e0a7      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPUARTCLKFreq(LL_RCC_LPUART1_CLKSOURCE);
3418a7d6:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
3418a7da:	f001 fe47 	bl	3418c46c <RCCEx_GetLPUARTCLKFreq>
3418a7de:	60f8      	str	r0, [r7, #12]
      break;
3418a7e0:	e0a1      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLTDCCLKFreq(LL_RCC_LTDC_CLKSOURCE);
3418a7e2:	f04f 7040 	mov.w	r0, #50331648	@ 0x3000000
3418a7e6:	f001 ff43 	bl	3418c670 <RCCEx_GetLTDCCLKFreq>
3418a7ea:	60f8      	str	r0, [r7, #12]
      break;
3418a7ec:	e09b      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetMDFCLKFreq(LL_RCC_MDF1_CLKSOURCE);
3418a7ee:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
3418a7f2:	f001 ffc7 	bl	3418c784 <RCCEx_GetMDFCLKFreq>
3418a7f6:	60f8      	str	r0, [r7, #12]
      break;
3418a7f8:	e095      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetPSSICLKFreq(LL_RCC_PSSI_CLKSOURCE);
3418a7fa:	2030      	movs	r0, #48	@ 0x30
3418a7fc:	f002 f8cc 	bl	3418c998 <RCCEx_GetPSSICLKFreq>
3418a800:	60f8      	str	r0, [r7, #12]
      break;
3418a802:	e090      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetRTCCLKFreq();
3418a804:	f002 f94a 	bl	3418ca9c <RCCEx_GetRTCCLKFreq>
3418a808:	60f8      	str	r0, [r7, #12]
      break;
3418a80a:	e08c      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
3418a80c:	4853      	ldr	r0, [pc, #332]	@ (3418a95c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>)
3418a80e:	f002 f997 	bl	3418cb40 <RCCEx_GetSAICLKFreq>
3418a812:	60f8      	str	r0, [r7, #12]
      break;
3418a814:	e087      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
3418a816:	4852      	ldr	r0, [pc, #328]	@ (3418a960 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
3418a818:	f002 f992 	bl	3418cb40 <RCCEx_GetSAICLKFreq>
3418a81c:	60f8      	str	r0, [r7, #12]
      break;
3418a81e:	e082      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
3418a820:	4850      	ldr	r0, [pc, #320]	@ (3418a964 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
3418a822:	f002 faf3 	bl	3418ce0c <RCCEx_GetSDMMCCLKFreq>
3418a826:	60f8      	str	r0, [r7, #12]
      break;
3418a828:	e07d      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
3418a82a:	484f      	ldr	r0, [pc, #316]	@ (3418a968 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>)
3418a82c:	f002 faee 	bl	3418ce0c <RCCEx_GetSDMMCCLKFreq>
3418a830:	60f8      	str	r0, [r7, #12]
      break;
3418a832:	e078      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
3418a834:	2007      	movs	r0, #7
3418a836:	f002 fbd3 	bl	3418cfe0 <RCCEx_GetSPDIFRXCLKFreq>
3418a83a:	60f8      	str	r0, [r7, #12]
      break;
3418a83c:	e073      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
3418a83e:	484b      	ldr	r0, [pc, #300]	@ (3418a96c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
3418a840:	f002 fcb2 	bl	3418d1a8 <RCCEx_GetSPICLKFreq>
3418a844:	60f8      	str	r0, [r7, #12]
      break;
3418a846:	e06e      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
3418a848:	4849      	ldr	r0, [pc, #292]	@ (3418a970 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>)
3418a84a:	f002 fcad 	bl	3418d1a8 <RCCEx_GetSPICLKFreq>
3418a84e:	60f8      	str	r0, [r7, #12]
      break;
3418a850:	e069      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
3418a852:	4848      	ldr	r0, [pc, #288]	@ (3418a974 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
3418a854:	f002 fca8 	bl	3418d1a8 <RCCEx_GetSPICLKFreq>
3418a858:	60f8      	str	r0, [r7, #12]
      break;
3418a85a:	e064      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
3418a85c:	4846      	ldr	r0, [pc, #280]	@ (3418a978 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
3418a85e:	f002 fca3 	bl	3418d1a8 <RCCEx_GetSPICLKFreq>
3418a862:	60f8      	str	r0, [r7, #12]
      break;
3418a864:	e05f      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
3418a866:	4845      	ldr	r0, [pc, #276]	@ (3418a97c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
3418a868:	f002 fc9e 	bl	3418d1a8 <RCCEx_GetSPICLKFreq>
3418a86c:	60f8      	str	r0, [r7, #12]
      break;
3418a86e:	e05a      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
3418a870:	4843      	ldr	r0, [pc, #268]	@ (3418a980 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>)
3418a872:	f002 fc99 	bl	3418d1a8 <RCCEx_GetSPICLKFreq>
3418a876:	60f8      	str	r0, [r7, #12]
      break;
3418a878:	e055      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
3418a87a:	4842      	ldr	r0, [pc, #264]	@ (3418a984 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>)
3418a87c:	f003 f990 	bl	3418dba0 <RCCEx_GetUSARTCLKFreq>
3418a880:	60f8      	str	r0, [r7, #12]
      break;
3418a882:	e050      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
3418a884:	4840      	ldr	r0, [pc, #256]	@ (3418a988 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>)
3418a886:	f003 f98b 	bl	3418dba0 <RCCEx_GetUSARTCLKFreq>
3418a88a:	60f8      	str	r0, [r7, #12]
      break;
3418a88c:	e04b      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
3418a88e:	483f      	ldr	r0, [pc, #252]	@ (3418a98c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>)
3418a890:	f003 f986 	bl	3418dba0 <RCCEx_GetUSARTCLKFreq>
3418a894:	60f8      	str	r0, [r7, #12]
      break;
3418a896:	e046      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
3418a898:	483d      	ldr	r0, [pc, #244]	@ (3418a990 <HAL_RCCEx_GetPeriphCLKFreq+0x900>)
3418a89a:	f002 ff57 	bl	3418d74c <RCCEx_GetUARTCLKFreq>
3418a89e:	60f8      	str	r0, [r7, #12]
      break;
3418a8a0:	e041      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
3418a8a2:	483c      	ldr	r0, [pc, #240]	@ (3418a994 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
3418a8a4:	f002 ff52 	bl	3418d74c <RCCEx_GetUARTCLKFreq>
3418a8a8:	60f8      	str	r0, [r7, #12]
      break;
3418a8aa:	e03c      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
3418a8ac:	483a      	ldr	r0, [pc, #232]	@ (3418a998 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3418a8ae:	f003 f977 	bl	3418dba0 <RCCEx_GetUSARTCLKFreq>
3418a8b2:	60f8      	str	r0, [r7, #12]
      break;
3418a8b4:	e037      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
3418a8b6:	4839      	ldr	r0, [pc, #228]	@ (3418a99c <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
3418a8b8:	f002 ff48 	bl	3418d74c <RCCEx_GetUARTCLKFreq>
3418a8bc:	60f8      	str	r0, [r7, #12]
      break;
3418a8be:	e032      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
3418a8c0:	4837      	ldr	r0, [pc, #220]	@ (3418a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
3418a8c2:	f002 ff43 	bl	3418d74c <RCCEx_GetUARTCLKFreq>
3418a8c6:	60f8      	str	r0, [r7, #12]
      break;
3418a8c8:	e02d      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
3418a8ca:	4836      	ldr	r0, [pc, #216]	@ (3418a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
3418a8cc:	f002 ff3e 	bl	3418d74c <RCCEx_GetUARTCLKFreq>
3418a8d0:	60f8      	str	r0, [r7, #12]
      break;
3418a8d2:	e028      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
3418a8d4:	4834      	ldr	r0, [pc, #208]	@ (3418a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
3418a8d6:	f003 f963 	bl	3418dba0 <RCCEx_GetUSARTCLKFreq>
3418a8da:	60f8      	str	r0, [r7, #12]
      break;
3418a8dc:	e023      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
3418a8de:	4833      	ldr	r0, [pc, #204]	@ (3418a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
3418a8e0:	f003 fc3e 	bl	3418e160 <RCCEx_GetOTGPHYCKREFCLKFreq>
3418a8e4:	60f8      	str	r0, [r7, #12]
      break;
3418a8e6:	e01e      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
3418a8e8:	4831      	ldr	r0, [pc, #196]	@ (3418a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
3418a8ea:	f003 fb83 	bl	3418dff4 <RCCEx_GetOTGPHYCLKFreq>
3418a8ee:	60f8      	str	r0, [r7, #12]
      break;
3418a8f0:	e019      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
3418a8f2:	4830      	ldr	r0, [pc, #192]	@ (3418a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
3418a8f4:	f003 fc34 	bl	3418e160 <RCCEx_GetOTGPHYCKREFCLKFreq>
3418a8f8:	60f8      	str	r0, [r7, #12]
      break;
3418a8fa:	e014      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3418a8fc:	482e      	ldr	r0, [pc, #184]	@ (3418a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
3418a8fe:	f003 fb79 	bl	3418dff4 <RCCEx_GetOTGPHYCLKFreq>
3418a902:	60f8      	str	r0, [r7, #12]
      break;
3418a904:	e00f      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
3418a906:	482d      	ldr	r0, [pc, #180]	@ (3418a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
3418a908:	f003 fc7a 	bl	3418e200 <RCCEx_GetXSPICLKFreq>
3418a90c:	60f8      	str	r0, [r7, #12]
      break;
3418a90e:	e00a      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
3418a910:	482b      	ldr	r0, [pc, #172]	@ (3418a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
3418a912:	f003 fc75 	bl	3418e200 <RCCEx_GetXSPICLKFreq>
3418a916:	60f8      	str	r0, [r7, #12]
      break;
3418a918:	e005      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
3418a91a:	482a      	ldr	r0, [pc, #168]	@ (3418a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
3418a91c:	f003 fc70 	bl	3418e200 <RCCEx_GetXSPICLKFreq>
3418a920:	60f8      	str	r0, [r7, #12]
      break;
3418a922:	e000      	b.n	3418a926 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      break;
3418a924:	bf00      	nop
  }

  return frequency;
3418a926:	68fb      	ldr	r3, [r7, #12]
}
3418a928:	4618      	mov	r0, r3
3418a92a:	3714      	adds	r7, #20
3418a92c:	46bd      	mov	sp, r7
3418a92e:	bd90      	pop	{r4, r7, pc}
3418a930:	0700000c 	.word	0x0700000c
3418a934:	0700040c 	.word	0x0700040c
3418a938:	0700080c 	.word	0x0700080c
3418a93c:	07000c0c 	.word	0x07000c0c
3418a940:	0700100c 	.word	0x0700100c
3418a944:	0700140c 	.word	0x0700140c
3418a948:	0700082c 	.word	0x0700082c
3418a94c:	07000c2c 	.word	0x07000c2c
3418a950:	0700102c 	.word	0x0700102c
3418a954:	0700142c 	.word	0x0700142c
3418a958:	0700182c 	.word	0x0700182c
3418a95c:	07001418 	.word	0x07001418
3418a960:	07001818 	.word	0x07001818
3418a964:	0300001c 	.word	0x0300001c
3418a968:	0300041c 	.word	0x0300041c
3418a96c:	07000420 	.word	0x07000420
3418a970:	07000820 	.word	0x07000820
3418a974:	07000c20 	.word	0x07000c20
3418a978:	07001020 	.word	0x07001020
3418a97c:	07001420 	.word	0x07001420
3418a980:	07001820 	.word	0x07001820
3418a984:	07000030 	.word	0x07000030
3418a988:	07000430 	.word	0x07000430
3418a98c:	07000830 	.word	0x07000830
3418a990:	07000c30 	.word	0x07000c30
3418a994:	07001030 	.word	0x07001030
3418a998:	07001430 	.word	0x07001430
3418a99c:	07001830 	.word	0x07001830
3418a9a0:	07001c30 	.word	0x07001c30
3418a9a4:	07000034 	.word	0x07000034
3418a9a8:	07000434 	.word	0x07000434
3418a9ac:	01001014 	.word	0x01001014
3418a9b0:	03000c14 	.word	0x03000c14
3418a9b4:	01001814 	.word	0x01001814
3418a9b8:	03001414 	.word	0x03001414
3418a9bc:	03000014 	.word	0x03000014
3418a9c0:	03000414 	.word	0x03000414
3418a9c4:	03000814 	.word	0x03000814

3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>:
  * @brief  Return PLL1 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL1 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL1CLKFreq(void)
{
3418a9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
3418a9ca:	b087      	sub	sp, #28
3418a9cc:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418a9ce:	2300      	movs	r3, #0
3418a9d0:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL1_IsReady() != 0U)
3418a9d2:	f7fc fa05 	bl	34186de0 <LL_RCC_PLL1_IsReady>
3418a9d6:	4603      	mov	r3, r0
3418a9d8:	2b00      	cmp	r3, #0
3418a9da:	d02a      	beq.n	3418aa32 <HAL_RCCEx_GetPLL1CLKFreq+0x6a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
3418a9dc:	f7fc fa68 	bl	34186eb0 <LL_RCC_PLL1P_IsEnabled>
3418a9e0:	4603      	mov	r3, r0
3418a9e2:	2b00      	cmp	r3, #0
3418a9e4:	d031      	beq.n	3418aa4a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
3418a9e6:	f7fc f9ed 	bl	34186dc4 <LL_RCC_PLL1_GetSource>
3418a9ea:	4603      	mov	r3, r0
3418a9ec:	4618      	mov	r0, r3
3418a9ee:	f000 f957 	bl	3418aca0 <RCCEx_GetPLLSourceFreq>
3418a9f2:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3418a9f4:	68bb      	ldr	r3, [r7, #8]
3418a9f6:	2b00      	cmp	r3, #0
3418a9f8:	d027      	beq.n	3418aa4a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL1_GetM();
3418a9fa:	f7fc fa29 	bl	34186e50 <LL_RCC_PLL1_GetM>
3418a9fe:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3418aa00:	687b      	ldr	r3, [r7, #4]
3418aa02:	2b00      	cmp	r3, #0
3418aa04:	d021      	beq.n	3418aa4a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
3418aa06:	f7fc fa13 	bl	34186e30 <LL_RCC_PLL1_GetN>
3418aa0a:	4605      	mov	r5, r0
3418aa0c:	f7fc fa64 	bl	34186ed8 <LL_RCC_PLL1_GetFRACN>
3418aa10:	4606      	mov	r6, r0
3418aa12:	f7fc fa2d 	bl	34186e70 <LL_RCC_PLL1_GetP1>
3418aa16:	4604      	mov	r4, r0
3418aa18:	f7fc fa3a 	bl	34186e90 <LL_RCC_PLL1_GetP2>
3418aa1c:	4603      	mov	r3, r0
3418aa1e:	9301      	str	r3, [sp, #4]
3418aa20:	9400      	str	r4, [sp, #0]
3418aa22:	4633      	mov	r3, r6
3418aa24:	462a      	mov	r2, r5
3418aa26:	6879      	ldr	r1, [r7, #4]
3418aa28:	68b8      	ldr	r0, [r7, #8]
3418aa2a:	f000 f997 	bl	3418ad5c <RCCEx_CalcPLLFreq>
3418aa2e:	60f8      	str	r0, [r7, #12]
3418aa30:	e00b      	b.n	3418aa4a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
                                            LL_RCC_PLL1_GetP1(), LL_RCC_PLL1_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL1_IsEnabledBypass() != 0U)
3418aa32:	f7fc f9e9 	bl	34186e08 <LL_RCC_PLL1_IsEnabledBypass>
3418aa36:	4603      	mov	r3, r0
3418aa38:	2b00      	cmp	r3, #0
3418aa3a:	d006      	beq.n	3418aa4a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
3418aa3c:	f7fc f9c2 	bl	34186dc4 <LL_RCC_PLL1_GetSource>
3418aa40:	4603      	mov	r3, r0
3418aa42:	4618      	mov	r0, r3
3418aa44:	f000 f92c 	bl	3418aca0 <RCCEx_GetPLLSourceFreq>
3418aa48:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3418aa4a:	68fb      	ldr	r3, [r7, #12]
}
3418aa4c:	4618      	mov	r0, r3
3418aa4e:	3714      	adds	r7, #20
3418aa50:	46bd      	mov	sp, r7
3418aa52:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>:
  * @brief  Return PLL2 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL2 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL2CLKFreq(void)
{
3418aa54:	b5f0      	push	{r4, r5, r6, r7, lr}
3418aa56:	b087      	sub	sp, #28
3418aa58:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418aa5a:	2300      	movs	r3, #0
3418aa5c:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL2_IsReady() != 0U)
3418aa5e:	f7fc fa57 	bl	34186f10 <LL_RCC_PLL2_IsReady>
3418aa62:	4603      	mov	r3, r0
3418aa64:	2b00      	cmp	r3, #0
3418aa66:	d02a      	beq.n	3418aabe <HAL_RCCEx_GetPLL2CLKFreq+0x6a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
3418aa68:	f7fc faba 	bl	34186fe0 <LL_RCC_PLL2P_IsEnabled>
3418aa6c:	4603      	mov	r3, r0
3418aa6e:	2b00      	cmp	r3, #0
3418aa70:	d031      	beq.n	3418aad6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
3418aa72:	f7fc fa3f 	bl	34186ef4 <LL_RCC_PLL2_GetSource>
3418aa76:	4603      	mov	r3, r0
3418aa78:	4618      	mov	r0, r3
3418aa7a:	f000 f911 	bl	3418aca0 <RCCEx_GetPLLSourceFreq>
3418aa7e:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3418aa80:	68bb      	ldr	r3, [r7, #8]
3418aa82:	2b00      	cmp	r3, #0
3418aa84:	d027      	beq.n	3418aad6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL2_GetM();
3418aa86:	f7fc fa7b 	bl	34186f80 <LL_RCC_PLL2_GetM>
3418aa8a:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3418aa8c:	687b      	ldr	r3, [r7, #4]
3418aa8e:	2b00      	cmp	r3, #0
3418aa90:	d021      	beq.n	3418aad6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
3418aa92:	f7fc fa65 	bl	34186f60 <LL_RCC_PLL2_GetN>
3418aa96:	4605      	mov	r5, r0
3418aa98:	f7fc fab6 	bl	34187008 <LL_RCC_PLL2_GetFRACN>
3418aa9c:	4606      	mov	r6, r0
3418aa9e:	f7fc fa7f 	bl	34186fa0 <LL_RCC_PLL2_GetP1>
3418aaa2:	4604      	mov	r4, r0
3418aaa4:	f7fc fa8c 	bl	34186fc0 <LL_RCC_PLL2_GetP2>
3418aaa8:	4603      	mov	r3, r0
3418aaaa:	9301      	str	r3, [sp, #4]
3418aaac:	9400      	str	r4, [sp, #0]
3418aaae:	4633      	mov	r3, r6
3418aab0:	462a      	mov	r2, r5
3418aab2:	6879      	ldr	r1, [r7, #4]
3418aab4:	68b8      	ldr	r0, [r7, #8]
3418aab6:	f000 f951 	bl	3418ad5c <RCCEx_CalcPLLFreq>
3418aaba:	60f8      	str	r0, [r7, #12]
3418aabc:	e00b      	b.n	3418aad6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
                                            LL_RCC_PLL2_GetP1(), LL_RCC_PLL2_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL2_IsEnabledBypass() != 0U)
3418aabe:	f7fc fa3b 	bl	34186f38 <LL_RCC_PLL2_IsEnabledBypass>
3418aac2:	4603      	mov	r3, r0
3418aac4:	2b00      	cmp	r3, #0
3418aac6:	d006      	beq.n	3418aad6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
3418aac8:	f7fc fa14 	bl	34186ef4 <LL_RCC_PLL2_GetSource>
3418aacc:	4603      	mov	r3, r0
3418aace:	4618      	mov	r0, r3
3418aad0:	f000 f8e6 	bl	3418aca0 <RCCEx_GetPLLSourceFreq>
3418aad4:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3418aad6:	68fb      	ldr	r3, [r7, #12]
}
3418aad8:	4618      	mov	r0, r3
3418aada:	3714      	adds	r7, #20
3418aadc:	46bd      	mov	sp, r7
3418aade:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>:
  * @brief  Return PLL3 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL3 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL3CLKFreq(void)
{
3418aae0:	b5f0      	push	{r4, r5, r6, r7, lr}
3418aae2:	b087      	sub	sp, #28
3418aae4:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418aae6:	2300      	movs	r3, #0
3418aae8:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL3_IsReady() != 0U)
3418aaea:	f7fc faa9 	bl	34187040 <LL_RCC_PLL3_IsReady>
3418aaee:	4603      	mov	r3, r0
3418aaf0:	2b00      	cmp	r3, #0
3418aaf2:	d02a      	beq.n	3418ab4a <HAL_RCCEx_GetPLL3CLKFreq+0x6a>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
3418aaf4:	f7fc fb0c 	bl	34187110 <LL_RCC_PLL3P_IsEnabled>
3418aaf8:	4603      	mov	r3, r0
3418aafa:	2b00      	cmp	r3, #0
3418aafc:	d031      	beq.n	3418ab62 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3418aafe:	f7fc fa91 	bl	34187024 <LL_RCC_PLL3_GetSource>
3418ab02:	4603      	mov	r3, r0
3418ab04:	4618      	mov	r0, r3
3418ab06:	f000 f8cb 	bl	3418aca0 <RCCEx_GetPLLSourceFreq>
3418ab0a:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3418ab0c:	68bb      	ldr	r3, [r7, #8]
3418ab0e:	2b00      	cmp	r3, #0
3418ab10:	d027      	beq.n	3418ab62 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL3_GetM();
3418ab12:	f7fc facd 	bl	341870b0 <LL_RCC_PLL3_GetM>
3418ab16:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3418ab18:	687b      	ldr	r3, [r7, #4]
3418ab1a:	2b00      	cmp	r3, #0
3418ab1c:	d021      	beq.n	3418ab62 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
3418ab1e:	f7fc fab7 	bl	34187090 <LL_RCC_PLL3_GetN>
3418ab22:	4605      	mov	r5, r0
3418ab24:	f7fc fb08 	bl	34187138 <LL_RCC_PLL3_GetFRACN>
3418ab28:	4606      	mov	r6, r0
3418ab2a:	f7fc fad1 	bl	341870d0 <LL_RCC_PLL3_GetP1>
3418ab2e:	4604      	mov	r4, r0
3418ab30:	f7fc fade 	bl	341870f0 <LL_RCC_PLL3_GetP2>
3418ab34:	4603      	mov	r3, r0
3418ab36:	9301      	str	r3, [sp, #4]
3418ab38:	9400      	str	r4, [sp, #0]
3418ab3a:	4633      	mov	r3, r6
3418ab3c:	462a      	mov	r2, r5
3418ab3e:	6879      	ldr	r1, [r7, #4]
3418ab40:	68b8      	ldr	r0, [r7, #8]
3418ab42:	f000 f90b 	bl	3418ad5c <RCCEx_CalcPLLFreq>
3418ab46:	60f8      	str	r0, [r7, #12]
3418ab48:	e00b      	b.n	3418ab62 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
                                            LL_RCC_PLL3_GetP1(), LL_RCC_PLL3_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL3_IsEnabledBypass() != 0U)
3418ab4a:	f7fc fa8d 	bl	34187068 <LL_RCC_PLL3_IsEnabledBypass>
3418ab4e:	4603      	mov	r3, r0
3418ab50:	2b00      	cmp	r3, #0
3418ab52:	d006      	beq.n	3418ab62 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3418ab54:	f7fc fa66 	bl	34187024 <LL_RCC_PLL3_GetSource>
3418ab58:	4603      	mov	r3, r0
3418ab5a:	4618      	mov	r0, r3
3418ab5c:	f000 f8a0 	bl	3418aca0 <RCCEx_GetPLLSourceFreq>
3418ab60:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3418ab62:	68fb      	ldr	r3, [r7, #12]
}
3418ab64:	4618      	mov	r0, r3
3418ab66:	3714      	adds	r7, #20
3418ab68:	46bd      	mov	sp, r7
3418ab6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>:
  * @brief  Return PLL4 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL4 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL4CLKFreq(void)
{
3418ab6c:	b5f0      	push	{r4, r5, r6, r7, lr}
3418ab6e:	b087      	sub	sp, #28
3418ab70:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418ab72:	2300      	movs	r3, #0
3418ab74:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL4_IsReady() != 0U)
3418ab76:	f7fc fafb 	bl	34187170 <LL_RCC_PLL4_IsReady>
3418ab7a:	4603      	mov	r3, r0
3418ab7c:	2b00      	cmp	r3, #0
3418ab7e:	d02a      	beq.n	3418abd6 <HAL_RCCEx_GetPLL4CLKFreq+0x6a>
  {
    if (LL_RCC_PLL4P_IsEnabled() != 0U)
3418ab80:	f7fc fb5e 	bl	34187240 <LL_RCC_PLL4P_IsEnabled>
3418ab84:	4603      	mov	r3, r0
3418ab86:	2b00      	cmp	r3, #0
3418ab88:	d031      	beq.n	3418abee <HAL_RCCEx_GetPLL4CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
3418ab8a:	f7fc fae3 	bl	34187154 <LL_RCC_PLL4_GetSource>
3418ab8e:	4603      	mov	r3, r0
3418ab90:	4618      	mov	r0, r3
3418ab92:	f000 f885 	bl	3418aca0 <RCCEx_GetPLLSourceFreq>
3418ab96:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3418ab98:	68bb      	ldr	r3, [r7, #8]
3418ab9a:	2b00      	cmp	r3, #0
3418ab9c:	d027      	beq.n	3418abee <HAL_RCCEx_GetPLL4CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL4_GetM();
3418ab9e:	f7fc fb1f 	bl	341871e0 <LL_RCC_PLL4_GetM>
3418aba2:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3418aba4:	687b      	ldr	r3, [r7, #4]
3418aba6:	2b00      	cmp	r3, #0
3418aba8:	d021      	beq.n	3418abee <HAL_RCCEx_GetPLL4CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
3418abaa:	f7fc fb09 	bl	341871c0 <LL_RCC_PLL4_GetN>
3418abae:	4605      	mov	r5, r0
3418abb0:	f7fc fb5a 	bl	34187268 <LL_RCC_PLL4_GetFRACN>
3418abb4:	4606      	mov	r6, r0
3418abb6:	f7fc fb23 	bl	34187200 <LL_RCC_PLL4_GetP1>
3418abba:	4604      	mov	r4, r0
3418abbc:	f7fc fb30 	bl	34187220 <LL_RCC_PLL4_GetP2>
3418abc0:	4603      	mov	r3, r0
3418abc2:	9301      	str	r3, [sp, #4]
3418abc4:	9400      	str	r4, [sp, #0]
3418abc6:	4633      	mov	r3, r6
3418abc8:	462a      	mov	r2, r5
3418abca:	6879      	ldr	r1, [r7, #4]
3418abcc:	68b8      	ldr	r0, [r7, #8]
3418abce:	f000 f8c5 	bl	3418ad5c <RCCEx_CalcPLLFreq>
3418abd2:	60f8      	str	r0, [r7, #12]
3418abd4:	e00b      	b.n	3418abee <HAL_RCCEx_GetPLL4CLKFreq+0x82>
                                            LL_RCC_PLL4_GetP1(), LL_RCC_PLL4_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL4_IsEnabledBypass() != 0U)
3418abd6:	f7fc fadf 	bl	34187198 <LL_RCC_PLL4_IsEnabledBypass>
3418abda:	4603      	mov	r3, r0
3418abdc:	2b00      	cmp	r3, #0
3418abde:	d006      	beq.n	3418abee <HAL_RCCEx_GetPLL4CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
3418abe0:	f7fc fab8 	bl	34187154 <LL_RCC_PLL4_GetSource>
3418abe4:	4603      	mov	r3, r0
3418abe6:	4618      	mov	r0, r3
3418abe8:	f000 f85a 	bl	3418aca0 <RCCEx_GetPLLSourceFreq>
3418abec:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3418abee:	68fb      	ldr	r3, [r7, #12]
}
3418abf0:	4618      	mov	r0, r3
3418abf2:	3714      	adds	r7, #20
3418abf4:	46bd      	mov	sp, r7
3418abf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418abf8 <RCCEx_GetHCLKFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
3418abf8:	b580      	push	{r7, lr}
3418abfa:	b082      	sub	sp, #8
3418abfc:	af00      	add	r7, sp, #0
3418abfe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
3418ac00:	f7fb fcca 	bl	34186598 <LL_RCC_GetAHBPrescaler>
3418ac04:	4603      	mov	r3, r0
3418ac06:	0d1b      	lsrs	r3, r3, #20
3418ac08:	f003 0307 	and.w	r3, r3, #7
3418ac0c:	687a      	ldr	r2, [r7, #4]
3418ac0e:	fa22 f303 	lsr.w	r3, r2, r3
}
3418ac12:	4618      	mov	r0, r3
3418ac14:	3708      	adds	r7, #8
3418ac16:	46bd      	mov	sp, r7
3418ac18:	bd80      	pop	{r7, pc}

3418ac1a <RCCEx_GetPCLK1Freq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK1Freq(uint32_t HCLK_Frequency)
{
3418ac1a:	b580      	push	{r7, lr}
3418ac1c:	b082      	sub	sp, #8
3418ac1e:	af00      	add	r7, sp, #0
3418ac20:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
3418ac22:	f7fb fcc7 	bl	341865b4 <LL_RCC_GetAPB1Prescaler>
3418ac26:	4603      	mov	r3, r0
3418ac28:	f003 0307 	and.w	r3, r3, #7
3418ac2c:	687a      	ldr	r2, [r7, #4]
3418ac2e:	fa22 f303 	lsr.w	r3, r2, r3
}
3418ac32:	4618      	mov	r0, r3
3418ac34:	3708      	adds	r7, #8
3418ac36:	46bd      	mov	sp, r7
3418ac38:	bd80      	pop	{r7, pc}

3418ac3a <RCCEx_GetPCLK2Freq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK2Freq(uint32_t HCLK_Frequency)
{
3418ac3a:	b580      	push	{r7, lr}
3418ac3c:	b082      	sub	sp, #8
3418ac3e:	af00      	add	r7, sp, #0
3418ac40:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
3418ac42:	f7fb fcc5 	bl	341865d0 <LL_RCC_GetAPB2Prescaler>
3418ac46:	4603      	mov	r3, r0
3418ac48:	091b      	lsrs	r3, r3, #4
3418ac4a:	f003 0307 	and.w	r3, r3, #7
3418ac4e:	687a      	ldr	r2, [r7, #4]
3418ac50:	fa22 f303 	lsr.w	r3, r2, r3
}
3418ac54:	4618      	mov	r0, r3
3418ac56:	3708      	adds	r7, #8
3418ac58:	46bd      	mov	sp, r7
3418ac5a:	bd80      	pop	{r7, pc}

3418ac5c <RCCEx_GetPCLK4Freq>:
  * @brief  Return PCLK4 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK4 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK4Freq(uint32_t HCLK_Frequency)
{
3418ac5c:	b580      	push	{r7, lr}
3418ac5e:	b082      	sub	sp, #8
3418ac60:	af00      	add	r7, sp, #0
3418ac62:	6078      	str	r0, [r7, #4]
  /* PCLK4 clock frequency */
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
3418ac64:	f7fb fcc2 	bl	341865ec <LL_RCC_GetAPB4Prescaler>
3418ac68:	4603      	mov	r3, r0
3418ac6a:	0b1b      	lsrs	r3, r3, #12
3418ac6c:	f003 0307 	and.w	r3, r3, #7
3418ac70:	687a      	ldr	r2, [r7, #4]
3418ac72:	fa22 f303 	lsr.w	r3, r2, r3
}
3418ac76:	4618      	mov	r0, r3
3418ac78:	3708      	adds	r7, #8
3418ac7a:	46bd      	mov	sp, r7
3418ac7c:	bd80      	pop	{r7, pc}

3418ac7e <RCCEx_GetPCLK5Freq>:
  * @brief  Return PCLK5 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK5 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK5Freq(uint32_t HCLK_Frequency)
{
3418ac7e:	b580      	push	{r7, lr}
3418ac80:	b082      	sub	sp, #8
3418ac82:	af00      	add	r7, sp, #0
3418ac84:	6078      	str	r0, [r7, #4]
  /* PCLK5 clock frequency */
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
3418ac86:	f7fb fcbf 	bl	34186608 <LL_RCC_GetAPB5Prescaler>
3418ac8a:	4603      	mov	r3, r0
3418ac8c:	0c1b      	lsrs	r3, r3, #16
3418ac8e:	f003 0307 	and.w	r3, r3, #7
3418ac92:	687a      	ldr	r2, [r7, #4]
3418ac94:	fa22 f303 	lsr.w	r3, r2, r3
}
3418ac98:	4618      	mov	r0, r3
3418ac9a:	3708      	adds	r7, #8
3418ac9c:	46bd      	mov	sp, r7
3418ac9e:	bd80      	pop	{r7, pc}

3418aca0 <RCCEx_GetPLLSourceFreq>:
  * @brief  Return PLL source clock frequency
  * @param  PLLsource PLL source clock
  * @retval PLL source clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
3418aca0:	b580      	push	{r7, lr}
3418aca2:	b084      	sub	sp, #16
3418aca4:	af00      	add	r7, sp, #0
3418aca6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
3418aca8:	2300      	movs	r3, #0
3418acaa:	60fb      	str	r3, [r7, #12]

  switch (PLLsource)
3418acac:	687b      	ldr	r3, [r7, #4]
3418acae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418acb2:	d039      	beq.n	3418ad28 <RCCEx_GetPLLSourceFreq+0x88>
3418acb4:	687b      	ldr	r3, [r7, #4]
3418acb6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418acba:	d838      	bhi.n	3418ad2e <RCCEx_GetPLLSourceFreq+0x8e>
3418acbc:	687b      	ldr	r3, [r7, #4]
3418acbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418acc2:	d029      	beq.n	3418ad18 <RCCEx_GetPLLSourceFreq+0x78>
3418acc4:	687b      	ldr	r3, [r7, #4]
3418acc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418acca:	d830      	bhi.n	3418ad2e <RCCEx_GetPLLSourceFreq+0x8e>
3418accc:	687b      	ldr	r3, [r7, #4]
3418acce:	2b00      	cmp	r3, #0
3418acd0:	d004      	beq.n	3418acdc <RCCEx_GetPLLSourceFreq+0x3c>
3418acd2:	687b      	ldr	r3, [r7, #4]
3418acd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418acd8:	d00e      	beq.n	3418acf8 <RCCEx_GetPLLSourceFreq+0x58>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
      break;

    default:
      /* unexpected case */
      break;
3418acda:	e028      	b.n	3418ad2e <RCCEx_GetPLLSourceFreq+0x8e>
      if (LL_RCC_HSI_IsReady() != 0U)
3418acdc:	f7fb fbfc 	bl	341864d8 <LL_RCC_HSI_IsReady>
3418ace0:	4603      	mov	r3, r0
3418ace2:	2b00      	cmp	r3, #0
3418ace4:	d025      	beq.n	3418ad32 <RCCEx_GetPLLSourceFreq+0x92>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418ace6:	f7fb fc09 	bl	341864fc <LL_RCC_HSI_GetDivider>
3418acea:	4603      	mov	r3, r0
3418acec:	09db      	lsrs	r3, r3, #7
3418acee:	4a16      	ldr	r2, [pc, #88]	@ (3418ad48 <RCCEx_GetPLLSourceFreq+0xa8>)
3418acf0:	fa22 f303 	lsr.w	r3, r2, r3
3418acf4:	60fb      	str	r3, [r7, #12]
      break;
3418acf6:	e01c      	b.n	3418ad32 <RCCEx_GetPLLSourceFreq+0x92>
      if (LL_RCC_MSI_IsReady() != 0U)
3418acf8:	f7fb fc0e 	bl	34186518 <LL_RCC_MSI_IsReady>
3418acfc:	4603      	mov	r3, r0
3418acfe:	2b00      	cmp	r3, #0
3418ad00:	d019      	beq.n	3418ad36 <RCCEx_GetPLLSourceFreq+0x96>
        if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
3418ad02:	f7fb fc1b 	bl	3418653c <LL_RCC_MSI_GetFrequency>
3418ad06:	4603      	mov	r3, r0
3418ad08:	2b00      	cmp	r3, #0
3418ad0a:	d102      	bne.n	3418ad12 <RCCEx_GetPLLSourceFreq+0x72>
          pllinputfreq = MSI_VALUE;
3418ad0c:	4b0f      	ldr	r3, [pc, #60]	@ (3418ad4c <RCCEx_GetPLLSourceFreq+0xac>)
3418ad0e:	60fb      	str	r3, [r7, #12]
      break;
3418ad10:	e011      	b.n	3418ad36 <RCCEx_GetPLLSourceFreq+0x96>
          pllinputfreq = 16000000UL;
3418ad12:	4b0f      	ldr	r3, [pc, #60]	@ (3418ad50 <RCCEx_GetPLLSourceFreq+0xb0>)
3418ad14:	60fb      	str	r3, [r7, #12]
      break;
3418ad16:	e00e      	b.n	3418ad36 <RCCEx_GetPLLSourceFreq+0x96>
      if (LL_RCC_HSE_IsReady() != 0U)
3418ad18:	f7fb fbcc 	bl	341864b4 <LL_RCC_HSE_IsReady>
3418ad1c:	4603      	mov	r3, r0
3418ad1e:	2b00      	cmp	r3, #0
3418ad20:	d00b      	beq.n	3418ad3a <RCCEx_GetPLLSourceFreq+0x9a>
        pllinputfreq = HSE_VALUE;
3418ad22:	4b0c      	ldr	r3, [pc, #48]	@ (3418ad54 <RCCEx_GetPLLSourceFreq+0xb4>)
3418ad24:	60fb      	str	r3, [r7, #12]
      break;
3418ad26:	e008      	b.n	3418ad3a <RCCEx_GetPLLSourceFreq+0x9a>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
3418ad28:	4b0b      	ldr	r3, [pc, #44]	@ (3418ad58 <RCCEx_GetPLLSourceFreq+0xb8>)
3418ad2a:	60fb      	str	r3, [r7, #12]
      break;
3418ad2c:	e006      	b.n	3418ad3c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418ad2e:	bf00      	nop
3418ad30:	e004      	b.n	3418ad3c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418ad32:	bf00      	nop
3418ad34:	e002      	b.n	3418ad3c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418ad36:	bf00      	nop
3418ad38:	e000      	b.n	3418ad3c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418ad3a:	bf00      	nop
  }

  return pllinputfreq;
3418ad3c:	68fb      	ldr	r3, [r7, #12]
}
3418ad3e:	4618      	mov	r0, r3
3418ad40:	3710      	adds	r7, #16
3418ad42:	46bd      	mov	sp, r7
3418ad44:	bd80      	pop	{r7, pc}
3418ad46:	bf00      	nop
3418ad48:	03d09000 	.word	0x03d09000
3418ad4c:	003d0900 	.word	0x003d0900
3418ad50:	00f42400 	.word	0x00f42400
3418ad54:	016e3600 	.word	0x016e3600
3418ad58:	00bb8000 	.word	0x00bb8000

3418ad5c <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
3418ad5c:	b480      	push	{r7}
3418ad5e:	b087      	sub	sp, #28
3418ad60:	af00      	add	r7, sp, #0
3418ad62:	60f8      	str	r0, [r7, #12]
3418ad64:	60b9      	str	r1, [r7, #8]
3418ad66:	607a      	str	r2, [r7, #4]
3418ad68:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
3418ad6a:	68fb      	ldr	r3, [r7, #12]
3418ad6c:	ee07 3a90 	vmov	s15, r3
3418ad70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418ad74:	687b      	ldr	r3, [r7, #4]
3418ad76:	ee07 3a90 	vmov	s15, r3
3418ad7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
3418ad7e:	683b      	ldr	r3, [r7, #0]
3418ad80:	ee07 3a90 	vmov	s15, r3
3418ad84:	eeb8 6a67 	vcvt.f32.u32	s12, s15
3418ad88:	eddf 5a19 	vldr	s11, [pc, #100]	@ 3418adf0 <RCCEx_CalcPLLFreq+0x94>
3418ad8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
3418ad90:	ee76 7aa7 	vadd.f32	s15, s13, s15
3418ad94:	ee67 6a27 	vmul.f32	s13, s14, s15
3418ad98:	68bb      	ldr	r3, [r7, #8]
3418ad9a:	ee07 3a90 	vmov	s15, r3
3418ad9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418ada2:	eec6 7a87 	vdiv.f32	s15, s13, s14
3418ada6:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)P1;
3418adaa:	6a3b      	ldr	r3, [r7, #32]
3418adac:	ee07 3a90 	vmov	s15, r3
3418adb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418adb4:	edd7 6a05 	vldr	s13, [r7, #20]
3418adb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
3418adbc:	edc7 7a05 	vstr	s15, [r7, #20]
  freq = freq / (float_t)P2;
3418adc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418adc2:	ee07 3a90 	vmov	s15, r3
3418adc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418adca:	edd7 6a05 	vldr	s13, [r7, #20]
3418adce:	eec6 7a87 	vdiv.f32	s15, s13, s14
3418add2:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
3418add6:	edd7 7a05 	vldr	s15, [r7, #20]
3418adda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
3418adde:	ee17 3a90 	vmov	r3, s15
}
3418ade2:	4618      	mov	r0, r3
3418ade4:	371c      	adds	r7, #28
3418ade6:	46bd      	mov	sp, r7
3418ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418adec:	4770      	bx	lr
3418adee:	bf00      	nop
3418adf0:	4b800000 	.word	0x4b800000

3418adf4 <RCCEx_GetADCCLKFreq>:
  *         @arg @ref RCCEx_ADC_Clock_Source
  * @retval ADC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADCCLKFreq(uint32_t ADCxSource)
{
3418adf4:	b590      	push	{r4, r7, lr}
3418adf6:	b085      	sub	sp, #20
3418adf8:	af00      	add	r7, sp, #0
3418adfa:	6078      	str	r0, [r7, #4]
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418adfc:	2300      	movs	r3, #0
3418adfe:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADCClockSource(ADCxSource))
3418ae00:	6878      	ldr	r0, [r7, #4]
3418ae02:	f7fb fe1f 	bl	34186a44 <LL_RCC_GetADCClockSource>
3418ae06:	4603      	mov	r3, r0
3418ae08:	2b70      	cmp	r3, #112	@ 0x70
3418ae0a:	f000 80d1 	beq.w	3418afb0 <RCCEx_GetADCCLKFreq+0x1bc>
3418ae0e:	2b70      	cmp	r3, #112	@ 0x70
3418ae10:	f200 80d8 	bhi.w	3418afc4 <RCCEx_GetADCCLKFreq+0x1d0>
3418ae14:	2b60      	cmp	r3, #96	@ 0x60
3418ae16:	f000 80c8 	beq.w	3418afaa <RCCEx_GetADCCLKFreq+0x1b6>
3418ae1a:	2b60      	cmp	r3, #96	@ 0x60
3418ae1c:	f200 80d2 	bhi.w	3418afc4 <RCCEx_GetADCCLKFreq+0x1d0>
3418ae20:	2b50      	cmp	r3, #80	@ 0x50
3418ae22:	f000 80ac 	beq.w	3418af7e <RCCEx_GetADCCLKFreq+0x18a>
3418ae26:	2b50      	cmp	r3, #80	@ 0x50
3418ae28:	f200 80cc 	bhi.w	3418afc4 <RCCEx_GetADCCLKFreq+0x1d0>
3418ae2c:	2b40      	cmp	r3, #64	@ 0x40
3418ae2e:	f000 80b4 	beq.w	3418af9a <RCCEx_GetADCCLKFreq+0x1a6>
3418ae32:	2b40      	cmp	r3, #64	@ 0x40
3418ae34:	f200 80c6 	bhi.w	3418afc4 <RCCEx_GetADCCLKFreq+0x1d0>
3418ae38:	2b30      	cmp	r3, #48	@ 0x30
3418ae3a:	d05d      	beq.n	3418aef8 <RCCEx_GetADCCLKFreq+0x104>
3418ae3c:	2b30      	cmp	r3, #48	@ 0x30
3418ae3e:	f200 80c1 	bhi.w	3418afc4 <RCCEx_GetADCCLKFreq+0x1d0>
3418ae42:	2b20      	cmp	r3, #32
3418ae44:	d014      	beq.n	3418ae70 <RCCEx_GetADCCLKFreq+0x7c>
3418ae46:	2b20      	cmp	r3, #32
3418ae48:	f200 80bc 	bhi.w	3418afc4 <RCCEx_GetADCCLKFreq+0x1d0>
3418ae4c:	2b00      	cmp	r3, #0
3418ae4e:	d002      	beq.n	3418ae56 <RCCEx_GetADCCLKFreq+0x62>
3418ae50:	2b10      	cmp	r3, #16
3418ae52:	d008      	beq.n	3418ae66 <RCCEx_GetADCCLKFreq+0x72>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
3418ae54:	e0b6      	b.n	3418afc4 <RCCEx_GetADCCLKFreq+0x1d0>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418ae56:	f7fa ff29 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418ae5a:	4603      	mov	r3, r0
3418ae5c:	4618      	mov	r0, r3
3418ae5e:	f7ff fecb 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418ae62:	60f8      	str	r0, [r7, #12]
      break;
3418ae64:	e0b7      	b.n	3418afd6 <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418ae66:	2007      	movs	r0, #7
3418ae68:	f000 f9b2 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418ae6c:	60f8      	str	r0, [r7, #12]
      break;
3418ae6e:	e0b2      	b.n	3418afd6 <RCCEx_GetADCCLKFreq+0x1e2>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418ae70:	f7fc fad6 	bl	34187420 <LL_RCC_IC7_IsEnabled>
3418ae74:	4603      	mov	r3, r0
3418ae76:	2b00      	cmp	r3, #0
3418ae78:	f000 80a6 	beq.w	3418afc8 <RCCEx_GetADCCLKFreq+0x1d4>
        ic_divider = LL_RCC_IC7_GetDivider();
3418ae7c:	f7fc faf2 	bl	34187464 <LL_RCC_IC7_GetDivider>
3418ae80:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418ae82:	f7fc fae1 	bl	34187448 <LL_RCC_IC7_GetSource>
3418ae86:	4603      	mov	r3, r0
3418ae88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ae8c:	d029      	beq.n	3418aee2 <RCCEx_GetADCCLKFreq+0xee>
3418ae8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ae92:	d82f      	bhi.n	3418aef4 <RCCEx_GetADCCLKFreq+0x100>
3418ae94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ae98:	d01a      	beq.n	3418aed0 <RCCEx_GetADCCLKFreq+0xdc>
3418ae9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ae9e:	d829      	bhi.n	3418aef4 <RCCEx_GetADCCLKFreq+0x100>
3418aea0:	2b00      	cmp	r3, #0
3418aea2:	d003      	beq.n	3418aeac <RCCEx_GetADCCLKFreq+0xb8>
3418aea4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418aea8:	d009      	beq.n	3418aebe <RCCEx_GetADCCLKFreq+0xca>
            break;
3418aeaa:	e023      	b.n	3418aef4 <RCCEx_GetADCCLKFreq+0x100>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418aeac:	f7ff fd8c 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418aeb0:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418aeb2:	68fa      	ldr	r2, [r7, #12]
3418aeb4:	68bb      	ldr	r3, [r7, #8]
3418aeb6:	fbb2 f3f3 	udiv	r3, r2, r3
3418aeba:	60fb      	str	r3, [r7, #12]
            break;
3418aebc:	e01b      	b.n	3418aef6 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418aebe:	f7ff fdc9 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418aec2:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418aec4:	68fa      	ldr	r2, [r7, #12]
3418aec6:	68bb      	ldr	r3, [r7, #8]
3418aec8:	fbb2 f3f3 	udiv	r3, r2, r3
3418aecc:	60fb      	str	r3, [r7, #12]
            break;
3418aece:	e012      	b.n	3418aef6 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418aed0:	f7ff fe06 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418aed4:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418aed6:	68fa      	ldr	r2, [r7, #12]
3418aed8:	68bb      	ldr	r3, [r7, #8]
3418aeda:	fbb2 f3f3 	udiv	r3, r2, r3
3418aede:	60fb      	str	r3, [r7, #12]
            break;
3418aee0:	e009      	b.n	3418aef6 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418aee2:	f7ff fe43 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418aee6:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418aee8:	68fa      	ldr	r2, [r7, #12]
3418aeea:	68bb      	ldr	r3, [r7, #8]
3418aeec:	fbb2 f3f3 	udiv	r3, r2, r3
3418aef0:	60fb      	str	r3, [r7, #12]
            break;
3418aef2:	e000      	b.n	3418aef6 <RCCEx_GetADCCLKFreq+0x102>
            break;
3418aef4:	bf00      	nop
      break;
3418aef6:	e067      	b.n	3418afc8 <RCCEx_GetADCCLKFreq+0x1d4>
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418aef8:	f7fc fad2 	bl	341874a0 <LL_RCC_IC8_IsEnabled>
3418aefc:	4603      	mov	r3, r0
3418aefe:	2b00      	cmp	r3, #0
3418af00:	d064      	beq.n	3418afcc <RCCEx_GetADCCLKFreq+0x1d8>
        ic_divider = LL_RCC_IC8_GetDivider();
3418af02:	f7fc faef 	bl	341874e4 <LL_RCC_IC8_GetDivider>
3418af06:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418af08:	f7fc fade 	bl	341874c8 <LL_RCC_IC8_GetSource>
3418af0c:	4603      	mov	r3, r0
3418af0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418af12:	d029      	beq.n	3418af68 <RCCEx_GetADCCLKFreq+0x174>
3418af14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418af18:	d82f      	bhi.n	3418af7a <RCCEx_GetADCCLKFreq+0x186>
3418af1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418af1e:	d01a      	beq.n	3418af56 <RCCEx_GetADCCLKFreq+0x162>
3418af20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418af24:	d829      	bhi.n	3418af7a <RCCEx_GetADCCLKFreq+0x186>
3418af26:	2b00      	cmp	r3, #0
3418af28:	d003      	beq.n	3418af32 <RCCEx_GetADCCLKFreq+0x13e>
3418af2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418af2e:	d009      	beq.n	3418af44 <RCCEx_GetADCCLKFreq+0x150>
            break;
3418af30:	e023      	b.n	3418af7a <RCCEx_GetADCCLKFreq+0x186>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418af32:	f7ff fd49 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418af36:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418af38:	68fa      	ldr	r2, [r7, #12]
3418af3a:	68bb      	ldr	r3, [r7, #8]
3418af3c:	fbb2 f3f3 	udiv	r3, r2, r3
3418af40:	60fb      	str	r3, [r7, #12]
            break;
3418af42:	e01b      	b.n	3418af7c <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418af44:	f7ff fd86 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418af48:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418af4a:	68fa      	ldr	r2, [r7, #12]
3418af4c:	68bb      	ldr	r3, [r7, #8]
3418af4e:	fbb2 f3f3 	udiv	r3, r2, r3
3418af52:	60fb      	str	r3, [r7, #12]
            break;
3418af54:	e012      	b.n	3418af7c <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418af56:	f7ff fdc3 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418af5a:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418af5c:	68fa      	ldr	r2, [r7, #12]
3418af5e:	68bb      	ldr	r3, [r7, #8]
3418af60:	fbb2 f3f3 	udiv	r3, r2, r3
3418af64:	60fb      	str	r3, [r7, #12]
            break;
3418af66:	e009      	b.n	3418af7c <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418af68:	f7ff fe00 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418af6c:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418af6e:	68fa      	ldr	r2, [r7, #12]
3418af70:	68bb      	ldr	r3, [r7, #8]
3418af72:	fbb2 f3f3 	udiv	r3, r2, r3
3418af76:	60fb      	str	r3, [r7, #12]
            break;
3418af78:	e000      	b.n	3418af7c <RCCEx_GetADCCLKFreq+0x188>
            break;
3418af7a:	bf00      	nop
      break;
3418af7c:	e026      	b.n	3418afcc <RCCEx_GetADCCLKFreq+0x1d8>
      if (LL_RCC_HSI_IsReady() != 0U)
3418af7e:	f7fb faab 	bl	341864d8 <LL_RCC_HSI_IsReady>
3418af82:	4603      	mov	r3, r0
3418af84:	2b00      	cmp	r3, #0
3418af86:	d023      	beq.n	3418afd0 <RCCEx_GetADCCLKFreq+0x1dc>
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418af88:	f7fb fab8 	bl	341864fc <LL_RCC_HSI_GetDivider>
3418af8c:	4603      	mov	r3, r0
3418af8e:	09db      	lsrs	r3, r3, #7
3418af90:	4a16      	ldr	r2, [pc, #88]	@ (3418afec <RCCEx_GetADCCLKFreq+0x1f8>)
3418af92:	fa22 f303 	lsr.w	r3, r2, r3
3418af96:	60fb      	str	r3, [r7, #12]
      break;
3418af98:	e01a      	b.n	3418afd0 <RCCEx_GetADCCLKFreq+0x1dc>
      if (LL_RCC_MSI_IsReady() != 0U)
3418af9a:	f7fb fabd 	bl	34186518 <LL_RCC_MSI_IsReady>
3418af9e:	4603      	mov	r3, r0
3418afa0:	2b00      	cmp	r3, #0
3418afa2:	d017      	beq.n	3418afd4 <RCCEx_GetADCCLKFreq+0x1e0>
        adc_frequency = MSI_VALUE;
3418afa4:	4b12      	ldr	r3, [pc, #72]	@ (3418aff0 <RCCEx_GetADCCLKFreq+0x1fc>)
3418afa6:	60fb      	str	r3, [r7, #12]
      break;
3418afa8:	e014      	b.n	3418afd4 <RCCEx_GetADCCLKFreq+0x1e0>
      adc_frequency = EXTERNAL_CLOCK_VALUE;
3418afaa:	4b12      	ldr	r3, [pc, #72]	@ (3418aff4 <RCCEx_GetADCCLKFreq+0x200>)
3418afac:	60fb      	str	r3, [r7, #12]
      break;
3418afae:	e012      	b.n	3418afd6 <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3418afb0:	f7fa fe7c 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418afb4:	4604      	mov	r4, r0
3418afb6:	f7fb fef7 	bl	34186da8 <LL_RCC_GetTIMPrescaler>
3418afba:	4603      	mov	r3, r0
3418afbc:	fa24 f303 	lsr.w	r3, r4, r3
3418afc0:	60fb      	str	r3, [r7, #12]
      break;
3418afc2:	e008      	b.n	3418afd6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
3418afc4:	bf00      	nop
3418afc6:	e006      	b.n	3418afd6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
3418afc8:	bf00      	nop
3418afca:	e004      	b.n	3418afd6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
3418afcc:	bf00      	nop
3418afce:	e002      	b.n	3418afd6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
3418afd0:	bf00      	nop
3418afd2:	e000      	b.n	3418afd6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
3418afd4:	bf00      	nop
  }

  return (adc_frequency / __HAL_RCC_GET_ADC_DIVIDER());
3418afd6:	f7fb fb4f 	bl	34186678 <LL_RCC_GetADCPrescaler>
3418afda:	4603      	mov	r3, r0
3418afdc:	3301      	adds	r3, #1
3418afde:	68fa      	ldr	r2, [r7, #12]
3418afe0:	fbb2 f3f3 	udiv	r3, r2, r3
}
3418afe4:	4618      	mov	r0, r3
3418afe6:	3714      	adds	r7, #20
3418afe8:	46bd      	mov	sp, r7
3418afea:	bd90      	pop	{r4, r7, pc}
3418afec:	03d09000 	.word	0x03d09000
3418aff0:	003d0900 	.word	0x003d0900
3418aff4:	00bb8000 	.word	0x00bb8000

3418aff8 <RCCEx_GetADFCLKFreq>:
  *         @arg @ref RCCEx_ADF1_Clock_Source
  * @retval ADF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADFCLKFreq(uint32_t ADFxSource)
{
3418aff8:	b590      	push	{r4, r7, lr}
3418affa:	b085      	sub	sp, #20
3418affc:	af00      	add	r7, sp, #0
3418affe:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b000:	2300      	movs	r3, #0
3418b002:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADFClockSource(ADFxSource))
3418b004:	6878      	ldr	r0, [r7, #4]
3418b006:	f7fb fd2f 	bl	34186a68 <LL_RCC_GetADFClockSource>
3418b00a:	4603      	mov	r3, r0
3418b00c:	2b07      	cmp	r3, #7
3418b00e:	f200 80ca 	bhi.w	3418b1a6 <RCCEx_GetADFCLKFreq+0x1ae>
3418b012:	a201      	add	r2, pc, #4	@ (adr r2, 3418b018 <RCCEx_GetADFCLKFreq+0x20>)
3418b014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418b018:	3418b039 	.word	0x3418b039
3418b01c:	3418b049 	.word	0x3418b049
3418b020:	3418b053 	.word	0x3418b053
3418b024:	3418b0db 	.word	0x3418b0db
3418b028:	3418b17d 	.word	0x3418b17d
3418b02c:	3418b161 	.word	0x3418b161
3418b030:	3418b18d 	.word	0x3418b18d
3418b034:	3418b193 	.word	0x3418b193
  {
    case LL_RCC_ADF1_CLKSOURCE_HCLK:
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418b038:	f7fa fe38 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418b03c:	4603      	mov	r3, r0
3418b03e:	4618      	mov	r0, r3
3418b040:	f7ff fdda 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418b044:	60f8      	str	r0, [r7, #12]
      break;
3418b046:	e0b7      	b.n	3418b1b8 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_CLKP:
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b048:	2007      	movs	r0, #7
3418b04a:	f000 f8c1 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418b04e:	60f8      	str	r0, [r7, #12]
      break;
3418b050:	e0b2      	b.n	3418b1b8 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418b052:	f7fc f9e5 	bl	34187420 <LL_RCC_IC7_IsEnabled>
3418b056:	4603      	mov	r3, r0
3418b058:	2b00      	cmp	r3, #0
3418b05a:	f000 80a6 	beq.w	3418b1aa <RCCEx_GetADFCLKFreq+0x1b2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3418b05e:	f7fc fa01 	bl	34187464 <LL_RCC_IC7_GetDivider>
3418b062:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418b064:	f7fc f9f0 	bl	34187448 <LL_RCC_IC7_GetSource>
3418b068:	4603      	mov	r3, r0
3418b06a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b06e:	d029      	beq.n	3418b0c4 <RCCEx_GetADFCLKFreq+0xcc>
3418b070:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b074:	d82f      	bhi.n	3418b0d6 <RCCEx_GetADFCLKFreq+0xde>
3418b076:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b07a:	d01a      	beq.n	3418b0b2 <RCCEx_GetADFCLKFreq+0xba>
3418b07c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b080:	d829      	bhi.n	3418b0d6 <RCCEx_GetADFCLKFreq+0xde>
3418b082:	2b00      	cmp	r3, #0
3418b084:	d003      	beq.n	3418b08e <RCCEx_GetADFCLKFreq+0x96>
3418b086:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b08a:	d009      	beq.n	3418b0a0 <RCCEx_GetADFCLKFreq+0xa8>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b08c:	e023      	b.n	3418b0d6 <RCCEx_GetADFCLKFreq+0xde>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b08e:	f7ff fc9b 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418b092:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418b094:	68fa      	ldr	r2, [r7, #12]
3418b096:	68bb      	ldr	r3, [r7, #8]
3418b098:	fbb2 f3f3 	udiv	r3, r2, r3
3418b09c:	60fb      	str	r3, [r7, #12]
            break;
3418b09e:	e01b      	b.n	3418b0d8 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b0a0:	f7ff fcd8 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418b0a4:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418b0a6:	68fa      	ldr	r2, [r7, #12]
3418b0a8:	68bb      	ldr	r3, [r7, #8]
3418b0aa:	fbb2 f3f3 	udiv	r3, r2, r3
3418b0ae:	60fb      	str	r3, [r7, #12]
            break;
3418b0b0:	e012      	b.n	3418b0d8 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b0b2:	f7ff fd15 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418b0b6:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418b0b8:	68fa      	ldr	r2, [r7, #12]
3418b0ba:	68bb      	ldr	r3, [r7, #8]
3418b0bc:	fbb2 f3f3 	udiv	r3, r2, r3
3418b0c0:	60fb      	str	r3, [r7, #12]
            break;
3418b0c2:	e009      	b.n	3418b0d8 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b0c4:	f7ff fd52 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418b0c8:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418b0ca:	68fa      	ldr	r2, [r7, #12]
3418b0cc:	68bb      	ldr	r3, [r7, #8]
3418b0ce:	fbb2 f3f3 	udiv	r3, r2, r3
3418b0d2:	60fb      	str	r3, [r7, #12]
            break;
3418b0d4:	e000      	b.n	3418b0d8 <RCCEx_GetADFCLKFreq+0xe0>
            break;
3418b0d6:	bf00      	nop
        }
      }
      break;
3418b0d8:	e067      	b.n	3418b1aa <RCCEx_GetADFCLKFreq+0x1b2>

    case LL_RCC_ADF1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418b0da:	f7fc f9e1 	bl	341874a0 <LL_RCC_IC8_IsEnabled>
3418b0de:	4603      	mov	r3, r0
3418b0e0:	2b00      	cmp	r3, #0
3418b0e2:	d064      	beq.n	3418b1ae <RCCEx_GetADFCLKFreq+0x1b6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418b0e4:	f7fc f9fe 	bl	341874e4 <LL_RCC_IC8_GetDivider>
3418b0e8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418b0ea:	f7fc f9ed 	bl	341874c8 <LL_RCC_IC8_GetSource>
3418b0ee:	4603      	mov	r3, r0
3418b0f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b0f4:	d029      	beq.n	3418b14a <RCCEx_GetADFCLKFreq+0x152>
3418b0f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b0fa:	d82f      	bhi.n	3418b15c <RCCEx_GetADFCLKFreq+0x164>
3418b0fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b100:	d01a      	beq.n	3418b138 <RCCEx_GetADFCLKFreq+0x140>
3418b102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b106:	d829      	bhi.n	3418b15c <RCCEx_GetADFCLKFreq+0x164>
3418b108:	2b00      	cmp	r3, #0
3418b10a:	d003      	beq.n	3418b114 <RCCEx_GetADFCLKFreq+0x11c>
3418b10c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b110:	d009      	beq.n	3418b126 <RCCEx_GetADFCLKFreq+0x12e>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b112:	e023      	b.n	3418b15c <RCCEx_GetADFCLKFreq+0x164>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b114:	f7ff fc58 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418b118:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418b11a:	68fa      	ldr	r2, [r7, #12]
3418b11c:	68bb      	ldr	r3, [r7, #8]
3418b11e:	fbb2 f3f3 	udiv	r3, r2, r3
3418b122:	60fb      	str	r3, [r7, #12]
            break;
3418b124:	e01b      	b.n	3418b15e <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b126:	f7ff fc95 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418b12a:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418b12c:	68fa      	ldr	r2, [r7, #12]
3418b12e:	68bb      	ldr	r3, [r7, #8]
3418b130:	fbb2 f3f3 	udiv	r3, r2, r3
3418b134:	60fb      	str	r3, [r7, #12]
            break;
3418b136:	e012      	b.n	3418b15e <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b138:	f7ff fcd2 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418b13c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418b13e:	68fa      	ldr	r2, [r7, #12]
3418b140:	68bb      	ldr	r3, [r7, #8]
3418b142:	fbb2 f3f3 	udiv	r3, r2, r3
3418b146:	60fb      	str	r3, [r7, #12]
            break;
3418b148:	e009      	b.n	3418b15e <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b14a:	f7ff fd0f 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418b14e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418b150:	68fa      	ldr	r2, [r7, #12]
3418b152:	68bb      	ldr	r3, [r7, #8]
3418b154:	fbb2 f3f3 	udiv	r3, r2, r3
3418b158:	60fb      	str	r3, [r7, #12]
            break;
3418b15a:	e000      	b.n	3418b15e <RCCEx_GetADFCLKFreq+0x166>
            break;
3418b15c:	bf00      	nop
        }
      }
      break;
3418b15e:	e026      	b.n	3418b1ae <RCCEx_GetADFCLKFreq+0x1b6>

    case LL_RCC_ADF1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418b160:	f7fb f9ba 	bl	341864d8 <LL_RCC_HSI_IsReady>
3418b164:	4603      	mov	r3, r0
3418b166:	2b00      	cmp	r3, #0
3418b168:	d023      	beq.n	3418b1b2 <RCCEx_GetADFCLKFreq+0x1ba>
      {
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418b16a:	f7fb f9c7 	bl	341864fc <LL_RCC_HSI_GetDivider>
3418b16e:	4603      	mov	r3, r0
3418b170:	09db      	lsrs	r3, r3, #7
3418b172:	4a14      	ldr	r2, [pc, #80]	@ (3418b1c4 <RCCEx_GetADFCLKFreq+0x1cc>)
3418b174:	fa22 f303 	lsr.w	r3, r2, r3
3418b178:	60fb      	str	r3, [r7, #12]
      }
      break;
3418b17a:	e01a      	b.n	3418b1b2 <RCCEx_GetADFCLKFreq+0x1ba>

    case LL_RCC_ADF1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418b17c:	f7fb f9cc 	bl	34186518 <LL_RCC_MSI_IsReady>
3418b180:	4603      	mov	r3, r0
3418b182:	2b00      	cmp	r3, #0
3418b184:	d017      	beq.n	3418b1b6 <RCCEx_GetADFCLKFreq+0x1be>
      {
        adf_frequency = MSI_VALUE;
3418b186:	4b10      	ldr	r3, [pc, #64]	@ (3418b1c8 <RCCEx_GetADFCLKFreq+0x1d0>)
3418b188:	60fb      	str	r3, [r7, #12]
      }
      break;
3418b18a:	e014      	b.n	3418b1b6 <RCCEx_GetADFCLKFreq+0x1be>

    case LL_RCC_ADF1_CLKSOURCE_I2S_CKIN:
      adf_frequency = EXTERNAL_CLOCK_VALUE;
3418b18c:	4b0f      	ldr	r3, [pc, #60]	@ (3418b1cc <RCCEx_GetADFCLKFreq+0x1d4>)
3418b18e:	60fb      	str	r3, [r7, #12]
      break;
3418b190:	e012      	b.n	3418b1b8 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_TIMG:
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3418b192:	f7fa fd8b 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418b196:	4604      	mov	r4, r0
3418b198:	f7fb fe06 	bl	34186da8 <LL_RCC_GetTIMPrescaler>
3418b19c:	4603      	mov	r3, r0
3418b19e:	fa24 f303 	lsr.w	r3, r4, r3
3418b1a2:	60fb      	str	r3, [r7, #12]
      break;
3418b1a4:	e008      	b.n	3418b1b8 <RCCEx_GetADFCLKFreq+0x1c0>

    default:
      /* Unexpected case */
      break;
3418b1a6:	bf00      	nop
3418b1a8:	e006      	b.n	3418b1b8 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
3418b1aa:	bf00      	nop
3418b1ac:	e004      	b.n	3418b1b8 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
3418b1ae:	bf00      	nop
3418b1b0:	e002      	b.n	3418b1b8 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
3418b1b2:	bf00      	nop
3418b1b4:	e000      	b.n	3418b1b8 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
3418b1b6:	bf00      	nop
  }

  return adf_frequency;
3418b1b8:	68fb      	ldr	r3, [r7, #12]
}
3418b1ba:	4618      	mov	r0, r3
3418b1bc:	3714      	adds	r7, #20
3418b1be:	46bd      	mov	sp, r7
3418b1c0:	bd90      	pop	{r4, r7, pc}
3418b1c2:	bf00      	nop
3418b1c4:	03d09000 	.word	0x03d09000
3418b1c8:	003d0900 	.word	0x003d0900
3418b1cc:	00bb8000 	.word	0x00bb8000

3418b1d0 <RCCEx_GetCLKPCLKFreq>:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
{
3418b1d0:	b580      	push	{r7, lr}
3418b1d2:	b084      	sub	sp, #16
3418b1d4:	af00      	add	r7, sp, #0
3418b1d6:	6078      	str	r0, [r7, #4]
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b1d8:	2300      	movs	r3, #0
3418b1da:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
3418b1dc:	f7fc fc60 	bl	34187aa0 <LL_RCC_CLKP_IsEnabled>
3418b1e0:	4603      	mov	r3, r0
3418b1e2:	2b01      	cmp	r3, #1
3418b1e4:	f040 81a5 	bne.w	3418b532 <RCCEx_GetCLKPCLKFreq+0x362>
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
3418b1e8:	6878      	ldr	r0, [r7, #4]
3418b1ea:	f7fb fc4f 	bl	34186a8c <LL_RCC_GetCLKPClockSource>
3418b1ee:	4603      	mov	r3, r0
3418b1f0:	2b07      	cmp	r3, #7
3418b1f2:	f200 818d 	bhi.w	3418b510 <RCCEx_GetCLKPCLKFreq+0x340>
3418b1f6:	a201      	add	r2, pc, #4	@ (adr r2, 3418b1fc <RCCEx_GetCLKPCLKFreq+0x2c>)
3418b1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418b1fc:	3418b21d 	.word	0x3418b21d
3418b200:	3418b23b 	.word	0x3418b23b
3418b204:	3418b24d 	.word	0x3418b24d
3418b208:	3418b3f7 	.word	0x3418b3f7
3418b20c:	3418b25f 	.word	0x3418b25f
3418b210:	3418b2e7 	.word	0x3418b2e7
3418b214:	3418b36f 	.word	0x3418b36f
3418b218:	3418b47f 	.word	0x3418b47f
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
3418b21c:	f7fb f95c 	bl	341864d8 <LL_RCC_HSI_IsReady>
3418b220:	4603      	mov	r3, r0
3418b222:	2b00      	cmp	r3, #0
3418b224:	f000 8176 	beq.w	3418b514 <RCCEx_GetCLKPCLKFreq+0x344>
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418b228:	f7fb f968 	bl	341864fc <LL_RCC_HSI_GetDivider>
3418b22c:	4603      	mov	r3, r0
3418b22e:	09db      	lsrs	r3, r3, #7
3418b230:	4aa1      	ldr	r2, [pc, #644]	@ (3418b4b8 <RCCEx_GetCLKPCLKFreq+0x2e8>)
3418b232:	fa22 f303 	lsr.w	r3, r2, r3
3418b236:	60fb      	str	r3, [r7, #12]
        }
        break;
3418b238:	e16c      	b.n	3418b514 <RCCEx_GetCLKPCLKFreq+0x344>

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
3418b23a:	f7fb f96d 	bl	34186518 <LL_RCC_MSI_IsReady>
3418b23e:	4603      	mov	r3, r0
3418b240:	2b00      	cmp	r3, #0
3418b242:	f000 8169 	beq.w	3418b518 <RCCEx_GetCLKPCLKFreq+0x348>
        {
          clkp_frequency = MSI_VALUE;
3418b246:	4b9d      	ldr	r3, [pc, #628]	@ (3418b4bc <RCCEx_GetCLKPCLKFreq+0x2ec>)
3418b248:	60fb      	str	r3, [r7, #12]
        }
        break;
3418b24a:	e165      	b.n	3418b518 <RCCEx_GetCLKPCLKFreq+0x348>

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
3418b24c:	f7fb f932 	bl	341864b4 <LL_RCC_HSE_IsReady>
3418b250:	4603      	mov	r3, r0
3418b252:	2b00      	cmp	r3, #0
3418b254:	f000 8162 	beq.w	3418b51c <RCCEx_GetCLKPCLKFreq+0x34c>
        {
          clkp_frequency = HSE_VALUE;
3418b258:	4b99      	ldr	r3, [pc, #612]	@ (3418b4c0 <RCCEx_GetCLKPCLKFreq+0x2f0>)
3418b25a:	60fb      	str	r3, [r7, #12]
        }
        break;
3418b25c:	e15e      	b.n	3418b51c <RCCEx_GetCLKPCLKFreq+0x34c>

      case LL_RCC_CLKP_CLKSOURCE_IC5:
        if (LL_RCC_IC5_IsEnabled() != 0U)
3418b25e:	f7fc f89f 	bl	341873a0 <LL_RCC_IC5_IsEnabled>
3418b262:	4603      	mov	r3, r0
3418b264:	2b00      	cmp	r3, #0
3418b266:	f000 815b 	beq.w	3418b520 <RCCEx_GetCLKPCLKFreq+0x350>
        {
          ic_divider = LL_RCC_IC5_GetDivider();
3418b26a:	f7fc f8bb 	bl	341873e4 <LL_RCC_IC5_GetDivider>
3418b26e:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC5_GetSource())
3418b270:	f7fc f8aa 	bl	341873c8 <LL_RCC_IC5_GetSource>
3418b274:	4603      	mov	r3, r0
3418b276:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b27a:	d029      	beq.n	3418b2d0 <RCCEx_GetCLKPCLKFreq+0x100>
3418b27c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b280:	d82f      	bhi.n	3418b2e2 <RCCEx_GetCLKPCLKFreq+0x112>
3418b282:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b286:	d01a      	beq.n	3418b2be <RCCEx_GetCLKPCLKFreq+0xee>
3418b288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b28c:	d829      	bhi.n	3418b2e2 <RCCEx_GetCLKPCLKFreq+0x112>
3418b28e:	2b00      	cmp	r3, #0
3418b290:	d003      	beq.n	3418b29a <RCCEx_GetCLKPCLKFreq+0xca>
3418b292:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b296:	d009      	beq.n	3418b2ac <RCCEx_GetCLKPCLKFreq+0xdc>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
3418b298:	e023      	b.n	3418b2e2 <RCCEx_GetCLKPCLKFreq+0x112>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b29a:	f7ff fb95 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418b29e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b2a0:	68fa      	ldr	r2, [r7, #12]
3418b2a2:	68bb      	ldr	r3, [r7, #8]
3418b2a4:	fbb2 f3f3 	udiv	r3, r2, r3
3418b2a8:	60fb      	str	r3, [r7, #12]
              break;
3418b2aa:	e01b      	b.n	3418b2e4 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b2ac:	f7ff fbd2 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418b2b0:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b2b2:	68fa      	ldr	r2, [r7, #12]
3418b2b4:	68bb      	ldr	r3, [r7, #8]
3418b2b6:	fbb2 f3f3 	udiv	r3, r2, r3
3418b2ba:	60fb      	str	r3, [r7, #12]
              break;
3418b2bc:	e012      	b.n	3418b2e4 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b2be:	f7ff fc0f 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418b2c2:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b2c4:	68fa      	ldr	r2, [r7, #12]
3418b2c6:	68bb      	ldr	r3, [r7, #8]
3418b2c8:	fbb2 f3f3 	udiv	r3, r2, r3
3418b2cc:	60fb      	str	r3, [r7, #12]
              break;
3418b2ce:	e009      	b.n	3418b2e4 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b2d0:	f7ff fc4c 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418b2d4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b2d6:	68fa      	ldr	r2, [r7, #12]
3418b2d8:	68bb      	ldr	r3, [r7, #8]
3418b2da:	fbb2 f3f3 	udiv	r3, r2, r3
3418b2de:	60fb      	str	r3, [r7, #12]
              break;
3418b2e0:	e000      	b.n	3418b2e4 <RCCEx_GetCLKPCLKFreq+0x114>
              break;
3418b2e2:	bf00      	nop
          }
        }
        break;
3418b2e4:	e11c      	b.n	3418b520 <RCCEx_GetCLKPCLKFreq+0x350>

      case LL_RCC_CLKP_CLKSOURCE_IC10:
        if (LL_RCC_IC10_IsEnabled() != 0U)
3418b2e6:	f7fc f95b 	bl	341875a0 <LL_RCC_IC10_IsEnabled>
3418b2ea:	4603      	mov	r3, r0
3418b2ec:	2b00      	cmp	r3, #0
3418b2ee:	f000 8119 	beq.w	3418b524 <RCCEx_GetCLKPCLKFreq+0x354>
        {
          ic_divider = LL_RCC_IC10_GetDivider();
3418b2f2:	f7fc f977 	bl	341875e4 <LL_RCC_IC10_GetDivider>
3418b2f6:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC10_GetSource())
3418b2f8:	f7fc f966 	bl	341875c8 <LL_RCC_IC10_GetSource>
3418b2fc:	4603      	mov	r3, r0
3418b2fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b302:	d029      	beq.n	3418b358 <RCCEx_GetCLKPCLKFreq+0x188>
3418b304:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b308:	d82f      	bhi.n	3418b36a <RCCEx_GetCLKPCLKFreq+0x19a>
3418b30a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b30e:	d01a      	beq.n	3418b346 <RCCEx_GetCLKPCLKFreq+0x176>
3418b310:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b314:	d829      	bhi.n	3418b36a <RCCEx_GetCLKPCLKFreq+0x19a>
3418b316:	2b00      	cmp	r3, #0
3418b318:	d003      	beq.n	3418b322 <RCCEx_GetCLKPCLKFreq+0x152>
3418b31a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b31e:	d009      	beq.n	3418b334 <RCCEx_GetCLKPCLKFreq+0x164>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
3418b320:	e023      	b.n	3418b36a <RCCEx_GetCLKPCLKFreq+0x19a>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b322:	f7ff fb51 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418b326:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b328:	68fa      	ldr	r2, [r7, #12]
3418b32a:	68bb      	ldr	r3, [r7, #8]
3418b32c:	fbb2 f3f3 	udiv	r3, r2, r3
3418b330:	60fb      	str	r3, [r7, #12]
              break;
3418b332:	e01b      	b.n	3418b36c <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b334:	f7ff fb8e 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418b338:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b33a:	68fa      	ldr	r2, [r7, #12]
3418b33c:	68bb      	ldr	r3, [r7, #8]
3418b33e:	fbb2 f3f3 	udiv	r3, r2, r3
3418b342:	60fb      	str	r3, [r7, #12]
              break;
3418b344:	e012      	b.n	3418b36c <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b346:	f7ff fbcb 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418b34a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b34c:	68fa      	ldr	r2, [r7, #12]
3418b34e:	68bb      	ldr	r3, [r7, #8]
3418b350:	fbb2 f3f3 	udiv	r3, r2, r3
3418b354:	60fb      	str	r3, [r7, #12]
              break;
3418b356:	e009      	b.n	3418b36c <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b358:	f7ff fc08 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418b35c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b35e:	68fa      	ldr	r2, [r7, #12]
3418b360:	68bb      	ldr	r3, [r7, #8]
3418b362:	fbb2 f3f3 	udiv	r3, r2, r3
3418b366:	60fb      	str	r3, [r7, #12]
              break;
3418b368:	e000      	b.n	3418b36c <RCCEx_GetCLKPCLKFreq+0x19c>
              break;
3418b36a:	bf00      	nop
          }
        }
        break;
3418b36c:	e0da      	b.n	3418b524 <RCCEx_GetCLKPCLKFreq+0x354>

      case LL_RCC_CLKP_CLKSOURCE_IC15:
        if (LL_RCC_IC15_IsEnabled() != 0U)
3418b36e:	f7fc fa17 	bl	341877a0 <LL_RCC_IC15_IsEnabled>
3418b372:	4603      	mov	r3, r0
3418b374:	2b00      	cmp	r3, #0
3418b376:	f000 80d7 	beq.w	3418b528 <RCCEx_GetCLKPCLKFreq+0x358>
        {
          ic_divider = LL_RCC_IC15_GetDivider();
3418b37a:	f7fc fa33 	bl	341877e4 <LL_RCC_IC15_GetDivider>
3418b37e:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC15_GetSource())
3418b380:	f7fc fa22 	bl	341877c8 <LL_RCC_IC15_GetSource>
3418b384:	4603      	mov	r3, r0
3418b386:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b38a:	d029      	beq.n	3418b3e0 <RCCEx_GetCLKPCLKFreq+0x210>
3418b38c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b390:	d82f      	bhi.n	3418b3f2 <RCCEx_GetCLKPCLKFreq+0x222>
3418b392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b396:	d01a      	beq.n	3418b3ce <RCCEx_GetCLKPCLKFreq+0x1fe>
3418b398:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b39c:	d829      	bhi.n	3418b3f2 <RCCEx_GetCLKPCLKFreq+0x222>
3418b39e:	2b00      	cmp	r3, #0
3418b3a0:	d003      	beq.n	3418b3aa <RCCEx_GetCLKPCLKFreq+0x1da>
3418b3a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b3a6:	d009      	beq.n	3418b3bc <RCCEx_GetCLKPCLKFreq+0x1ec>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
3418b3a8:	e023      	b.n	3418b3f2 <RCCEx_GetCLKPCLKFreq+0x222>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b3aa:	f7ff fb0d 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418b3ae:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b3b0:	68fa      	ldr	r2, [r7, #12]
3418b3b2:	68bb      	ldr	r3, [r7, #8]
3418b3b4:	fbb2 f3f3 	udiv	r3, r2, r3
3418b3b8:	60fb      	str	r3, [r7, #12]
              break;
3418b3ba:	e01b      	b.n	3418b3f4 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b3bc:	f7ff fb4a 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418b3c0:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b3c2:	68fa      	ldr	r2, [r7, #12]
3418b3c4:	68bb      	ldr	r3, [r7, #8]
3418b3c6:	fbb2 f3f3 	udiv	r3, r2, r3
3418b3ca:	60fb      	str	r3, [r7, #12]
              break;
3418b3cc:	e012      	b.n	3418b3f4 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b3ce:	f7ff fb87 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418b3d2:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b3d4:	68fa      	ldr	r2, [r7, #12]
3418b3d6:	68bb      	ldr	r3, [r7, #8]
3418b3d8:	fbb2 f3f3 	udiv	r3, r2, r3
3418b3dc:	60fb      	str	r3, [r7, #12]
              break;
3418b3de:	e009      	b.n	3418b3f4 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b3e0:	f7ff fbc4 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418b3e4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b3e6:	68fa      	ldr	r2, [r7, #12]
3418b3e8:	68bb      	ldr	r3, [r7, #8]
3418b3ea:	fbb2 f3f3 	udiv	r3, r2, r3
3418b3ee:	60fb      	str	r3, [r7, #12]
              break;
3418b3f0:	e000      	b.n	3418b3f4 <RCCEx_GetCLKPCLKFreq+0x224>
              break;
3418b3f2:	bf00      	nop
          }
        }
        break;
3418b3f4:	e098      	b.n	3418b528 <RCCEx_GetCLKPCLKFreq+0x358>

      case LL_RCC_CLKP_CLKSOURCE_IC19:
        if (LL_RCC_IC19_IsEnabled() != 0U)
3418b3f6:	f7fc fad3 	bl	341879a0 <LL_RCC_IC19_IsEnabled>
3418b3fa:	4603      	mov	r3, r0
3418b3fc:	2b00      	cmp	r3, #0
3418b3fe:	f000 8095 	beq.w	3418b52c <RCCEx_GetCLKPCLKFreq+0x35c>
        {
          ic_divider = LL_RCC_IC19_GetDivider();
3418b402:	f7fc faef 	bl	341879e4 <LL_RCC_IC19_GetDivider>
3418b406:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC19_GetSource())
3418b408:	f7fc fade 	bl	341879c8 <LL_RCC_IC19_GetSource>
3418b40c:	4603      	mov	r3, r0
3418b40e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b412:	d029      	beq.n	3418b468 <RCCEx_GetCLKPCLKFreq+0x298>
3418b414:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b418:	d82f      	bhi.n	3418b47a <RCCEx_GetCLKPCLKFreq+0x2aa>
3418b41a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b41e:	d01a      	beq.n	3418b456 <RCCEx_GetCLKPCLKFreq+0x286>
3418b420:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b424:	d829      	bhi.n	3418b47a <RCCEx_GetCLKPCLKFreq+0x2aa>
3418b426:	2b00      	cmp	r3, #0
3418b428:	d003      	beq.n	3418b432 <RCCEx_GetCLKPCLKFreq+0x262>
3418b42a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b42e:	d009      	beq.n	3418b444 <RCCEx_GetCLKPCLKFreq+0x274>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
3418b430:	e023      	b.n	3418b47a <RCCEx_GetCLKPCLKFreq+0x2aa>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b432:	f7ff fac9 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418b436:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b438:	68fa      	ldr	r2, [r7, #12]
3418b43a:	68bb      	ldr	r3, [r7, #8]
3418b43c:	fbb2 f3f3 	udiv	r3, r2, r3
3418b440:	60fb      	str	r3, [r7, #12]
              break;
3418b442:	e01b      	b.n	3418b47c <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b444:	f7ff fb06 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418b448:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b44a:	68fa      	ldr	r2, [r7, #12]
3418b44c:	68bb      	ldr	r3, [r7, #8]
3418b44e:	fbb2 f3f3 	udiv	r3, r2, r3
3418b452:	60fb      	str	r3, [r7, #12]
              break;
3418b454:	e012      	b.n	3418b47c <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b456:	f7ff fb43 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418b45a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b45c:	68fa      	ldr	r2, [r7, #12]
3418b45e:	68bb      	ldr	r3, [r7, #8]
3418b460:	fbb2 f3f3 	udiv	r3, r2, r3
3418b464:	60fb      	str	r3, [r7, #12]
              break;
3418b466:	e009      	b.n	3418b47c <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b468:	f7ff fb80 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418b46c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b46e:	68fa      	ldr	r2, [r7, #12]
3418b470:	68bb      	ldr	r3, [r7, #8]
3418b472:	fbb2 f3f3 	udiv	r3, r2, r3
3418b476:	60fb      	str	r3, [r7, #12]
              break;
3418b478:	e000      	b.n	3418b47c <RCCEx_GetCLKPCLKFreq+0x2ac>
              break;
3418b47a:	bf00      	nop
          }
        }
        break;
3418b47c:	e056      	b.n	3418b52c <RCCEx_GetCLKPCLKFreq+0x35c>

      case LL_RCC_CLKP_CLKSOURCE_IC20:
        if (LL_RCC_IC20_IsEnabled() != 0U)
3418b47e:	f7fc facf 	bl	34187a20 <LL_RCC_IC20_IsEnabled>
3418b482:	4603      	mov	r3, r0
3418b484:	2b00      	cmp	r3, #0
3418b486:	d053      	beq.n	3418b530 <RCCEx_GetCLKPCLKFreq+0x360>
        {
          ic_divider = LL_RCC_IC20_GetDivider();
3418b488:	f7fc faec 	bl	34187a64 <LL_RCC_IC20_GetDivider>
3418b48c:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC20_GetSource())
3418b48e:	f7fc fadb 	bl	34187a48 <LL_RCC_IC20_GetSource>
3418b492:	4603      	mov	r3, r0
3418b494:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b498:	d02f      	beq.n	3418b4fa <RCCEx_GetCLKPCLKFreq+0x32a>
3418b49a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b49e:	d835      	bhi.n	3418b50c <RCCEx_GetCLKPCLKFreq+0x33c>
3418b4a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b4a4:	d020      	beq.n	3418b4e8 <RCCEx_GetCLKPCLKFreq+0x318>
3418b4a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b4aa:	d82f      	bhi.n	3418b50c <RCCEx_GetCLKPCLKFreq+0x33c>
3418b4ac:	2b00      	cmp	r3, #0
3418b4ae:	d009      	beq.n	3418b4c4 <RCCEx_GetCLKPCLKFreq+0x2f4>
3418b4b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b4b4:	d00f      	beq.n	3418b4d6 <RCCEx_GetCLKPCLKFreq+0x306>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
3418b4b6:	e029      	b.n	3418b50c <RCCEx_GetCLKPCLKFreq+0x33c>
3418b4b8:	03d09000 	.word	0x03d09000
3418b4bc:	003d0900 	.word	0x003d0900
3418b4c0:	016e3600 	.word	0x016e3600
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b4c4:	f7ff fa80 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418b4c8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b4ca:	68fa      	ldr	r2, [r7, #12]
3418b4cc:	68bb      	ldr	r3, [r7, #8]
3418b4ce:	fbb2 f3f3 	udiv	r3, r2, r3
3418b4d2:	60fb      	str	r3, [r7, #12]
              break;
3418b4d4:	e01b      	b.n	3418b50e <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b4d6:	f7ff fabd 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418b4da:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b4dc:	68fa      	ldr	r2, [r7, #12]
3418b4de:	68bb      	ldr	r3, [r7, #8]
3418b4e0:	fbb2 f3f3 	udiv	r3, r2, r3
3418b4e4:	60fb      	str	r3, [r7, #12]
              break;
3418b4e6:	e012      	b.n	3418b50e <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b4e8:	f7ff fafa 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418b4ec:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b4ee:	68fa      	ldr	r2, [r7, #12]
3418b4f0:	68bb      	ldr	r3, [r7, #8]
3418b4f2:	fbb2 f3f3 	udiv	r3, r2, r3
3418b4f6:	60fb      	str	r3, [r7, #12]
              break;
3418b4f8:	e009      	b.n	3418b50e <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b4fa:	f7ff fb37 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418b4fe:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b500:	68fa      	ldr	r2, [r7, #12]
3418b502:	68bb      	ldr	r3, [r7, #8]
3418b504:	fbb2 f3f3 	udiv	r3, r2, r3
3418b508:	60fb      	str	r3, [r7, #12]
              break;
3418b50a:	e000      	b.n	3418b50e <RCCEx_GetCLKPCLKFreq+0x33e>
              break;
3418b50c:	bf00      	nop
          }
        }
        break;
3418b50e:	e00f      	b.n	3418b530 <RCCEx_GetCLKPCLKFreq+0x360>

      default:
        /* Unexpected case */
        break;
3418b510:	bf00      	nop
3418b512:	e00e      	b.n	3418b532 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418b514:	bf00      	nop
3418b516:	e00c      	b.n	3418b532 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418b518:	bf00      	nop
3418b51a:	e00a      	b.n	3418b532 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418b51c:	bf00      	nop
3418b51e:	e008      	b.n	3418b532 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418b520:	bf00      	nop
3418b522:	e006      	b.n	3418b532 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418b524:	bf00      	nop
3418b526:	e004      	b.n	3418b532 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418b528:	bf00      	nop
3418b52a:	e002      	b.n	3418b532 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418b52c:	bf00      	nop
3418b52e:	e000      	b.n	3418b532 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418b530:	bf00      	nop
    }
  }

  return clkp_frequency;
3418b532:	68fb      	ldr	r3, [r7, #12]
}
3418b534:	4618      	mov	r0, r3
3418b536:	3710      	adds	r7, #16
3418b538:	46bd      	mov	sp, r7
3418b53a:	bd80      	pop	{r7, pc}

3418b53c <RCCEx_GetCSICLKFreq>:
  * @brief  Return CSI clock frequency
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCSICLKFreq(void)
{
3418b53c:	b580      	push	{r7, lr}
3418b53e:	b082      	sub	sp, #8
3418b540:	af00      	add	r7, sp, #0
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b542:	2300      	movs	r3, #0
3418b544:	607b      	str	r3, [r7, #4]

  if (LL_RCC_IC18_IsEnabled() != 0U)
3418b546:	f7fc f9eb 	bl	34187920 <LL_RCC_IC18_IsEnabled>
3418b54a:	4603      	mov	r3, r0
3418b54c:	2b00      	cmp	r3, #0
3418b54e:	d03c      	beq.n	3418b5ca <RCCEx_GetCSICLKFreq+0x8e>
  {
    uint32_t ic_divider = LL_RCC_IC18_GetDivider();
3418b550:	f7fc fa08 	bl	34187964 <LL_RCC_IC18_GetDivider>
3418b554:	6038      	str	r0, [r7, #0]
    switch (LL_RCC_IC18_GetSource())
3418b556:	f7fc f9f7 	bl	34187948 <LL_RCC_IC18_GetSource>
3418b55a:	4603      	mov	r3, r0
3418b55c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b560:	d029      	beq.n	3418b5b6 <RCCEx_GetCSICLKFreq+0x7a>
3418b562:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b566:	d82f      	bhi.n	3418b5c8 <RCCEx_GetCSICLKFreq+0x8c>
3418b568:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b56c:	d01a      	beq.n	3418b5a4 <RCCEx_GetCSICLKFreq+0x68>
3418b56e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b572:	d829      	bhi.n	3418b5c8 <RCCEx_GetCSICLKFreq+0x8c>
3418b574:	2b00      	cmp	r3, #0
3418b576:	d003      	beq.n	3418b580 <RCCEx_GetCSICLKFreq+0x44>
3418b578:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b57c:	d009      	beq.n	3418b592 <RCCEx_GetCSICLKFreq+0x56>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
        clkp_frequency = clkp_frequency / ic_divider;
        break;
      default:
        /* Unexpected case */
        break;
3418b57e:	e023      	b.n	3418b5c8 <RCCEx_GetCSICLKFreq+0x8c>
        clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b580:	f7ff fa22 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418b584:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3418b586:	687a      	ldr	r2, [r7, #4]
3418b588:	683b      	ldr	r3, [r7, #0]
3418b58a:	fbb2 f3f3 	udiv	r3, r2, r3
3418b58e:	607b      	str	r3, [r7, #4]
        break;
3418b590:	e01b      	b.n	3418b5ca <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b592:	f7ff fa5f 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418b596:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3418b598:	687a      	ldr	r2, [r7, #4]
3418b59a:	683b      	ldr	r3, [r7, #0]
3418b59c:	fbb2 f3f3 	udiv	r3, r2, r3
3418b5a0:	607b      	str	r3, [r7, #4]
        break;
3418b5a2:	e012      	b.n	3418b5ca <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b5a4:	f7ff fa9c 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418b5a8:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3418b5aa:	687a      	ldr	r2, [r7, #4]
3418b5ac:	683b      	ldr	r3, [r7, #0]
3418b5ae:	fbb2 f3f3 	udiv	r3, r2, r3
3418b5b2:	607b      	str	r3, [r7, #4]
        break;
3418b5b4:	e009      	b.n	3418b5ca <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b5b6:	f7ff fad9 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418b5ba:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3418b5bc:	687a      	ldr	r2, [r7, #4]
3418b5be:	683b      	ldr	r3, [r7, #0]
3418b5c0:	fbb2 f3f3 	udiv	r3, r2, r3
3418b5c4:	607b      	str	r3, [r7, #4]
        break;
3418b5c6:	e000      	b.n	3418b5ca <RCCEx_GetCSICLKFreq+0x8e>
        break;
3418b5c8:	bf00      	nop
    }
  }

  return clkp_frequency;
3418b5ca:	687b      	ldr	r3, [r7, #4]
}
3418b5cc:	4618      	mov	r0, r3
3418b5ce:	3708      	adds	r7, #8
3418b5d0:	46bd      	mov	sp, r7
3418b5d2:	bd80      	pop	{r7, pc}

3418b5d4 <RCCEx_GetDCMIPPCLKFreq>:
  *         @arg @ref RCCEx_DCMIPP_Clock_Source
  * @retval DCMIPP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetDCMIPPCLKFreq(uint32_t DCMIPPxSource)
{
3418b5d4:	b580      	push	{r7, lr}
3418b5d6:	b084      	sub	sp, #16
3418b5d8:	af00      	add	r7, sp, #0
3418b5da:	6078      	str	r0, [r7, #4]
  uint32_t dcmipp_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b5dc:	2300      	movs	r3, #0
3418b5de:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
3418b5e0:	6878      	ldr	r0, [r7, #4]
3418b5e2:	f7fb fa65 	bl	34186ab0 <LL_RCC_GetDCMIPPClockSource>
3418b5e6:	4603      	mov	r3, r0
3418b5e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418b5ec:	d062      	beq.n	3418b6b4 <RCCEx_GetDCMIPPCLKFreq+0xe0>
3418b5ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418b5f2:	d86d      	bhi.n	3418b6d0 <RCCEx_GetDCMIPPCLKFreq+0xfc>
3418b5f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418b5f8:	d019      	beq.n	3418b62e <RCCEx_GetDCMIPPCLKFreq+0x5a>
3418b5fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418b5fe:	d867      	bhi.n	3418b6d0 <RCCEx_GetDCMIPPCLKFreq+0xfc>
3418b600:	2b00      	cmp	r3, #0
3418b602:	d003      	beq.n	3418b60c <RCCEx_GetDCMIPPCLKFreq+0x38>
3418b604:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418b608:	d00c      	beq.n	3418b624 <RCCEx_GetDCMIPPCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418b60a:	e061      	b.n	3418b6d0 <RCCEx_GetDCMIPPCLKFreq+0xfc>
      dcmipp_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418b60c:	f7fa fb4e 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418b610:	4603      	mov	r3, r0
3418b612:	4618      	mov	r0, r3
3418b614:	f7ff faf0 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418b618:	4603      	mov	r3, r0
3418b61a:	4618      	mov	r0, r3
3418b61c:	f7ff fb2f 	bl	3418ac7e <RCCEx_GetPCLK5Freq>
3418b620:	60f8      	str	r0, [r7, #12]
      break;
3418b622:	e05a      	b.n	3418b6da <RCCEx_GetDCMIPPCLKFreq+0x106>
      dcmipp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b624:	2007      	movs	r0, #7
3418b626:	f7ff fdd3 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418b62a:	60f8      	str	r0, [r7, #12]
      break;
3418b62c:	e055      	b.n	3418b6da <RCCEx_GetDCMIPPCLKFreq+0x106>
      if (LL_RCC_IC17_IsEnabled() != 0U)
3418b62e:	f7fc f937 	bl	341878a0 <LL_RCC_IC17_IsEnabled>
3418b632:	4603      	mov	r3, r0
3418b634:	2b00      	cmp	r3, #0
3418b636:	d04d      	beq.n	3418b6d4 <RCCEx_GetDCMIPPCLKFreq+0x100>
        ic_divider = LL_RCC_IC17_GetDivider();
3418b638:	f7fc f954 	bl	341878e4 <LL_RCC_IC17_GetDivider>
3418b63c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC17_GetSource())
3418b63e:	f7fc f943 	bl	341878c8 <LL_RCC_IC17_GetSource>
3418b642:	4603      	mov	r3, r0
3418b644:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b648:	d029      	beq.n	3418b69e <RCCEx_GetDCMIPPCLKFreq+0xca>
3418b64a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b64e:	d82f      	bhi.n	3418b6b0 <RCCEx_GetDCMIPPCLKFreq+0xdc>
3418b650:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b654:	d01a      	beq.n	3418b68c <RCCEx_GetDCMIPPCLKFreq+0xb8>
3418b656:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b65a:	d829      	bhi.n	3418b6b0 <RCCEx_GetDCMIPPCLKFreq+0xdc>
3418b65c:	2b00      	cmp	r3, #0
3418b65e:	d003      	beq.n	3418b668 <RCCEx_GetDCMIPPCLKFreq+0x94>
3418b660:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b664:	d009      	beq.n	3418b67a <RCCEx_GetDCMIPPCLKFreq+0xa6>
            break;
3418b666:	e023      	b.n	3418b6b0 <RCCEx_GetDCMIPPCLKFreq+0xdc>
            dcmipp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b668:	f7ff f9ae 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418b66c:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
3418b66e:	68fa      	ldr	r2, [r7, #12]
3418b670:	68bb      	ldr	r3, [r7, #8]
3418b672:	fbb2 f3f3 	udiv	r3, r2, r3
3418b676:	60fb      	str	r3, [r7, #12]
            break;
3418b678:	e01b      	b.n	3418b6b2 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b67a:	f7ff f9eb 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418b67e:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
3418b680:	68fa      	ldr	r2, [r7, #12]
3418b682:	68bb      	ldr	r3, [r7, #8]
3418b684:	fbb2 f3f3 	udiv	r3, r2, r3
3418b688:	60fb      	str	r3, [r7, #12]
            break;
3418b68a:	e012      	b.n	3418b6b2 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b68c:	f7ff fa28 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418b690:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
3418b692:	68fa      	ldr	r2, [r7, #12]
3418b694:	68bb      	ldr	r3, [r7, #8]
3418b696:	fbb2 f3f3 	udiv	r3, r2, r3
3418b69a:	60fb      	str	r3, [r7, #12]
            break;
3418b69c:	e009      	b.n	3418b6b2 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b69e:	f7ff fa65 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418b6a2:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
3418b6a4:	68fa      	ldr	r2, [r7, #12]
3418b6a6:	68bb      	ldr	r3, [r7, #8]
3418b6a8:	fbb2 f3f3 	udiv	r3, r2, r3
3418b6ac:	60fb      	str	r3, [r7, #12]
            break;
3418b6ae:	e000      	b.n	3418b6b2 <RCCEx_GetDCMIPPCLKFreq+0xde>
            break;
3418b6b0:	bf00      	nop
      break;
3418b6b2:	e00f      	b.n	3418b6d4 <RCCEx_GetDCMIPPCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
3418b6b4:	f7fa ff10 	bl	341864d8 <LL_RCC_HSI_IsReady>
3418b6b8:	4603      	mov	r3, r0
3418b6ba:	2b00      	cmp	r3, #0
3418b6bc:	d00c      	beq.n	3418b6d8 <RCCEx_GetDCMIPPCLKFreq+0x104>
        dcmipp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418b6be:	f7fa ff1d 	bl	341864fc <LL_RCC_HSI_GetDivider>
3418b6c2:	4603      	mov	r3, r0
3418b6c4:	09db      	lsrs	r3, r3, #7
3418b6c6:	4a07      	ldr	r2, [pc, #28]	@ (3418b6e4 <RCCEx_GetDCMIPPCLKFreq+0x110>)
3418b6c8:	fa22 f303 	lsr.w	r3, r2, r3
3418b6cc:	60fb      	str	r3, [r7, #12]
      break;
3418b6ce:	e003      	b.n	3418b6d8 <RCCEx_GetDCMIPPCLKFreq+0x104>
      break;
3418b6d0:	bf00      	nop
3418b6d2:	e002      	b.n	3418b6da <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
3418b6d4:	bf00      	nop
3418b6d6:	e000      	b.n	3418b6da <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
3418b6d8:	bf00      	nop
  }

  return dcmipp_frequency;
3418b6da:	68fb      	ldr	r3, [r7, #12]
}
3418b6dc:	4618      	mov	r0, r3
3418b6de:	3710      	adds	r7, #16
3418b6e0:	46bd      	mov	sp, r7
3418b6e2:	bd80      	pop	{r7, pc}
3418b6e4:	03d09000 	.word	0x03d09000

3418b6e8 <RCCEx_GetETH1CLKFreq>:
  *         @arg @ref RCCEx_ETH1_Clock_Source
  * @retval ETH1 clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1CLKFreq(uint32_t ETH1xSource)
{
3418b6e8:	b580      	push	{r7, lr}
3418b6ea:	b084      	sub	sp, #16
3418b6ec:	af00      	add	r7, sp, #0
3418b6ee:	6078      	str	r0, [r7, #4]
  uint32_t eth1_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b6f0:	2300      	movs	r3, #0
3418b6f2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHClockSource(ETH1xSource))
3418b6f4:	6878      	ldr	r0, [r7, #4]
3418b6f6:	f7fb f9ed 	bl	34186ad4 <LL_RCC_GetETHClockSource>
3418b6fa:	4603      	mov	r3, r0
3418b6fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3418b700:	d05e      	beq.n	3418b7c0 <RCCEx_GetETH1CLKFreq+0xd8>
3418b702:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3418b706:	d863      	bhi.n	3418b7d0 <RCCEx_GetETH1CLKFreq+0xe8>
3418b708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3418b70c:	d015      	beq.n	3418b73a <RCCEx_GetETH1CLKFreq+0x52>
3418b70e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3418b712:	d85d      	bhi.n	3418b7d0 <RCCEx_GetETH1CLKFreq+0xe8>
3418b714:	2b00      	cmp	r3, #0
3418b716:	d003      	beq.n	3418b720 <RCCEx_GetETH1CLKFreq+0x38>
3418b718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418b71c:	d008      	beq.n	3418b730 <RCCEx_GetETH1CLKFreq+0x48>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418b71e:	e057      	b.n	3418b7d0 <RCCEx_GetETH1CLKFreq+0xe8>
      eth1_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418b720:	f7fa fac4 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418b724:	4603      	mov	r3, r0
3418b726:	4618      	mov	r0, r3
3418b728:	f7ff fa66 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418b72c:	60f8      	str	r0, [r7, #12]
      break;
3418b72e:	e054      	b.n	3418b7da <RCCEx_GetETH1CLKFreq+0xf2>
      eth1_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b730:	2007      	movs	r0, #7
3418b732:	f7ff fd4d 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418b736:	60f8      	str	r0, [r7, #12]
      break;
3418b738:	e04f      	b.n	3418b7da <RCCEx_GetETH1CLKFreq+0xf2>
      if (LL_RCC_IC12_IsEnabled() != 0U)
3418b73a:	f7fb ff71 	bl	34187620 <LL_RCC_IC12_IsEnabled>
3418b73e:	4603      	mov	r3, r0
3418b740:	2b00      	cmp	r3, #0
3418b742:	d047      	beq.n	3418b7d4 <RCCEx_GetETH1CLKFreq+0xec>
        ic_divider = LL_RCC_IC12_GetDivider();
3418b744:	f7fb ff8e 	bl	34187664 <LL_RCC_IC12_GetDivider>
3418b748:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC12_GetSource())
3418b74a:	f7fb ff7d 	bl	34187648 <LL_RCC_IC12_GetSource>
3418b74e:	4603      	mov	r3, r0
3418b750:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b754:	d029      	beq.n	3418b7aa <RCCEx_GetETH1CLKFreq+0xc2>
3418b756:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b75a:	d82f      	bhi.n	3418b7bc <RCCEx_GetETH1CLKFreq+0xd4>
3418b75c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b760:	d01a      	beq.n	3418b798 <RCCEx_GetETH1CLKFreq+0xb0>
3418b762:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b766:	d829      	bhi.n	3418b7bc <RCCEx_GetETH1CLKFreq+0xd4>
3418b768:	2b00      	cmp	r3, #0
3418b76a:	d003      	beq.n	3418b774 <RCCEx_GetETH1CLKFreq+0x8c>
3418b76c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b770:	d009      	beq.n	3418b786 <RCCEx_GetETH1CLKFreq+0x9e>
            break;
3418b772:	e023      	b.n	3418b7bc <RCCEx_GetETH1CLKFreq+0xd4>
            eth1_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b774:	f7ff f928 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418b778:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
3418b77a:	68fa      	ldr	r2, [r7, #12]
3418b77c:	68bb      	ldr	r3, [r7, #8]
3418b77e:	fbb2 f3f3 	udiv	r3, r2, r3
3418b782:	60fb      	str	r3, [r7, #12]
            break;
3418b784:	e01b      	b.n	3418b7be <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b786:	f7ff f965 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418b78a:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
3418b78c:	68fa      	ldr	r2, [r7, #12]
3418b78e:	68bb      	ldr	r3, [r7, #8]
3418b790:	fbb2 f3f3 	udiv	r3, r2, r3
3418b794:	60fb      	str	r3, [r7, #12]
            break;
3418b796:	e012      	b.n	3418b7be <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b798:	f7ff f9a2 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418b79c:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
3418b79e:	68fa      	ldr	r2, [r7, #12]
3418b7a0:	68bb      	ldr	r3, [r7, #8]
3418b7a2:	fbb2 f3f3 	udiv	r3, r2, r3
3418b7a6:	60fb      	str	r3, [r7, #12]
            break;
3418b7a8:	e009      	b.n	3418b7be <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b7aa:	f7ff f9df 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418b7ae:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
3418b7b0:	68fa      	ldr	r2, [r7, #12]
3418b7b2:	68bb      	ldr	r3, [r7, #8]
3418b7b4:	fbb2 f3f3 	udiv	r3, r2, r3
3418b7b8:	60fb      	str	r3, [r7, #12]
            break;
3418b7ba:	e000      	b.n	3418b7be <RCCEx_GetETH1CLKFreq+0xd6>
            break;
3418b7bc:	bf00      	nop
      break;
3418b7be:	e009      	b.n	3418b7d4 <RCCEx_GetETH1CLKFreq+0xec>
      if (LL_RCC_HSE_IsReady() != 0U)
3418b7c0:	f7fa fe78 	bl	341864b4 <LL_RCC_HSE_IsReady>
3418b7c4:	4603      	mov	r3, r0
3418b7c6:	2b00      	cmp	r3, #0
3418b7c8:	d006      	beq.n	3418b7d8 <RCCEx_GetETH1CLKFreq+0xf0>
        eth1_frequency = HSE_VALUE;
3418b7ca:	4b06      	ldr	r3, [pc, #24]	@ (3418b7e4 <RCCEx_GetETH1CLKFreq+0xfc>)
3418b7cc:	60fb      	str	r3, [r7, #12]
      break;
3418b7ce:	e003      	b.n	3418b7d8 <RCCEx_GetETH1CLKFreq+0xf0>
      break;
3418b7d0:	bf00      	nop
3418b7d2:	e002      	b.n	3418b7da <RCCEx_GetETH1CLKFreq+0xf2>
      break;
3418b7d4:	bf00      	nop
3418b7d6:	e000      	b.n	3418b7da <RCCEx_GetETH1CLKFreq+0xf2>
      break;
3418b7d8:	bf00      	nop
  }

  return eth1_frequency;
3418b7da:	68fb      	ldr	r3, [r7, #12]
}
3418b7dc:	4618      	mov	r0, r3
3418b7de:	3710      	adds	r7, #16
3418b7e0:	46bd      	mov	sp, r7
3418b7e2:	bd80      	pop	{r7, pc}
3418b7e4:	016e3600 	.word	0x016e3600

3418b7e8 <RCCEx_GetETH1PTPCLKFreq>:
  *         @arg @ref RCCEx_ETH1_PTP_Clock_Source
  * @retval ETH1PTP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1PTPCLKFreq(uint32_t ETH1PTPxSource)
{
3418b7e8:	b580      	push	{r7, lr}
3418b7ea:	b084      	sub	sp, #16
3418b7ec:	af00      	add	r7, sp, #0
3418b7ee:	6078      	str	r0, [r7, #4]
  uint32_t eth1ptp_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b7f0:	2300      	movs	r3, #0
3418b7f2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
3418b7f4:	6878      	ldr	r0, [r7, #4]
3418b7f6:	f7fb f97f 	bl	34186af8 <LL_RCC_GetETHPTPClockSource>
3418b7fa:	4603      	mov	r3, r0
3418b7fc:	2b03      	cmp	r3, #3
3418b7fe:	d863      	bhi.n	3418b8c8 <RCCEx_GetETH1PTPCLKFreq+0xe0>
3418b800:	a201      	add	r2, pc, #4	@ (adr r2, 3418b808 <RCCEx_GetETH1PTPCLKFreq+0x20>)
3418b802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418b806:	bf00      	nop
3418b808:	3418b819 	.word	0x3418b819
3418b80c:	3418b829 	.word	0x3418b829
3418b810:	3418b833 	.word	0x3418b833
3418b814:	3418b8b9 	.word	0x3418b8b9
  {
    case LL_RCC_ETH1PTP_CLKSOURCE_HCLK:
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418b818:	f7fa fa48 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418b81c:	4603      	mov	r3, r0
3418b81e:	4618      	mov	r0, r3
3418b820:	f7ff f9ea 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418b824:	60f8      	str	r0, [r7, #12]
      break;
3418b826:	e054      	b.n	3418b8d2 <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_CLKP:
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b828:	2007      	movs	r0, #7
3418b82a:	f7ff fcd1 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418b82e:	60f8      	str	r0, [r7, #12]
      break;
3418b830:	e04f      	b.n	3418b8d2 <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_IC13:
      if (LL_RCC_IC13_IsEnabled() != 0U)
3418b832:	f7fb ff35 	bl	341876a0 <LL_RCC_IC13_IsEnabled>
3418b836:	4603      	mov	r3, r0
3418b838:	2b00      	cmp	r3, #0
3418b83a:	d047      	beq.n	3418b8cc <RCCEx_GetETH1PTPCLKFreq+0xe4>
      {
        ic_divider = LL_RCC_IC13_GetDivider();
3418b83c:	f7fb ff52 	bl	341876e4 <LL_RCC_IC13_GetDivider>
3418b840:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC13_GetSource())
3418b842:	f7fb ff41 	bl	341876c8 <LL_RCC_IC13_GetSource>
3418b846:	4603      	mov	r3, r0
3418b848:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b84c:	d029      	beq.n	3418b8a2 <RCCEx_GetETH1PTPCLKFreq+0xba>
3418b84e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b852:	d82f      	bhi.n	3418b8b4 <RCCEx_GetETH1PTPCLKFreq+0xcc>
3418b854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b858:	d01a      	beq.n	3418b890 <RCCEx_GetETH1PTPCLKFreq+0xa8>
3418b85a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b85e:	d829      	bhi.n	3418b8b4 <RCCEx_GetETH1PTPCLKFreq+0xcc>
3418b860:	2b00      	cmp	r3, #0
3418b862:	d003      	beq.n	3418b86c <RCCEx_GetETH1PTPCLKFreq+0x84>
3418b864:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b868:	d009      	beq.n	3418b87e <RCCEx_GetETH1PTPCLKFreq+0x96>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b86a:	e023      	b.n	3418b8b4 <RCCEx_GetETH1PTPCLKFreq+0xcc>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b86c:	f7ff f8ac 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418b870:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
3418b872:	68fa      	ldr	r2, [r7, #12]
3418b874:	68bb      	ldr	r3, [r7, #8]
3418b876:	fbb2 f3f3 	udiv	r3, r2, r3
3418b87a:	60fb      	str	r3, [r7, #12]
            break;
3418b87c:	e01b      	b.n	3418b8b6 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b87e:	f7ff f8e9 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418b882:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
3418b884:	68fa      	ldr	r2, [r7, #12]
3418b886:	68bb      	ldr	r3, [r7, #8]
3418b888:	fbb2 f3f3 	udiv	r3, r2, r3
3418b88c:	60fb      	str	r3, [r7, #12]
            break;
3418b88e:	e012      	b.n	3418b8b6 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b890:	f7ff f926 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418b894:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
3418b896:	68fa      	ldr	r2, [r7, #12]
3418b898:	68bb      	ldr	r3, [r7, #8]
3418b89a:	fbb2 f3f3 	udiv	r3, r2, r3
3418b89e:	60fb      	str	r3, [r7, #12]
            break;
3418b8a0:	e009      	b.n	3418b8b6 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b8a2:	f7ff f963 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418b8a6:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
3418b8a8:	68fa      	ldr	r2, [r7, #12]
3418b8aa:	68bb      	ldr	r3, [r7, #8]
3418b8ac:	fbb2 f3f3 	udiv	r3, r2, r3
3418b8b0:	60fb      	str	r3, [r7, #12]
            break;
3418b8b2:	e000      	b.n	3418b8b6 <RCCEx_GetETH1PTPCLKFreq+0xce>
            break;
3418b8b4:	bf00      	nop
        }
      }
      break;
3418b8b6:	e009      	b.n	3418b8cc <RCCEx_GetETH1PTPCLKFreq+0xe4>

    case LL_RCC_ETH1PTP_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
3418b8b8:	f7fa fdfc 	bl	341864b4 <LL_RCC_HSE_IsReady>
3418b8bc:	4603      	mov	r3, r0
3418b8be:	2b00      	cmp	r3, #0
3418b8c0:	d006      	beq.n	3418b8d0 <RCCEx_GetETH1PTPCLKFreq+0xe8>
      {
        eth1ptp_frequency = HSE_VALUE;
3418b8c2:	4b0a      	ldr	r3, [pc, #40]	@ (3418b8ec <RCCEx_GetETH1PTPCLKFreq+0x104>)
3418b8c4:	60fb      	str	r3, [r7, #12]
      }
      break;
3418b8c6:	e003      	b.n	3418b8d0 <RCCEx_GetETH1PTPCLKFreq+0xe8>

    default:
      /* Unexpected case */
      break;
3418b8c8:	bf00      	nop
3418b8ca:	e002      	b.n	3418b8d2 <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
3418b8cc:	bf00      	nop
3418b8ce:	e000      	b.n	3418b8d2 <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
3418b8d0:	bf00      	nop
  }

  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
3418b8d2:	f7fa ff4d 	bl	34186770 <LL_RCC_GetETH1PTPDivider>
3418b8d6:	4603      	mov	r3, r0
3418b8d8:	091b      	lsrs	r3, r3, #4
3418b8da:	3301      	adds	r3, #1
3418b8dc:	68fa      	ldr	r2, [r7, #12]
3418b8de:	fbb2 f3f3 	udiv	r3, r2, r3
}
3418b8e2:	4618      	mov	r0, r3
3418b8e4:	3710      	adds	r7, #16
3418b8e6:	46bd      	mov	sp, r7
3418b8e8:	bd80      	pop	{r7, pc}
3418b8ea:	bf00      	nop
3418b8ec:	016e3600 	.word	0x016e3600

3418b8f0 <RCCEx_GetFDCANCLKFreq>:
  *         @arg @ref RCCEx_FDCAN_Clock_Source
  * @retval FDCAN clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFDCANCLKFreq(uint32_t FDCANxSource)
{
3418b8f0:	b580      	push	{r7, lr}
3418b8f2:	b084      	sub	sp, #16
3418b8f4:	af00      	add	r7, sp, #0
3418b8f6:	6078      	str	r0, [r7, #4]
  uint32_t fdcan_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b8f8:	2300      	movs	r3, #0
3418b8fa:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
3418b8fc:	6878      	ldr	r0, [r7, #4]
3418b8fe:	f7fb f90d 	bl	34186b1c <LL_RCC_GetFDCANClockSource>
3418b902:	4603      	mov	r3, r0
3418b904:	2b03      	cmp	r3, #3
3418b906:	d867      	bhi.n	3418b9d8 <RCCEx_GetFDCANCLKFreq+0xe8>
3418b908:	a201      	add	r2, pc, #4	@ (adr r2, 3418b910 <RCCEx_GetFDCANCLKFreq+0x20>)
3418b90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418b90e:	bf00      	nop
3418b910:	3418b921 	.word	0x3418b921
3418b914:	3418b939 	.word	0x3418b939
3418b918:	3418b943 	.word	0x3418b943
3418b91c:	3418b9c9 	.word	0x3418b9c9
  {
    case LL_RCC_FDCAN_CLKSOURCE_PCLK1:
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418b920:	f7fa f9c4 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418b924:	4603      	mov	r3, r0
3418b926:	4618      	mov	r0, r3
3418b928:	f7ff f966 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418b92c:	4603      	mov	r3, r0
3418b92e:	4618      	mov	r0, r3
3418b930:	f7ff f973 	bl	3418ac1a <RCCEx_GetPCLK1Freq>
3418b934:	60f8      	str	r0, [r7, #12]
      break;
3418b936:	e054      	b.n	3418b9e2 <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_CLKP:
      fdcan_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b938:	2007      	movs	r0, #7
3418b93a:	f7ff fc49 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418b93e:	60f8      	str	r0, [r7, #12]
      break;
3418b940:	e04f      	b.n	3418b9e2 <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_IC19:
      if (LL_RCC_IC19_IsEnabled() != 0U)
3418b942:	f7fc f82d 	bl	341879a0 <LL_RCC_IC19_IsEnabled>
3418b946:	4603      	mov	r3, r0
3418b948:	2b00      	cmp	r3, #0
3418b94a:	d047      	beq.n	3418b9dc <RCCEx_GetFDCANCLKFreq+0xec>
      {
        ic_divider = LL_RCC_IC19_GetDivider();
3418b94c:	f7fc f84a 	bl	341879e4 <LL_RCC_IC19_GetDivider>
3418b950:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC19_GetSource())
3418b952:	f7fc f839 	bl	341879c8 <LL_RCC_IC19_GetSource>
3418b956:	4603      	mov	r3, r0
3418b958:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b95c:	d029      	beq.n	3418b9b2 <RCCEx_GetFDCANCLKFreq+0xc2>
3418b95e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b962:	d82f      	bhi.n	3418b9c4 <RCCEx_GetFDCANCLKFreq+0xd4>
3418b964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b968:	d01a      	beq.n	3418b9a0 <RCCEx_GetFDCANCLKFreq+0xb0>
3418b96a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b96e:	d829      	bhi.n	3418b9c4 <RCCEx_GetFDCANCLKFreq+0xd4>
3418b970:	2b00      	cmp	r3, #0
3418b972:	d003      	beq.n	3418b97c <RCCEx_GetFDCANCLKFreq+0x8c>
3418b974:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b978:	d009      	beq.n	3418b98e <RCCEx_GetFDCANCLKFreq+0x9e>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            fdcan_frequency = fdcan_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b97a:	e023      	b.n	3418b9c4 <RCCEx_GetFDCANCLKFreq+0xd4>
            fdcan_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b97c:	f7ff f824 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418b980:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
3418b982:	68fa      	ldr	r2, [r7, #12]
3418b984:	68bb      	ldr	r3, [r7, #8]
3418b986:	fbb2 f3f3 	udiv	r3, r2, r3
3418b98a:	60fb      	str	r3, [r7, #12]
            break;
3418b98c:	e01b      	b.n	3418b9c6 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b98e:	f7ff f861 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418b992:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
3418b994:	68fa      	ldr	r2, [r7, #12]
3418b996:	68bb      	ldr	r3, [r7, #8]
3418b998:	fbb2 f3f3 	udiv	r3, r2, r3
3418b99c:	60fb      	str	r3, [r7, #12]
            break;
3418b99e:	e012      	b.n	3418b9c6 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b9a0:	f7ff f89e 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418b9a4:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
3418b9a6:	68fa      	ldr	r2, [r7, #12]
3418b9a8:	68bb      	ldr	r3, [r7, #8]
3418b9aa:	fbb2 f3f3 	udiv	r3, r2, r3
3418b9ae:	60fb      	str	r3, [r7, #12]
            break;
3418b9b0:	e009      	b.n	3418b9c6 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b9b2:	f7ff f8db 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418b9b6:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
3418b9b8:	68fa      	ldr	r2, [r7, #12]
3418b9ba:	68bb      	ldr	r3, [r7, #8]
3418b9bc:	fbb2 f3f3 	udiv	r3, r2, r3
3418b9c0:	60fb      	str	r3, [r7, #12]
            break;
3418b9c2:	e000      	b.n	3418b9c6 <RCCEx_GetFDCANCLKFreq+0xd6>
            break;
3418b9c4:	bf00      	nop
        }
      }
      break;
3418b9c6:	e009      	b.n	3418b9dc <RCCEx_GetFDCANCLKFreq+0xec>

    case LL_RCC_FDCAN_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
3418b9c8:	f7fa fd74 	bl	341864b4 <LL_RCC_HSE_IsReady>
3418b9cc:	4603      	mov	r3, r0
3418b9ce:	2b00      	cmp	r3, #0
3418b9d0:	d006      	beq.n	3418b9e0 <RCCEx_GetFDCANCLKFreq+0xf0>
      {
        fdcan_frequency = HSE_VALUE;
3418b9d2:	4b06      	ldr	r3, [pc, #24]	@ (3418b9ec <RCCEx_GetFDCANCLKFreq+0xfc>)
3418b9d4:	60fb      	str	r3, [r7, #12]
      }
      break;
3418b9d6:	e003      	b.n	3418b9e0 <RCCEx_GetFDCANCLKFreq+0xf0>

    default:
      /* Unexpected case */
      break;
3418b9d8:	bf00      	nop
3418b9da:	e002      	b.n	3418b9e2 <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
3418b9dc:	bf00      	nop
3418b9de:	e000      	b.n	3418b9e2 <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
3418b9e0:	bf00      	nop
  }

  return fdcan_frequency;
3418b9e2:	68fb      	ldr	r3, [r7, #12]
}
3418b9e4:	4618      	mov	r0, r3
3418b9e6:	3710      	adds	r7, #16
3418b9e8:	46bd      	mov	sp, r7
3418b9ea:	bd80      	pop	{r7, pc}
3418b9ec:	016e3600 	.word	0x016e3600

3418b9f0 <RCCEx_GetFMCCLKFreq>:
  *         @arg @ref RCCEx_FMC_Clock_Source
  * @retval FMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFMCCLKFreq(uint32_t FMCxSource)
{
3418b9f0:	b580      	push	{r7, lr}
3418b9f2:	b084      	sub	sp, #16
3418b9f4:	af00      	add	r7, sp, #0
3418b9f6:	6078      	str	r0, [r7, #4]
  uint32_t fmc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b9f8:	2300      	movs	r3, #0
3418b9fa:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFMCClockSource(FMCxSource))
3418b9fc:	6878      	ldr	r0, [r7, #4]
3418b9fe:	f7fb f89f 	bl	34186b40 <LL_RCC_GetFMCClockSource>
3418ba02:	4603      	mov	r3, r0
3418ba04:	2b30      	cmp	r3, #48	@ 0x30
3418ba06:	d05d      	beq.n	3418bac4 <RCCEx_GetFMCCLKFreq+0xd4>
3418ba08:	2b30      	cmp	r3, #48	@ 0x30
3418ba0a:	f200 809e 	bhi.w	3418bb4a <RCCEx_GetFMCCLKFreq+0x15a>
3418ba0e:	2b20      	cmp	r3, #32
3418ba10:	d014      	beq.n	3418ba3c <RCCEx_GetFMCCLKFreq+0x4c>
3418ba12:	2b20      	cmp	r3, #32
3418ba14:	f200 8099 	bhi.w	3418bb4a <RCCEx_GetFMCCLKFreq+0x15a>
3418ba18:	2b00      	cmp	r3, #0
3418ba1a:	d002      	beq.n	3418ba22 <RCCEx_GetFMCCLKFreq+0x32>
3418ba1c:	2b10      	cmp	r3, #16
3418ba1e:	d008      	beq.n	3418ba32 <RCCEx_GetFMCCLKFreq+0x42>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418ba20:	e093      	b.n	3418bb4a <RCCEx_GetFMCCLKFreq+0x15a>
      fmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418ba22:	f7fa f943 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418ba26:	4603      	mov	r3, r0
3418ba28:	4618      	mov	r0, r3
3418ba2a:	f7ff f8e5 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418ba2e:	60f8      	str	r0, [r7, #12]
      break;
3418ba30:	e090      	b.n	3418bb54 <RCCEx_GetFMCCLKFreq+0x164>
      fmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418ba32:	2007      	movs	r0, #7
3418ba34:	f7ff fbcc 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418ba38:	60f8      	str	r0, [r7, #12]
      break;
3418ba3a:	e08b      	b.n	3418bb54 <RCCEx_GetFMCCLKFreq+0x164>
      if (LL_RCC_IC3_IsEnabled() != 0U)
3418ba3c:	f7fb fc30 	bl	341872a0 <LL_RCC_IC3_IsEnabled>
3418ba40:	4603      	mov	r3, r0
3418ba42:	2b00      	cmp	r3, #0
3418ba44:	f000 8083 	beq.w	3418bb4e <RCCEx_GetFMCCLKFreq+0x15e>
        ic_divider = LL_RCC_IC3_GetDivider();
3418ba48:	f7fb fc4c 	bl	341872e4 <LL_RCC_IC3_GetDivider>
3418ba4c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
3418ba4e:	f7fb fc3b 	bl	341872c8 <LL_RCC_IC3_GetSource>
3418ba52:	4603      	mov	r3, r0
3418ba54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ba58:	d029      	beq.n	3418baae <RCCEx_GetFMCCLKFreq+0xbe>
3418ba5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ba5e:	d82f      	bhi.n	3418bac0 <RCCEx_GetFMCCLKFreq+0xd0>
3418ba60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ba64:	d01a      	beq.n	3418ba9c <RCCEx_GetFMCCLKFreq+0xac>
3418ba66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ba6a:	d829      	bhi.n	3418bac0 <RCCEx_GetFMCCLKFreq+0xd0>
3418ba6c:	2b00      	cmp	r3, #0
3418ba6e:	d003      	beq.n	3418ba78 <RCCEx_GetFMCCLKFreq+0x88>
3418ba70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418ba74:	d009      	beq.n	3418ba8a <RCCEx_GetFMCCLKFreq+0x9a>
            break;
3418ba76:	e023      	b.n	3418bac0 <RCCEx_GetFMCCLKFreq+0xd0>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418ba78:	f7fe ffa6 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418ba7c:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418ba7e:	68fa      	ldr	r2, [r7, #12]
3418ba80:	68bb      	ldr	r3, [r7, #8]
3418ba82:	fbb2 f3f3 	udiv	r3, r2, r3
3418ba86:	60fb      	str	r3, [r7, #12]
            break;
3418ba88:	e01b      	b.n	3418bac2 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418ba8a:	f7fe ffe3 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418ba8e:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418ba90:	68fa      	ldr	r2, [r7, #12]
3418ba92:	68bb      	ldr	r3, [r7, #8]
3418ba94:	fbb2 f3f3 	udiv	r3, r2, r3
3418ba98:	60fb      	str	r3, [r7, #12]
            break;
3418ba9a:	e012      	b.n	3418bac2 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418ba9c:	f7ff f820 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418baa0:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418baa2:	68fa      	ldr	r2, [r7, #12]
3418baa4:	68bb      	ldr	r3, [r7, #8]
3418baa6:	fbb2 f3f3 	udiv	r3, r2, r3
3418baaa:	60fb      	str	r3, [r7, #12]
            break;
3418baac:	e009      	b.n	3418bac2 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418baae:	f7ff f85d 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418bab2:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418bab4:	68fa      	ldr	r2, [r7, #12]
3418bab6:	68bb      	ldr	r3, [r7, #8]
3418bab8:	fbb2 f3f3 	udiv	r3, r2, r3
3418babc:	60fb      	str	r3, [r7, #12]
            break;
3418babe:	e000      	b.n	3418bac2 <RCCEx_GetFMCCLKFreq+0xd2>
            break;
3418bac0:	bf00      	nop
      break;
3418bac2:	e044      	b.n	3418bb4e <RCCEx_GetFMCCLKFreq+0x15e>
      if (LL_RCC_IC4_IsEnabled() != 0U)
3418bac4:	f7fb fc2c 	bl	34187320 <LL_RCC_IC4_IsEnabled>
3418bac8:	4603      	mov	r3, r0
3418baca:	2b00      	cmp	r3, #0
3418bacc:	d041      	beq.n	3418bb52 <RCCEx_GetFMCCLKFreq+0x162>
        ic_divider = LL_RCC_IC4_GetDivider();
3418bace:	f7fb fc49 	bl	34187364 <LL_RCC_IC4_GetDivider>
3418bad2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
3418bad4:	f7fb fc38 	bl	34187348 <LL_RCC_IC4_GetSource>
3418bad8:	4603      	mov	r3, r0
3418bada:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bade:	d029      	beq.n	3418bb34 <RCCEx_GetFMCCLKFreq+0x144>
3418bae0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bae4:	d82f      	bhi.n	3418bb46 <RCCEx_GetFMCCLKFreq+0x156>
3418bae6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418baea:	d01a      	beq.n	3418bb22 <RCCEx_GetFMCCLKFreq+0x132>
3418baec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418baf0:	d829      	bhi.n	3418bb46 <RCCEx_GetFMCCLKFreq+0x156>
3418baf2:	2b00      	cmp	r3, #0
3418baf4:	d003      	beq.n	3418bafe <RCCEx_GetFMCCLKFreq+0x10e>
3418baf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418bafa:	d009      	beq.n	3418bb10 <RCCEx_GetFMCCLKFreq+0x120>
            break;
3418bafc:	e023      	b.n	3418bb46 <RCCEx_GetFMCCLKFreq+0x156>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418bafe:	f7fe ff63 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418bb02:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418bb04:	68fa      	ldr	r2, [r7, #12]
3418bb06:	68bb      	ldr	r3, [r7, #8]
3418bb08:	fbb2 f3f3 	udiv	r3, r2, r3
3418bb0c:	60fb      	str	r3, [r7, #12]
            break;
3418bb0e:	e01b      	b.n	3418bb48 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418bb10:	f7fe ffa0 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418bb14:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418bb16:	68fa      	ldr	r2, [r7, #12]
3418bb18:	68bb      	ldr	r3, [r7, #8]
3418bb1a:	fbb2 f3f3 	udiv	r3, r2, r3
3418bb1e:	60fb      	str	r3, [r7, #12]
            break;
3418bb20:	e012      	b.n	3418bb48 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418bb22:	f7fe ffdd 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418bb26:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418bb28:	68fa      	ldr	r2, [r7, #12]
3418bb2a:	68bb      	ldr	r3, [r7, #8]
3418bb2c:	fbb2 f3f3 	udiv	r3, r2, r3
3418bb30:	60fb      	str	r3, [r7, #12]
            break;
3418bb32:	e009      	b.n	3418bb48 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418bb34:	f7ff f81a 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418bb38:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418bb3a:	68fa      	ldr	r2, [r7, #12]
3418bb3c:	68bb      	ldr	r3, [r7, #8]
3418bb3e:	fbb2 f3f3 	udiv	r3, r2, r3
3418bb42:	60fb      	str	r3, [r7, #12]
            break;
3418bb44:	e000      	b.n	3418bb48 <RCCEx_GetFMCCLKFreq+0x158>
            break;
3418bb46:	bf00      	nop
      break;
3418bb48:	e003      	b.n	3418bb52 <RCCEx_GetFMCCLKFreq+0x162>
      break;
3418bb4a:	bf00      	nop
3418bb4c:	e002      	b.n	3418bb54 <RCCEx_GetFMCCLKFreq+0x164>
      break;
3418bb4e:	bf00      	nop
3418bb50:	e000      	b.n	3418bb54 <RCCEx_GetFMCCLKFreq+0x164>
      break;
3418bb52:	bf00      	nop
  }

  return fmc_frequency;
3418bb54:	68fb      	ldr	r3, [r7, #12]
}
3418bb56:	4618      	mov	r0, r3
3418bb58:	3710      	adds	r7, #16
3418bb5a:	46bd      	mov	sp, r7
3418bb5c:	bd80      	pop	{r7, pc}
	...

3418bb60 <RCCEx_GetI2CCLKFreq>:
  *         @arg @ref RCCEx_I2C4_Clock_Source
  * @retval I2C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI2CCLKFreq(uint32_t I2CxSource)
{
3418bb60:	b580      	push	{r7, lr}
3418bb62:	b084      	sub	sp, #16
3418bb64:	af00      	add	r7, sp, #0
3418bb66:	6078      	str	r0, [r7, #4]
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
3418bb68:	2300      	movs	r3, #0
3418bb6a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3418bb6c:	6878      	ldr	r0, [r7, #4]
3418bb6e:	f7fa fff9 	bl	34186b64 <LL_RCC_GetI2CClockSource>
3418bb72:	4603      	mov	r3, r0
3418bb74:	4aa2      	ldr	r2, [pc, #648]	@ (3418be00 <RCCEx_GetI2CCLKFreq+0x2a0>)
3418bb76:	4293      	cmp	r3, r2
3418bb78:	f000 8172 	beq.w	3418be60 <RCCEx_GetI2CCLKFreq+0x300>
3418bb7c:	4aa0      	ldr	r2, [pc, #640]	@ (3418be00 <RCCEx_GetI2CCLKFreq+0x2a0>)
3418bb7e:	4293      	cmp	r3, r2
3418bb80:	f200 8184 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bb84:	4a9f      	ldr	r2, [pc, #636]	@ (3418be04 <RCCEx_GetI2CCLKFreq+0x2a4>)
3418bb86:	4293      	cmp	r3, r2
3418bb88:	f000 816a 	beq.w	3418be60 <RCCEx_GetI2CCLKFreq+0x300>
3418bb8c:	4a9d      	ldr	r2, [pc, #628]	@ (3418be04 <RCCEx_GetI2CCLKFreq+0x2a4>)
3418bb8e:	4293      	cmp	r3, r2
3418bb90:	f200 817c 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bb94:	4a9c      	ldr	r2, [pc, #624]	@ (3418be08 <RCCEx_GetI2CCLKFreq+0x2a8>)
3418bb96:	4293      	cmp	r3, r2
3418bb98:	f000 8162 	beq.w	3418be60 <RCCEx_GetI2CCLKFreq+0x300>
3418bb9c:	4a9a      	ldr	r2, [pc, #616]	@ (3418be08 <RCCEx_GetI2CCLKFreq+0x2a8>)
3418bb9e:	4293      	cmp	r3, r2
3418bba0:	f200 8174 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bba4:	4a99      	ldr	r2, [pc, #612]	@ (3418be0c <RCCEx_GetI2CCLKFreq+0x2ac>)
3418bba6:	4293      	cmp	r3, r2
3418bba8:	f000 815a 	beq.w	3418be60 <RCCEx_GetI2CCLKFreq+0x300>
3418bbac:	4a97      	ldr	r2, [pc, #604]	@ (3418be0c <RCCEx_GetI2CCLKFreq+0x2ac>)
3418bbae:	4293      	cmp	r3, r2
3418bbb0:	f200 816c 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bbb4:	4a96      	ldr	r2, [pc, #600]	@ (3418be10 <RCCEx_GetI2CCLKFreq+0x2b0>)
3418bbb6:	4293      	cmp	r3, r2
3418bbb8:	f000 8160 	beq.w	3418be7c <RCCEx_GetI2CCLKFreq+0x31c>
3418bbbc:	4a94      	ldr	r2, [pc, #592]	@ (3418be10 <RCCEx_GetI2CCLKFreq+0x2b0>)
3418bbbe:	4293      	cmp	r3, r2
3418bbc0:	f200 8164 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bbc4:	4a93      	ldr	r2, [pc, #588]	@ (3418be14 <RCCEx_GetI2CCLKFreq+0x2b4>)
3418bbc6:	4293      	cmp	r3, r2
3418bbc8:	f000 8158 	beq.w	3418be7c <RCCEx_GetI2CCLKFreq+0x31c>
3418bbcc:	4a91      	ldr	r2, [pc, #580]	@ (3418be14 <RCCEx_GetI2CCLKFreq+0x2b4>)
3418bbce:	4293      	cmp	r3, r2
3418bbd0:	f200 815c 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bbd4:	4a90      	ldr	r2, [pc, #576]	@ (3418be18 <RCCEx_GetI2CCLKFreq+0x2b8>)
3418bbd6:	4293      	cmp	r3, r2
3418bbd8:	f000 8150 	beq.w	3418be7c <RCCEx_GetI2CCLKFreq+0x31c>
3418bbdc:	4a8e      	ldr	r2, [pc, #568]	@ (3418be18 <RCCEx_GetI2CCLKFreq+0x2b8>)
3418bbde:	4293      	cmp	r3, r2
3418bbe0:	f200 8154 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bbe4:	4a8d      	ldr	r2, [pc, #564]	@ (3418be1c <RCCEx_GetI2CCLKFreq+0x2bc>)
3418bbe6:	4293      	cmp	r3, r2
3418bbe8:	f000 8148 	beq.w	3418be7c <RCCEx_GetI2CCLKFreq+0x31c>
3418bbec:	4a8b      	ldr	r2, [pc, #556]	@ (3418be1c <RCCEx_GetI2CCLKFreq+0x2bc>)
3418bbee:	4293      	cmp	r3, r2
3418bbf0:	f200 814c 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bbf4:	4a8a      	ldr	r2, [pc, #552]	@ (3418be20 <RCCEx_GetI2CCLKFreq+0x2c0>)
3418bbf6:	4293      	cmp	r3, r2
3418bbf8:	f000 80be 	beq.w	3418bd78 <RCCEx_GetI2CCLKFreq+0x218>
3418bbfc:	4a88      	ldr	r2, [pc, #544]	@ (3418be20 <RCCEx_GetI2CCLKFreq+0x2c0>)
3418bbfe:	4293      	cmp	r3, r2
3418bc00:	f200 8144 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bc04:	4a87      	ldr	r2, [pc, #540]	@ (3418be24 <RCCEx_GetI2CCLKFreq+0x2c4>)
3418bc06:	4293      	cmp	r3, r2
3418bc08:	f000 80b6 	beq.w	3418bd78 <RCCEx_GetI2CCLKFreq+0x218>
3418bc0c:	4a85      	ldr	r2, [pc, #532]	@ (3418be24 <RCCEx_GetI2CCLKFreq+0x2c4>)
3418bc0e:	4293      	cmp	r3, r2
3418bc10:	f200 813c 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bc14:	4a84      	ldr	r2, [pc, #528]	@ (3418be28 <RCCEx_GetI2CCLKFreq+0x2c8>)
3418bc16:	4293      	cmp	r3, r2
3418bc18:	f000 80ae 	beq.w	3418bd78 <RCCEx_GetI2CCLKFreq+0x218>
3418bc1c:	4a82      	ldr	r2, [pc, #520]	@ (3418be28 <RCCEx_GetI2CCLKFreq+0x2c8>)
3418bc1e:	4293      	cmp	r3, r2
3418bc20:	f200 8134 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bc24:	4a81      	ldr	r2, [pc, #516]	@ (3418be2c <RCCEx_GetI2CCLKFreq+0x2cc>)
3418bc26:	4293      	cmp	r3, r2
3418bc28:	f000 80a6 	beq.w	3418bd78 <RCCEx_GetI2CCLKFreq+0x218>
3418bc2c:	4a7f      	ldr	r2, [pc, #508]	@ (3418be2c <RCCEx_GetI2CCLKFreq+0x2cc>)
3418bc2e:	4293      	cmp	r3, r2
3418bc30:	f200 812c 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bc34:	4a7e      	ldr	r2, [pc, #504]	@ (3418be30 <RCCEx_GetI2CCLKFreq+0x2d0>)
3418bc36:	4293      	cmp	r3, r2
3418bc38:	d05a      	beq.n	3418bcf0 <RCCEx_GetI2CCLKFreq+0x190>
3418bc3a:	4a7d      	ldr	r2, [pc, #500]	@ (3418be30 <RCCEx_GetI2CCLKFreq+0x2d0>)
3418bc3c:	4293      	cmp	r3, r2
3418bc3e:	f200 8125 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bc42:	4a7c      	ldr	r2, [pc, #496]	@ (3418be34 <RCCEx_GetI2CCLKFreq+0x2d4>)
3418bc44:	4293      	cmp	r3, r2
3418bc46:	d053      	beq.n	3418bcf0 <RCCEx_GetI2CCLKFreq+0x190>
3418bc48:	4a7a      	ldr	r2, [pc, #488]	@ (3418be34 <RCCEx_GetI2CCLKFreq+0x2d4>)
3418bc4a:	4293      	cmp	r3, r2
3418bc4c:	f200 811e 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bc50:	4a79      	ldr	r2, [pc, #484]	@ (3418be38 <RCCEx_GetI2CCLKFreq+0x2d8>)
3418bc52:	4293      	cmp	r3, r2
3418bc54:	d04c      	beq.n	3418bcf0 <RCCEx_GetI2CCLKFreq+0x190>
3418bc56:	4a78      	ldr	r2, [pc, #480]	@ (3418be38 <RCCEx_GetI2CCLKFreq+0x2d8>)
3418bc58:	4293      	cmp	r3, r2
3418bc5a:	f200 8117 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bc5e:	4a77      	ldr	r2, [pc, #476]	@ (3418be3c <RCCEx_GetI2CCLKFreq+0x2dc>)
3418bc60:	4293      	cmp	r3, r2
3418bc62:	d045      	beq.n	3418bcf0 <RCCEx_GetI2CCLKFreq+0x190>
3418bc64:	4a75      	ldr	r2, [pc, #468]	@ (3418be3c <RCCEx_GetI2CCLKFreq+0x2dc>)
3418bc66:	4293      	cmp	r3, r2
3418bc68:	f200 8110 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bc6c:	4a74      	ldr	r2, [pc, #464]	@ (3418be40 <RCCEx_GetI2CCLKFreq+0x2e0>)
3418bc6e:	4293      	cmp	r3, r2
3418bc70:	d039      	beq.n	3418bce6 <RCCEx_GetI2CCLKFreq+0x186>
3418bc72:	4a73      	ldr	r2, [pc, #460]	@ (3418be40 <RCCEx_GetI2CCLKFreq+0x2e0>)
3418bc74:	4293      	cmp	r3, r2
3418bc76:	f200 8109 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bc7a:	4a72      	ldr	r2, [pc, #456]	@ (3418be44 <RCCEx_GetI2CCLKFreq+0x2e4>)
3418bc7c:	4293      	cmp	r3, r2
3418bc7e:	d032      	beq.n	3418bce6 <RCCEx_GetI2CCLKFreq+0x186>
3418bc80:	4a70      	ldr	r2, [pc, #448]	@ (3418be44 <RCCEx_GetI2CCLKFreq+0x2e4>)
3418bc82:	4293      	cmp	r3, r2
3418bc84:	f200 8102 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bc88:	4a6f      	ldr	r2, [pc, #444]	@ (3418be48 <RCCEx_GetI2CCLKFreq+0x2e8>)
3418bc8a:	4293      	cmp	r3, r2
3418bc8c:	d02b      	beq.n	3418bce6 <RCCEx_GetI2CCLKFreq+0x186>
3418bc8e:	4a6e      	ldr	r2, [pc, #440]	@ (3418be48 <RCCEx_GetI2CCLKFreq+0x2e8>)
3418bc90:	4293      	cmp	r3, r2
3418bc92:	f200 80fb 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bc96:	4a6d      	ldr	r2, [pc, #436]	@ (3418be4c <RCCEx_GetI2CCLKFreq+0x2ec>)
3418bc98:	4293      	cmp	r3, r2
3418bc9a:	d024      	beq.n	3418bce6 <RCCEx_GetI2CCLKFreq+0x186>
3418bc9c:	4a6b      	ldr	r2, [pc, #428]	@ (3418be4c <RCCEx_GetI2CCLKFreq+0x2ec>)
3418bc9e:	4293      	cmp	r3, r2
3418bca0:	f200 80f4 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bca4:	4a6a      	ldr	r2, [pc, #424]	@ (3418be50 <RCCEx_GetI2CCLKFreq+0x2f0>)
3418bca6:	4293      	cmp	r3, r2
3418bca8:	d011      	beq.n	3418bcce <RCCEx_GetI2CCLKFreq+0x16e>
3418bcaa:	4a69      	ldr	r2, [pc, #420]	@ (3418be50 <RCCEx_GetI2CCLKFreq+0x2f0>)
3418bcac:	4293      	cmp	r3, r2
3418bcae:	f200 80ed 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bcb2:	4a68      	ldr	r2, [pc, #416]	@ (3418be54 <RCCEx_GetI2CCLKFreq+0x2f4>)
3418bcb4:	4293      	cmp	r3, r2
3418bcb6:	d00a      	beq.n	3418bcce <RCCEx_GetI2CCLKFreq+0x16e>
3418bcb8:	4a66      	ldr	r2, [pc, #408]	@ (3418be54 <RCCEx_GetI2CCLKFreq+0x2f4>)
3418bcba:	4293      	cmp	r3, r2
3418bcbc:	f200 80e6 	bhi.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
3418bcc0:	4a65      	ldr	r2, [pc, #404]	@ (3418be58 <RCCEx_GetI2CCLKFreq+0x2f8>)
3418bcc2:	4293      	cmp	r3, r2
3418bcc4:	d003      	beq.n	3418bcce <RCCEx_GetI2CCLKFreq+0x16e>
3418bcc6:	4a65      	ldr	r2, [pc, #404]	@ (3418be5c <RCCEx_GetI2CCLKFreq+0x2fc>)
3418bcc8:	4293      	cmp	r3, r2
3418bcca:	f040 80df 	bne.w	3418be8c <RCCEx_GetI2CCLKFreq+0x32c>
  {
    case LL_RCC_I2C1_CLKSOURCE_PCLK1:
    case LL_RCC_I2C2_CLKSOURCE_PCLK1:
    case LL_RCC_I2C3_CLKSOURCE_PCLK1:
    case LL_RCC_I2C4_CLKSOURCE_PCLK1:
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418bcce:	f7f9 ffed 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418bcd2:	4603      	mov	r3, r0
3418bcd4:	4618      	mov	r0, r3
3418bcd6:	f7fe ff8f 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418bcda:	4603      	mov	r3, r0
3418bcdc:	4618      	mov	r0, r3
3418bcde:	f7fe ff9c 	bl	3418ac1a <RCCEx_GetPCLK1Freq>
3418bce2:	60f8      	str	r0, [r7, #12]
      break;
3418bce4:	e0db      	b.n	3418be9e <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_CLKP:
    case LL_RCC_I2C2_CLKSOURCE_CLKP:
    case LL_RCC_I2C3_CLKSOURCE_CLKP:
    case LL_RCC_I2C4_CLKSOURCE_CLKP:
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418bce6:	2007      	movs	r0, #7
3418bce8:	f7ff fa72 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418bcec:	60f8      	str	r0, [r7, #12]
      break;
3418bcee:	e0d6      	b.n	3418be9e <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_IC10:
    case LL_RCC_I2C2_CLKSOURCE_IC10:
    case LL_RCC_I2C3_CLKSOURCE_IC10:
    case LL_RCC_I2C4_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
3418bcf0:	f7fb fc56 	bl	341875a0 <LL_RCC_IC10_IsEnabled>
3418bcf4:	4603      	mov	r3, r0
3418bcf6:	2b00      	cmp	r3, #0
3418bcf8:	f000 80ca 	beq.w	3418be90 <RCCEx_GetI2CCLKFreq+0x330>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
3418bcfc:	f7fb fc72 	bl	341875e4 <LL_RCC_IC10_GetDivider>
3418bd00:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
3418bd02:	f7fb fc61 	bl	341875c8 <LL_RCC_IC10_GetSource>
3418bd06:	4603      	mov	r3, r0
3418bd08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bd0c:	d029      	beq.n	3418bd62 <RCCEx_GetI2CCLKFreq+0x202>
3418bd0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bd12:	d82f      	bhi.n	3418bd74 <RCCEx_GetI2CCLKFreq+0x214>
3418bd14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bd18:	d01a      	beq.n	3418bd50 <RCCEx_GetI2CCLKFreq+0x1f0>
3418bd1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bd1e:	d829      	bhi.n	3418bd74 <RCCEx_GetI2CCLKFreq+0x214>
3418bd20:	2b00      	cmp	r3, #0
3418bd22:	d003      	beq.n	3418bd2c <RCCEx_GetI2CCLKFreq+0x1cc>
3418bd24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418bd28:	d009      	beq.n	3418bd3e <RCCEx_GetI2CCLKFreq+0x1de>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418bd2a:	e023      	b.n	3418bd74 <RCCEx_GetI2CCLKFreq+0x214>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418bd2c:	f7fe fe4c 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418bd30:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418bd32:	68fa      	ldr	r2, [r7, #12]
3418bd34:	68bb      	ldr	r3, [r7, #8]
3418bd36:	fbb2 f3f3 	udiv	r3, r2, r3
3418bd3a:	60fb      	str	r3, [r7, #12]
            break;
3418bd3c:	e01b      	b.n	3418bd76 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418bd3e:	f7fe fe89 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418bd42:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418bd44:	68fa      	ldr	r2, [r7, #12]
3418bd46:	68bb      	ldr	r3, [r7, #8]
3418bd48:	fbb2 f3f3 	udiv	r3, r2, r3
3418bd4c:	60fb      	str	r3, [r7, #12]
            break;
3418bd4e:	e012      	b.n	3418bd76 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418bd50:	f7fe fec6 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418bd54:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418bd56:	68fa      	ldr	r2, [r7, #12]
3418bd58:	68bb      	ldr	r3, [r7, #8]
3418bd5a:	fbb2 f3f3 	udiv	r3, r2, r3
3418bd5e:	60fb      	str	r3, [r7, #12]
            break;
3418bd60:	e009      	b.n	3418bd76 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418bd62:	f7fe ff03 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418bd66:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418bd68:	68fa      	ldr	r2, [r7, #12]
3418bd6a:	68bb      	ldr	r3, [r7, #8]
3418bd6c:	fbb2 f3f3 	udiv	r3, r2, r3
3418bd70:	60fb      	str	r3, [r7, #12]
            break;
3418bd72:	e000      	b.n	3418bd76 <RCCEx_GetI2CCLKFreq+0x216>
            break;
3418bd74:	bf00      	nop
        }
      }
      break;
3418bd76:	e08b      	b.n	3418be90 <RCCEx_GetI2CCLKFreq+0x330>

    case LL_RCC_I2C1_CLKSOURCE_IC15:
    case LL_RCC_I2C2_CLKSOURCE_IC15:
    case LL_RCC_I2C3_CLKSOURCE_IC15:
    case LL_RCC_I2C4_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
3418bd78:	f7fb fd12 	bl	341877a0 <LL_RCC_IC15_IsEnabled>
3418bd7c:	4603      	mov	r3, r0
3418bd7e:	2b00      	cmp	r3, #0
3418bd80:	f000 8088 	beq.w	3418be94 <RCCEx_GetI2CCLKFreq+0x334>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
3418bd84:	f7fb fd2e 	bl	341877e4 <LL_RCC_IC15_GetDivider>
3418bd88:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418bd8a:	f7fb fd1d 	bl	341877c8 <LL_RCC_IC15_GetSource>
3418bd8e:	4603      	mov	r3, r0
3418bd90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bd94:	d029      	beq.n	3418bdea <RCCEx_GetI2CCLKFreq+0x28a>
3418bd96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bd9a:	d82f      	bhi.n	3418bdfc <RCCEx_GetI2CCLKFreq+0x29c>
3418bd9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bda0:	d01a      	beq.n	3418bdd8 <RCCEx_GetI2CCLKFreq+0x278>
3418bda2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bda6:	d829      	bhi.n	3418bdfc <RCCEx_GetI2CCLKFreq+0x29c>
3418bda8:	2b00      	cmp	r3, #0
3418bdaa:	d003      	beq.n	3418bdb4 <RCCEx_GetI2CCLKFreq+0x254>
3418bdac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418bdb0:	d009      	beq.n	3418bdc6 <RCCEx_GetI2CCLKFreq+0x266>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418bdb2:	e023      	b.n	3418bdfc <RCCEx_GetI2CCLKFreq+0x29c>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418bdb4:	f7fe fe08 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418bdb8:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418bdba:	68fa      	ldr	r2, [r7, #12]
3418bdbc:	68bb      	ldr	r3, [r7, #8]
3418bdbe:	fbb2 f3f3 	udiv	r3, r2, r3
3418bdc2:	60fb      	str	r3, [r7, #12]
            break;
3418bdc4:	e01b      	b.n	3418bdfe <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418bdc6:	f7fe fe45 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418bdca:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418bdcc:	68fa      	ldr	r2, [r7, #12]
3418bdce:	68bb      	ldr	r3, [r7, #8]
3418bdd0:	fbb2 f3f3 	udiv	r3, r2, r3
3418bdd4:	60fb      	str	r3, [r7, #12]
            break;
3418bdd6:	e012      	b.n	3418bdfe <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418bdd8:	f7fe fe82 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418bddc:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418bdde:	68fa      	ldr	r2, [r7, #12]
3418bde0:	68bb      	ldr	r3, [r7, #8]
3418bde2:	fbb2 f3f3 	udiv	r3, r2, r3
3418bde6:	60fb      	str	r3, [r7, #12]
            break;
3418bde8:	e009      	b.n	3418bdfe <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418bdea:	f7fe febf 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418bdee:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418bdf0:	68fa      	ldr	r2, [r7, #12]
3418bdf2:	68bb      	ldr	r3, [r7, #8]
3418bdf4:	fbb2 f3f3 	udiv	r3, r2, r3
3418bdf8:	60fb      	str	r3, [r7, #12]
            break;
3418bdfa:	e000      	b.n	3418bdfe <RCCEx_GetI2CCLKFreq+0x29e>
            break;
3418bdfc:	bf00      	nop
        }
      }
      break;
3418bdfe:	e049      	b.n	3418be94 <RCCEx_GetI2CCLKFreq+0x334>
3418be00:	07050c0c 	.word	0x07050c0c
3418be04:	0705080c 	.word	0x0705080c
3418be08:	0705040c 	.word	0x0705040c
3418be0c:	0705000c 	.word	0x0705000c
3418be10:	07040c0c 	.word	0x07040c0c
3418be14:	0704080c 	.word	0x0704080c
3418be18:	0704040c 	.word	0x0704040c
3418be1c:	0704000c 	.word	0x0704000c
3418be20:	07030c0c 	.word	0x07030c0c
3418be24:	0703080c 	.word	0x0703080c
3418be28:	0703040c 	.word	0x0703040c
3418be2c:	0703000c 	.word	0x0703000c
3418be30:	07020c0c 	.word	0x07020c0c
3418be34:	0702080c 	.word	0x0702080c
3418be38:	0702040c 	.word	0x0702040c
3418be3c:	0702000c 	.word	0x0702000c
3418be40:	07010c0c 	.word	0x07010c0c
3418be44:	0701080c 	.word	0x0701080c
3418be48:	0701040c 	.word	0x0701040c
3418be4c:	0701000c 	.word	0x0701000c
3418be50:	07000c0c 	.word	0x07000c0c
3418be54:	0700080c 	.word	0x0700080c
3418be58:	0700000c 	.word	0x0700000c
3418be5c:	0700040c 	.word	0x0700040c

    case LL_RCC_I2C1_CLKSOURCE_HSI:
    case LL_RCC_I2C2_CLKSOURCE_HSI:
    case LL_RCC_I2C3_CLKSOURCE_HSI:
    case LL_RCC_I2C4_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418be60:	f7fa fb3a 	bl	341864d8 <LL_RCC_HSI_IsReady>
3418be64:	4603      	mov	r3, r0
3418be66:	2b00      	cmp	r3, #0
3418be68:	d016      	beq.n	3418be98 <RCCEx_GetI2CCLKFreq+0x338>
      {
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418be6a:	f7fa fb47 	bl	341864fc <LL_RCC_HSI_GetDivider>
3418be6e:	4603      	mov	r3, r0
3418be70:	09db      	lsrs	r3, r3, #7
3418be72:	4a0d      	ldr	r2, [pc, #52]	@ (3418bea8 <RCCEx_GetI2CCLKFreq+0x348>)
3418be74:	fa22 f303 	lsr.w	r3, r2, r3
3418be78:	60fb      	str	r3, [r7, #12]
      }
      break;
3418be7a:	e00d      	b.n	3418be98 <RCCEx_GetI2CCLKFreq+0x338>

    case LL_RCC_I2C1_CLKSOURCE_MSI:
    case LL_RCC_I2C2_CLKSOURCE_MSI:
    case LL_RCC_I2C3_CLKSOURCE_MSI:
    case LL_RCC_I2C4_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418be7c:	f7fa fb4c 	bl	34186518 <LL_RCC_MSI_IsReady>
3418be80:	4603      	mov	r3, r0
3418be82:	2b00      	cmp	r3, #0
3418be84:	d00a      	beq.n	3418be9c <RCCEx_GetI2CCLKFreq+0x33c>
      {
        i2c_frequency = MSI_VALUE;
3418be86:	4b09      	ldr	r3, [pc, #36]	@ (3418beac <RCCEx_GetI2CCLKFreq+0x34c>)
3418be88:	60fb      	str	r3, [r7, #12]
      }
      break;
3418be8a:	e007      	b.n	3418be9c <RCCEx_GetI2CCLKFreq+0x33c>

    default:
      /* Unexpected case */
      break;
3418be8c:	bf00      	nop
3418be8e:	e006      	b.n	3418be9e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
3418be90:	bf00      	nop
3418be92:	e004      	b.n	3418be9e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
3418be94:	bf00      	nop
3418be96:	e002      	b.n	3418be9e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
3418be98:	bf00      	nop
3418be9a:	e000      	b.n	3418be9e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
3418be9c:	bf00      	nop
  }

  return i2c_frequency;
3418be9e:	68fb      	ldr	r3, [r7, #12]
}
3418bea0:	4618      	mov	r0, r3
3418bea2:	3710      	adds	r7, #16
3418bea4:	46bd      	mov	sp, r7
3418bea6:	bd80      	pop	{r7, pc}
3418bea8:	03d09000 	.word	0x03d09000
3418beac:	003d0900 	.word	0x003d0900

3418beb0 <RCCEx_GetI3CCLKFreq>:
  *         @arg @ref RCCEx_I3C2_Clock_Source
  * @retval I3C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI3CCLKFreq(uint32_t I3CxSource)
{
3418beb0:	b580      	push	{r7, lr}
3418beb2:	b084      	sub	sp, #16
3418beb4:	af00      	add	r7, sp, #0
3418beb6:	6078      	str	r0, [r7, #4]
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
3418beb8:	2300      	movs	r3, #0
3418beba:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI3CClockSource(I3CxSource))
3418bebc:	6878      	ldr	r0, [r7, #4]
3418bebe:	f7fa fe5d 	bl	34186b7c <LL_RCC_GetI3CClockSource>
3418bec2:	4603      	mov	r3, r0
3418bec4:	4a86      	ldr	r2, [pc, #536]	@ (3418c0e0 <RCCEx_GetI3CCLKFreq+0x230>)
3418bec6:	4293      	cmp	r3, r2
3418bec8:	f000 80e6 	beq.w	3418c098 <RCCEx_GetI3CCLKFreq+0x1e8>
3418becc:	4a84      	ldr	r2, [pc, #528]	@ (3418c0e0 <RCCEx_GetI3CCLKFreq+0x230>)
3418bece:	4293      	cmp	r3, r2
3418bed0:	f200 80f8 	bhi.w	3418c0c4 <RCCEx_GetI3CCLKFreq+0x214>
3418bed4:	4a83      	ldr	r2, [pc, #524]	@ (3418c0e4 <RCCEx_GetI3CCLKFreq+0x234>)
3418bed6:	4293      	cmp	r3, r2
3418bed8:	f000 80de 	beq.w	3418c098 <RCCEx_GetI3CCLKFreq+0x1e8>
3418bedc:	4a81      	ldr	r2, [pc, #516]	@ (3418c0e4 <RCCEx_GetI3CCLKFreq+0x234>)
3418bede:	4293      	cmp	r3, r2
3418bee0:	f200 80f0 	bhi.w	3418c0c4 <RCCEx_GetI3CCLKFreq+0x214>
3418bee4:	4a80      	ldr	r2, [pc, #512]	@ (3418c0e8 <RCCEx_GetI3CCLKFreq+0x238>)
3418bee6:	4293      	cmp	r3, r2
3418bee8:	f000 80e4 	beq.w	3418c0b4 <RCCEx_GetI3CCLKFreq+0x204>
3418beec:	4a7e      	ldr	r2, [pc, #504]	@ (3418c0e8 <RCCEx_GetI3CCLKFreq+0x238>)
3418beee:	4293      	cmp	r3, r2
3418bef0:	f200 80e8 	bhi.w	3418c0c4 <RCCEx_GetI3CCLKFreq+0x214>
3418bef4:	4a7d      	ldr	r2, [pc, #500]	@ (3418c0ec <RCCEx_GetI3CCLKFreq+0x23c>)
3418bef6:	4293      	cmp	r3, r2
3418bef8:	f000 80dc 	beq.w	3418c0b4 <RCCEx_GetI3CCLKFreq+0x204>
3418befc:	4a7b      	ldr	r2, [pc, #492]	@ (3418c0ec <RCCEx_GetI3CCLKFreq+0x23c>)
3418befe:	4293      	cmp	r3, r2
3418bf00:	f200 80e0 	bhi.w	3418c0c4 <RCCEx_GetI3CCLKFreq+0x214>
3418bf04:	4a7a      	ldr	r2, [pc, #488]	@ (3418c0f0 <RCCEx_GetI3CCLKFreq+0x240>)
3418bf06:	4293      	cmp	r3, r2
3418bf08:	f000 8083 	beq.w	3418c012 <RCCEx_GetI3CCLKFreq+0x162>
3418bf0c:	4a78      	ldr	r2, [pc, #480]	@ (3418c0f0 <RCCEx_GetI3CCLKFreq+0x240>)
3418bf0e:	4293      	cmp	r3, r2
3418bf10:	f200 80d8 	bhi.w	3418c0c4 <RCCEx_GetI3CCLKFreq+0x214>
3418bf14:	4a77      	ldr	r2, [pc, #476]	@ (3418c0f4 <RCCEx_GetI3CCLKFreq+0x244>)
3418bf16:	4293      	cmp	r3, r2
3418bf18:	d07b      	beq.n	3418c012 <RCCEx_GetI3CCLKFreq+0x162>
3418bf1a:	4a76      	ldr	r2, [pc, #472]	@ (3418c0f4 <RCCEx_GetI3CCLKFreq+0x244>)
3418bf1c:	4293      	cmp	r3, r2
3418bf1e:	f200 80d1 	bhi.w	3418c0c4 <RCCEx_GetI3CCLKFreq+0x214>
3418bf22:	4a75      	ldr	r2, [pc, #468]	@ (3418c0f8 <RCCEx_GetI3CCLKFreq+0x248>)
3418bf24:	4293      	cmp	r3, r2
3418bf26:	d030      	beq.n	3418bf8a <RCCEx_GetI3CCLKFreq+0xda>
3418bf28:	4a73      	ldr	r2, [pc, #460]	@ (3418c0f8 <RCCEx_GetI3CCLKFreq+0x248>)
3418bf2a:	4293      	cmp	r3, r2
3418bf2c:	f200 80ca 	bhi.w	3418c0c4 <RCCEx_GetI3CCLKFreq+0x214>
3418bf30:	4a72      	ldr	r2, [pc, #456]	@ (3418c0fc <RCCEx_GetI3CCLKFreq+0x24c>)
3418bf32:	4293      	cmp	r3, r2
3418bf34:	d029      	beq.n	3418bf8a <RCCEx_GetI3CCLKFreq+0xda>
3418bf36:	4a71      	ldr	r2, [pc, #452]	@ (3418c0fc <RCCEx_GetI3CCLKFreq+0x24c>)
3418bf38:	4293      	cmp	r3, r2
3418bf3a:	f200 80c3 	bhi.w	3418c0c4 <RCCEx_GetI3CCLKFreq+0x214>
3418bf3e:	4a70      	ldr	r2, [pc, #448]	@ (3418c100 <RCCEx_GetI3CCLKFreq+0x250>)
3418bf40:	4293      	cmp	r3, r2
3418bf42:	d01d      	beq.n	3418bf80 <RCCEx_GetI3CCLKFreq+0xd0>
3418bf44:	4a6e      	ldr	r2, [pc, #440]	@ (3418c100 <RCCEx_GetI3CCLKFreq+0x250>)
3418bf46:	4293      	cmp	r3, r2
3418bf48:	f200 80bc 	bhi.w	3418c0c4 <RCCEx_GetI3CCLKFreq+0x214>
3418bf4c:	4a6d      	ldr	r2, [pc, #436]	@ (3418c104 <RCCEx_GetI3CCLKFreq+0x254>)
3418bf4e:	4293      	cmp	r3, r2
3418bf50:	d016      	beq.n	3418bf80 <RCCEx_GetI3CCLKFreq+0xd0>
3418bf52:	4a6c      	ldr	r2, [pc, #432]	@ (3418c104 <RCCEx_GetI3CCLKFreq+0x254>)
3418bf54:	4293      	cmp	r3, r2
3418bf56:	f200 80b5 	bhi.w	3418c0c4 <RCCEx_GetI3CCLKFreq+0x214>
3418bf5a:	4a6b      	ldr	r2, [pc, #428]	@ (3418c108 <RCCEx_GetI3CCLKFreq+0x258>)
3418bf5c:	4293      	cmp	r3, r2
3418bf5e:	d003      	beq.n	3418bf68 <RCCEx_GetI3CCLKFreq+0xb8>
3418bf60:	4a6a      	ldr	r2, [pc, #424]	@ (3418c10c <RCCEx_GetI3CCLKFreq+0x25c>)
3418bf62:	4293      	cmp	r3, r2
3418bf64:	f040 80ae 	bne.w	3418c0c4 <RCCEx_GetI3CCLKFreq+0x214>
  {
    case LL_RCC_I3C1_CLKSOURCE_PCLK1:
    case LL_RCC_I3C2_CLKSOURCE_PCLK1:
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418bf68:	f7f9 fea0 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418bf6c:	4603      	mov	r3, r0
3418bf6e:	4618      	mov	r0, r3
3418bf70:	f7fe fe42 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418bf74:	4603      	mov	r3, r0
3418bf76:	4618      	mov	r0, r3
3418bf78:	f7fe fe4f 	bl	3418ac1a <RCCEx_GetPCLK1Freq>
3418bf7c:	60f8      	str	r0, [r7, #12]
      break;
3418bf7e:	e0aa      	b.n	3418c0d6 <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_CLKP:
    case LL_RCC_I3C2_CLKSOURCE_CLKP:
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418bf80:	2007      	movs	r0, #7
3418bf82:	f7ff f925 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418bf86:	60f8      	str	r0, [r7, #12]
      break;
3418bf88:	e0a5      	b.n	3418c0d6 <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_IC10:
    case LL_RCC_I3C2_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
3418bf8a:	f7fb fb09 	bl	341875a0 <LL_RCC_IC10_IsEnabled>
3418bf8e:	4603      	mov	r3, r0
3418bf90:	2b00      	cmp	r3, #0
3418bf92:	f000 8099 	beq.w	3418c0c8 <RCCEx_GetI3CCLKFreq+0x218>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
3418bf96:	f7fb fb25 	bl	341875e4 <LL_RCC_IC10_GetDivider>
3418bf9a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
3418bf9c:	f7fb fb14 	bl	341875c8 <LL_RCC_IC10_GetSource>
3418bfa0:	4603      	mov	r3, r0
3418bfa2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bfa6:	d029      	beq.n	3418bffc <RCCEx_GetI3CCLKFreq+0x14c>
3418bfa8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bfac:	d82f      	bhi.n	3418c00e <RCCEx_GetI3CCLKFreq+0x15e>
3418bfae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bfb2:	d01a      	beq.n	3418bfea <RCCEx_GetI3CCLKFreq+0x13a>
3418bfb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bfb8:	d829      	bhi.n	3418c00e <RCCEx_GetI3CCLKFreq+0x15e>
3418bfba:	2b00      	cmp	r3, #0
3418bfbc:	d003      	beq.n	3418bfc6 <RCCEx_GetI3CCLKFreq+0x116>
3418bfbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418bfc2:	d009      	beq.n	3418bfd8 <RCCEx_GetI3CCLKFreq+0x128>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418bfc4:	e023      	b.n	3418c00e <RCCEx_GetI3CCLKFreq+0x15e>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418bfc6:	f7fe fcff 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418bfca:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418bfcc:	68fa      	ldr	r2, [r7, #12]
3418bfce:	68bb      	ldr	r3, [r7, #8]
3418bfd0:	fbb2 f3f3 	udiv	r3, r2, r3
3418bfd4:	60fb      	str	r3, [r7, #12]
            break;
3418bfd6:	e01b      	b.n	3418c010 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418bfd8:	f7fe fd3c 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418bfdc:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418bfde:	68fa      	ldr	r2, [r7, #12]
3418bfe0:	68bb      	ldr	r3, [r7, #8]
3418bfe2:	fbb2 f3f3 	udiv	r3, r2, r3
3418bfe6:	60fb      	str	r3, [r7, #12]
            break;
3418bfe8:	e012      	b.n	3418c010 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418bfea:	f7fe fd79 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418bfee:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418bff0:	68fa      	ldr	r2, [r7, #12]
3418bff2:	68bb      	ldr	r3, [r7, #8]
3418bff4:	fbb2 f3f3 	udiv	r3, r2, r3
3418bff8:	60fb      	str	r3, [r7, #12]
            break;
3418bffa:	e009      	b.n	3418c010 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418bffc:	f7fe fdb6 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418c000:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418c002:	68fa      	ldr	r2, [r7, #12]
3418c004:	68bb      	ldr	r3, [r7, #8]
3418c006:	fbb2 f3f3 	udiv	r3, r2, r3
3418c00a:	60fb      	str	r3, [r7, #12]
            break;
3418c00c:	e000      	b.n	3418c010 <RCCEx_GetI3CCLKFreq+0x160>
            break;
3418c00e:	bf00      	nop
        }
      }
      break;
3418c010:	e05a      	b.n	3418c0c8 <RCCEx_GetI3CCLKFreq+0x218>

    case LL_RCC_I3C1_CLKSOURCE_IC15:
    case LL_RCC_I3C2_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
3418c012:	f7fb fbc5 	bl	341877a0 <LL_RCC_IC15_IsEnabled>
3418c016:	4603      	mov	r3, r0
3418c018:	2b00      	cmp	r3, #0
3418c01a:	d057      	beq.n	3418c0cc <RCCEx_GetI3CCLKFreq+0x21c>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
3418c01c:	f7fb fbe2 	bl	341877e4 <LL_RCC_IC15_GetDivider>
3418c020:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418c022:	f7fb fbd1 	bl	341877c8 <LL_RCC_IC15_GetSource>
3418c026:	4603      	mov	r3, r0
3418c028:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c02c:	d029      	beq.n	3418c082 <RCCEx_GetI3CCLKFreq+0x1d2>
3418c02e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c032:	d82f      	bhi.n	3418c094 <RCCEx_GetI3CCLKFreq+0x1e4>
3418c034:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c038:	d01a      	beq.n	3418c070 <RCCEx_GetI3CCLKFreq+0x1c0>
3418c03a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c03e:	d829      	bhi.n	3418c094 <RCCEx_GetI3CCLKFreq+0x1e4>
3418c040:	2b00      	cmp	r3, #0
3418c042:	d003      	beq.n	3418c04c <RCCEx_GetI3CCLKFreq+0x19c>
3418c044:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c048:	d009      	beq.n	3418c05e <RCCEx_GetI3CCLKFreq+0x1ae>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418c04a:	e023      	b.n	3418c094 <RCCEx_GetI3CCLKFreq+0x1e4>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c04c:	f7fe fcbc 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418c050:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418c052:	68fa      	ldr	r2, [r7, #12]
3418c054:	68bb      	ldr	r3, [r7, #8]
3418c056:	fbb2 f3f3 	udiv	r3, r2, r3
3418c05a:	60fb      	str	r3, [r7, #12]
            break;
3418c05c:	e01b      	b.n	3418c096 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c05e:	f7fe fcf9 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418c062:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418c064:	68fa      	ldr	r2, [r7, #12]
3418c066:	68bb      	ldr	r3, [r7, #8]
3418c068:	fbb2 f3f3 	udiv	r3, r2, r3
3418c06c:	60fb      	str	r3, [r7, #12]
            break;
3418c06e:	e012      	b.n	3418c096 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c070:	f7fe fd36 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418c074:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418c076:	68fa      	ldr	r2, [r7, #12]
3418c078:	68bb      	ldr	r3, [r7, #8]
3418c07a:	fbb2 f3f3 	udiv	r3, r2, r3
3418c07e:	60fb      	str	r3, [r7, #12]
            break;
3418c080:	e009      	b.n	3418c096 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c082:	f7fe fd73 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418c086:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418c088:	68fa      	ldr	r2, [r7, #12]
3418c08a:	68bb      	ldr	r3, [r7, #8]
3418c08c:	fbb2 f3f3 	udiv	r3, r2, r3
3418c090:	60fb      	str	r3, [r7, #12]
            break;
3418c092:	e000      	b.n	3418c096 <RCCEx_GetI3CCLKFreq+0x1e6>
            break;
3418c094:	bf00      	nop
        }
      }
      break;
3418c096:	e019      	b.n	3418c0cc <RCCEx_GetI3CCLKFreq+0x21c>

    case LL_RCC_I3C1_CLKSOURCE_HSI:
    case LL_RCC_I3C2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418c098:	f7fa fa1e 	bl	341864d8 <LL_RCC_HSI_IsReady>
3418c09c:	4603      	mov	r3, r0
3418c09e:	2b00      	cmp	r3, #0
3418c0a0:	d016      	beq.n	3418c0d0 <RCCEx_GetI3CCLKFreq+0x220>
      {
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418c0a2:	f7fa fa2b 	bl	341864fc <LL_RCC_HSI_GetDivider>
3418c0a6:	4603      	mov	r3, r0
3418c0a8:	09db      	lsrs	r3, r3, #7
3418c0aa:	4a19      	ldr	r2, [pc, #100]	@ (3418c110 <RCCEx_GetI3CCLKFreq+0x260>)
3418c0ac:	fa22 f303 	lsr.w	r3, r2, r3
3418c0b0:	60fb      	str	r3, [r7, #12]
      }
      break;
3418c0b2:	e00d      	b.n	3418c0d0 <RCCEx_GetI3CCLKFreq+0x220>

    case LL_RCC_I3C1_CLKSOURCE_MSI:
    case LL_RCC_I3C2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418c0b4:	f7fa fa30 	bl	34186518 <LL_RCC_MSI_IsReady>
3418c0b8:	4603      	mov	r3, r0
3418c0ba:	2b00      	cmp	r3, #0
3418c0bc:	d00a      	beq.n	3418c0d4 <RCCEx_GetI3CCLKFreq+0x224>
      {
        i3c_frequency = MSI_VALUE;
3418c0be:	4b15      	ldr	r3, [pc, #84]	@ (3418c114 <RCCEx_GetI3CCLKFreq+0x264>)
3418c0c0:	60fb      	str	r3, [r7, #12]
      }
      break;
3418c0c2:	e007      	b.n	3418c0d4 <RCCEx_GetI3CCLKFreq+0x224>

    default:
      /* Unexpected case */
      break;
3418c0c4:	bf00      	nop
3418c0c6:	e006      	b.n	3418c0d6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
3418c0c8:	bf00      	nop
3418c0ca:	e004      	b.n	3418c0d6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
3418c0cc:	bf00      	nop
3418c0ce:	e002      	b.n	3418c0d6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
3418c0d0:	bf00      	nop
3418c0d2:	e000      	b.n	3418c0d6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
3418c0d4:	bf00      	nop
  }

  return i3c_frequency;
3418c0d6:	68fb      	ldr	r3, [r7, #12]
}
3418c0d8:	4618      	mov	r0, r3
3418c0da:	3710      	adds	r7, #16
3418c0dc:	46bd      	mov	sp, r7
3418c0de:	bd80      	pop	{r7, pc}
3418c0e0:	0705140c 	.word	0x0705140c
3418c0e4:	0705100c 	.word	0x0705100c
3418c0e8:	0704140c 	.word	0x0704140c
3418c0ec:	0704100c 	.word	0x0704100c
3418c0f0:	0703140c 	.word	0x0703140c
3418c0f4:	0703100c 	.word	0x0703100c
3418c0f8:	0702140c 	.word	0x0702140c
3418c0fc:	0702100c 	.word	0x0702100c
3418c100:	0701140c 	.word	0x0701140c
3418c104:	0701100c 	.word	0x0701100c
3418c108:	0700100c 	.word	0x0700100c
3418c10c:	0700140c 	.word	0x0700140c
3418c110:	03d09000 	.word	0x03d09000
3418c114:	003d0900 	.word	0x003d0900

3418c118 <RCCEx_GetLPTIMCLKFreq>:
  *         @arg @ref RCCEx_LPTIM5_Clock_Source
  * @retval LPTIM clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPTIMCLKFreq(uint32_t LPTIMxSource)
{
3418c118:	b590      	push	{r4, r7, lr}
3418c11a:	b085      	sub	sp, #20
3418c11c:	af00      	add	r7, sp, #0
3418c11e:	6078      	str	r0, [r7, #4]
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
3418c120:	2300      	movs	r3, #0
3418c122:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3418c124:	6878      	ldr	r0, [r7, #4]
3418c126:	f7fa fd35 	bl	34186b94 <LL_RCC_GetLPTIMClockSource>
3418c12a:	4603      	mov	r3, r0
3418c12c:	4aa1      	ldr	r2, [pc, #644]	@ (3418c3b4 <RCCEx_GetLPTIMCLKFreq+0x29c>)
3418c12e:	4293      	cmp	r3, r2
3418c130:	f000 8185 	beq.w	3418c43e <RCCEx_GetLPTIMCLKFreq+0x326>
3418c134:	4a9f      	ldr	r2, [pc, #636]	@ (3418c3b4 <RCCEx_GetLPTIMCLKFreq+0x29c>)
3418c136:	4293      	cmp	r3, r2
3418c138:	f200 818b 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c13c:	4a9e      	ldr	r2, [pc, #632]	@ (3418c3b8 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
3418c13e:	4293      	cmp	r3, r2
3418c140:	f000 817d 	beq.w	3418c43e <RCCEx_GetLPTIMCLKFreq+0x326>
3418c144:	4a9c      	ldr	r2, [pc, #624]	@ (3418c3b8 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
3418c146:	4293      	cmp	r3, r2
3418c148:	f200 8183 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c14c:	4a9b      	ldr	r2, [pc, #620]	@ (3418c3bc <RCCEx_GetLPTIMCLKFreq+0x2a4>)
3418c14e:	4293      	cmp	r3, r2
3418c150:	f000 8175 	beq.w	3418c43e <RCCEx_GetLPTIMCLKFreq+0x326>
3418c154:	4a99      	ldr	r2, [pc, #612]	@ (3418c3bc <RCCEx_GetLPTIMCLKFreq+0x2a4>)
3418c156:	4293      	cmp	r3, r2
3418c158:	f200 817b 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c15c:	4a98      	ldr	r2, [pc, #608]	@ (3418c3c0 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
3418c15e:	4293      	cmp	r3, r2
3418c160:	f000 816d 	beq.w	3418c43e <RCCEx_GetLPTIMCLKFreq+0x326>
3418c164:	4a96      	ldr	r2, [pc, #600]	@ (3418c3c0 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
3418c166:	4293      	cmp	r3, r2
3418c168:	f200 8173 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c16c:	4a95      	ldr	r2, [pc, #596]	@ (3418c3c4 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
3418c16e:	4293      	cmp	r3, r2
3418c170:	f000 8165 	beq.w	3418c43e <RCCEx_GetLPTIMCLKFreq+0x326>
3418c174:	4a93      	ldr	r2, [pc, #588]	@ (3418c3c4 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
3418c176:	4293      	cmp	r3, r2
3418c178:	f200 816b 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c17c:	4a92      	ldr	r2, [pc, #584]	@ (3418c3c8 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
3418c17e:	4293      	cmp	r3, r2
3418c180:	f000 8154 	beq.w	3418c42c <RCCEx_GetLPTIMCLKFreq+0x314>
3418c184:	4a90      	ldr	r2, [pc, #576]	@ (3418c3c8 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
3418c186:	4293      	cmp	r3, r2
3418c188:	f200 8163 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c18c:	4a8f      	ldr	r2, [pc, #572]	@ (3418c3cc <RCCEx_GetLPTIMCLKFreq+0x2b4>)
3418c18e:	4293      	cmp	r3, r2
3418c190:	f000 814c 	beq.w	3418c42c <RCCEx_GetLPTIMCLKFreq+0x314>
3418c194:	4a8d      	ldr	r2, [pc, #564]	@ (3418c3cc <RCCEx_GetLPTIMCLKFreq+0x2b4>)
3418c196:	4293      	cmp	r3, r2
3418c198:	f200 815b 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c19c:	4a8c      	ldr	r2, [pc, #560]	@ (3418c3d0 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
3418c19e:	4293      	cmp	r3, r2
3418c1a0:	f000 8144 	beq.w	3418c42c <RCCEx_GetLPTIMCLKFreq+0x314>
3418c1a4:	4a8a      	ldr	r2, [pc, #552]	@ (3418c3d0 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
3418c1a6:	4293      	cmp	r3, r2
3418c1a8:	f200 8153 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c1ac:	4a89      	ldr	r2, [pc, #548]	@ (3418c3d4 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
3418c1ae:	4293      	cmp	r3, r2
3418c1b0:	f000 813c 	beq.w	3418c42c <RCCEx_GetLPTIMCLKFreq+0x314>
3418c1b4:	4a87      	ldr	r2, [pc, #540]	@ (3418c3d4 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
3418c1b6:	4293      	cmp	r3, r2
3418c1b8:	f200 814b 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c1bc:	4a86      	ldr	r2, [pc, #536]	@ (3418c3d8 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
3418c1be:	4293      	cmp	r3, r2
3418c1c0:	f000 8134 	beq.w	3418c42c <RCCEx_GetLPTIMCLKFreq+0x314>
3418c1c4:	4a84      	ldr	r2, [pc, #528]	@ (3418c3d8 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
3418c1c6:	4293      	cmp	r3, r2
3418c1c8:	f200 8143 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c1cc:	4a83      	ldr	r2, [pc, #524]	@ (3418c3dc <RCCEx_GetLPTIMCLKFreq+0x2c4>)
3418c1ce:	4293      	cmp	r3, r2
3418c1d0:	f000 80e7 	beq.w	3418c3a2 <RCCEx_GetLPTIMCLKFreq+0x28a>
3418c1d4:	4a81      	ldr	r2, [pc, #516]	@ (3418c3dc <RCCEx_GetLPTIMCLKFreq+0x2c4>)
3418c1d6:	4293      	cmp	r3, r2
3418c1d8:	f200 813b 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c1dc:	4a80      	ldr	r2, [pc, #512]	@ (3418c3e0 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
3418c1de:	4293      	cmp	r3, r2
3418c1e0:	f000 80df 	beq.w	3418c3a2 <RCCEx_GetLPTIMCLKFreq+0x28a>
3418c1e4:	4a7e      	ldr	r2, [pc, #504]	@ (3418c3e0 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
3418c1e6:	4293      	cmp	r3, r2
3418c1e8:	f200 8133 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c1ec:	4a7d      	ldr	r2, [pc, #500]	@ (3418c3e4 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
3418c1ee:	4293      	cmp	r3, r2
3418c1f0:	f000 80d7 	beq.w	3418c3a2 <RCCEx_GetLPTIMCLKFreq+0x28a>
3418c1f4:	4a7b      	ldr	r2, [pc, #492]	@ (3418c3e4 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
3418c1f6:	4293      	cmp	r3, r2
3418c1f8:	f200 812b 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c1fc:	4a7a      	ldr	r2, [pc, #488]	@ (3418c3e8 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
3418c1fe:	4293      	cmp	r3, r2
3418c200:	f000 80cf 	beq.w	3418c3a2 <RCCEx_GetLPTIMCLKFreq+0x28a>
3418c204:	4a78      	ldr	r2, [pc, #480]	@ (3418c3e8 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
3418c206:	4293      	cmp	r3, r2
3418c208:	f200 8123 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c20c:	4a77      	ldr	r2, [pc, #476]	@ (3418c3ec <RCCEx_GetLPTIMCLKFreq+0x2d4>)
3418c20e:	4293      	cmp	r3, r2
3418c210:	f000 80c7 	beq.w	3418c3a2 <RCCEx_GetLPTIMCLKFreq+0x28a>
3418c214:	4a75      	ldr	r2, [pc, #468]	@ (3418c3ec <RCCEx_GetLPTIMCLKFreq+0x2d4>)
3418c216:	4293      	cmp	r3, r2
3418c218:	f200 811b 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c21c:	4a74      	ldr	r2, [pc, #464]	@ (3418c3f0 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
3418c21e:	4293      	cmp	r3, r2
3418c220:	d07b      	beq.n	3418c31a <RCCEx_GetLPTIMCLKFreq+0x202>
3418c222:	4a73      	ldr	r2, [pc, #460]	@ (3418c3f0 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
3418c224:	4293      	cmp	r3, r2
3418c226:	f200 8114 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c22a:	4a72      	ldr	r2, [pc, #456]	@ (3418c3f4 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
3418c22c:	4293      	cmp	r3, r2
3418c22e:	d074      	beq.n	3418c31a <RCCEx_GetLPTIMCLKFreq+0x202>
3418c230:	4a70      	ldr	r2, [pc, #448]	@ (3418c3f4 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
3418c232:	4293      	cmp	r3, r2
3418c234:	f200 810d 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c238:	4a6f      	ldr	r2, [pc, #444]	@ (3418c3f8 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
3418c23a:	4293      	cmp	r3, r2
3418c23c:	d06d      	beq.n	3418c31a <RCCEx_GetLPTIMCLKFreq+0x202>
3418c23e:	4a6e      	ldr	r2, [pc, #440]	@ (3418c3f8 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
3418c240:	4293      	cmp	r3, r2
3418c242:	f200 8106 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c246:	4a6d      	ldr	r2, [pc, #436]	@ (3418c3fc <RCCEx_GetLPTIMCLKFreq+0x2e4>)
3418c248:	4293      	cmp	r3, r2
3418c24a:	d066      	beq.n	3418c31a <RCCEx_GetLPTIMCLKFreq+0x202>
3418c24c:	4a6b      	ldr	r2, [pc, #428]	@ (3418c3fc <RCCEx_GetLPTIMCLKFreq+0x2e4>)
3418c24e:	4293      	cmp	r3, r2
3418c250:	f200 80ff 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c254:	4a6a      	ldr	r2, [pc, #424]	@ (3418c400 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
3418c256:	4293      	cmp	r3, r2
3418c258:	d05f      	beq.n	3418c31a <RCCEx_GetLPTIMCLKFreq+0x202>
3418c25a:	4a69      	ldr	r2, [pc, #420]	@ (3418c400 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
3418c25c:	4293      	cmp	r3, r2
3418c25e:	f200 80f8 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c262:	4a68      	ldr	r2, [pc, #416]	@ (3418c404 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
3418c264:	4293      	cmp	r3, r2
3418c266:	d053      	beq.n	3418c310 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418c268:	4a66      	ldr	r2, [pc, #408]	@ (3418c404 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
3418c26a:	4293      	cmp	r3, r2
3418c26c:	f200 80f1 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c270:	4a65      	ldr	r2, [pc, #404]	@ (3418c408 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
3418c272:	4293      	cmp	r3, r2
3418c274:	d04c      	beq.n	3418c310 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418c276:	4a64      	ldr	r2, [pc, #400]	@ (3418c408 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
3418c278:	4293      	cmp	r3, r2
3418c27a:	f200 80ea 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c27e:	4a63      	ldr	r2, [pc, #396]	@ (3418c40c <RCCEx_GetLPTIMCLKFreq+0x2f4>)
3418c280:	4293      	cmp	r3, r2
3418c282:	d045      	beq.n	3418c310 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418c284:	4a61      	ldr	r2, [pc, #388]	@ (3418c40c <RCCEx_GetLPTIMCLKFreq+0x2f4>)
3418c286:	4293      	cmp	r3, r2
3418c288:	f200 80e3 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c28c:	4a60      	ldr	r2, [pc, #384]	@ (3418c410 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
3418c28e:	4293      	cmp	r3, r2
3418c290:	d03e      	beq.n	3418c310 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418c292:	4a5f      	ldr	r2, [pc, #380]	@ (3418c410 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
3418c294:	4293      	cmp	r3, r2
3418c296:	f200 80dc 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c29a:	4a5e      	ldr	r2, [pc, #376]	@ (3418c414 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
3418c29c:	4293      	cmp	r3, r2
3418c29e:	d037      	beq.n	3418c310 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418c2a0:	4a5c      	ldr	r2, [pc, #368]	@ (3418c414 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
3418c2a2:	4293      	cmp	r3, r2
3418c2a4:	f200 80d5 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c2a8:	4a5b      	ldr	r2, [pc, #364]	@ (3418c418 <RCCEx_GetLPTIMCLKFreq+0x300>)
3418c2aa:	4293      	cmp	r3, r2
3418c2ac:	d024      	beq.n	3418c2f8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
3418c2ae:	4a5a      	ldr	r2, [pc, #360]	@ (3418c418 <RCCEx_GetLPTIMCLKFreq+0x300>)
3418c2b0:	4293      	cmp	r3, r2
3418c2b2:	f200 80ce 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c2b6:	4a59      	ldr	r2, [pc, #356]	@ (3418c41c <RCCEx_GetLPTIMCLKFreq+0x304>)
3418c2b8:	4293      	cmp	r3, r2
3418c2ba:	d01d      	beq.n	3418c2f8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
3418c2bc:	4a57      	ldr	r2, [pc, #348]	@ (3418c41c <RCCEx_GetLPTIMCLKFreq+0x304>)
3418c2be:	4293      	cmp	r3, r2
3418c2c0:	f200 80c7 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c2c4:	4a56      	ldr	r2, [pc, #344]	@ (3418c420 <RCCEx_GetLPTIMCLKFreq+0x308>)
3418c2c6:	4293      	cmp	r3, r2
3418c2c8:	d016      	beq.n	3418c2f8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
3418c2ca:	4a55      	ldr	r2, [pc, #340]	@ (3418c420 <RCCEx_GetLPTIMCLKFreq+0x308>)
3418c2cc:	4293      	cmp	r3, r2
3418c2ce:	f200 80c0 	bhi.w	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c2d2:	4a54      	ldr	r2, [pc, #336]	@ (3418c424 <RCCEx_GetLPTIMCLKFreq+0x30c>)
3418c2d4:	4293      	cmp	r3, r2
3418c2d6:	d003      	beq.n	3418c2e0 <RCCEx_GetLPTIMCLKFreq+0x1c8>
3418c2d8:	4a53      	ldr	r2, [pc, #332]	@ (3418c428 <RCCEx_GetLPTIMCLKFreq+0x310>)
3418c2da:	4293      	cmp	r3, r2
3418c2dc:	d00c      	beq.n	3418c2f8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
3418c2de:	e0b8      	b.n	3418c452 <RCCEx_GetLPTIMCLKFreq+0x33a>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418c2e0:	f7f9 fce4 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418c2e4:	4603      	mov	r3, r0
3418c2e6:	4618      	mov	r0, r3
3418c2e8:	f7fe fc86 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418c2ec:	4603      	mov	r3, r0
3418c2ee:	4618      	mov	r0, r3
3418c2f0:	f7fe fc93 	bl	3418ac1a <RCCEx_GetPCLK1Freq>
3418c2f4:	60f8      	str	r0, [r7, #12]
      break;
3418c2f6:	e0b3      	b.n	3418c460 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418c2f8:	f7f9 fcd8 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418c2fc:	4603      	mov	r3, r0
3418c2fe:	4618      	mov	r0, r3
3418c300:	f7fe fc7a 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418c304:	4603      	mov	r3, r0
3418c306:	4618      	mov	r0, r3
3418c308:	f7fe fca8 	bl	3418ac5c <RCCEx_GetPCLK4Freq>
3418c30c:	60f8      	str	r0, [r7, #12]
      break;
3418c30e:	e0a7      	b.n	3418c460 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418c310:	2007      	movs	r0, #7
3418c312:	f7fe ff5d 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418c316:	60f8      	str	r0, [r7, #12]
      break;
3418c318:	e0a2      	b.n	3418c460 <RCCEx_GetLPTIMCLKFreq+0x348>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3418c31a:	f7fb fa41 	bl	341877a0 <LL_RCC_IC15_IsEnabled>
3418c31e:	4603      	mov	r3, r0
3418c320:	2b00      	cmp	r3, #0
3418c322:	f000 8098 	beq.w	3418c456 <RCCEx_GetLPTIMCLKFreq+0x33e>
        ic_divider = LL_RCC_IC15_GetDivider();
3418c326:	f7fb fa5d 	bl	341877e4 <LL_RCC_IC15_GetDivider>
3418c32a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418c32c:	f7fb fa4c 	bl	341877c8 <LL_RCC_IC15_GetSource>
3418c330:	4603      	mov	r3, r0
3418c332:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c336:	d029      	beq.n	3418c38c <RCCEx_GetLPTIMCLKFreq+0x274>
3418c338:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c33c:	d82f      	bhi.n	3418c39e <RCCEx_GetLPTIMCLKFreq+0x286>
3418c33e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c342:	d01a      	beq.n	3418c37a <RCCEx_GetLPTIMCLKFreq+0x262>
3418c344:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c348:	d829      	bhi.n	3418c39e <RCCEx_GetLPTIMCLKFreq+0x286>
3418c34a:	2b00      	cmp	r3, #0
3418c34c:	d003      	beq.n	3418c356 <RCCEx_GetLPTIMCLKFreq+0x23e>
3418c34e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c352:	d009      	beq.n	3418c368 <RCCEx_GetLPTIMCLKFreq+0x250>
            break;
3418c354:	e023      	b.n	3418c39e <RCCEx_GetLPTIMCLKFreq+0x286>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c356:	f7fe fb37 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418c35a:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3418c35c:	68fa      	ldr	r2, [r7, #12]
3418c35e:	68bb      	ldr	r3, [r7, #8]
3418c360:	fbb2 f3f3 	udiv	r3, r2, r3
3418c364:	60fb      	str	r3, [r7, #12]
            break;
3418c366:	e01b      	b.n	3418c3a0 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c368:	f7fe fb74 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418c36c:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3418c36e:	68fa      	ldr	r2, [r7, #12]
3418c370:	68bb      	ldr	r3, [r7, #8]
3418c372:	fbb2 f3f3 	udiv	r3, r2, r3
3418c376:	60fb      	str	r3, [r7, #12]
            break;
3418c378:	e012      	b.n	3418c3a0 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c37a:	f7fe fbb1 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418c37e:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3418c380:	68fa      	ldr	r2, [r7, #12]
3418c382:	68bb      	ldr	r3, [r7, #8]
3418c384:	fbb2 f3f3 	udiv	r3, r2, r3
3418c388:	60fb      	str	r3, [r7, #12]
            break;
3418c38a:	e009      	b.n	3418c3a0 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c38c:	f7fe fbee 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418c390:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3418c392:	68fa      	ldr	r2, [r7, #12]
3418c394:	68bb      	ldr	r3, [r7, #8]
3418c396:	fbb2 f3f3 	udiv	r3, r2, r3
3418c39a:	60fb      	str	r3, [r7, #12]
            break;
3418c39c:	e000      	b.n	3418c3a0 <RCCEx_GetLPTIMCLKFreq+0x288>
            break;
3418c39e:	bf00      	nop
      break;
3418c3a0:	e059      	b.n	3418c456 <RCCEx_GetLPTIMCLKFreq+0x33e>
      if (LL_RCC_LSE_IsReady() != 0U)
3418c3a2:	f7fa f8d9 	bl	34186558 <LL_RCC_LSE_IsReady>
3418c3a6:	4603      	mov	r3, r0
3418c3a8:	2b00      	cmp	r3, #0
3418c3aa:	d056      	beq.n	3418c45a <RCCEx_GetLPTIMCLKFreq+0x342>
        lptim_frequency = LSE_VALUE;
3418c3ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418c3b0:	60fb      	str	r3, [r7, #12]
      break;
3418c3b2:	e052      	b.n	3418c45a <RCCEx_GetLPTIMCLKFreq+0x342>
3418c3b4:	0705182c 	.word	0x0705182c
3418c3b8:	0705142c 	.word	0x0705142c
3418c3bc:	0705102c 	.word	0x0705102c
3418c3c0:	07050c2c 	.word	0x07050c2c
3418c3c4:	0705082c 	.word	0x0705082c
3418c3c8:	0704182c 	.word	0x0704182c
3418c3cc:	0704142c 	.word	0x0704142c
3418c3d0:	0704102c 	.word	0x0704102c
3418c3d4:	07040c2c 	.word	0x07040c2c
3418c3d8:	0704082c 	.word	0x0704082c
3418c3dc:	0703182c 	.word	0x0703182c
3418c3e0:	0703142c 	.word	0x0703142c
3418c3e4:	0703102c 	.word	0x0703102c
3418c3e8:	07030c2c 	.word	0x07030c2c
3418c3ec:	0703082c 	.word	0x0703082c
3418c3f0:	0702182c 	.word	0x0702182c
3418c3f4:	0702142c 	.word	0x0702142c
3418c3f8:	0702102c 	.word	0x0702102c
3418c3fc:	07020c2c 	.word	0x07020c2c
3418c400:	0702082c 	.word	0x0702082c
3418c404:	0701182c 	.word	0x0701182c
3418c408:	0701142c 	.word	0x0701142c
3418c40c:	0701102c 	.word	0x0701102c
3418c410:	07010c2c 	.word	0x07010c2c
3418c414:	0701082c 	.word	0x0701082c
3418c418:	0700182c 	.word	0x0700182c
3418c41c:	0700142c 	.word	0x0700142c
3418c420:	0700102c 	.word	0x0700102c
3418c424:	0700082c 	.word	0x0700082c
3418c428:	07000c2c 	.word	0x07000c2c
      if (LL_RCC_LSI_IsReady() != 0U)
3418c42c:	f7fa f8a6 	bl	3418657c <LL_RCC_LSI_IsReady>
3418c430:	4603      	mov	r3, r0
3418c432:	2b00      	cmp	r3, #0
3418c434:	d013      	beq.n	3418c45e <RCCEx_GetLPTIMCLKFreq+0x346>
        lptim_frequency = LSI_VALUE;
3418c436:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
3418c43a:	60fb      	str	r3, [r7, #12]
      break;
3418c43c:	e00f      	b.n	3418c45e <RCCEx_GetLPTIMCLKFreq+0x346>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3418c43e:	f7f9 fc35 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418c442:	4604      	mov	r4, r0
3418c444:	f7fa fcb0 	bl	34186da8 <LL_RCC_GetTIMPrescaler>
3418c448:	4603      	mov	r3, r0
3418c44a:	fa24 f303 	lsr.w	r3, r4, r3
3418c44e:	60fb      	str	r3, [r7, #12]
      break;
3418c450:	e006      	b.n	3418c460 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418c452:	bf00      	nop
3418c454:	e004      	b.n	3418c460 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418c456:	bf00      	nop
3418c458:	e002      	b.n	3418c460 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418c45a:	bf00      	nop
3418c45c:	e000      	b.n	3418c460 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418c45e:	bf00      	nop
  }

  return lptim_frequency;
3418c460:	68fb      	ldr	r3, [r7, #12]
}
3418c462:	4618      	mov	r0, r3
3418c464:	3714      	adds	r7, #20
3418c466:	46bd      	mov	sp, r7
3418c468:	bd90      	pop	{r4, r7, pc}
3418c46a:	bf00      	nop

3418c46c <RCCEx_GetLPUARTCLKFreq>:
  *         @arg @ref RCCEx_LPUART1_Clock_Source
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPUARTCLKFreq(uint32_t LPUARTxSource)
{
3418c46c:	b580      	push	{r7, lr}
3418c46e:	b084      	sub	sp, #16
3418c470:	af00      	add	r7, sp, #0
3418c472:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418c474:	2300      	movs	r3, #0
3418c476:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
3418c478:	6878      	ldr	r0, [r7, #4]
3418c47a:	f7fa fb97 	bl	34186bac <LL_RCC_GetLPUARTClockSource>
3418c47e:	4603      	mov	r3, r0
3418c480:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3418c484:	f000 80c0 	beq.w	3418c608 <RCCEx_GetLPUARTCLKFreq+0x19c>
3418c488:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3418c48c:	f200 80db 	bhi.w	3418c646 <RCCEx_GetLPUARTCLKFreq+0x1da>
3418c490:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3418c494:	f000 80c6 	beq.w	3418c624 <RCCEx_GetLPUARTCLKFreq+0x1b8>
3418c498:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3418c49c:	f200 80d3 	bhi.w	3418c646 <RCCEx_GetLPUARTCLKFreq+0x1da>
3418c4a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3418c4a4:	f000 80c6 	beq.w	3418c634 <RCCEx_GetLPUARTCLKFreq+0x1c8>
3418c4a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3418c4ac:	f200 80cb 	bhi.w	3418c646 <RCCEx_GetLPUARTCLKFreq+0x1da>
3418c4b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418c4b4:	d065      	beq.n	3418c582 <RCCEx_GetLPUARTCLKFreq+0x116>
3418c4b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418c4ba:	f200 80c4 	bhi.w	3418c646 <RCCEx_GetLPUARTCLKFreq+0x1da>
3418c4be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418c4c2:	d01a      	beq.n	3418c4fa <RCCEx_GetLPUARTCLKFreq+0x8e>
3418c4c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418c4c8:	f200 80bd 	bhi.w	3418c646 <RCCEx_GetLPUARTCLKFreq+0x1da>
3418c4cc:	2b00      	cmp	r3, #0
3418c4ce:	d003      	beq.n	3418c4d8 <RCCEx_GetLPUARTCLKFreq+0x6c>
3418c4d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418c4d4:	d00c      	beq.n	3418c4f0 <RCCEx_GetLPUARTCLKFreq+0x84>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418c4d6:	e0b6      	b.n	3418c646 <RCCEx_GetLPUARTCLKFreq+0x1da>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418c4d8:	f7f9 fbe8 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418c4dc:	4603      	mov	r3, r0
3418c4de:	4618      	mov	r0, r3
3418c4e0:	f7fe fb8a 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418c4e4:	4603      	mov	r3, r0
3418c4e6:	4618      	mov	r0, r3
3418c4e8:	f7fe fbb8 	bl	3418ac5c <RCCEx_GetPCLK4Freq>
3418c4ec:	60f8      	str	r0, [r7, #12]
      break;
3418c4ee:	e0b5      	b.n	3418c65c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      lpuart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418c4f0:	2007      	movs	r0, #7
3418c4f2:	f7fe fe6d 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418c4f6:	60f8      	str	r0, [r7, #12]
      break;
3418c4f8:	e0b0      	b.n	3418c65c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418c4fa:	f7fb f811 	bl	34187520 <LL_RCC_IC9_IsEnabled>
3418c4fe:	4603      	mov	r3, r0
3418c500:	2b00      	cmp	r3, #0
3418c502:	f000 80a2 	beq.w	3418c64a <RCCEx_GetLPUARTCLKFreq+0x1de>
        ic_divider = LL_RCC_IC9_GetDivider();
3418c506:	f7fb f82d 	bl	34187564 <LL_RCC_IC9_GetDivider>
3418c50a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418c50c:	f7fb f81c 	bl	34187548 <LL_RCC_IC9_GetSource>
3418c510:	4603      	mov	r3, r0
3418c512:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c516:	d029      	beq.n	3418c56c <RCCEx_GetLPUARTCLKFreq+0x100>
3418c518:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c51c:	d82f      	bhi.n	3418c57e <RCCEx_GetLPUARTCLKFreq+0x112>
3418c51e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c522:	d01a      	beq.n	3418c55a <RCCEx_GetLPUARTCLKFreq+0xee>
3418c524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c528:	d829      	bhi.n	3418c57e <RCCEx_GetLPUARTCLKFreq+0x112>
3418c52a:	2b00      	cmp	r3, #0
3418c52c:	d003      	beq.n	3418c536 <RCCEx_GetLPUARTCLKFreq+0xca>
3418c52e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c532:	d009      	beq.n	3418c548 <RCCEx_GetLPUARTCLKFreq+0xdc>
            break;
3418c534:	e023      	b.n	3418c57e <RCCEx_GetLPUARTCLKFreq+0x112>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c536:	f7fe fa47 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418c53a:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418c53c:	68fa      	ldr	r2, [r7, #12]
3418c53e:	68bb      	ldr	r3, [r7, #8]
3418c540:	fbb2 f3f3 	udiv	r3, r2, r3
3418c544:	60fb      	str	r3, [r7, #12]
            break;
3418c546:	e01b      	b.n	3418c580 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c548:	f7fe fa84 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418c54c:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418c54e:	68fa      	ldr	r2, [r7, #12]
3418c550:	68bb      	ldr	r3, [r7, #8]
3418c552:	fbb2 f3f3 	udiv	r3, r2, r3
3418c556:	60fb      	str	r3, [r7, #12]
            break;
3418c558:	e012      	b.n	3418c580 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c55a:	f7fe fac1 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418c55e:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418c560:	68fa      	ldr	r2, [r7, #12]
3418c562:	68bb      	ldr	r3, [r7, #8]
3418c564:	fbb2 f3f3 	udiv	r3, r2, r3
3418c568:	60fb      	str	r3, [r7, #12]
            break;
3418c56a:	e009      	b.n	3418c580 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c56c:	f7fe fafe 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418c570:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418c572:	68fa      	ldr	r2, [r7, #12]
3418c574:	68bb      	ldr	r3, [r7, #8]
3418c576:	fbb2 f3f3 	udiv	r3, r2, r3
3418c57a:	60fb      	str	r3, [r7, #12]
            break;
3418c57c:	e000      	b.n	3418c580 <RCCEx_GetLPUARTCLKFreq+0x114>
            break;
3418c57e:	bf00      	nop
      break;
3418c580:	e063      	b.n	3418c64a <RCCEx_GetLPUARTCLKFreq+0x1de>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418c582:	f7fb f8cd 	bl	34187720 <LL_RCC_IC14_IsEnabled>
3418c586:	4603      	mov	r3, r0
3418c588:	2b00      	cmp	r3, #0
3418c58a:	d060      	beq.n	3418c64e <RCCEx_GetLPUARTCLKFreq+0x1e2>
        ic_divider = LL_RCC_IC14_GetDivider();
3418c58c:	f7fb f8ea 	bl	34187764 <LL_RCC_IC14_GetDivider>
3418c590:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418c592:	f7fb f8d9 	bl	34187748 <LL_RCC_IC14_GetSource>
3418c596:	4603      	mov	r3, r0
3418c598:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c59c:	d029      	beq.n	3418c5f2 <RCCEx_GetLPUARTCLKFreq+0x186>
3418c59e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c5a2:	d82f      	bhi.n	3418c604 <RCCEx_GetLPUARTCLKFreq+0x198>
3418c5a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c5a8:	d01a      	beq.n	3418c5e0 <RCCEx_GetLPUARTCLKFreq+0x174>
3418c5aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c5ae:	d829      	bhi.n	3418c604 <RCCEx_GetLPUARTCLKFreq+0x198>
3418c5b0:	2b00      	cmp	r3, #0
3418c5b2:	d003      	beq.n	3418c5bc <RCCEx_GetLPUARTCLKFreq+0x150>
3418c5b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c5b8:	d009      	beq.n	3418c5ce <RCCEx_GetLPUARTCLKFreq+0x162>
            break;
3418c5ba:	e023      	b.n	3418c604 <RCCEx_GetLPUARTCLKFreq+0x198>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c5bc:	f7fe fa04 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418c5c0:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418c5c2:	68fa      	ldr	r2, [r7, #12]
3418c5c4:	68bb      	ldr	r3, [r7, #8]
3418c5c6:	fbb2 f3f3 	udiv	r3, r2, r3
3418c5ca:	60fb      	str	r3, [r7, #12]
            break;
3418c5cc:	e01b      	b.n	3418c606 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c5ce:	f7fe fa41 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418c5d2:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418c5d4:	68fa      	ldr	r2, [r7, #12]
3418c5d6:	68bb      	ldr	r3, [r7, #8]
3418c5d8:	fbb2 f3f3 	udiv	r3, r2, r3
3418c5dc:	60fb      	str	r3, [r7, #12]
            break;
3418c5de:	e012      	b.n	3418c606 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c5e0:	f7fe fa7e 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418c5e4:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418c5e6:	68fa      	ldr	r2, [r7, #12]
3418c5e8:	68bb      	ldr	r3, [r7, #8]
3418c5ea:	fbb2 f3f3 	udiv	r3, r2, r3
3418c5ee:	60fb      	str	r3, [r7, #12]
            break;
3418c5f0:	e009      	b.n	3418c606 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c5f2:	f7fe fabb 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418c5f6:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418c5f8:	68fa      	ldr	r2, [r7, #12]
3418c5fa:	68bb      	ldr	r3, [r7, #8]
3418c5fc:	fbb2 f3f3 	udiv	r3, r2, r3
3418c600:	60fb      	str	r3, [r7, #12]
            break;
3418c602:	e000      	b.n	3418c606 <RCCEx_GetLPUARTCLKFreq+0x19a>
            break;
3418c604:	bf00      	nop
      break;
3418c606:	e022      	b.n	3418c64e <RCCEx_GetLPUARTCLKFreq+0x1e2>
      if (LL_RCC_HSI_IsReady() != 0U)
3418c608:	f7f9 ff66 	bl	341864d8 <LL_RCC_HSI_IsReady>
3418c60c:	4603      	mov	r3, r0
3418c60e:	2b00      	cmp	r3, #0
3418c610:	d01f      	beq.n	3418c652 <RCCEx_GetLPUARTCLKFreq+0x1e6>
        lpuart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418c612:	f7f9 ff73 	bl	341864fc <LL_RCC_HSI_GetDivider>
3418c616:	4603      	mov	r3, r0
3418c618:	09db      	lsrs	r3, r3, #7
3418c61a:	4a13      	ldr	r2, [pc, #76]	@ (3418c668 <RCCEx_GetLPUARTCLKFreq+0x1fc>)
3418c61c:	fa22 f303 	lsr.w	r3, r2, r3
3418c620:	60fb      	str	r3, [r7, #12]
      break;
3418c622:	e016      	b.n	3418c652 <RCCEx_GetLPUARTCLKFreq+0x1e6>
      if (LL_RCC_MSI_IsReady() != 0U)
3418c624:	f7f9 ff78 	bl	34186518 <LL_RCC_MSI_IsReady>
3418c628:	4603      	mov	r3, r0
3418c62a:	2b00      	cmp	r3, #0
3418c62c:	d013      	beq.n	3418c656 <RCCEx_GetLPUARTCLKFreq+0x1ea>
        lpuart_frequency = MSI_VALUE;
3418c62e:	4b0f      	ldr	r3, [pc, #60]	@ (3418c66c <RCCEx_GetLPUARTCLKFreq+0x200>)
3418c630:	60fb      	str	r3, [r7, #12]
      break;
3418c632:	e010      	b.n	3418c656 <RCCEx_GetLPUARTCLKFreq+0x1ea>
      if (LL_RCC_LSE_IsReady() != 0U)
3418c634:	f7f9 ff90 	bl	34186558 <LL_RCC_LSE_IsReady>
3418c638:	4603      	mov	r3, r0
3418c63a:	2b00      	cmp	r3, #0
3418c63c:	d00d      	beq.n	3418c65a <RCCEx_GetLPUARTCLKFreq+0x1ee>
        lpuart_frequency = LSE_VALUE;
3418c63e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418c642:	60fb      	str	r3, [r7, #12]
      break;
3418c644:	e009      	b.n	3418c65a <RCCEx_GetLPUARTCLKFreq+0x1ee>
      break;
3418c646:	bf00      	nop
3418c648:	e008      	b.n	3418c65c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418c64a:	bf00      	nop
3418c64c:	e006      	b.n	3418c65c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418c64e:	bf00      	nop
3418c650:	e004      	b.n	3418c65c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418c652:	bf00      	nop
3418c654:	e002      	b.n	3418c65c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418c656:	bf00      	nop
3418c658:	e000      	b.n	3418c65c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418c65a:	bf00      	nop
  }

  return lpuart_frequency;
3418c65c:	68fb      	ldr	r3, [r7, #12]
}
3418c65e:	4618      	mov	r0, r3
3418c660:	3710      	adds	r7, #16
3418c662:	46bd      	mov	sp, r7
3418c664:	bd80      	pop	{r7, pc}
3418c666:	bf00      	nop
3418c668:	03d09000 	.word	0x03d09000
3418c66c:	003d0900 	.word	0x003d0900

3418c670 <RCCEx_GetLTDCCLKFreq>:
  *         @arg @ref RCCEx_LTDC_Clock_Source
  * @retval LTDC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLTDCCLKFreq(uint32_t LTDCxSource)
{
3418c670:	b580      	push	{r7, lr}
3418c672:	b084      	sub	sp, #16
3418c674:	af00      	add	r7, sp, #0
3418c676:	6078      	str	r0, [r7, #4]
  uint32_t ltdc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418c678:	2300      	movs	r3, #0
3418c67a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
3418c67c:	6878      	ldr	r0, [r7, #4]
3418c67e:	f7fa faa7 	bl	34186bd0 <LL_RCC_GetLTDCClockSource>
3418c682:	4603      	mov	r3, r0
3418c684:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3418c688:	d062      	beq.n	3418c750 <RCCEx_GetLTDCCLKFreq+0xe0>
3418c68a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3418c68e:	d86d      	bhi.n	3418c76c <RCCEx_GetLTDCCLKFreq+0xfc>
3418c690:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418c694:	d019      	beq.n	3418c6ca <RCCEx_GetLTDCCLKFreq+0x5a>
3418c696:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418c69a:	d867      	bhi.n	3418c76c <RCCEx_GetLTDCCLKFreq+0xfc>
3418c69c:	2b00      	cmp	r3, #0
3418c69e:	d003      	beq.n	3418c6a8 <RCCEx_GetLTDCCLKFreq+0x38>
3418c6a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418c6a4:	d00c      	beq.n	3418c6c0 <RCCEx_GetLTDCCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418c6a6:	e061      	b.n	3418c76c <RCCEx_GetLTDCCLKFreq+0xfc>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418c6a8:	f7f9 fb00 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418c6ac:	4603      	mov	r3, r0
3418c6ae:	4618      	mov	r0, r3
3418c6b0:	f7fe faa2 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418c6b4:	4603      	mov	r3, r0
3418c6b6:	4618      	mov	r0, r3
3418c6b8:	f7fe fae1 	bl	3418ac7e <RCCEx_GetPCLK5Freq>
3418c6bc:	60f8      	str	r0, [r7, #12]
      break;
3418c6be:	e05a      	b.n	3418c776 <RCCEx_GetLTDCCLKFreq+0x106>
      ltdc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418c6c0:	2007      	movs	r0, #7
3418c6c2:	f7fe fd85 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418c6c6:	60f8      	str	r0, [r7, #12]
      break;
3418c6c8:	e055      	b.n	3418c776 <RCCEx_GetLTDCCLKFreq+0x106>
      if (LL_RCC_IC16_IsEnabled() != 0U)
3418c6ca:	f7fb f8a9 	bl	34187820 <LL_RCC_IC16_IsEnabled>
3418c6ce:	4603      	mov	r3, r0
3418c6d0:	2b00      	cmp	r3, #0
3418c6d2:	d04d      	beq.n	3418c770 <RCCEx_GetLTDCCLKFreq+0x100>
        ic_divider = LL_RCC_IC16_GetDivider();
3418c6d4:	f7fb f8c6 	bl	34187864 <LL_RCC_IC16_GetDivider>
3418c6d8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC16_GetSource())
3418c6da:	f7fb f8b5 	bl	34187848 <LL_RCC_IC16_GetSource>
3418c6de:	4603      	mov	r3, r0
3418c6e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c6e4:	d029      	beq.n	3418c73a <RCCEx_GetLTDCCLKFreq+0xca>
3418c6e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c6ea:	d82f      	bhi.n	3418c74c <RCCEx_GetLTDCCLKFreq+0xdc>
3418c6ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c6f0:	d01a      	beq.n	3418c728 <RCCEx_GetLTDCCLKFreq+0xb8>
3418c6f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c6f6:	d829      	bhi.n	3418c74c <RCCEx_GetLTDCCLKFreq+0xdc>
3418c6f8:	2b00      	cmp	r3, #0
3418c6fa:	d003      	beq.n	3418c704 <RCCEx_GetLTDCCLKFreq+0x94>
3418c6fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c700:	d009      	beq.n	3418c716 <RCCEx_GetLTDCCLKFreq+0xa6>
            break;
3418c702:	e023      	b.n	3418c74c <RCCEx_GetLTDCCLKFreq+0xdc>
            ltdc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c704:	f7fe f960 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418c708:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3418c70a:	68fa      	ldr	r2, [r7, #12]
3418c70c:	68bb      	ldr	r3, [r7, #8]
3418c70e:	fbb2 f3f3 	udiv	r3, r2, r3
3418c712:	60fb      	str	r3, [r7, #12]
            break;
3418c714:	e01b      	b.n	3418c74e <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c716:	f7fe f99d 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418c71a:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3418c71c:	68fa      	ldr	r2, [r7, #12]
3418c71e:	68bb      	ldr	r3, [r7, #8]
3418c720:	fbb2 f3f3 	udiv	r3, r2, r3
3418c724:	60fb      	str	r3, [r7, #12]
            break;
3418c726:	e012      	b.n	3418c74e <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c728:	f7fe f9da 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418c72c:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3418c72e:	68fa      	ldr	r2, [r7, #12]
3418c730:	68bb      	ldr	r3, [r7, #8]
3418c732:	fbb2 f3f3 	udiv	r3, r2, r3
3418c736:	60fb      	str	r3, [r7, #12]
            break;
3418c738:	e009      	b.n	3418c74e <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c73a:	f7fe fa17 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418c73e:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3418c740:	68fa      	ldr	r2, [r7, #12]
3418c742:	68bb      	ldr	r3, [r7, #8]
3418c744:	fbb2 f3f3 	udiv	r3, r2, r3
3418c748:	60fb      	str	r3, [r7, #12]
            break;
3418c74a:	e000      	b.n	3418c74e <RCCEx_GetLTDCCLKFreq+0xde>
            break;
3418c74c:	bf00      	nop
      break;
3418c74e:	e00f      	b.n	3418c770 <RCCEx_GetLTDCCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
3418c750:	f7f9 fec2 	bl	341864d8 <LL_RCC_HSI_IsReady>
3418c754:	4603      	mov	r3, r0
3418c756:	2b00      	cmp	r3, #0
3418c758:	d00c      	beq.n	3418c774 <RCCEx_GetLTDCCLKFreq+0x104>
        ltdc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418c75a:	f7f9 fecf 	bl	341864fc <LL_RCC_HSI_GetDivider>
3418c75e:	4603      	mov	r3, r0
3418c760:	09db      	lsrs	r3, r3, #7
3418c762:	4a07      	ldr	r2, [pc, #28]	@ (3418c780 <RCCEx_GetLTDCCLKFreq+0x110>)
3418c764:	fa22 f303 	lsr.w	r3, r2, r3
3418c768:	60fb      	str	r3, [r7, #12]
      break;
3418c76a:	e003      	b.n	3418c774 <RCCEx_GetLTDCCLKFreq+0x104>
      break;
3418c76c:	bf00      	nop
3418c76e:	e002      	b.n	3418c776 <RCCEx_GetLTDCCLKFreq+0x106>
      break;
3418c770:	bf00      	nop
3418c772:	e000      	b.n	3418c776 <RCCEx_GetLTDCCLKFreq+0x106>
      break;
3418c774:	bf00      	nop
  }

  return ltdc_frequency;
3418c776:	68fb      	ldr	r3, [r7, #12]
}
3418c778:	4618      	mov	r0, r3
3418c77a:	3710      	adds	r7, #16
3418c77c:	46bd      	mov	sp, r7
3418c77e:	bd80      	pop	{r7, pc}
3418c780:	03d09000 	.word	0x03d09000

3418c784 <RCCEx_GetMDFCLKFreq>:
  *         @arg @ref RCCEx_MDF1_Clock_Source
  * @retval MDF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetMDFCLKFreq(uint32_t MDFxSource)
{
3418c784:	b590      	push	{r4, r7, lr}
3418c786:	b085      	sub	sp, #20
3418c788:	af00      	add	r7, sp, #0
3418c78a:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
3418c78c:	2300      	movs	r3, #0
3418c78e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetMDFClockSource(MDFxSource))
3418c790:	6878      	ldr	r0, [r7, #4]
3418c792:	f7fa fa2f 	bl	34186bf4 <LL_RCC_GetMDFClockSource>
3418c796:	4603      	mov	r3, r0
3418c798:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3418c79c:	f000 80dd 	beq.w	3418c95a <RCCEx_GetMDFCLKFreq+0x1d6>
3418c7a0:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3418c7a4:	f200 80e3 	bhi.w	3418c96e <RCCEx_GetMDFCLKFreq+0x1ea>
3418c7a8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3418c7ac:	f000 80d2 	beq.w	3418c954 <RCCEx_GetMDFCLKFreq+0x1d0>
3418c7b0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3418c7b4:	f200 80db 	bhi.w	3418c96e <RCCEx_GetMDFCLKFreq+0x1ea>
3418c7b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3418c7bc:	f000 80b4 	beq.w	3418c928 <RCCEx_GetMDFCLKFreq+0x1a4>
3418c7c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3418c7c4:	f200 80d3 	bhi.w	3418c96e <RCCEx_GetMDFCLKFreq+0x1ea>
3418c7c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3418c7cc:	f000 80ba 	beq.w	3418c944 <RCCEx_GetMDFCLKFreq+0x1c0>
3418c7d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3418c7d4:	f200 80cb 	bhi.w	3418c96e <RCCEx_GetMDFCLKFreq+0x1ea>
3418c7d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418c7dc:	d061      	beq.n	3418c8a2 <RCCEx_GetMDFCLKFreq+0x11e>
3418c7de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418c7e2:	f200 80c4 	bhi.w	3418c96e <RCCEx_GetMDFCLKFreq+0x1ea>
3418c7e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418c7ea:	d016      	beq.n	3418c81a <RCCEx_GetMDFCLKFreq+0x96>
3418c7ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418c7f0:	f200 80bd 	bhi.w	3418c96e <RCCEx_GetMDFCLKFreq+0x1ea>
3418c7f4:	2b00      	cmp	r3, #0
3418c7f6:	d003      	beq.n	3418c800 <RCCEx_GetMDFCLKFreq+0x7c>
3418c7f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418c7fc:	d008      	beq.n	3418c810 <RCCEx_GetMDFCLKFreq+0x8c>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
3418c7fe:	e0b6      	b.n	3418c96e <RCCEx_GetMDFCLKFreq+0x1ea>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418c800:	f7f9 fa54 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418c804:	4603      	mov	r3, r0
3418c806:	4618      	mov	r0, r3
3418c808:	f7fe f9f6 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418c80c:	60f8      	str	r0, [r7, #12]
      break;
3418c80e:	e0b7      	b.n	3418c980 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418c810:	2007      	movs	r0, #7
3418c812:	f7fe fcdd 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418c816:	60f8      	str	r0, [r7, #12]
      break;
3418c818:	e0b2      	b.n	3418c980 <RCCEx_GetMDFCLKFreq+0x1fc>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418c81a:	f7fa fe01 	bl	34187420 <LL_RCC_IC7_IsEnabled>
3418c81e:	4603      	mov	r3, r0
3418c820:	2b00      	cmp	r3, #0
3418c822:	f000 80a6 	beq.w	3418c972 <RCCEx_GetMDFCLKFreq+0x1ee>
        ic_divider = LL_RCC_IC7_GetDivider();
3418c826:	f7fa fe1d 	bl	34187464 <LL_RCC_IC7_GetDivider>
3418c82a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418c82c:	f7fa fe0c 	bl	34187448 <LL_RCC_IC7_GetSource>
3418c830:	4603      	mov	r3, r0
3418c832:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c836:	d029      	beq.n	3418c88c <RCCEx_GetMDFCLKFreq+0x108>
3418c838:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c83c:	d82f      	bhi.n	3418c89e <RCCEx_GetMDFCLKFreq+0x11a>
3418c83e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c842:	d01a      	beq.n	3418c87a <RCCEx_GetMDFCLKFreq+0xf6>
3418c844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c848:	d829      	bhi.n	3418c89e <RCCEx_GetMDFCLKFreq+0x11a>
3418c84a:	2b00      	cmp	r3, #0
3418c84c:	d003      	beq.n	3418c856 <RCCEx_GetMDFCLKFreq+0xd2>
3418c84e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c852:	d009      	beq.n	3418c868 <RCCEx_GetMDFCLKFreq+0xe4>
            break;
3418c854:	e023      	b.n	3418c89e <RCCEx_GetMDFCLKFreq+0x11a>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c856:	f7fe f8b7 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418c85a:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418c85c:	68fa      	ldr	r2, [r7, #12]
3418c85e:	68bb      	ldr	r3, [r7, #8]
3418c860:	fbb2 f3f3 	udiv	r3, r2, r3
3418c864:	60fb      	str	r3, [r7, #12]
            break;
3418c866:	e01b      	b.n	3418c8a0 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c868:	f7fe f8f4 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418c86c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418c86e:	68fa      	ldr	r2, [r7, #12]
3418c870:	68bb      	ldr	r3, [r7, #8]
3418c872:	fbb2 f3f3 	udiv	r3, r2, r3
3418c876:	60fb      	str	r3, [r7, #12]
            break;
3418c878:	e012      	b.n	3418c8a0 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c87a:	f7fe f931 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418c87e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418c880:	68fa      	ldr	r2, [r7, #12]
3418c882:	68bb      	ldr	r3, [r7, #8]
3418c884:	fbb2 f3f3 	udiv	r3, r2, r3
3418c888:	60fb      	str	r3, [r7, #12]
            break;
3418c88a:	e009      	b.n	3418c8a0 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c88c:	f7fe f96e 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418c890:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418c892:	68fa      	ldr	r2, [r7, #12]
3418c894:	68bb      	ldr	r3, [r7, #8]
3418c896:	fbb2 f3f3 	udiv	r3, r2, r3
3418c89a:	60fb      	str	r3, [r7, #12]
            break;
3418c89c:	e000      	b.n	3418c8a0 <RCCEx_GetMDFCLKFreq+0x11c>
            break;
3418c89e:	bf00      	nop
      break;
3418c8a0:	e067      	b.n	3418c972 <RCCEx_GetMDFCLKFreq+0x1ee>
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418c8a2:	f7fa fdfd 	bl	341874a0 <LL_RCC_IC8_IsEnabled>
3418c8a6:	4603      	mov	r3, r0
3418c8a8:	2b00      	cmp	r3, #0
3418c8aa:	d064      	beq.n	3418c976 <RCCEx_GetMDFCLKFreq+0x1f2>
        ic_divider = LL_RCC_IC8_GetDivider();
3418c8ac:	f7fa fe1a 	bl	341874e4 <LL_RCC_IC8_GetDivider>
3418c8b0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418c8b2:	f7fa fe09 	bl	341874c8 <LL_RCC_IC8_GetSource>
3418c8b6:	4603      	mov	r3, r0
3418c8b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c8bc:	d029      	beq.n	3418c912 <RCCEx_GetMDFCLKFreq+0x18e>
3418c8be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c8c2:	d82f      	bhi.n	3418c924 <RCCEx_GetMDFCLKFreq+0x1a0>
3418c8c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c8c8:	d01a      	beq.n	3418c900 <RCCEx_GetMDFCLKFreq+0x17c>
3418c8ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c8ce:	d829      	bhi.n	3418c924 <RCCEx_GetMDFCLKFreq+0x1a0>
3418c8d0:	2b00      	cmp	r3, #0
3418c8d2:	d003      	beq.n	3418c8dc <RCCEx_GetMDFCLKFreq+0x158>
3418c8d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c8d8:	d009      	beq.n	3418c8ee <RCCEx_GetMDFCLKFreq+0x16a>
            break;
3418c8da:	e023      	b.n	3418c924 <RCCEx_GetMDFCLKFreq+0x1a0>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c8dc:	f7fe f874 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418c8e0:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418c8e2:	68fa      	ldr	r2, [r7, #12]
3418c8e4:	68bb      	ldr	r3, [r7, #8]
3418c8e6:	fbb2 f3f3 	udiv	r3, r2, r3
3418c8ea:	60fb      	str	r3, [r7, #12]
            break;
3418c8ec:	e01b      	b.n	3418c926 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c8ee:	f7fe f8b1 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418c8f2:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418c8f4:	68fa      	ldr	r2, [r7, #12]
3418c8f6:	68bb      	ldr	r3, [r7, #8]
3418c8f8:	fbb2 f3f3 	udiv	r3, r2, r3
3418c8fc:	60fb      	str	r3, [r7, #12]
            break;
3418c8fe:	e012      	b.n	3418c926 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c900:	f7fe f8ee 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418c904:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418c906:	68fa      	ldr	r2, [r7, #12]
3418c908:	68bb      	ldr	r3, [r7, #8]
3418c90a:	fbb2 f3f3 	udiv	r3, r2, r3
3418c90e:	60fb      	str	r3, [r7, #12]
            break;
3418c910:	e009      	b.n	3418c926 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c912:	f7fe f92b 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418c916:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418c918:	68fa      	ldr	r2, [r7, #12]
3418c91a:	68bb      	ldr	r3, [r7, #8]
3418c91c:	fbb2 f3f3 	udiv	r3, r2, r3
3418c920:	60fb      	str	r3, [r7, #12]
            break;
3418c922:	e000      	b.n	3418c926 <RCCEx_GetMDFCLKFreq+0x1a2>
            break;
3418c924:	bf00      	nop
      break;
3418c926:	e026      	b.n	3418c976 <RCCEx_GetMDFCLKFreq+0x1f2>
      if (LL_RCC_HSI_IsReady() != 0U)
3418c928:	f7f9 fdd6 	bl	341864d8 <LL_RCC_HSI_IsReady>
3418c92c:	4603      	mov	r3, r0
3418c92e:	2b00      	cmp	r3, #0
3418c930:	d023      	beq.n	3418c97a <RCCEx_GetMDFCLKFreq+0x1f6>
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418c932:	f7f9 fde3 	bl	341864fc <LL_RCC_HSI_GetDivider>
3418c936:	4603      	mov	r3, r0
3418c938:	09db      	lsrs	r3, r3, #7
3418c93a:	4a14      	ldr	r2, [pc, #80]	@ (3418c98c <RCCEx_GetMDFCLKFreq+0x208>)
3418c93c:	fa22 f303 	lsr.w	r3, r2, r3
3418c940:	60fb      	str	r3, [r7, #12]
      break;
3418c942:	e01a      	b.n	3418c97a <RCCEx_GetMDFCLKFreq+0x1f6>
      if (LL_RCC_MSI_IsReady() != 0U)
3418c944:	f7f9 fde8 	bl	34186518 <LL_RCC_MSI_IsReady>
3418c948:	4603      	mov	r3, r0
3418c94a:	2b00      	cmp	r3, #0
3418c94c:	d017      	beq.n	3418c97e <RCCEx_GetMDFCLKFreq+0x1fa>
        adf_frequency = MSI_VALUE;
3418c94e:	4b10      	ldr	r3, [pc, #64]	@ (3418c990 <RCCEx_GetMDFCLKFreq+0x20c>)
3418c950:	60fb      	str	r3, [r7, #12]
      break;
3418c952:	e014      	b.n	3418c97e <RCCEx_GetMDFCLKFreq+0x1fa>
      adf_frequency = EXTERNAL_CLOCK_VALUE;
3418c954:	4b0f      	ldr	r3, [pc, #60]	@ (3418c994 <RCCEx_GetMDFCLKFreq+0x210>)
3418c956:	60fb      	str	r3, [r7, #12]
      break;
3418c958:	e012      	b.n	3418c980 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3418c95a:	f7f9 f9a7 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418c95e:	4604      	mov	r4, r0
3418c960:	f7fa fa22 	bl	34186da8 <LL_RCC_GetTIMPrescaler>
3418c964:	4603      	mov	r3, r0
3418c966:	fa24 f303 	lsr.w	r3, r4, r3
3418c96a:	60fb      	str	r3, [r7, #12]
      break;
3418c96c:	e008      	b.n	3418c980 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418c96e:	bf00      	nop
3418c970:	e006      	b.n	3418c980 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418c972:	bf00      	nop
3418c974:	e004      	b.n	3418c980 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418c976:	bf00      	nop
3418c978:	e002      	b.n	3418c980 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418c97a:	bf00      	nop
3418c97c:	e000      	b.n	3418c980 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418c97e:	bf00      	nop
  }

  return adf_frequency;
3418c980:	68fb      	ldr	r3, [r7, #12]
}
3418c982:	4618      	mov	r0, r3
3418c984:	3714      	adds	r7, #20
3418c986:	46bd      	mov	sp, r7
3418c988:	bd90      	pop	{r4, r7, pc}
3418c98a:	bf00      	nop
3418c98c:	03d09000 	.word	0x03d09000
3418c990:	003d0900 	.word	0x003d0900
3418c994:	00bb8000 	.word	0x00bb8000

3418c998 <RCCEx_GetPSSICLKFreq>:
  *         @arg @ref RCCEx_PSSI_Clock_Source
  * @retval PSSI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetPSSICLKFreq(uint32_t PSSIxSource)
{
3418c998:	b580      	push	{r7, lr}
3418c99a:	b084      	sub	sp, #16
3418c99c:	af00      	add	r7, sp, #0
3418c99e:	6078      	str	r0, [r7, #4]
  uint32_t pssi_frequency = RCC_PERIPH_FREQUENCY_NO;
3418c9a0:	2300      	movs	r3, #0
3418c9a2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
3418c9a4:	6878      	ldr	r0, [r7, #4]
3418c9a6:	f7fa f937 	bl	34186c18 <LL_RCC_GetPSSIClockSource>
3418c9aa:	4603      	mov	r3, r0
3418c9ac:	2b30      	cmp	r3, #48	@ 0x30
3418c9ae:	d05a      	beq.n	3418ca66 <RCCEx_GetPSSICLKFreq+0xce>
3418c9b0:	2b30      	cmp	r3, #48	@ 0x30
3418c9b2:	d866      	bhi.n	3418ca82 <RCCEx_GetPSSICLKFreq+0xea>
3418c9b4:	2b20      	cmp	r3, #32
3418c9b6:	d013      	beq.n	3418c9e0 <RCCEx_GetPSSICLKFreq+0x48>
3418c9b8:	2b20      	cmp	r3, #32
3418c9ba:	d862      	bhi.n	3418ca82 <RCCEx_GetPSSICLKFreq+0xea>
3418c9bc:	2b00      	cmp	r3, #0
3418c9be:	d002      	beq.n	3418c9c6 <RCCEx_GetPSSICLKFreq+0x2e>
3418c9c0:	2b10      	cmp	r3, #16
3418c9c2:	d008      	beq.n	3418c9d6 <RCCEx_GetPSSICLKFreq+0x3e>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418c9c4:	e05d      	b.n	3418ca82 <RCCEx_GetPSSICLKFreq+0xea>
      pssi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418c9c6:	f7f9 f971 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418c9ca:	4603      	mov	r3, r0
3418c9cc:	4618      	mov	r0, r3
3418c9ce:	f7fe f913 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418c9d2:	60f8      	str	r0, [r7, #12]
      break;
3418c9d4:	e05a      	b.n	3418ca8c <RCCEx_GetPSSICLKFreq+0xf4>
      pssi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418c9d6:	2007      	movs	r0, #7
3418c9d8:	f7fe fbfa 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418c9dc:	60f8      	str	r0, [r7, #12]
      break;
3418c9de:	e055      	b.n	3418ca8c <RCCEx_GetPSSICLKFreq+0xf4>
      if (LL_RCC_IC20_IsEnabled() != 0U)
3418c9e0:	f7fb f81e 	bl	34187a20 <LL_RCC_IC20_IsEnabled>
3418c9e4:	4603      	mov	r3, r0
3418c9e6:	2b00      	cmp	r3, #0
3418c9e8:	d04d      	beq.n	3418ca86 <RCCEx_GetPSSICLKFreq+0xee>
        ic_divider = LL_RCC_IC20_GetDivider();
3418c9ea:	f7fb f83b 	bl	34187a64 <LL_RCC_IC20_GetDivider>
3418c9ee:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC20_GetSource())
3418c9f0:	f7fb f82a 	bl	34187a48 <LL_RCC_IC20_GetSource>
3418c9f4:	4603      	mov	r3, r0
3418c9f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c9fa:	d029      	beq.n	3418ca50 <RCCEx_GetPSSICLKFreq+0xb8>
3418c9fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ca00:	d82f      	bhi.n	3418ca62 <RCCEx_GetPSSICLKFreq+0xca>
3418ca02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ca06:	d01a      	beq.n	3418ca3e <RCCEx_GetPSSICLKFreq+0xa6>
3418ca08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ca0c:	d829      	bhi.n	3418ca62 <RCCEx_GetPSSICLKFreq+0xca>
3418ca0e:	2b00      	cmp	r3, #0
3418ca10:	d003      	beq.n	3418ca1a <RCCEx_GetPSSICLKFreq+0x82>
3418ca12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418ca16:	d009      	beq.n	3418ca2c <RCCEx_GetPSSICLKFreq+0x94>
            break;
3418ca18:	e023      	b.n	3418ca62 <RCCEx_GetPSSICLKFreq+0xca>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418ca1a:	f7fd ffd5 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418ca1e:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3418ca20:	68fa      	ldr	r2, [r7, #12]
3418ca22:	68bb      	ldr	r3, [r7, #8]
3418ca24:	fbb2 f3f3 	udiv	r3, r2, r3
3418ca28:	60fb      	str	r3, [r7, #12]
            break;
3418ca2a:	e01b      	b.n	3418ca64 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418ca2c:	f7fe f812 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418ca30:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3418ca32:	68fa      	ldr	r2, [r7, #12]
3418ca34:	68bb      	ldr	r3, [r7, #8]
3418ca36:	fbb2 f3f3 	udiv	r3, r2, r3
3418ca3a:	60fb      	str	r3, [r7, #12]
            break;
3418ca3c:	e012      	b.n	3418ca64 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418ca3e:	f7fe f84f 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418ca42:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3418ca44:	68fa      	ldr	r2, [r7, #12]
3418ca46:	68bb      	ldr	r3, [r7, #8]
3418ca48:	fbb2 f3f3 	udiv	r3, r2, r3
3418ca4c:	60fb      	str	r3, [r7, #12]
            break;
3418ca4e:	e009      	b.n	3418ca64 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418ca50:	f7fe f88c 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418ca54:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3418ca56:	68fa      	ldr	r2, [r7, #12]
3418ca58:	68bb      	ldr	r3, [r7, #8]
3418ca5a:	fbb2 f3f3 	udiv	r3, r2, r3
3418ca5e:	60fb      	str	r3, [r7, #12]
            break;
3418ca60:	e000      	b.n	3418ca64 <RCCEx_GetPSSICLKFreq+0xcc>
            break;
3418ca62:	bf00      	nop
      break;
3418ca64:	e00f      	b.n	3418ca86 <RCCEx_GetPSSICLKFreq+0xee>
      if (LL_RCC_HSI_IsReady() != 0U)
3418ca66:	f7f9 fd37 	bl	341864d8 <LL_RCC_HSI_IsReady>
3418ca6a:	4603      	mov	r3, r0
3418ca6c:	2b00      	cmp	r3, #0
3418ca6e:	d00c      	beq.n	3418ca8a <RCCEx_GetPSSICLKFreq+0xf2>
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418ca70:	f7f9 fd44 	bl	341864fc <LL_RCC_HSI_GetDivider>
3418ca74:	4603      	mov	r3, r0
3418ca76:	09db      	lsrs	r3, r3, #7
3418ca78:	4a07      	ldr	r2, [pc, #28]	@ (3418ca98 <RCCEx_GetPSSICLKFreq+0x100>)
3418ca7a:	fa22 f303 	lsr.w	r3, r2, r3
3418ca7e:	60fb      	str	r3, [r7, #12]
      break;
3418ca80:	e003      	b.n	3418ca8a <RCCEx_GetPSSICLKFreq+0xf2>
      break;
3418ca82:	bf00      	nop
3418ca84:	e002      	b.n	3418ca8c <RCCEx_GetPSSICLKFreq+0xf4>
      break;
3418ca86:	bf00      	nop
3418ca88:	e000      	b.n	3418ca8c <RCCEx_GetPSSICLKFreq+0xf4>
      break;
3418ca8a:	bf00      	nop
  }

  return pssi_frequency;
3418ca8c:	68fb      	ldr	r3, [r7, #12]
}
3418ca8e:	4618      	mov	r0, r3
3418ca90:	3710      	adds	r7, #16
3418ca92:	46bd      	mov	sp, r7
3418ca94:	bd80      	pop	{r7, pc}
3418ca96:	bf00      	nop
3418ca98:	03d09000 	.word	0x03d09000

3418ca9c <RCCEx_GetRTCCLKFreq>:
  * @brief  Return RTC clock frequency
  * @retval RTC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetRTCCLKFreq()
{
3418ca9c:	b580      	push	{r7, lr}
3418ca9e:	b082      	sub	sp, #8
3418caa0:	af00      	add	r7, sp, #0
  uint32_t rtc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418caa2:	2300      	movs	r3, #0
3418caa4:	607b      	str	r3, [r7, #4]

  switch (LL_RCC_GetRTCClockSource())
3418caa6:	f7fa f945 	bl	34186d34 <LL_RCC_GetRTCClockSource>
3418caaa:	4603      	mov	r3, r0
3418caac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418cab0:	d020      	beq.n	3418caf4 <RCCEx_GetRTCCLKFreq+0x58>
3418cab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418cab6:	d830      	bhi.n	3418cb1a <RCCEx_GetRTCCLKFreq+0x7e>
3418cab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418cabc:	d011      	beq.n	3418cae2 <RCCEx_GetRTCCLKFreq+0x46>
3418cabe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418cac2:	d82a      	bhi.n	3418cb1a <RCCEx_GetRTCCLKFreq+0x7e>
3418cac4:	2b00      	cmp	r3, #0
3418cac6:	d02a      	beq.n	3418cb1e <RCCEx_GetRTCCLKFreq+0x82>
3418cac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418cacc:	d000      	beq.n	3418cad0 <RCCEx_GetRTCCLKFreq+0x34>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418cace:	e024      	b.n	3418cb1a <RCCEx_GetRTCCLKFreq+0x7e>
      if (LL_RCC_LSE_IsReady() != 0U)
3418cad0:	f7f9 fd42 	bl	34186558 <LL_RCC_LSE_IsReady>
3418cad4:	4603      	mov	r3, r0
3418cad6:	2b00      	cmp	r3, #0
3418cad8:	d023      	beq.n	3418cb22 <RCCEx_GetRTCCLKFreq+0x86>
        rtc_frequency = LSE_VALUE;
3418cada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418cade:	607b      	str	r3, [r7, #4]
      break;
3418cae0:	e01f      	b.n	3418cb22 <RCCEx_GetRTCCLKFreq+0x86>
      if (LL_RCC_LSI_IsReady() != 0U)
3418cae2:	f7f9 fd4b 	bl	3418657c <LL_RCC_LSI_IsReady>
3418cae6:	4603      	mov	r3, r0
3418cae8:	2b00      	cmp	r3, #0
3418caea:	d01c      	beq.n	3418cb26 <RCCEx_GetRTCCLKFreq+0x8a>
        rtc_frequency = LSI_VALUE;
3418caec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
3418caf0:	607b      	str	r3, [r7, #4]
      break;
3418caf2:	e018      	b.n	3418cb26 <RCCEx_GetRTCCLKFreq+0x8a>
      if (LL_RCC_HSE_IsReady() != 0U)
3418caf4:	f7f9 fcde 	bl	341864b4 <LL_RCC_HSE_IsReady>
3418caf8:	4603      	mov	r3, r0
3418cafa:	2b00      	cmp	r3, #0
3418cafc:	d015      	beq.n	3418cb2a <RCCEx_GetRTCCLKFreq+0x8e>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
3418cafe:	4b0e      	ldr	r3, [pc, #56]	@ (3418cb38 <RCCEx_GetRTCCLKFreq+0x9c>)
3418cb00:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418cb04:	0b1b      	lsrs	r3, r3, #12
3418cb06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
3418cb0a:	3301      	adds	r3, #1
3418cb0c:	603b      	str	r3, [r7, #0]
        rtc_frequency = HSE_VALUE / prescaler;
3418cb0e:	4a0b      	ldr	r2, [pc, #44]	@ (3418cb3c <RCCEx_GetRTCCLKFreq+0xa0>)
3418cb10:	683b      	ldr	r3, [r7, #0]
3418cb12:	fbb2 f3f3 	udiv	r3, r2, r3
3418cb16:	607b      	str	r3, [r7, #4]
      break;
3418cb18:	e007      	b.n	3418cb2a <RCCEx_GetRTCCLKFreq+0x8e>
      break;
3418cb1a:	bf00      	nop
3418cb1c:	e006      	b.n	3418cb2c <RCCEx_GetRTCCLKFreq+0x90>
      break;
3418cb1e:	bf00      	nop
3418cb20:	e004      	b.n	3418cb2c <RCCEx_GetRTCCLKFreq+0x90>
      break;
3418cb22:	bf00      	nop
3418cb24:	e002      	b.n	3418cb2c <RCCEx_GetRTCCLKFreq+0x90>
      break;
3418cb26:	bf00      	nop
3418cb28:	e000      	b.n	3418cb2c <RCCEx_GetRTCCLKFreq+0x90>
      break;
3418cb2a:	bf00      	nop
  }

  return rtc_frequency;
3418cb2c:	687b      	ldr	r3, [r7, #4]
}
3418cb2e:	4618      	mov	r0, r3
3418cb30:	3708      	adds	r7, #8
3418cb32:	46bd      	mov	sp, r7
3418cb34:	bd80      	pop	{r7, pc}
3418cb36:	bf00      	nop
3418cb38:	56028000 	.word	0x56028000
3418cb3c:	016e3600 	.word	0x016e3600

3418cb40 <RCCEx_GetSAICLKFreq>:
  *         @arg @ref RCCEx_SAI2_Clock_Source
  * @retval SAI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSAICLKFreq(uint32_t SAIxSource)
{
3418cb40:	b580      	push	{r7, lr}
3418cb42:	b084      	sub	sp, #16
3418cb44:	af00      	add	r7, sp, #0
3418cb46:	6078      	str	r0, [r7, #4]
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
3418cb48:	2300      	movs	r3, #0
3418cb4a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSAIClockSource(SAIxSource))
3418cb4c:	6878      	ldr	r0, [r7, #4]
3418cb4e:	f7fa f875 	bl	34186c3c <LL_RCC_GetSAIClockSource>
3418cb52:	4603      	mov	r3, r0
3418cb54:	4a9a      	ldr	r2, [pc, #616]	@ (3418cdc0 <RCCEx_GetSAICLKFreq+0x280>)
3418cb56:	4293      	cmp	r3, r2
3418cb58:	f000 811f 	beq.w	3418cd9a <RCCEx_GetSAICLKFreq+0x25a>
3418cb5c:	4a98      	ldr	r2, [pc, #608]	@ (3418cdc0 <RCCEx_GetSAICLKFreq+0x280>)
3418cb5e:	4293      	cmp	r3, r2
3418cb60:	f200 8120 	bhi.w	3418cda4 <RCCEx_GetSAICLKFreq+0x264>
3418cb64:	4a97      	ldr	r2, [pc, #604]	@ (3418cdc4 <RCCEx_GetSAICLKFreq+0x284>)
3418cb66:	4293      	cmp	r3, r2
3418cb68:	f000 8117 	beq.w	3418cd9a <RCCEx_GetSAICLKFreq+0x25a>
3418cb6c:	4a95      	ldr	r2, [pc, #596]	@ (3418cdc4 <RCCEx_GetSAICLKFreq+0x284>)
3418cb6e:	4293      	cmp	r3, r2
3418cb70:	f200 8118 	bhi.w	3418cda4 <RCCEx_GetSAICLKFreq+0x264>
3418cb74:	4a94      	ldr	r2, [pc, #592]	@ (3418cdc8 <RCCEx_GetSAICLKFreq+0x288>)
3418cb76:	4293      	cmp	r3, r2
3418cb78:	f000 810c 	beq.w	3418cd94 <RCCEx_GetSAICLKFreq+0x254>
3418cb7c:	4a92      	ldr	r2, [pc, #584]	@ (3418cdc8 <RCCEx_GetSAICLKFreq+0x288>)
3418cb7e:	4293      	cmp	r3, r2
3418cb80:	f200 8110 	bhi.w	3418cda4 <RCCEx_GetSAICLKFreq+0x264>
3418cb84:	4a91      	ldr	r2, [pc, #580]	@ (3418cdcc <RCCEx_GetSAICLKFreq+0x28c>)
3418cb86:	4293      	cmp	r3, r2
3418cb88:	f000 8104 	beq.w	3418cd94 <RCCEx_GetSAICLKFreq+0x254>
3418cb8c:	4a8f      	ldr	r2, [pc, #572]	@ (3418cdcc <RCCEx_GetSAICLKFreq+0x28c>)
3418cb8e:	4293      	cmp	r3, r2
3418cb90:	f200 8108 	bhi.w	3418cda4 <RCCEx_GetSAICLKFreq+0x264>
3418cb94:	4a8e      	ldr	r2, [pc, #568]	@ (3418cdd0 <RCCEx_GetSAICLKFreq+0x290>)
3418cb96:	4293      	cmp	r3, r2
3418cb98:	f000 80e6 	beq.w	3418cd68 <RCCEx_GetSAICLKFreq+0x228>
3418cb9c:	4a8c      	ldr	r2, [pc, #560]	@ (3418cdd0 <RCCEx_GetSAICLKFreq+0x290>)
3418cb9e:	4293      	cmp	r3, r2
3418cba0:	f200 8100 	bhi.w	3418cda4 <RCCEx_GetSAICLKFreq+0x264>
3418cba4:	4a8b      	ldr	r2, [pc, #556]	@ (3418cdd4 <RCCEx_GetSAICLKFreq+0x294>)
3418cba6:	4293      	cmp	r3, r2
3418cba8:	f000 80de 	beq.w	3418cd68 <RCCEx_GetSAICLKFreq+0x228>
3418cbac:	4a89      	ldr	r2, [pc, #548]	@ (3418cdd4 <RCCEx_GetSAICLKFreq+0x294>)
3418cbae:	4293      	cmp	r3, r2
3418cbb0:	f200 80f8 	bhi.w	3418cda4 <RCCEx_GetSAICLKFreq+0x264>
3418cbb4:	4a88      	ldr	r2, [pc, #544]	@ (3418cdd8 <RCCEx_GetSAICLKFreq+0x298>)
3418cbb6:	4293      	cmp	r3, r2
3418cbb8:	f000 80e4 	beq.w	3418cd84 <RCCEx_GetSAICLKFreq+0x244>
3418cbbc:	4a86      	ldr	r2, [pc, #536]	@ (3418cdd8 <RCCEx_GetSAICLKFreq+0x298>)
3418cbbe:	4293      	cmp	r3, r2
3418cbc0:	f200 80f0 	bhi.w	3418cda4 <RCCEx_GetSAICLKFreq+0x264>
3418cbc4:	4a85      	ldr	r2, [pc, #532]	@ (3418cddc <RCCEx_GetSAICLKFreq+0x29c>)
3418cbc6:	4293      	cmp	r3, r2
3418cbc8:	f000 80dc 	beq.w	3418cd84 <RCCEx_GetSAICLKFreq+0x244>
3418cbcc:	4a83      	ldr	r2, [pc, #524]	@ (3418cddc <RCCEx_GetSAICLKFreq+0x29c>)
3418cbce:	4293      	cmp	r3, r2
3418cbd0:	f200 80e8 	bhi.w	3418cda4 <RCCEx_GetSAICLKFreq+0x264>
3418cbd4:	4a82      	ldr	r2, [pc, #520]	@ (3418cde0 <RCCEx_GetSAICLKFreq+0x2a0>)
3418cbd6:	4293      	cmp	r3, r2
3418cbd8:	f000 8083 	beq.w	3418cce2 <RCCEx_GetSAICLKFreq+0x1a2>
3418cbdc:	4a80      	ldr	r2, [pc, #512]	@ (3418cde0 <RCCEx_GetSAICLKFreq+0x2a0>)
3418cbde:	4293      	cmp	r3, r2
3418cbe0:	f200 80e0 	bhi.w	3418cda4 <RCCEx_GetSAICLKFreq+0x264>
3418cbe4:	4a7f      	ldr	r2, [pc, #508]	@ (3418cde4 <RCCEx_GetSAICLKFreq+0x2a4>)
3418cbe6:	4293      	cmp	r3, r2
3418cbe8:	d07b      	beq.n	3418cce2 <RCCEx_GetSAICLKFreq+0x1a2>
3418cbea:	4a7e      	ldr	r2, [pc, #504]	@ (3418cde4 <RCCEx_GetSAICLKFreq+0x2a4>)
3418cbec:	4293      	cmp	r3, r2
3418cbee:	f200 80d9 	bhi.w	3418cda4 <RCCEx_GetSAICLKFreq+0x264>
3418cbf2:	4a7d      	ldr	r2, [pc, #500]	@ (3418cde8 <RCCEx_GetSAICLKFreq+0x2a8>)
3418cbf4:	4293      	cmp	r3, r2
3418cbf6:	d030      	beq.n	3418cc5a <RCCEx_GetSAICLKFreq+0x11a>
3418cbf8:	4a7b      	ldr	r2, [pc, #492]	@ (3418cde8 <RCCEx_GetSAICLKFreq+0x2a8>)
3418cbfa:	4293      	cmp	r3, r2
3418cbfc:	f200 80d2 	bhi.w	3418cda4 <RCCEx_GetSAICLKFreq+0x264>
3418cc00:	4a7a      	ldr	r2, [pc, #488]	@ (3418cdec <RCCEx_GetSAICLKFreq+0x2ac>)
3418cc02:	4293      	cmp	r3, r2
3418cc04:	d029      	beq.n	3418cc5a <RCCEx_GetSAICLKFreq+0x11a>
3418cc06:	4a79      	ldr	r2, [pc, #484]	@ (3418cdec <RCCEx_GetSAICLKFreq+0x2ac>)
3418cc08:	4293      	cmp	r3, r2
3418cc0a:	f200 80cb 	bhi.w	3418cda4 <RCCEx_GetSAICLKFreq+0x264>
3418cc0e:	4a78      	ldr	r2, [pc, #480]	@ (3418cdf0 <RCCEx_GetSAICLKFreq+0x2b0>)
3418cc10:	4293      	cmp	r3, r2
3418cc12:	d01d      	beq.n	3418cc50 <RCCEx_GetSAICLKFreq+0x110>
3418cc14:	4a76      	ldr	r2, [pc, #472]	@ (3418cdf0 <RCCEx_GetSAICLKFreq+0x2b0>)
3418cc16:	4293      	cmp	r3, r2
3418cc18:	f200 80c4 	bhi.w	3418cda4 <RCCEx_GetSAICLKFreq+0x264>
3418cc1c:	4a75      	ldr	r2, [pc, #468]	@ (3418cdf4 <RCCEx_GetSAICLKFreq+0x2b4>)
3418cc1e:	4293      	cmp	r3, r2
3418cc20:	d016      	beq.n	3418cc50 <RCCEx_GetSAICLKFreq+0x110>
3418cc22:	4a74      	ldr	r2, [pc, #464]	@ (3418cdf4 <RCCEx_GetSAICLKFreq+0x2b4>)
3418cc24:	4293      	cmp	r3, r2
3418cc26:	f200 80bd 	bhi.w	3418cda4 <RCCEx_GetSAICLKFreq+0x264>
3418cc2a:	4a73      	ldr	r2, [pc, #460]	@ (3418cdf8 <RCCEx_GetSAICLKFreq+0x2b8>)
3418cc2c:	4293      	cmp	r3, r2
3418cc2e:	d003      	beq.n	3418cc38 <RCCEx_GetSAICLKFreq+0xf8>
3418cc30:	4a72      	ldr	r2, [pc, #456]	@ (3418cdfc <RCCEx_GetSAICLKFreq+0x2bc>)
3418cc32:	4293      	cmp	r3, r2
3418cc34:	f040 80b6 	bne.w	3418cda4 <RCCEx_GetSAICLKFreq+0x264>
  {
    case LL_RCC_SAI1_CLKSOURCE_PCLK2:
    case LL_RCC_SAI2_CLKSOURCE_PCLK2:
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418cc38:	f7f9 f838 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418cc3c:	4603      	mov	r3, r0
3418cc3e:	4618      	mov	r0, r3
3418cc40:	f7fd ffda 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418cc44:	4603      	mov	r3, r0
3418cc46:	4618      	mov	r0, r3
3418cc48:	f7fd fff7 	bl	3418ac3a <RCCEx_GetPCLK2Freq>
3418cc4c:	60f8      	str	r0, [r7, #12]
      break;
3418cc4e:	e0b2      	b.n	3418cdb6 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_CLKP:
    case LL_RCC_SAI2_CLKSOURCE_CLKP:
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418cc50:	2007      	movs	r0, #7
3418cc52:	f7fe fabd 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418cc56:	60f8      	str	r0, [r7, #12]
      break;
3418cc58:	e0ad      	b.n	3418cdb6 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_IC7:
    case LL_RCC_SAI2_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418cc5a:	f7fa fbe1 	bl	34187420 <LL_RCC_IC7_IsEnabled>
3418cc5e:	4603      	mov	r3, r0
3418cc60:	2b00      	cmp	r3, #0
3418cc62:	f000 80a1 	beq.w	3418cda8 <RCCEx_GetSAICLKFreq+0x268>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3418cc66:	f7fa fbfd 	bl	34187464 <LL_RCC_IC7_GetDivider>
3418cc6a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418cc6c:	f7fa fbec 	bl	34187448 <LL_RCC_IC7_GetSource>
3418cc70:	4603      	mov	r3, r0
3418cc72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cc76:	d029      	beq.n	3418cccc <RCCEx_GetSAICLKFreq+0x18c>
3418cc78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cc7c:	d82f      	bhi.n	3418ccde <RCCEx_GetSAICLKFreq+0x19e>
3418cc7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cc82:	d01a      	beq.n	3418ccba <RCCEx_GetSAICLKFreq+0x17a>
3418cc84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cc88:	d829      	bhi.n	3418ccde <RCCEx_GetSAICLKFreq+0x19e>
3418cc8a:	2b00      	cmp	r3, #0
3418cc8c:	d003      	beq.n	3418cc96 <RCCEx_GetSAICLKFreq+0x156>
3418cc8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418cc92:	d009      	beq.n	3418cca8 <RCCEx_GetSAICLKFreq+0x168>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418cc94:	e023      	b.n	3418ccde <RCCEx_GetSAICLKFreq+0x19e>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418cc96:	f7fd fe97 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418cc9a:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418cc9c:	68fa      	ldr	r2, [r7, #12]
3418cc9e:	68bb      	ldr	r3, [r7, #8]
3418cca0:	fbb2 f3f3 	udiv	r3, r2, r3
3418cca4:	60fb      	str	r3, [r7, #12]
            break;
3418cca6:	e01b      	b.n	3418cce0 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418cca8:	f7fd fed4 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418ccac:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418ccae:	68fa      	ldr	r2, [r7, #12]
3418ccb0:	68bb      	ldr	r3, [r7, #8]
3418ccb2:	fbb2 f3f3 	udiv	r3, r2, r3
3418ccb6:	60fb      	str	r3, [r7, #12]
            break;
3418ccb8:	e012      	b.n	3418cce0 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418ccba:	f7fd ff11 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418ccbe:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418ccc0:	68fa      	ldr	r2, [r7, #12]
3418ccc2:	68bb      	ldr	r3, [r7, #8]
3418ccc4:	fbb2 f3f3 	udiv	r3, r2, r3
3418ccc8:	60fb      	str	r3, [r7, #12]
            break;
3418ccca:	e009      	b.n	3418cce0 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418cccc:	f7fd ff4e 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418ccd0:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418ccd2:	68fa      	ldr	r2, [r7, #12]
3418ccd4:	68bb      	ldr	r3, [r7, #8]
3418ccd6:	fbb2 f3f3 	udiv	r3, r2, r3
3418ccda:	60fb      	str	r3, [r7, #12]
            break;
3418ccdc:	e000      	b.n	3418cce0 <RCCEx_GetSAICLKFreq+0x1a0>
            break;
3418ccde:	bf00      	nop
        }
      }
      break;
3418cce0:	e062      	b.n	3418cda8 <RCCEx_GetSAICLKFreq+0x268>

    case LL_RCC_SAI1_CLKSOURCE_IC8:
    case LL_RCC_SAI2_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418cce2:	f7fa fbdd 	bl	341874a0 <LL_RCC_IC8_IsEnabled>
3418cce6:	4603      	mov	r3, r0
3418cce8:	2b00      	cmp	r3, #0
3418ccea:	d05f      	beq.n	3418cdac <RCCEx_GetSAICLKFreq+0x26c>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418ccec:	f7fa fbfa 	bl	341874e4 <LL_RCC_IC8_GetDivider>
3418ccf0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418ccf2:	f7fa fbe9 	bl	341874c8 <LL_RCC_IC8_GetSource>
3418ccf6:	4603      	mov	r3, r0
3418ccf8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ccfc:	d029      	beq.n	3418cd52 <RCCEx_GetSAICLKFreq+0x212>
3418ccfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cd02:	d82f      	bhi.n	3418cd64 <RCCEx_GetSAICLKFreq+0x224>
3418cd04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cd08:	d01a      	beq.n	3418cd40 <RCCEx_GetSAICLKFreq+0x200>
3418cd0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cd0e:	d829      	bhi.n	3418cd64 <RCCEx_GetSAICLKFreq+0x224>
3418cd10:	2b00      	cmp	r3, #0
3418cd12:	d003      	beq.n	3418cd1c <RCCEx_GetSAICLKFreq+0x1dc>
3418cd14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418cd18:	d009      	beq.n	3418cd2e <RCCEx_GetSAICLKFreq+0x1ee>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418cd1a:	e023      	b.n	3418cd64 <RCCEx_GetSAICLKFreq+0x224>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418cd1c:	f7fd fe54 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418cd20:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418cd22:	68fa      	ldr	r2, [r7, #12]
3418cd24:	68bb      	ldr	r3, [r7, #8]
3418cd26:	fbb2 f3f3 	udiv	r3, r2, r3
3418cd2a:	60fb      	str	r3, [r7, #12]
            break;
3418cd2c:	e01b      	b.n	3418cd66 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418cd2e:	f7fd fe91 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418cd32:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418cd34:	68fa      	ldr	r2, [r7, #12]
3418cd36:	68bb      	ldr	r3, [r7, #8]
3418cd38:	fbb2 f3f3 	udiv	r3, r2, r3
3418cd3c:	60fb      	str	r3, [r7, #12]
            break;
3418cd3e:	e012      	b.n	3418cd66 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418cd40:	f7fd fece 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418cd44:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418cd46:	68fa      	ldr	r2, [r7, #12]
3418cd48:	68bb      	ldr	r3, [r7, #8]
3418cd4a:	fbb2 f3f3 	udiv	r3, r2, r3
3418cd4e:	60fb      	str	r3, [r7, #12]
            break;
3418cd50:	e009      	b.n	3418cd66 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418cd52:	f7fd ff0b 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418cd56:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418cd58:	68fa      	ldr	r2, [r7, #12]
3418cd5a:	68bb      	ldr	r3, [r7, #8]
3418cd5c:	fbb2 f3f3 	udiv	r3, r2, r3
3418cd60:	60fb      	str	r3, [r7, #12]
            break;
3418cd62:	e000      	b.n	3418cd66 <RCCEx_GetSAICLKFreq+0x226>
            break;
3418cd64:	bf00      	nop
        }
      }
      break;
3418cd66:	e021      	b.n	3418cdac <RCCEx_GetSAICLKFreq+0x26c>

    case LL_RCC_SAI1_CLKSOURCE_HSI:
    case LL_RCC_SAI2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418cd68:	f7f9 fbb6 	bl	341864d8 <LL_RCC_HSI_IsReady>
3418cd6c:	4603      	mov	r3, r0
3418cd6e:	2b00      	cmp	r3, #0
3418cd70:	d01e      	beq.n	3418cdb0 <RCCEx_GetSAICLKFreq+0x270>
      {
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418cd72:	f7f9 fbc3 	bl	341864fc <LL_RCC_HSI_GetDivider>
3418cd76:	4603      	mov	r3, r0
3418cd78:	09db      	lsrs	r3, r3, #7
3418cd7a:	4a21      	ldr	r2, [pc, #132]	@ (3418ce00 <RCCEx_GetSAICLKFreq+0x2c0>)
3418cd7c:	fa22 f303 	lsr.w	r3, r2, r3
3418cd80:	60fb      	str	r3, [r7, #12]
      }
      break;
3418cd82:	e015      	b.n	3418cdb0 <RCCEx_GetSAICLKFreq+0x270>

    case LL_RCC_SAI1_CLKSOURCE_MSI:
    case LL_RCC_SAI2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418cd84:	f7f9 fbc8 	bl	34186518 <LL_RCC_MSI_IsReady>
3418cd88:	4603      	mov	r3, r0
3418cd8a:	2b00      	cmp	r3, #0
3418cd8c:	d012      	beq.n	3418cdb4 <RCCEx_GetSAICLKFreq+0x274>
      {
        sai_frequency = MSI_VALUE;
3418cd8e:	4b1d      	ldr	r3, [pc, #116]	@ (3418ce04 <RCCEx_GetSAICLKFreq+0x2c4>)
3418cd90:	60fb      	str	r3, [r7, #12]
      }
      break;
3418cd92:	e00f      	b.n	3418cdb4 <RCCEx_GetSAICLKFreq+0x274>

    case LL_RCC_SAI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SAI2_CLKSOURCE_I2S_CKIN:
      sai_frequency = EXTERNAL_CLOCK_VALUE;
3418cd94:	4b1c      	ldr	r3, [pc, #112]	@ (3418ce08 <RCCEx_GetSAICLKFreq+0x2c8>)
3418cd96:	60fb      	str	r3, [r7, #12]
      break;
3418cd98:	e00d      	b.n	3418cdb6 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_SPDIFRX1:
    case LL_RCC_SAI2_CLKSOURCE_SPDIFRX1:
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
3418cd9a:	2007      	movs	r0, #7
3418cd9c:	f000 f920 	bl	3418cfe0 <RCCEx_GetSPDIFRXCLKFreq>
3418cda0:	60f8      	str	r0, [r7, #12]
      break;
3418cda2:	e008      	b.n	3418cdb6 <RCCEx_GetSAICLKFreq+0x276>

    default:
      /* Unexpected case */
      break;
3418cda4:	bf00      	nop
3418cda6:	e006      	b.n	3418cdb6 <RCCEx_GetSAICLKFreq+0x276>
      break;
3418cda8:	bf00      	nop
3418cdaa:	e004      	b.n	3418cdb6 <RCCEx_GetSAICLKFreq+0x276>
      break;
3418cdac:	bf00      	nop
3418cdae:	e002      	b.n	3418cdb6 <RCCEx_GetSAICLKFreq+0x276>
      break;
3418cdb0:	bf00      	nop
3418cdb2:	e000      	b.n	3418cdb6 <RCCEx_GetSAICLKFreq+0x276>
      break;
3418cdb4:	bf00      	nop
  }

  return sai_frequency;
3418cdb6:	68fb      	ldr	r3, [r7, #12]
}
3418cdb8:	4618      	mov	r0, r3
3418cdba:	3710      	adds	r7, #16
3418cdbc:	46bd      	mov	sp, r7
3418cdbe:	bd80      	pop	{r7, pc}
3418cdc0:	07071818 	.word	0x07071818
3418cdc4:	07071418 	.word	0x07071418
3418cdc8:	07061818 	.word	0x07061818
3418cdcc:	07061418 	.word	0x07061418
3418cdd0:	07051818 	.word	0x07051818
3418cdd4:	07051418 	.word	0x07051418
3418cdd8:	07041818 	.word	0x07041818
3418cddc:	07041418 	.word	0x07041418
3418cde0:	07031818 	.word	0x07031818
3418cde4:	07031418 	.word	0x07031418
3418cde8:	07021818 	.word	0x07021818
3418cdec:	07021418 	.word	0x07021418
3418cdf0:	07011818 	.word	0x07011818
3418cdf4:	07011418 	.word	0x07011418
3418cdf8:	07001418 	.word	0x07001418
3418cdfc:	07001818 	.word	0x07001818
3418ce00:	03d09000 	.word	0x03d09000
3418ce04:	003d0900 	.word	0x003d0900
3418ce08:	00bb8000 	.word	0x00bb8000

3418ce0c <RCCEx_GetSDMMCCLKFreq>:
  *         @arg @ref RCCEx_SDMMC2_Clock_Source
  * @retval SDMMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSDMMCCLKFreq(uint32_t SDMMCxSource)
{
3418ce0c:	b580      	push	{r7, lr}
3418ce0e:	b084      	sub	sp, #16
3418ce10:	af00      	add	r7, sp, #0
3418ce12:	6078      	str	r0, [r7, #4]
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418ce14:	2300      	movs	r3, #0
3418ce16:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
3418ce18:	6878      	ldr	r0, [r7, #4]
3418ce1a:	f7f9 ff1b 	bl	34186c54 <LL_RCC_GetSDMMCClockSource>
3418ce1e:	4603      	mov	r3, r0
3418ce20:	4a67      	ldr	r2, [pc, #412]	@ (3418cfc0 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
3418ce22:	4293      	cmp	r3, r2
3418ce24:	d07e      	beq.n	3418cf24 <RCCEx_GetSDMMCCLKFreq+0x118>
3418ce26:	4a66      	ldr	r2, [pc, #408]	@ (3418cfc0 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
3418ce28:	4293      	cmp	r3, r2
3418ce2a:	f200 80be 	bhi.w	3418cfaa <RCCEx_GetSDMMCCLKFreq+0x19e>
3418ce2e:	4a65      	ldr	r2, [pc, #404]	@ (3418cfc4 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
3418ce30:	4293      	cmp	r3, r2
3418ce32:	d077      	beq.n	3418cf24 <RCCEx_GetSDMMCCLKFreq+0x118>
3418ce34:	4a63      	ldr	r2, [pc, #396]	@ (3418cfc4 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
3418ce36:	4293      	cmp	r3, r2
3418ce38:	f200 80b7 	bhi.w	3418cfaa <RCCEx_GetSDMMCCLKFreq+0x19e>
3418ce3c:	4a62      	ldr	r2, [pc, #392]	@ (3418cfc8 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
3418ce3e:	4293      	cmp	r3, r2
3418ce40:	d02c      	beq.n	3418ce9c <RCCEx_GetSDMMCCLKFreq+0x90>
3418ce42:	4a61      	ldr	r2, [pc, #388]	@ (3418cfc8 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
3418ce44:	4293      	cmp	r3, r2
3418ce46:	f200 80b0 	bhi.w	3418cfaa <RCCEx_GetSDMMCCLKFreq+0x19e>
3418ce4a:	4a60      	ldr	r2, [pc, #384]	@ (3418cfcc <RCCEx_GetSDMMCCLKFreq+0x1c0>)
3418ce4c:	4293      	cmp	r3, r2
3418ce4e:	d025      	beq.n	3418ce9c <RCCEx_GetSDMMCCLKFreq+0x90>
3418ce50:	4a5e      	ldr	r2, [pc, #376]	@ (3418cfcc <RCCEx_GetSDMMCCLKFreq+0x1c0>)
3418ce52:	4293      	cmp	r3, r2
3418ce54:	f200 80a9 	bhi.w	3418cfaa <RCCEx_GetSDMMCCLKFreq+0x19e>
3418ce58:	4a5d      	ldr	r2, [pc, #372]	@ (3418cfd0 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
3418ce5a:	4293      	cmp	r3, r2
3418ce5c:	d019      	beq.n	3418ce92 <RCCEx_GetSDMMCCLKFreq+0x86>
3418ce5e:	4a5c      	ldr	r2, [pc, #368]	@ (3418cfd0 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
3418ce60:	4293      	cmp	r3, r2
3418ce62:	f200 80a2 	bhi.w	3418cfaa <RCCEx_GetSDMMCCLKFreq+0x19e>
3418ce66:	4a5b      	ldr	r2, [pc, #364]	@ (3418cfd4 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
3418ce68:	4293      	cmp	r3, r2
3418ce6a:	d012      	beq.n	3418ce92 <RCCEx_GetSDMMCCLKFreq+0x86>
3418ce6c:	4a59      	ldr	r2, [pc, #356]	@ (3418cfd4 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
3418ce6e:	4293      	cmp	r3, r2
3418ce70:	f200 809b 	bhi.w	3418cfaa <RCCEx_GetSDMMCCLKFreq+0x19e>
3418ce74:	4a58      	ldr	r2, [pc, #352]	@ (3418cfd8 <RCCEx_GetSDMMCCLKFreq+0x1cc>)
3418ce76:	4293      	cmp	r3, r2
3418ce78:	d003      	beq.n	3418ce82 <RCCEx_GetSDMMCCLKFreq+0x76>
3418ce7a:	4a58      	ldr	r2, [pc, #352]	@ (3418cfdc <RCCEx_GetSDMMCCLKFreq+0x1d0>)
3418ce7c:	4293      	cmp	r3, r2
3418ce7e:	f040 8094 	bne.w	3418cfaa <RCCEx_GetSDMMCCLKFreq+0x19e>
  {
    case LL_RCC_SDMMC1_CLKSOURCE_HCLK:
    case LL_RCC_SDMMC2_CLKSOURCE_HCLK:
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418ce82:	f7f8 ff13 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418ce86:	4603      	mov	r3, r0
3418ce88:	4618      	mov	r0, r3
3418ce8a:	f7fd feb5 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418ce8e:	60f8      	str	r0, [r7, #12]
      break;
3418ce90:	e090      	b.n	3418cfb4 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_CLKP:
    case LL_RCC_SDMMC2_CLKSOURCE_CLKP:
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418ce92:	2007      	movs	r0, #7
3418ce94:	f7fe f99c 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418ce98:	60f8      	str	r0, [r7, #12]
      break;
3418ce9a:	e08b      	b.n	3418cfb4 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_IC4:
    case LL_RCC_SDMMC2_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
3418ce9c:	f7fa fa40 	bl	34187320 <LL_RCC_IC4_IsEnabled>
3418cea0:	4603      	mov	r3, r0
3418cea2:	2b00      	cmp	r3, #0
3418cea4:	f000 8083 	beq.w	3418cfae <RCCEx_GetSDMMCCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
3418cea8:	f7fa fa5c 	bl	34187364 <LL_RCC_IC4_GetDivider>
3418ceac:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
3418ceae:	f7fa fa4b 	bl	34187348 <LL_RCC_IC4_GetSource>
3418ceb2:	4603      	mov	r3, r0
3418ceb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ceb8:	d029      	beq.n	3418cf0e <RCCEx_GetSDMMCCLKFreq+0x102>
3418ceba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cebe:	d82f      	bhi.n	3418cf20 <RCCEx_GetSDMMCCLKFreq+0x114>
3418cec0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cec4:	d01a      	beq.n	3418cefc <RCCEx_GetSDMMCCLKFreq+0xf0>
3418cec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ceca:	d829      	bhi.n	3418cf20 <RCCEx_GetSDMMCCLKFreq+0x114>
3418cecc:	2b00      	cmp	r3, #0
3418cece:	d003      	beq.n	3418ced8 <RCCEx_GetSDMMCCLKFreq+0xcc>
3418ced0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418ced4:	d009      	beq.n	3418ceea <RCCEx_GetSDMMCCLKFreq+0xde>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418ced6:	e023      	b.n	3418cf20 <RCCEx_GetSDMMCCLKFreq+0x114>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418ced8:	f7fd fd76 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418cedc:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418cede:	68fa      	ldr	r2, [r7, #12]
3418cee0:	68bb      	ldr	r3, [r7, #8]
3418cee2:	fbb2 f3f3 	udiv	r3, r2, r3
3418cee6:	60fb      	str	r3, [r7, #12]
            break;
3418cee8:	e01b      	b.n	3418cf22 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418ceea:	f7fd fdb3 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418ceee:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418cef0:	68fa      	ldr	r2, [r7, #12]
3418cef2:	68bb      	ldr	r3, [r7, #8]
3418cef4:	fbb2 f3f3 	udiv	r3, r2, r3
3418cef8:	60fb      	str	r3, [r7, #12]
            break;
3418cefa:	e012      	b.n	3418cf22 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418cefc:	f7fd fdf0 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418cf00:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418cf02:	68fa      	ldr	r2, [r7, #12]
3418cf04:	68bb      	ldr	r3, [r7, #8]
3418cf06:	fbb2 f3f3 	udiv	r3, r2, r3
3418cf0a:	60fb      	str	r3, [r7, #12]
            break;
3418cf0c:	e009      	b.n	3418cf22 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418cf0e:	f7fd fe2d 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418cf12:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418cf14:	68fa      	ldr	r2, [r7, #12]
3418cf16:	68bb      	ldr	r3, [r7, #8]
3418cf18:	fbb2 f3f3 	udiv	r3, r2, r3
3418cf1c:	60fb      	str	r3, [r7, #12]
            break;
3418cf1e:	e000      	b.n	3418cf22 <RCCEx_GetSDMMCCLKFreq+0x116>
            break;
3418cf20:	bf00      	nop
        }
      }
      break;
3418cf22:	e044      	b.n	3418cfae <RCCEx_GetSDMMCCLKFreq+0x1a2>

    case LL_RCC_SDMMC1_CLKSOURCE_IC5:
    case LL_RCC_SDMMC2_CLKSOURCE_IC5:
      if (LL_RCC_IC5_IsEnabled() != 0U)
3418cf24:	f7fa fa3c 	bl	341873a0 <LL_RCC_IC5_IsEnabled>
3418cf28:	4603      	mov	r3, r0
3418cf2a:	2b00      	cmp	r3, #0
3418cf2c:	d041      	beq.n	3418cfb2 <RCCEx_GetSDMMCCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC5_GetDivider();
3418cf2e:	f7fa fa59 	bl	341873e4 <LL_RCC_IC5_GetDivider>
3418cf32:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC5_GetSource())
3418cf34:	f7fa fa48 	bl	341873c8 <LL_RCC_IC5_GetSource>
3418cf38:	4603      	mov	r3, r0
3418cf3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cf3e:	d029      	beq.n	3418cf94 <RCCEx_GetSDMMCCLKFreq+0x188>
3418cf40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cf44:	d82f      	bhi.n	3418cfa6 <RCCEx_GetSDMMCCLKFreq+0x19a>
3418cf46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cf4a:	d01a      	beq.n	3418cf82 <RCCEx_GetSDMMCCLKFreq+0x176>
3418cf4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cf50:	d829      	bhi.n	3418cfa6 <RCCEx_GetSDMMCCLKFreq+0x19a>
3418cf52:	2b00      	cmp	r3, #0
3418cf54:	d003      	beq.n	3418cf5e <RCCEx_GetSDMMCCLKFreq+0x152>
3418cf56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418cf5a:	d009      	beq.n	3418cf70 <RCCEx_GetSDMMCCLKFreq+0x164>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418cf5c:	e023      	b.n	3418cfa6 <RCCEx_GetSDMMCCLKFreq+0x19a>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418cf5e:	f7fd fd33 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418cf62:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418cf64:	68fa      	ldr	r2, [r7, #12]
3418cf66:	68bb      	ldr	r3, [r7, #8]
3418cf68:	fbb2 f3f3 	udiv	r3, r2, r3
3418cf6c:	60fb      	str	r3, [r7, #12]
            break;
3418cf6e:	e01b      	b.n	3418cfa8 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418cf70:	f7fd fd70 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418cf74:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418cf76:	68fa      	ldr	r2, [r7, #12]
3418cf78:	68bb      	ldr	r3, [r7, #8]
3418cf7a:	fbb2 f3f3 	udiv	r3, r2, r3
3418cf7e:	60fb      	str	r3, [r7, #12]
            break;
3418cf80:	e012      	b.n	3418cfa8 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418cf82:	f7fd fdad 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418cf86:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418cf88:	68fa      	ldr	r2, [r7, #12]
3418cf8a:	68bb      	ldr	r3, [r7, #8]
3418cf8c:	fbb2 f3f3 	udiv	r3, r2, r3
3418cf90:	60fb      	str	r3, [r7, #12]
            break;
3418cf92:	e009      	b.n	3418cfa8 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418cf94:	f7fd fdea 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418cf98:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418cf9a:	68fa      	ldr	r2, [r7, #12]
3418cf9c:	68bb      	ldr	r3, [r7, #8]
3418cf9e:	fbb2 f3f3 	udiv	r3, r2, r3
3418cfa2:	60fb      	str	r3, [r7, #12]
            break;
3418cfa4:	e000      	b.n	3418cfa8 <RCCEx_GetSDMMCCLKFreq+0x19c>
            break;
3418cfa6:	bf00      	nop
        }
      }
      break;
3418cfa8:	e003      	b.n	3418cfb2 <RCCEx_GetSDMMCCLKFreq+0x1a6>

    default:
      /* Unexpected case */
      break;
3418cfaa:	bf00      	nop
3418cfac:	e002      	b.n	3418cfb4 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
3418cfae:	bf00      	nop
3418cfb0:	e000      	b.n	3418cfb4 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
3418cfb2:	bf00      	nop
  }

  return sdmmc_frequency;
3418cfb4:	68fb      	ldr	r3, [r7, #12]
}
3418cfb6:	4618      	mov	r0, r3
3418cfb8:	3710      	adds	r7, #16
3418cfba:	46bd      	mov	sp, r7
3418cfbc:	bd80      	pop	{r7, pc}
3418cfbe:	bf00      	nop
3418cfc0:	0303041c 	.word	0x0303041c
3418cfc4:	0303001c 	.word	0x0303001c
3418cfc8:	0302041c 	.word	0x0302041c
3418cfcc:	0302001c 	.word	0x0302001c
3418cfd0:	0301041c 	.word	0x0301041c
3418cfd4:	0301001c 	.word	0x0301001c
3418cfd8:	0300001c 	.word	0x0300001c
3418cfdc:	0300041c 	.word	0x0300041c

3418cfe0 <RCCEx_GetSPDIFRXCLKFreq>:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
{
3418cfe0:	b580      	push	{r7, lr}
3418cfe2:	b084      	sub	sp, #16
3418cfe4:	af00      	add	r7, sp, #0
3418cfe6:	6078      	str	r0, [r7, #4]
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
3418cfe8:	2300      	movs	r3, #0
3418cfea:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
3418cfec:	6878      	ldr	r0, [r7, #4]
3418cfee:	f7f9 fe3d 	bl	34186c6c <LL_RCC_GetSPDIFRXClockSource>
3418cff2:	4603      	mov	r3, r0
3418cff4:	2b06      	cmp	r3, #6
3418cff6:	f200 80c2 	bhi.w	3418d17e <RCCEx_GetSPDIFRXCLKFreq+0x19e>
3418cffa:	a201      	add	r2, pc, #4	@ (adr r2, 3418d000 <RCCEx_GetSPDIFRXCLKFreq+0x20>)
3418cffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418d000:	3418d01d 	.word	0x3418d01d
3418d004:	3418d035 	.word	0x3418d035
3418d008:	3418d03f 	.word	0x3418d03f
3418d00c:	3418d0c7 	.word	0x3418d0c7
3418d010:	3418d169 	.word	0x3418d169
3418d014:	3418d14d 	.word	0x3418d14d
3418d018:	3418d179 	.word	0x3418d179
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418d01c:	f7f8 fe46 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418d020:	4603      	mov	r3, r0
3418d022:	4618      	mov	r0, r3
3418d024:	f7fd fde8 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418d028:	4603      	mov	r3, r0
3418d02a:	4618      	mov	r0, r3
3418d02c:	f7fd fdf5 	bl	3418ac1a <RCCEx_GetPCLK1Freq>
3418d030:	60f8      	str	r0, [r7, #12]
      break;
3418d032:	e0ad      	b.n	3418d190 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_CLKP:
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418d034:	2007      	movs	r0, #7
3418d036:	f7fe f8cb 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418d03a:	60f8      	str	r0, [r7, #12]
      break;
3418d03c:	e0a8      	b.n	3418d190 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418d03e:	f7fa f9ef 	bl	34187420 <LL_RCC_IC7_IsEnabled>
3418d042:	4603      	mov	r3, r0
3418d044:	2b00      	cmp	r3, #0
3418d046:	f000 809c 	beq.w	3418d182 <RCCEx_GetSPDIFRXCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3418d04a:	f7fa fa0b 	bl	34187464 <LL_RCC_IC7_GetDivider>
3418d04e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418d050:	f7fa f9fa 	bl	34187448 <LL_RCC_IC7_GetSource>
3418d054:	4603      	mov	r3, r0
3418d056:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d05a:	d029      	beq.n	3418d0b0 <RCCEx_GetSPDIFRXCLKFreq+0xd0>
3418d05c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d060:	d82f      	bhi.n	3418d0c2 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
3418d062:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d066:	d01a      	beq.n	3418d09e <RCCEx_GetSPDIFRXCLKFreq+0xbe>
3418d068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d06c:	d829      	bhi.n	3418d0c2 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
3418d06e:	2b00      	cmp	r3, #0
3418d070:	d003      	beq.n	3418d07a <RCCEx_GetSPDIFRXCLKFreq+0x9a>
3418d072:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d076:	d009      	beq.n	3418d08c <RCCEx_GetSPDIFRXCLKFreq+0xac>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418d078:	e023      	b.n	3418d0c2 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418d07a:	f7fd fca5 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418d07e:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418d080:	68fa      	ldr	r2, [r7, #12]
3418d082:	68bb      	ldr	r3, [r7, #8]
3418d084:	fbb2 f3f3 	udiv	r3, r2, r3
3418d088:	60fb      	str	r3, [r7, #12]
            break;
3418d08a:	e01b      	b.n	3418d0c4 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418d08c:	f7fd fce2 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418d090:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418d092:	68fa      	ldr	r2, [r7, #12]
3418d094:	68bb      	ldr	r3, [r7, #8]
3418d096:	fbb2 f3f3 	udiv	r3, r2, r3
3418d09a:	60fb      	str	r3, [r7, #12]
            break;
3418d09c:	e012      	b.n	3418d0c4 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418d09e:	f7fd fd1f 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418d0a2:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418d0a4:	68fa      	ldr	r2, [r7, #12]
3418d0a6:	68bb      	ldr	r3, [r7, #8]
3418d0a8:	fbb2 f3f3 	udiv	r3, r2, r3
3418d0ac:	60fb      	str	r3, [r7, #12]
            break;
3418d0ae:	e009      	b.n	3418d0c4 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418d0b0:	f7fd fd5c 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418d0b4:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418d0b6:	68fa      	ldr	r2, [r7, #12]
3418d0b8:	68bb      	ldr	r3, [r7, #8]
3418d0ba:	fbb2 f3f3 	udiv	r3, r2, r3
3418d0be:	60fb      	str	r3, [r7, #12]
            break;
3418d0c0:	e000      	b.n	3418d0c4 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            break;
3418d0c2:	bf00      	nop
        }
      }
      break;
3418d0c4:	e05d      	b.n	3418d182 <RCCEx_GetSPDIFRXCLKFreq+0x1a2>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418d0c6:	f7fa f9eb 	bl	341874a0 <LL_RCC_IC8_IsEnabled>
3418d0ca:	4603      	mov	r3, r0
3418d0cc:	2b00      	cmp	r3, #0
3418d0ce:	d05a      	beq.n	3418d186 <RCCEx_GetSPDIFRXCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418d0d0:	f7fa fa08 	bl	341874e4 <LL_RCC_IC8_GetDivider>
3418d0d4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418d0d6:	f7fa f9f7 	bl	341874c8 <LL_RCC_IC8_GetSource>
3418d0da:	4603      	mov	r3, r0
3418d0dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d0e0:	d029      	beq.n	3418d136 <RCCEx_GetSPDIFRXCLKFreq+0x156>
3418d0e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d0e6:	d82f      	bhi.n	3418d148 <RCCEx_GetSPDIFRXCLKFreq+0x168>
3418d0e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d0ec:	d01a      	beq.n	3418d124 <RCCEx_GetSPDIFRXCLKFreq+0x144>
3418d0ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d0f2:	d829      	bhi.n	3418d148 <RCCEx_GetSPDIFRXCLKFreq+0x168>
3418d0f4:	2b00      	cmp	r3, #0
3418d0f6:	d003      	beq.n	3418d100 <RCCEx_GetSPDIFRXCLKFreq+0x120>
3418d0f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d0fc:	d009      	beq.n	3418d112 <RCCEx_GetSPDIFRXCLKFreq+0x132>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418d0fe:	e023      	b.n	3418d148 <RCCEx_GetSPDIFRXCLKFreq+0x168>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418d100:	f7fd fc62 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418d104:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418d106:	68fa      	ldr	r2, [r7, #12]
3418d108:	68bb      	ldr	r3, [r7, #8]
3418d10a:	fbb2 f3f3 	udiv	r3, r2, r3
3418d10e:	60fb      	str	r3, [r7, #12]
            break;
3418d110:	e01b      	b.n	3418d14a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418d112:	f7fd fc9f 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418d116:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418d118:	68fa      	ldr	r2, [r7, #12]
3418d11a:	68bb      	ldr	r3, [r7, #8]
3418d11c:	fbb2 f3f3 	udiv	r3, r2, r3
3418d120:	60fb      	str	r3, [r7, #12]
            break;
3418d122:	e012      	b.n	3418d14a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418d124:	f7fd fcdc 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418d128:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418d12a:	68fa      	ldr	r2, [r7, #12]
3418d12c:	68bb      	ldr	r3, [r7, #8]
3418d12e:	fbb2 f3f3 	udiv	r3, r2, r3
3418d132:	60fb      	str	r3, [r7, #12]
            break;
3418d134:	e009      	b.n	3418d14a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418d136:	f7fd fd19 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418d13a:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418d13c:	68fa      	ldr	r2, [r7, #12]
3418d13e:	68bb      	ldr	r3, [r7, #8]
3418d140:	fbb2 f3f3 	udiv	r3, r2, r3
3418d144:	60fb      	str	r3, [r7, #12]
            break;
3418d146:	e000      	b.n	3418d14a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            break;
3418d148:	bf00      	nop
        }
      }
      break;
3418d14a:	e01c      	b.n	3418d186 <RCCEx_GetSPDIFRXCLKFreq+0x1a6>

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418d14c:	f7f9 f9c4 	bl	341864d8 <LL_RCC_HSI_IsReady>
3418d150:	4603      	mov	r3, r0
3418d152:	2b00      	cmp	r3, #0
3418d154:	d019      	beq.n	3418d18a <RCCEx_GetSPDIFRXCLKFreq+0x1aa>
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418d156:	f7f9 f9d1 	bl	341864fc <LL_RCC_HSI_GetDivider>
3418d15a:	4603      	mov	r3, r0
3418d15c:	09db      	lsrs	r3, r3, #7
3418d15e:	4a0f      	ldr	r2, [pc, #60]	@ (3418d19c <RCCEx_GetSPDIFRXCLKFreq+0x1bc>)
3418d160:	fa22 f303 	lsr.w	r3, r2, r3
3418d164:	60fb      	str	r3, [r7, #12]
      }
      break;
3418d166:	e010      	b.n	3418d18a <RCCEx_GetSPDIFRXCLKFreq+0x1aa>

    case LL_RCC_SPDIFRX1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418d168:	f7f9 f9d6 	bl	34186518 <LL_RCC_MSI_IsReady>
3418d16c:	4603      	mov	r3, r0
3418d16e:	2b00      	cmp	r3, #0
3418d170:	d00d      	beq.n	3418d18e <RCCEx_GetSPDIFRXCLKFreq+0x1ae>
      {
        spdifrx_frequency = MSI_VALUE;
3418d172:	4b0b      	ldr	r3, [pc, #44]	@ (3418d1a0 <RCCEx_GetSPDIFRXCLKFreq+0x1c0>)
3418d174:	60fb      	str	r3, [r7, #12]
      }
      break;
3418d176:	e00a      	b.n	3418d18e <RCCEx_GetSPDIFRXCLKFreq+0x1ae>

    case LL_RCC_SPDIFRX1_CLKSOURCE_I2S_CKIN:
      spdifrx_frequency = EXTERNAL_CLOCK_VALUE;
3418d178:	4b0a      	ldr	r3, [pc, #40]	@ (3418d1a4 <RCCEx_GetSPDIFRXCLKFreq+0x1c4>)
3418d17a:	60fb      	str	r3, [r7, #12]
      break;
3418d17c:	e008      	b.n	3418d190 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    default:
      /* Unexpected case */
      break;
3418d17e:	bf00      	nop
3418d180:	e006      	b.n	3418d190 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418d182:	bf00      	nop
3418d184:	e004      	b.n	3418d190 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418d186:	bf00      	nop
3418d188:	e002      	b.n	3418d190 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418d18a:	bf00      	nop
3418d18c:	e000      	b.n	3418d190 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418d18e:	bf00      	nop
  }

  return spdifrx_frequency;
3418d190:	68fb      	ldr	r3, [r7, #12]
}
3418d192:	4618      	mov	r0, r3
3418d194:	3710      	adds	r7, #16
3418d196:	46bd      	mov	sp, r7
3418d198:	bd80      	pop	{r7, pc}
3418d19a:	bf00      	nop
3418d19c:	03d09000 	.word	0x03d09000
3418d1a0:	003d0900 	.word	0x003d0900
3418d1a4:	00bb8000 	.word	0x00bb8000

3418d1a8 <RCCEx_GetSPICLKFreq>:
  *         @arg @ref RCCEx_SPI6_Clock_Source
  * @retval SPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPICLKFreq(uint32_t SPIxSource)
{
3418d1a8:	b580      	push	{r7, lr}
3418d1aa:	b084      	sub	sp, #16
3418d1ac:	af00      	add	r7, sp, #0
3418d1ae:	6078      	str	r0, [r7, #4]
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
3418d1b0:	2300      	movs	r3, #0
3418d1b2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPIClockSource(SPIxSource))
3418d1b4:	6878      	ldr	r0, [r7, #4]
3418d1b6:	f7f9 fd6b 	bl	34186c90 <LL_RCC_GetSPIClockSource>
3418d1ba:	4603      	mov	r3, r0
3418d1bc:	4aa7      	ldr	r2, [pc, #668]	@ (3418d45c <RCCEx_GetSPICLKFreq+0x2b4>)
3418d1be:	4293      	cmp	r3, r2
3418d1c0:	f000 829e 	beq.w	3418d700 <RCCEx_GetSPICLKFreq+0x558>
3418d1c4:	4aa5      	ldr	r2, [pc, #660]	@ (3418d45c <RCCEx_GetSPICLKFreq+0x2b4>)
3418d1c6:	4293      	cmp	r3, r2
3418d1c8:	f200 82a5 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d1cc:	4aa4      	ldr	r2, [pc, #656]	@ (3418d460 <RCCEx_GetSPICLKFreq+0x2b8>)
3418d1ce:	4293      	cmp	r3, r2
3418d1d0:	f000 8299 	beq.w	3418d706 <RCCEx_GetSPICLKFreq+0x55e>
3418d1d4:	4aa2      	ldr	r2, [pc, #648]	@ (3418d460 <RCCEx_GetSPICLKFreq+0x2b8>)
3418d1d6:	4293      	cmp	r3, r2
3418d1d8:	f200 829d 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d1dc:	4aa1      	ldr	r2, [pc, #644]	@ (3418d464 <RCCEx_GetSPICLKFreq+0x2bc>)
3418d1de:	4293      	cmp	r3, r2
3418d1e0:	f000 8291 	beq.w	3418d706 <RCCEx_GetSPICLKFreq+0x55e>
3418d1e4:	4a9f      	ldr	r2, [pc, #636]	@ (3418d464 <RCCEx_GetSPICLKFreq+0x2bc>)
3418d1e6:	4293      	cmp	r3, r2
3418d1e8:	f200 8295 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d1ec:	4a9e      	ldr	r2, [pc, #632]	@ (3418d468 <RCCEx_GetSPICLKFreq+0x2c0>)
3418d1ee:	4293      	cmp	r3, r2
3418d1f0:	f000 8286 	beq.w	3418d700 <RCCEx_GetSPICLKFreq+0x558>
3418d1f4:	4a9c      	ldr	r2, [pc, #624]	@ (3418d468 <RCCEx_GetSPICLKFreq+0x2c0>)
3418d1f6:	4293      	cmp	r3, r2
3418d1f8:	f200 828d 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d1fc:	4a9b      	ldr	r2, [pc, #620]	@ (3418d46c <RCCEx_GetSPICLKFreq+0x2c4>)
3418d1fe:	4293      	cmp	r3, r2
3418d200:	f000 827e 	beq.w	3418d700 <RCCEx_GetSPICLKFreq+0x558>
3418d204:	4a99      	ldr	r2, [pc, #612]	@ (3418d46c <RCCEx_GetSPICLKFreq+0x2c4>)
3418d206:	4293      	cmp	r3, r2
3418d208:	f200 8285 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d20c:	4a98      	ldr	r2, [pc, #608]	@ (3418d470 <RCCEx_GetSPICLKFreq+0x2c8>)
3418d20e:	4293      	cmp	r3, r2
3418d210:	f000 8276 	beq.w	3418d700 <RCCEx_GetSPICLKFreq+0x558>
3418d214:	4a96      	ldr	r2, [pc, #600]	@ (3418d470 <RCCEx_GetSPICLKFreq+0x2c8>)
3418d216:	4293      	cmp	r3, r2
3418d218:	f200 827d 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d21c:	4a95      	ldr	r2, [pc, #596]	@ (3418d474 <RCCEx_GetSPICLKFreq+0x2cc>)
3418d21e:	4293      	cmp	r3, r2
3418d220:	f000 8258 	beq.w	3418d6d4 <RCCEx_GetSPICLKFreq+0x52c>
3418d224:	4a93      	ldr	r2, [pc, #588]	@ (3418d474 <RCCEx_GetSPICLKFreq+0x2cc>)
3418d226:	4293      	cmp	r3, r2
3418d228:	f200 8275 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d22c:	4a92      	ldr	r2, [pc, #584]	@ (3418d478 <RCCEx_GetSPICLKFreq+0x2d0>)
3418d22e:	4293      	cmp	r3, r2
3418d230:	f000 8250 	beq.w	3418d6d4 <RCCEx_GetSPICLKFreq+0x52c>
3418d234:	4a90      	ldr	r2, [pc, #576]	@ (3418d478 <RCCEx_GetSPICLKFreq+0x2d0>)
3418d236:	4293      	cmp	r3, r2
3418d238:	f200 826d 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d23c:	4a8f      	ldr	r2, [pc, #572]	@ (3418d47c <RCCEx_GetSPICLKFreq+0x2d4>)
3418d23e:	4293      	cmp	r3, r2
3418d240:	f000 8248 	beq.w	3418d6d4 <RCCEx_GetSPICLKFreq+0x52c>
3418d244:	4a8d      	ldr	r2, [pc, #564]	@ (3418d47c <RCCEx_GetSPICLKFreq+0x2d4>)
3418d246:	4293      	cmp	r3, r2
3418d248:	f200 8265 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d24c:	4a8c      	ldr	r2, [pc, #560]	@ (3418d480 <RCCEx_GetSPICLKFreq+0x2d8>)
3418d24e:	4293      	cmp	r3, r2
3418d250:	f000 8240 	beq.w	3418d6d4 <RCCEx_GetSPICLKFreq+0x52c>
3418d254:	4a8a      	ldr	r2, [pc, #552]	@ (3418d480 <RCCEx_GetSPICLKFreq+0x2d8>)
3418d256:	4293      	cmp	r3, r2
3418d258:	f200 825d 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d25c:	4a89      	ldr	r2, [pc, #548]	@ (3418d484 <RCCEx_GetSPICLKFreq+0x2dc>)
3418d25e:	4293      	cmp	r3, r2
3418d260:	f000 8238 	beq.w	3418d6d4 <RCCEx_GetSPICLKFreq+0x52c>
3418d264:	4a87      	ldr	r2, [pc, #540]	@ (3418d484 <RCCEx_GetSPICLKFreq+0x2dc>)
3418d266:	4293      	cmp	r3, r2
3418d268:	f200 8255 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d26c:	4a86      	ldr	r2, [pc, #536]	@ (3418d488 <RCCEx_GetSPICLKFreq+0x2e0>)
3418d26e:	4293      	cmp	r3, r2
3418d270:	f000 8230 	beq.w	3418d6d4 <RCCEx_GetSPICLKFreq+0x52c>
3418d274:	4a84      	ldr	r2, [pc, #528]	@ (3418d488 <RCCEx_GetSPICLKFreq+0x2e0>)
3418d276:	4293      	cmp	r3, r2
3418d278:	f200 824d 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d27c:	4a83      	ldr	r2, [pc, #524]	@ (3418d48c <RCCEx_GetSPICLKFreq+0x2e4>)
3418d27e:	4293      	cmp	r3, r2
3418d280:	f000 8236 	beq.w	3418d6f0 <RCCEx_GetSPICLKFreq+0x548>
3418d284:	4a81      	ldr	r2, [pc, #516]	@ (3418d48c <RCCEx_GetSPICLKFreq+0x2e4>)
3418d286:	4293      	cmp	r3, r2
3418d288:	f200 8245 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d28c:	4a80      	ldr	r2, [pc, #512]	@ (3418d490 <RCCEx_GetSPICLKFreq+0x2e8>)
3418d28e:	4293      	cmp	r3, r2
3418d290:	f000 822e 	beq.w	3418d6f0 <RCCEx_GetSPICLKFreq+0x548>
3418d294:	4a7e      	ldr	r2, [pc, #504]	@ (3418d490 <RCCEx_GetSPICLKFreq+0x2e8>)
3418d296:	4293      	cmp	r3, r2
3418d298:	f200 823d 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d29c:	4a7d      	ldr	r2, [pc, #500]	@ (3418d494 <RCCEx_GetSPICLKFreq+0x2ec>)
3418d29e:	4293      	cmp	r3, r2
3418d2a0:	f000 8226 	beq.w	3418d6f0 <RCCEx_GetSPICLKFreq+0x548>
3418d2a4:	4a7b      	ldr	r2, [pc, #492]	@ (3418d494 <RCCEx_GetSPICLKFreq+0x2ec>)
3418d2a6:	4293      	cmp	r3, r2
3418d2a8:	f200 8235 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d2ac:	4a7a      	ldr	r2, [pc, #488]	@ (3418d498 <RCCEx_GetSPICLKFreq+0x2f0>)
3418d2ae:	4293      	cmp	r3, r2
3418d2b0:	f000 821e 	beq.w	3418d6f0 <RCCEx_GetSPICLKFreq+0x548>
3418d2b4:	4a78      	ldr	r2, [pc, #480]	@ (3418d498 <RCCEx_GetSPICLKFreq+0x2f0>)
3418d2b6:	4293      	cmp	r3, r2
3418d2b8:	f200 822d 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d2bc:	4a77      	ldr	r2, [pc, #476]	@ (3418d49c <RCCEx_GetSPICLKFreq+0x2f4>)
3418d2be:	4293      	cmp	r3, r2
3418d2c0:	f000 8216 	beq.w	3418d6f0 <RCCEx_GetSPICLKFreq+0x548>
3418d2c4:	4a75      	ldr	r2, [pc, #468]	@ (3418d49c <RCCEx_GetSPICLKFreq+0x2f4>)
3418d2c6:	4293      	cmp	r3, r2
3418d2c8:	f200 8225 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d2cc:	4a74      	ldr	r2, [pc, #464]	@ (3418d4a0 <RCCEx_GetSPICLKFreq+0x2f8>)
3418d2ce:	4293      	cmp	r3, r2
3418d2d0:	f000 820e 	beq.w	3418d6f0 <RCCEx_GetSPICLKFreq+0x548>
3418d2d4:	4a72      	ldr	r2, [pc, #456]	@ (3418d4a0 <RCCEx_GetSPICLKFreq+0x2f8>)
3418d2d6:	4293      	cmp	r3, r2
3418d2d8:	f200 821d 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d2dc:	4a71      	ldr	r2, [pc, #452]	@ (3418d4a4 <RCCEx_GetSPICLKFreq+0x2fc>)
3418d2de:	4293      	cmp	r3, r2
3418d2e0:	f000 8171 	beq.w	3418d5c6 <RCCEx_GetSPICLKFreq+0x41e>
3418d2e4:	4a6f      	ldr	r2, [pc, #444]	@ (3418d4a4 <RCCEx_GetSPICLKFreq+0x2fc>)
3418d2e6:	4293      	cmp	r3, r2
3418d2e8:	f200 8215 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d2ec:	4a6e      	ldr	r2, [pc, #440]	@ (3418d4a8 <RCCEx_GetSPICLKFreq+0x300>)
3418d2ee:	4293      	cmp	r3, r2
3418d2f0:	f000 81ad 	beq.w	3418d64e <RCCEx_GetSPICLKFreq+0x4a6>
3418d2f4:	4a6c      	ldr	r2, [pc, #432]	@ (3418d4a8 <RCCEx_GetSPICLKFreq+0x300>)
3418d2f6:	4293      	cmp	r3, r2
3418d2f8:	f200 820d 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d2fc:	4a6b      	ldr	r2, [pc, #428]	@ (3418d4ac <RCCEx_GetSPICLKFreq+0x304>)
3418d2fe:	4293      	cmp	r3, r2
3418d300:	f000 81a5 	beq.w	3418d64e <RCCEx_GetSPICLKFreq+0x4a6>
3418d304:	4a69      	ldr	r2, [pc, #420]	@ (3418d4ac <RCCEx_GetSPICLKFreq+0x304>)
3418d306:	4293      	cmp	r3, r2
3418d308:	f200 8205 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d30c:	4a68      	ldr	r2, [pc, #416]	@ (3418d4b0 <RCCEx_GetSPICLKFreq+0x308>)
3418d30e:	4293      	cmp	r3, r2
3418d310:	f000 8159 	beq.w	3418d5c6 <RCCEx_GetSPICLKFreq+0x41e>
3418d314:	4a66      	ldr	r2, [pc, #408]	@ (3418d4b0 <RCCEx_GetSPICLKFreq+0x308>)
3418d316:	4293      	cmp	r3, r2
3418d318:	f200 81fd 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d31c:	4a65      	ldr	r2, [pc, #404]	@ (3418d4b4 <RCCEx_GetSPICLKFreq+0x30c>)
3418d31e:	4293      	cmp	r3, r2
3418d320:	f000 8151 	beq.w	3418d5c6 <RCCEx_GetSPICLKFreq+0x41e>
3418d324:	4a63      	ldr	r2, [pc, #396]	@ (3418d4b4 <RCCEx_GetSPICLKFreq+0x30c>)
3418d326:	4293      	cmp	r3, r2
3418d328:	f200 81f5 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d32c:	4a62      	ldr	r2, [pc, #392]	@ (3418d4b8 <RCCEx_GetSPICLKFreq+0x310>)
3418d32e:	4293      	cmp	r3, r2
3418d330:	f000 8149 	beq.w	3418d5c6 <RCCEx_GetSPICLKFreq+0x41e>
3418d334:	4a60      	ldr	r2, [pc, #384]	@ (3418d4b8 <RCCEx_GetSPICLKFreq+0x310>)
3418d336:	4293      	cmp	r3, r2
3418d338:	f200 81ed 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d33c:	4a5f      	ldr	r2, [pc, #380]	@ (3418d4bc <RCCEx_GetSPICLKFreq+0x314>)
3418d33e:	4293      	cmp	r3, r2
3418d340:	f000 80fd 	beq.w	3418d53e <RCCEx_GetSPICLKFreq+0x396>
3418d344:	4a5d      	ldr	r2, [pc, #372]	@ (3418d4bc <RCCEx_GetSPICLKFreq+0x314>)
3418d346:	4293      	cmp	r3, r2
3418d348:	f200 81e5 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d34c:	4a5c      	ldr	r2, [pc, #368]	@ (3418d4c0 <RCCEx_GetSPICLKFreq+0x318>)
3418d34e:	4293      	cmp	r3, r2
3418d350:	f000 8139 	beq.w	3418d5c6 <RCCEx_GetSPICLKFreq+0x41e>
3418d354:	4a5a      	ldr	r2, [pc, #360]	@ (3418d4c0 <RCCEx_GetSPICLKFreq+0x318>)
3418d356:	4293      	cmp	r3, r2
3418d358:	f200 81dd 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d35c:	4a59      	ldr	r2, [pc, #356]	@ (3418d4c4 <RCCEx_GetSPICLKFreq+0x31c>)
3418d35e:	4293      	cmp	r3, r2
3418d360:	f000 8131 	beq.w	3418d5c6 <RCCEx_GetSPICLKFreq+0x41e>
3418d364:	4a57      	ldr	r2, [pc, #348]	@ (3418d4c4 <RCCEx_GetSPICLKFreq+0x31c>)
3418d366:	4293      	cmp	r3, r2
3418d368:	f200 81d5 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d36c:	4a56      	ldr	r2, [pc, #344]	@ (3418d4c8 <RCCEx_GetSPICLKFreq+0x320>)
3418d36e:	4293      	cmp	r3, r2
3418d370:	f000 80e5 	beq.w	3418d53e <RCCEx_GetSPICLKFreq+0x396>
3418d374:	4a54      	ldr	r2, [pc, #336]	@ (3418d4c8 <RCCEx_GetSPICLKFreq+0x320>)
3418d376:	4293      	cmp	r3, r2
3418d378:	f200 81cd 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d37c:	4a53      	ldr	r2, [pc, #332]	@ (3418d4cc <RCCEx_GetSPICLKFreq+0x324>)
3418d37e:	4293      	cmp	r3, r2
3418d380:	f000 80dd 	beq.w	3418d53e <RCCEx_GetSPICLKFreq+0x396>
3418d384:	4a51      	ldr	r2, [pc, #324]	@ (3418d4cc <RCCEx_GetSPICLKFreq+0x324>)
3418d386:	4293      	cmp	r3, r2
3418d388:	f200 81c5 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d38c:	4a50      	ldr	r2, [pc, #320]	@ (3418d4d0 <RCCEx_GetSPICLKFreq+0x328>)
3418d38e:	4293      	cmp	r3, r2
3418d390:	f000 80d5 	beq.w	3418d53e <RCCEx_GetSPICLKFreq+0x396>
3418d394:	4a4e      	ldr	r2, [pc, #312]	@ (3418d4d0 <RCCEx_GetSPICLKFreq+0x328>)
3418d396:	4293      	cmp	r3, r2
3418d398:	f200 81bd 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d39c:	4a4d      	ldr	r2, [pc, #308]	@ (3418d4d4 <RCCEx_GetSPICLKFreq+0x32c>)
3418d39e:	4293      	cmp	r3, r2
3418d3a0:	f000 80c8 	beq.w	3418d534 <RCCEx_GetSPICLKFreq+0x38c>
3418d3a4:	4a4b      	ldr	r2, [pc, #300]	@ (3418d4d4 <RCCEx_GetSPICLKFreq+0x32c>)
3418d3a6:	4293      	cmp	r3, r2
3418d3a8:	f200 81b5 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d3ac:	4a4a      	ldr	r2, [pc, #296]	@ (3418d4d8 <RCCEx_GetSPICLKFreq+0x330>)
3418d3ae:	4293      	cmp	r3, r2
3418d3b0:	f000 80c0 	beq.w	3418d534 <RCCEx_GetSPICLKFreq+0x38c>
3418d3b4:	4a48      	ldr	r2, [pc, #288]	@ (3418d4d8 <RCCEx_GetSPICLKFreq+0x330>)
3418d3b6:	4293      	cmp	r3, r2
3418d3b8:	f200 81ad 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d3bc:	4a47      	ldr	r2, [pc, #284]	@ (3418d4dc <RCCEx_GetSPICLKFreq+0x334>)
3418d3be:	4293      	cmp	r3, r2
3418d3c0:	f000 80b8 	beq.w	3418d534 <RCCEx_GetSPICLKFreq+0x38c>
3418d3c4:	4a45      	ldr	r2, [pc, #276]	@ (3418d4dc <RCCEx_GetSPICLKFreq+0x334>)
3418d3c6:	4293      	cmp	r3, r2
3418d3c8:	f200 81a5 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d3cc:	4a44      	ldr	r2, [pc, #272]	@ (3418d4e0 <RCCEx_GetSPICLKFreq+0x338>)
3418d3ce:	4293      	cmp	r3, r2
3418d3d0:	f000 80b0 	beq.w	3418d534 <RCCEx_GetSPICLKFreq+0x38c>
3418d3d4:	4a42      	ldr	r2, [pc, #264]	@ (3418d4e0 <RCCEx_GetSPICLKFreq+0x338>)
3418d3d6:	4293      	cmp	r3, r2
3418d3d8:	f200 819d 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d3dc:	4a41      	ldr	r2, [pc, #260]	@ (3418d4e4 <RCCEx_GetSPICLKFreq+0x33c>)
3418d3de:	4293      	cmp	r3, r2
3418d3e0:	f000 80a8 	beq.w	3418d534 <RCCEx_GetSPICLKFreq+0x38c>
3418d3e4:	4a3f      	ldr	r2, [pc, #252]	@ (3418d4e4 <RCCEx_GetSPICLKFreq+0x33c>)
3418d3e6:	4293      	cmp	r3, r2
3418d3e8:	f200 8195 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d3ec:	4a3e      	ldr	r2, [pc, #248]	@ (3418d4e8 <RCCEx_GetSPICLKFreq+0x340>)
3418d3ee:	4293      	cmp	r3, r2
3418d3f0:	f000 80a0 	beq.w	3418d534 <RCCEx_GetSPICLKFreq+0x38c>
3418d3f4:	4a3c      	ldr	r2, [pc, #240]	@ (3418d4e8 <RCCEx_GetSPICLKFreq+0x340>)
3418d3f6:	4293      	cmp	r3, r2
3418d3f8:	f200 818d 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d3fc:	4a3b      	ldr	r2, [pc, #236]	@ (3418d4ec <RCCEx_GetSPICLKFreq+0x344>)
3418d3fe:	4293      	cmp	r3, r2
3418d400:	f000 808c 	beq.w	3418d51c <RCCEx_GetSPICLKFreq+0x374>
3418d404:	4a39      	ldr	r2, [pc, #228]	@ (3418d4ec <RCCEx_GetSPICLKFreq+0x344>)
3418d406:	4293      	cmp	r3, r2
3418d408:	f200 8185 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d40c:	4a38      	ldr	r2, [pc, #224]	@ (3418d4f0 <RCCEx_GetSPICLKFreq+0x348>)
3418d40e:	4293      	cmp	r3, r2
3418d410:	d078      	beq.n	3418d504 <RCCEx_GetSPICLKFreq+0x35c>
3418d412:	4a37      	ldr	r2, [pc, #220]	@ (3418d4f0 <RCCEx_GetSPICLKFreq+0x348>)
3418d414:	4293      	cmp	r3, r2
3418d416:	f200 817e 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d41a:	4a36      	ldr	r2, [pc, #216]	@ (3418d4f4 <RCCEx_GetSPICLKFreq+0x34c>)
3418d41c:	4293      	cmp	r3, r2
3418d41e:	d071      	beq.n	3418d504 <RCCEx_GetSPICLKFreq+0x35c>
3418d420:	4a34      	ldr	r2, [pc, #208]	@ (3418d4f4 <RCCEx_GetSPICLKFreq+0x34c>)
3418d422:	4293      	cmp	r3, r2
3418d424:	f200 8177 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d428:	4a33      	ldr	r2, [pc, #204]	@ (3418d4f8 <RCCEx_GetSPICLKFreq+0x350>)
3418d42a:	4293      	cmp	r3, r2
3418d42c:	d00a      	beq.n	3418d444 <RCCEx_GetSPICLKFreq+0x29c>
3418d42e:	4a32      	ldr	r2, [pc, #200]	@ (3418d4f8 <RCCEx_GetSPICLKFreq+0x350>)
3418d430:	4293      	cmp	r3, r2
3418d432:	f200 8170 	bhi.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
3418d436:	4a31      	ldr	r2, [pc, #196]	@ (3418d4fc <RCCEx_GetSPICLKFreq+0x354>)
3418d438:	4293      	cmp	r3, r2
3418d43a:	d063      	beq.n	3418d504 <RCCEx_GetSPICLKFreq+0x35c>
3418d43c:	4a30      	ldr	r2, [pc, #192]	@ (3418d500 <RCCEx_GetSPICLKFreq+0x358>)
3418d43e:	4293      	cmp	r3, r2
3418d440:	f040 8169 	bne.w	3418d716 <RCCEx_GetSPICLKFreq+0x56e>
  {
    case LL_RCC_SPI2_CLKSOURCE_PCLK1:
    case LL_RCC_SPI3_CLKSOURCE_PCLK1:
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418d444:	f7f8 fc32 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418d448:	4603      	mov	r3, r0
3418d44a:	4618      	mov	r0, r3
3418d44c:	f7fd fbd4 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418d450:	4603      	mov	r3, r0
3418d452:	4618      	mov	r0, r3
3418d454:	f7fd fbe1 	bl	3418ac1a <RCCEx_GetPCLK1Freq>
3418d458:	60f8      	str	r0, [r7, #12]
      break;
3418d45a:	e169      	b.n	3418d730 <RCCEx_GetSPICLKFreq+0x588>
3418d45c:	07061820 	.word	0x07061820
3418d460:	07061420 	.word	0x07061420
3418d464:	07061020 	.word	0x07061020
3418d468:	07060c20 	.word	0x07060c20
3418d46c:	07060820 	.word	0x07060820
3418d470:	07060420 	.word	0x07060420
3418d474:	07051820 	.word	0x07051820
3418d478:	07051420 	.word	0x07051420
3418d47c:	07051020 	.word	0x07051020
3418d480:	07050c20 	.word	0x07050c20
3418d484:	07050820 	.word	0x07050820
3418d488:	07050420 	.word	0x07050420
3418d48c:	07041820 	.word	0x07041820
3418d490:	07041420 	.word	0x07041420
3418d494:	07041020 	.word	0x07041020
3418d498:	07040c20 	.word	0x07040c20
3418d49c:	07040820 	.word	0x07040820
3418d4a0:	07040420 	.word	0x07040420
3418d4a4:	07031820 	.word	0x07031820
3418d4a8:	07031420 	.word	0x07031420
3418d4ac:	07031020 	.word	0x07031020
3418d4b0:	07030c20 	.word	0x07030c20
3418d4b4:	07030820 	.word	0x07030820
3418d4b8:	07030420 	.word	0x07030420
3418d4bc:	07021820 	.word	0x07021820
3418d4c0:	07021420 	.word	0x07021420
3418d4c4:	07021020 	.word	0x07021020
3418d4c8:	07020c20 	.word	0x07020c20
3418d4cc:	07020820 	.word	0x07020820
3418d4d0:	07020420 	.word	0x07020420
3418d4d4:	07011820 	.word	0x07011820
3418d4d8:	07011420 	.word	0x07011420
3418d4dc:	07011020 	.word	0x07011020
3418d4e0:	07010c20 	.word	0x07010c20
3418d4e4:	07010820 	.word	0x07010820
3418d4e8:	07010420 	.word	0x07010420
3418d4ec:	07001820 	.word	0x07001820
3418d4f0:	07001420 	.word	0x07001420
3418d4f4:	07001020 	.word	0x07001020
3418d4f8:	07000c20 	.word	0x07000c20
3418d4fc:	07000420 	.word	0x07000420
3418d500:	07000820 	.word	0x07000820

    case LL_RCC_SPI1_CLKSOURCE_PCLK2:
    case LL_RCC_SPI4_CLKSOURCE_PCLK2:
    case LL_RCC_SPI5_CLKSOURCE_PCLK2:
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418d504:	f7f8 fbd2 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418d508:	4603      	mov	r3, r0
3418d50a:	4618      	mov	r0, r3
3418d50c:	f7fd fb74 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418d510:	4603      	mov	r3, r0
3418d512:	4618      	mov	r0, r3
3418d514:	f7fd fb91 	bl	3418ac3a <RCCEx_GetPCLK2Freq>
3418d518:	60f8      	str	r0, [r7, #12]
      break;
3418d51a:	e109      	b.n	3418d730 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI6_CLKSOURCE_PCLK4:
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418d51c:	f7f8 fbc6 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418d520:	4603      	mov	r3, r0
3418d522:	4618      	mov	r0, r3
3418d524:	f7fd fb68 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418d528:	4603      	mov	r3, r0
3418d52a:	4618      	mov	r0, r3
3418d52c:	f7fd fb96 	bl	3418ac5c <RCCEx_GetPCLK4Freq>
3418d530:	60f8      	str	r0, [r7, #12]
      break;
3418d532:	e0fd      	b.n	3418d730 <RCCEx_GetSPICLKFreq+0x588>
    case LL_RCC_SPI2_CLKSOURCE_CLKP:
    case LL_RCC_SPI3_CLKSOURCE_CLKP:
    case LL_RCC_SPI4_CLKSOURCE_CLKP:
    case LL_RCC_SPI5_CLKSOURCE_CLKP:
    case LL_RCC_SPI6_CLKSOURCE_CLKP:
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418d534:	2007      	movs	r0, #7
3418d536:	f7fd fe4b 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418d53a:	60f8      	str	r0, [r7, #12]
      break;
3418d53c:	e0f8      	b.n	3418d730 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI1_CLKSOURCE_IC8:
    case LL_RCC_SPI2_CLKSOURCE_IC8:
    case LL_RCC_SPI3_CLKSOURCE_IC8:
    case LL_RCC_SPI6_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418d53e:	f7f9 ffaf 	bl	341874a0 <LL_RCC_IC8_IsEnabled>
3418d542:	4603      	mov	r3, r0
3418d544:	2b00      	cmp	r3, #0
3418d546:	f000 80e8 	beq.w	3418d71a <RCCEx_GetSPICLKFreq+0x572>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418d54a:	f7f9 ffcb 	bl	341874e4 <LL_RCC_IC8_GetDivider>
3418d54e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418d550:	f7f9 ffba 	bl	341874c8 <LL_RCC_IC8_GetSource>
3418d554:	4603      	mov	r3, r0
3418d556:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d55a:	d029      	beq.n	3418d5b0 <RCCEx_GetSPICLKFreq+0x408>
3418d55c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d560:	d82f      	bhi.n	3418d5c2 <RCCEx_GetSPICLKFreq+0x41a>
3418d562:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d566:	d01a      	beq.n	3418d59e <RCCEx_GetSPICLKFreq+0x3f6>
3418d568:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d56c:	d829      	bhi.n	3418d5c2 <RCCEx_GetSPICLKFreq+0x41a>
3418d56e:	2b00      	cmp	r3, #0
3418d570:	d003      	beq.n	3418d57a <RCCEx_GetSPICLKFreq+0x3d2>
3418d572:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d576:	d009      	beq.n	3418d58c <RCCEx_GetSPICLKFreq+0x3e4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418d578:	e023      	b.n	3418d5c2 <RCCEx_GetSPICLKFreq+0x41a>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418d57a:	f7fd fa25 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418d57e:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d580:	68fa      	ldr	r2, [r7, #12]
3418d582:	68bb      	ldr	r3, [r7, #8]
3418d584:	fbb2 f3f3 	udiv	r3, r2, r3
3418d588:	60fb      	str	r3, [r7, #12]
            break;
3418d58a:	e01b      	b.n	3418d5c4 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418d58c:	f7fd fa62 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418d590:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d592:	68fa      	ldr	r2, [r7, #12]
3418d594:	68bb      	ldr	r3, [r7, #8]
3418d596:	fbb2 f3f3 	udiv	r3, r2, r3
3418d59a:	60fb      	str	r3, [r7, #12]
            break;
3418d59c:	e012      	b.n	3418d5c4 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418d59e:	f7fd fa9f 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418d5a2:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d5a4:	68fa      	ldr	r2, [r7, #12]
3418d5a6:	68bb      	ldr	r3, [r7, #8]
3418d5a8:	fbb2 f3f3 	udiv	r3, r2, r3
3418d5ac:	60fb      	str	r3, [r7, #12]
            break;
3418d5ae:	e009      	b.n	3418d5c4 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418d5b0:	f7fd fadc 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418d5b4:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d5b6:	68fa      	ldr	r2, [r7, #12]
3418d5b8:	68bb      	ldr	r3, [r7, #8]
3418d5ba:	fbb2 f3f3 	udiv	r3, r2, r3
3418d5be:	60fb      	str	r3, [r7, #12]
            break;
3418d5c0:	e000      	b.n	3418d5c4 <RCCEx_GetSPICLKFreq+0x41c>
            break;
3418d5c2:	bf00      	nop
        }
      }
      break;
3418d5c4:	e0a9      	b.n	3418d71a <RCCEx_GetSPICLKFreq+0x572>
    case LL_RCC_SPI2_CLKSOURCE_IC9:
    case LL_RCC_SPI3_CLKSOURCE_IC9:
    case LL_RCC_SPI4_CLKSOURCE_IC9:
    case LL_RCC_SPI5_CLKSOURCE_IC9:
    case LL_RCC_SPI6_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418d5c6:	f7f9 ffab 	bl	34187520 <LL_RCC_IC9_IsEnabled>
3418d5ca:	4603      	mov	r3, r0
3418d5cc:	2b00      	cmp	r3, #0
3418d5ce:	f000 80a6 	beq.w	3418d71e <RCCEx_GetSPICLKFreq+0x576>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
3418d5d2:	f7f9 ffc7 	bl	34187564 <LL_RCC_IC9_GetDivider>
3418d5d6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418d5d8:	f7f9 ffb6 	bl	34187548 <LL_RCC_IC9_GetSource>
3418d5dc:	4603      	mov	r3, r0
3418d5de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d5e2:	d029      	beq.n	3418d638 <RCCEx_GetSPICLKFreq+0x490>
3418d5e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d5e8:	d82f      	bhi.n	3418d64a <RCCEx_GetSPICLKFreq+0x4a2>
3418d5ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d5ee:	d01a      	beq.n	3418d626 <RCCEx_GetSPICLKFreq+0x47e>
3418d5f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d5f4:	d829      	bhi.n	3418d64a <RCCEx_GetSPICLKFreq+0x4a2>
3418d5f6:	2b00      	cmp	r3, #0
3418d5f8:	d003      	beq.n	3418d602 <RCCEx_GetSPICLKFreq+0x45a>
3418d5fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d5fe:	d009      	beq.n	3418d614 <RCCEx_GetSPICLKFreq+0x46c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418d600:	e023      	b.n	3418d64a <RCCEx_GetSPICLKFreq+0x4a2>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418d602:	f7fd f9e1 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418d606:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d608:	68fa      	ldr	r2, [r7, #12]
3418d60a:	68bb      	ldr	r3, [r7, #8]
3418d60c:	fbb2 f3f3 	udiv	r3, r2, r3
3418d610:	60fb      	str	r3, [r7, #12]
            break;
3418d612:	e01b      	b.n	3418d64c <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418d614:	f7fd fa1e 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418d618:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d61a:	68fa      	ldr	r2, [r7, #12]
3418d61c:	68bb      	ldr	r3, [r7, #8]
3418d61e:	fbb2 f3f3 	udiv	r3, r2, r3
3418d622:	60fb      	str	r3, [r7, #12]
            break;
3418d624:	e012      	b.n	3418d64c <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418d626:	f7fd fa5b 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418d62a:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d62c:	68fa      	ldr	r2, [r7, #12]
3418d62e:	68bb      	ldr	r3, [r7, #8]
3418d630:	fbb2 f3f3 	udiv	r3, r2, r3
3418d634:	60fb      	str	r3, [r7, #12]
            break;
3418d636:	e009      	b.n	3418d64c <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418d638:	f7fd fa98 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418d63c:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d63e:	68fa      	ldr	r2, [r7, #12]
3418d640:	68bb      	ldr	r3, [r7, #8]
3418d642:	fbb2 f3f3 	udiv	r3, r2, r3
3418d646:	60fb      	str	r3, [r7, #12]
            break;
3418d648:	e000      	b.n	3418d64c <RCCEx_GetSPICLKFreq+0x4a4>
            break;
3418d64a:	bf00      	nop
        }
      }
      break;
3418d64c:	e067      	b.n	3418d71e <RCCEx_GetSPICLKFreq+0x576>

    case LL_RCC_SPI4_CLKSOURCE_IC14:
    case LL_RCC_SPI5_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418d64e:	f7fa f867 	bl	34187720 <LL_RCC_IC14_IsEnabled>
3418d652:	4603      	mov	r3, r0
3418d654:	2b00      	cmp	r3, #0
3418d656:	d064      	beq.n	3418d722 <RCCEx_GetSPICLKFreq+0x57a>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
3418d658:	f7fa f884 	bl	34187764 <LL_RCC_IC14_GetDivider>
3418d65c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418d65e:	f7fa f873 	bl	34187748 <LL_RCC_IC14_GetSource>
3418d662:	4603      	mov	r3, r0
3418d664:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d668:	d029      	beq.n	3418d6be <RCCEx_GetSPICLKFreq+0x516>
3418d66a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d66e:	d82f      	bhi.n	3418d6d0 <RCCEx_GetSPICLKFreq+0x528>
3418d670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d674:	d01a      	beq.n	3418d6ac <RCCEx_GetSPICLKFreq+0x504>
3418d676:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d67a:	d829      	bhi.n	3418d6d0 <RCCEx_GetSPICLKFreq+0x528>
3418d67c:	2b00      	cmp	r3, #0
3418d67e:	d003      	beq.n	3418d688 <RCCEx_GetSPICLKFreq+0x4e0>
3418d680:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d684:	d009      	beq.n	3418d69a <RCCEx_GetSPICLKFreq+0x4f2>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418d686:	e023      	b.n	3418d6d0 <RCCEx_GetSPICLKFreq+0x528>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418d688:	f7fd f99e 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418d68c:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d68e:	68fa      	ldr	r2, [r7, #12]
3418d690:	68bb      	ldr	r3, [r7, #8]
3418d692:	fbb2 f3f3 	udiv	r3, r2, r3
3418d696:	60fb      	str	r3, [r7, #12]
            break;
3418d698:	e01b      	b.n	3418d6d2 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418d69a:	f7fd f9db 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418d69e:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d6a0:	68fa      	ldr	r2, [r7, #12]
3418d6a2:	68bb      	ldr	r3, [r7, #8]
3418d6a4:	fbb2 f3f3 	udiv	r3, r2, r3
3418d6a8:	60fb      	str	r3, [r7, #12]
            break;
3418d6aa:	e012      	b.n	3418d6d2 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418d6ac:	f7fd fa18 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418d6b0:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d6b2:	68fa      	ldr	r2, [r7, #12]
3418d6b4:	68bb      	ldr	r3, [r7, #8]
3418d6b6:	fbb2 f3f3 	udiv	r3, r2, r3
3418d6ba:	60fb      	str	r3, [r7, #12]
            break;
3418d6bc:	e009      	b.n	3418d6d2 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418d6be:	f7fd fa55 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418d6c2:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d6c4:	68fa      	ldr	r2, [r7, #12]
3418d6c6:	68bb      	ldr	r3, [r7, #8]
3418d6c8:	fbb2 f3f3 	udiv	r3, r2, r3
3418d6cc:	60fb      	str	r3, [r7, #12]
            break;
3418d6ce:	e000      	b.n	3418d6d2 <RCCEx_GetSPICLKFreq+0x52a>
            break;
3418d6d0:	bf00      	nop
        }
      }
      break;
3418d6d2:	e026      	b.n	3418d722 <RCCEx_GetSPICLKFreq+0x57a>
    case LL_RCC_SPI2_CLKSOURCE_HSI:
    case LL_RCC_SPI3_CLKSOURCE_HSI:
    case LL_RCC_SPI4_CLKSOURCE_HSI:
    case LL_RCC_SPI5_CLKSOURCE_HSI:
    case LL_RCC_SPI6_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418d6d4:	f7f8 ff00 	bl	341864d8 <LL_RCC_HSI_IsReady>
3418d6d8:	4603      	mov	r3, r0
3418d6da:	2b00      	cmp	r3, #0
3418d6dc:	d023      	beq.n	3418d726 <RCCEx_GetSPICLKFreq+0x57e>
      {
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418d6de:	f7f8 ff0d 	bl	341864fc <LL_RCC_HSI_GetDivider>
3418d6e2:	4603      	mov	r3, r0
3418d6e4:	09db      	lsrs	r3, r3, #7
3418d6e6:	4a15      	ldr	r2, [pc, #84]	@ (3418d73c <RCCEx_GetSPICLKFreq+0x594>)
3418d6e8:	fa22 f303 	lsr.w	r3, r2, r3
3418d6ec:	60fb      	str	r3, [r7, #12]
      }
      break;
3418d6ee:	e01a      	b.n	3418d726 <RCCEx_GetSPICLKFreq+0x57e>
    case LL_RCC_SPI2_CLKSOURCE_MSI:
    case LL_RCC_SPI3_CLKSOURCE_MSI:
    case LL_RCC_SPI4_CLKSOURCE_MSI:
    case LL_RCC_SPI5_CLKSOURCE_MSI:
    case LL_RCC_SPI6_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418d6f0:	f7f8 ff12 	bl	34186518 <LL_RCC_MSI_IsReady>
3418d6f4:	4603      	mov	r3, r0
3418d6f6:	2b00      	cmp	r3, #0
3418d6f8:	d017      	beq.n	3418d72a <RCCEx_GetSPICLKFreq+0x582>
      {
        spi_frequency = MSI_VALUE;
3418d6fa:	4b11      	ldr	r3, [pc, #68]	@ (3418d740 <RCCEx_GetSPICLKFreq+0x598>)
3418d6fc:	60fb      	str	r3, [r7, #12]
      }
      break;
3418d6fe:	e014      	b.n	3418d72a <RCCEx_GetSPICLKFreq+0x582>

    case LL_RCC_SPI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI2_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI3_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI6_CLKSOURCE_I2S_CKIN:
      spi_frequency = EXTERNAL_CLOCK_VALUE;
3418d700:	4b10      	ldr	r3, [pc, #64]	@ (3418d744 <RCCEx_GetSPICLKFreq+0x59c>)
3418d702:	60fb      	str	r3, [r7, #12]
      break;
3418d704:	e014      	b.n	3418d730 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI4_CLKSOURCE_HSE:
    case LL_RCC_SPI5_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
3418d706:	f7f8 fed5 	bl	341864b4 <LL_RCC_HSE_IsReady>
3418d70a:	4603      	mov	r3, r0
3418d70c:	2b00      	cmp	r3, #0
3418d70e:	d00e      	beq.n	3418d72e <RCCEx_GetSPICLKFreq+0x586>
      {
        spi_frequency = HSE_VALUE;
3418d710:	4b0d      	ldr	r3, [pc, #52]	@ (3418d748 <RCCEx_GetSPICLKFreq+0x5a0>)
3418d712:	60fb      	str	r3, [r7, #12]
      }
      break;
3418d714:	e00b      	b.n	3418d72e <RCCEx_GetSPICLKFreq+0x586>

    default:
      /* Unexpected case */
      break;
3418d716:	bf00      	nop
3418d718:	e00a      	b.n	3418d730 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418d71a:	bf00      	nop
3418d71c:	e008      	b.n	3418d730 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418d71e:	bf00      	nop
3418d720:	e006      	b.n	3418d730 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418d722:	bf00      	nop
3418d724:	e004      	b.n	3418d730 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418d726:	bf00      	nop
3418d728:	e002      	b.n	3418d730 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418d72a:	bf00      	nop
3418d72c:	e000      	b.n	3418d730 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418d72e:	bf00      	nop
  }

  return spi_frequency;
3418d730:	68fb      	ldr	r3, [r7, #12]
}
3418d732:	4618      	mov	r0, r3
3418d734:	3710      	adds	r7, #16
3418d736:	46bd      	mov	sp, r7
3418d738:	bd80      	pop	{r7, pc}
3418d73a:	bf00      	nop
3418d73c:	03d09000 	.word	0x03d09000
3418d740:	003d0900 	.word	0x003d0900
3418d744:	00bb8000 	.word	0x00bb8000
3418d748:	016e3600 	.word	0x016e3600

3418d74c <RCCEx_GetUARTCLKFreq>:
  *         @arg @ref RCCEx_UART9_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUARTCLKFreq(uint32_t UARTxSource)
{
3418d74c:	b580      	push	{r7, lr}
3418d74e:	b084      	sub	sp, #16
3418d750:	af00      	add	r7, sp, #0
3418d752:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418d754:	2300      	movs	r3, #0
3418d756:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3418d758:	6878      	ldr	r0, [r7, #4]
3418d75a:	f7f9 fab1 	bl	34186cc0 <LL_RCC_GetUARTClockSource>
3418d75e:	4603      	mov	r3, r0
3418d760:	4aa2      	ldr	r2, [pc, #648]	@ (3418d9ec <RCCEx_GetUARTCLKFreq+0x2a0>)
3418d762:	4293      	cmp	r3, r2
3418d764:	f000 81e8 	beq.w	3418db38 <RCCEx_GetUARTCLKFreq+0x3ec>
3418d768:	4aa0      	ldr	r2, [pc, #640]	@ (3418d9ec <RCCEx_GetUARTCLKFreq+0x2a0>)
3418d76a:	4293      	cmp	r3, r2
3418d76c:	f200 8203 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d770:	4a9f      	ldr	r2, [pc, #636]	@ (3418d9f0 <RCCEx_GetUARTCLKFreq+0x2a4>)
3418d772:	4293      	cmp	r3, r2
3418d774:	f000 81e0 	beq.w	3418db38 <RCCEx_GetUARTCLKFreq+0x3ec>
3418d778:	4a9d      	ldr	r2, [pc, #628]	@ (3418d9f0 <RCCEx_GetUARTCLKFreq+0x2a4>)
3418d77a:	4293      	cmp	r3, r2
3418d77c:	f200 81fb 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d780:	4a9c      	ldr	r2, [pc, #624]	@ (3418d9f4 <RCCEx_GetUARTCLKFreq+0x2a8>)
3418d782:	4293      	cmp	r3, r2
3418d784:	f000 81d8 	beq.w	3418db38 <RCCEx_GetUARTCLKFreq+0x3ec>
3418d788:	4a9a      	ldr	r2, [pc, #616]	@ (3418d9f4 <RCCEx_GetUARTCLKFreq+0x2a8>)
3418d78a:	4293      	cmp	r3, r2
3418d78c:	f200 81f3 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d790:	4a99      	ldr	r2, [pc, #612]	@ (3418d9f8 <RCCEx_GetUARTCLKFreq+0x2ac>)
3418d792:	4293      	cmp	r3, r2
3418d794:	f000 81d0 	beq.w	3418db38 <RCCEx_GetUARTCLKFreq+0x3ec>
3418d798:	4a97      	ldr	r2, [pc, #604]	@ (3418d9f8 <RCCEx_GetUARTCLKFreq+0x2ac>)
3418d79a:	4293      	cmp	r3, r2
3418d79c:	f200 81eb 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d7a0:	4a96      	ldr	r2, [pc, #600]	@ (3418d9fc <RCCEx_GetUARTCLKFreq+0x2b0>)
3418d7a2:	4293      	cmp	r3, r2
3418d7a4:	f000 81c8 	beq.w	3418db38 <RCCEx_GetUARTCLKFreq+0x3ec>
3418d7a8:	4a94      	ldr	r2, [pc, #592]	@ (3418d9fc <RCCEx_GetUARTCLKFreq+0x2b0>)
3418d7aa:	4293      	cmp	r3, r2
3418d7ac:	f200 81e3 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d7b0:	4a93      	ldr	r2, [pc, #588]	@ (3418da00 <RCCEx_GetUARTCLKFreq+0x2b4>)
3418d7b2:	4293      	cmp	r3, r2
3418d7b4:	f000 81ce 	beq.w	3418db54 <RCCEx_GetUARTCLKFreq+0x408>
3418d7b8:	4a91      	ldr	r2, [pc, #580]	@ (3418da00 <RCCEx_GetUARTCLKFreq+0x2b4>)
3418d7ba:	4293      	cmp	r3, r2
3418d7bc:	f200 81db 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d7c0:	4a90      	ldr	r2, [pc, #576]	@ (3418da04 <RCCEx_GetUARTCLKFreq+0x2b8>)
3418d7c2:	4293      	cmp	r3, r2
3418d7c4:	f000 81c6 	beq.w	3418db54 <RCCEx_GetUARTCLKFreq+0x408>
3418d7c8:	4a8e      	ldr	r2, [pc, #568]	@ (3418da04 <RCCEx_GetUARTCLKFreq+0x2b8>)
3418d7ca:	4293      	cmp	r3, r2
3418d7cc:	f200 81d3 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d7d0:	4a8d      	ldr	r2, [pc, #564]	@ (3418da08 <RCCEx_GetUARTCLKFreq+0x2bc>)
3418d7d2:	4293      	cmp	r3, r2
3418d7d4:	f000 81be 	beq.w	3418db54 <RCCEx_GetUARTCLKFreq+0x408>
3418d7d8:	4a8b      	ldr	r2, [pc, #556]	@ (3418da08 <RCCEx_GetUARTCLKFreq+0x2bc>)
3418d7da:	4293      	cmp	r3, r2
3418d7dc:	f200 81cb 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d7e0:	4a8a      	ldr	r2, [pc, #552]	@ (3418da0c <RCCEx_GetUARTCLKFreq+0x2c0>)
3418d7e2:	4293      	cmp	r3, r2
3418d7e4:	f000 81b6 	beq.w	3418db54 <RCCEx_GetUARTCLKFreq+0x408>
3418d7e8:	4a88      	ldr	r2, [pc, #544]	@ (3418da0c <RCCEx_GetUARTCLKFreq+0x2c0>)
3418d7ea:	4293      	cmp	r3, r2
3418d7ec:	f200 81c3 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d7f0:	4a87      	ldr	r2, [pc, #540]	@ (3418da10 <RCCEx_GetUARTCLKFreq+0x2c4>)
3418d7f2:	4293      	cmp	r3, r2
3418d7f4:	f000 81ae 	beq.w	3418db54 <RCCEx_GetUARTCLKFreq+0x408>
3418d7f8:	4a85      	ldr	r2, [pc, #532]	@ (3418da10 <RCCEx_GetUARTCLKFreq+0x2c4>)
3418d7fa:	4293      	cmp	r3, r2
3418d7fc:	f200 81bb 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d800:	4a84      	ldr	r2, [pc, #528]	@ (3418da14 <RCCEx_GetUARTCLKFreq+0x2c8>)
3418d802:	4293      	cmp	r3, r2
3418d804:	f000 81ae 	beq.w	3418db64 <RCCEx_GetUARTCLKFreq+0x418>
3418d808:	4a82      	ldr	r2, [pc, #520]	@ (3418da14 <RCCEx_GetUARTCLKFreq+0x2c8>)
3418d80a:	4293      	cmp	r3, r2
3418d80c:	f200 81b3 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d810:	4a81      	ldr	r2, [pc, #516]	@ (3418da18 <RCCEx_GetUARTCLKFreq+0x2cc>)
3418d812:	4293      	cmp	r3, r2
3418d814:	f000 81a6 	beq.w	3418db64 <RCCEx_GetUARTCLKFreq+0x418>
3418d818:	4a7f      	ldr	r2, [pc, #508]	@ (3418da18 <RCCEx_GetUARTCLKFreq+0x2cc>)
3418d81a:	4293      	cmp	r3, r2
3418d81c:	f200 81ab 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d820:	4a7e      	ldr	r2, [pc, #504]	@ (3418da1c <RCCEx_GetUARTCLKFreq+0x2d0>)
3418d822:	4293      	cmp	r3, r2
3418d824:	f000 819e 	beq.w	3418db64 <RCCEx_GetUARTCLKFreq+0x418>
3418d828:	4a7c      	ldr	r2, [pc, #496]	@ (3418da1c <RCCEx_GetUARTCLKFreq+0x2d0>)
3418d82a:	4293      	cmp	r3, r2
3418d82c:	f200 81a3 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d830:	4a7b      	ldr	r2, [pc, #492]	@ (3418da20 <RCCEx_GetUARTCLKFreq+0x2d4>)
3418d832:	4293      	cmp	r3, r2
3418d834:	f000 8196 	beq.w	3418db64 <RCCEx_GetUARTCLKFreq+0x418>
3418d838:	4a79      	ldr	r2, [pc, #484]	@ (3418da20 <RCCEx_GetUARTCLKFreq+0x2d4>)
3418d83a:	4293      	cmp	r3, r2
3418d83c:	f200 819b 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d840:	4a78      	ldr	r2, [pc, #480]	@ (3418da24 <RCCEx_GetUARTCLKFreq+0x2d8>)
3418d842:	4293      	cmp	r3, r2
3418d844:	f000 818e 	beq.w	3418db64 <RCCEx_GetUARTCLKFreq+0x418>
3418d848:	4a76      	ldr	r2, [pc, #472]	@ (3418da24 <RCCEx_GetUARTCLKFreq+0x2d8>)
3418d84a:	4293      	cmp	r3, r2
3418d84c:	f200 8193 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d850:	4a75      	ldr	r2, [pc, #468]	@ (3418da28 <RCCEx_GetUARTCLKFreq+0x2dc>)
3418d852:	4293      	cmp	r3, r2
3418d854:	f000 812d 	beq.w	3418dab2 <RCCEx_GetUARTCLKFreq+0x366>
3418d858:	4a73      	ldr	r2, [pc, #460]	@ (3418da28 <RCCEx_GetUARTCLKFreq+0x2dc>)
3418d85a:	4293      	cmp	r3, r2
3418d85c:	f200 818b 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d860:	4a72      	ldr	r2, [pc, #456]	@ (3418da2c <RCCEx_GetUARTCLKFreq+0x2e0>)
3418d862:	4293      	cmp	r3, r2
3418d864:	f000 8125 	beq.w	3418dab2 <RCCEx_GetUARTCLKFreq+0x366>
3418d868:	4a70      	ldr	r2, [pc, #448]	@ (3418da2c <RCCEx_GetUARTCLKFreq+0x2e0>)
3418d86a:	4293      	cmp	r3, r2
3418d86c:	f200 8183 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d870:	4a6f      	ldr	r2, [pc, #444]	@ (3418da30 <RCCEx_GetUARTCLKFreq+0x2e4>)
3418d872:	4293      	cmp	r3, r2
3418d874:	f000 811d 	beq.w	3418dab2 <RCCEx_GetUARTCLKFreq+0x366>
3418d878:	4a6d      	ldr	r2, [pc, #436]	@ (3418da30 <RCCEx_GetUARTCLKFreq+0x2e4>)
3418d87a:	4293      	cmp	r3, r2
3418d87c:	f200 817b 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d880:	4a6c      	ldr	r2, [pc, #432]	@ (3418da34 <RCCEx_GetUARTCLKFreq+0x2e8>)
3418d882:	4293      	cmp	r3, r2
3418d884:	f000 8115 	beq.w	3418dab2 <RCCEx_GetUARTCLKFreq+0x366>
3418d888:	4a6a      	ldr	r2, [pc, #424]	@ (3418da34 <RCCEx_GetUARTCLKFreq+0x2e8>)
3418d88a:	4293      	cmp	r3, r2
3418d88c:	f200 8173 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d890:	4a69      	ldr	r2, [pc, #420]	@ (3418da38 <RCCEx_GetUARTCLKFreq+0x2ec>)
3418d892:	4293      	cmp	r3, r2
3418d894:	f000 810d 	beq.w	3418dab2 <RCCEx_GetUARTCLKFreq+0x366>
3418d898:	4a67      	ldr	r2, [pc, #412]	@ (3418da38 <RCCEx_GetUARTCLKFreq+0x2ec>)
3418d89a:	4293      	cmp	r3, r2
3418d89c:	f200 816b 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d8a0:	4a66      	ldr	r2, [pc, #408]	@ (3418da3c <RCCEx_GetUARTCLKFreq+0x2f0>)
3418d8a2:	4293      	cmp	r3, r2
3418d8a4:	d07b      	beq.n	3418d99e <RCCEx_GetUARTCLKFreq+0x252>
3418d8a6:	4a65      	ldr	r2, [pc, #404]	@ (3418da3c <RCCEx_GetUARTCLKFreq+0x2f0>)
3418d8a8:	4293      	cmp	r3, r2
3418d8aa:	f200 8164 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d8ae:	4a64      	ldr	r2, [pc, #400]	@ (3418da40 <RCCEx_GetUARTCLKFreq+0x2f4>)
3418d8b0:	4293      	cmp	r3, r2
3418d8b2:	d074      	beq.n	3418d99e <RCCEx_GetUARTCLKFreq+0x252>
3418d8b4:	4a62      	ldr	r2, [pc, #392]	@ (3418da40 <RCCEx_GetUARTCLKFreq+0x2f4>)
3418d8b6:	4293      	cmp	r3, r2
3418d8b8:	f200 815d 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d8bc:	4a61      	ldr	r2, [pc, #388]	@ (3418da44 <RCCEx_GetUARTCLKFreq+0x2f8>)
3418d8be:	4293      	cmp	r3, r2
3418d8c0:	d06d      	beq.n	3418d99e <RCCEx_GetUARTCLKFreq+0x252>
3418d8c2:	4a60      	ldr	r2, [pc, #384]	@ (3418da44 <RCCEx_GetUARTCLKFreq+0x2f8>)
3418d8c4:	4293      	cmp	r3, r2
3418d8c6:	f200 8156 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d8ca:	4a5f      	ldr	r2, [pc, #380]	@ (3418da48 <RCCEx_GetUARTCLKFreq+0x2fc>)
3418d8cc:	4293      	cmp	r3, r2
3418d8ce:	d066      	beq.n	3418d99e <RCCEx_GetUARTCLKFreq+0x252>
3418d8d0:	4a5d      	ldr	r2, [pc, #372]	@ (3418da48 <RCCEx_GetUARTCLKFreq+0x2fc>)
3418d8d2:	4293      	cmp	r3, r2
3418d8d4:	f200 814f 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d8d8:	4a5c      	ldr	r2, [pc, #368]	@ (3418da4c <RCCEx_GetUARTCLKFreq+0x300>)
3418d8da:	4293      	cmp	r3, r2
3418d8dc:	d05f      	beq.n	3418d99e <RCCEx_GetUARTCLKFreq+0x252>
3418d8de:	4a5b      	ldr	r2, [pc, #364]	@ (3418da4c <RCCEx_GetUARTCLKFreq+0x300>)
3418d8e0:	4293      	cmp	r3, r2
3418d8e2:	f200 8148 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d8e6:	4a5a      	ldr	r2, [pc, #360]	@ (3418da50 <RCCEx_GetUARTCLKFreq+0x304>)
3418d8e8:	4293      	cmp	r3, r2
3418d8ea:	d053      	beq.n	3418d994 <RCCEx_GetUARTCLKFreq+0x248>
3418d8ec:	4a58      	ldr	r2, [pc, #352]	@ (3418da50 <RCCEx_GetUARTCLKFreq+0x304>)
3418d8ee:	4293      	cmp	r3, r2
3418d8f0:	f200 8141 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d8f4:	4a57      	ldr	r2, [pc, #348]	@ (3418da54 <RCCEx_GetUARTCLKFreq+0x308>)
3418d8f6:	4293      	cmp	r3, r2
3418d8f8:	d04c      	beq.n	3418d994 <RCCEx_GetUARTCLKFreq+0x248>
3418d8fa:	4a56      	ldr	r2, [pc, #344]	@ (3418da54 <RCCEx_GetUARTCLKFreq+0x308>)
3418d8fc:	4293      	cmp	r3, r2
3418d8fe:	f200 813a 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d902:	4a55      	ldr	r2, [pc, #340]	@ (3418da58 <RCCEx_GetUARTCLKFreq+0x30c>)
3418d904:	4293      	cmp	r3, r2
3418d906:	d045      	beq.n	3418d994 <RCCEx_GetUARTCLKFreq+0x248>
3418d908:	4a53      	ldr	r2, [pc, #332]	@ (3418da58 <RCCEx_GetUARTCLKFreq+0x30c>)
3418d90a:	4293      	cmp	r3, r2
3418d90c:	f200 8133 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d910:	4a52      	ldr	r2, [pc, #328]	@ (3418da5c <RCCEx_GetUARTCLKFreq+0x310>)
3418d912:	4293      	cmp	r3, r2
3418d914:	d03e      	beq.n	3418d994 <RCCEx_GetUARTCLKFreq+0x248>
3418d916:	4a51      	ldr	r2, [pc, #324]	@ (3418da5c <RCCEx_GetUARTCLKFreq+0x310>)
3418d918:	4293      	cmp	r3, r2
3418d91a:	f200 812c 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d91e:	4a50      	ldr	r2, [pc, #320]	@ (3418da60 <RCCEx_GetUARTCLKFreq+0x314>)
3418d920:	4293      	cmp	r3, r2
3418d922:	d037      	beq.n	3418d994 <RCCEx_GetUARTCLKFreq+0x248>
3418d924:	4a4e      	ldr	r2, [pc, #312]	@ (3418da60 <RCCEx_GetUARTCLKFreq+0x314>)
3418d926:	4293      	cmp	r3, r2
3418d928:	f200 8125 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d92c:	4a4d      	ldr	r2, [pc, #308]	@ (3418da64 <RCCEx_GetUARTCLKFreq+0x318>)
3418d92e:	4293      	cmp	r3, r2
3418d930:	d018      	beq.n	3418d964 <RCCEx_GetUARTCLKFreq+0x218>
3418d932:	4a4c      	ldr	r2, [pc, #304]	@ (3418da64 <RCCEx_GetUARTCLKFreq+0x318>)
3418d934:	4293      	cmp	r3, r2
3418d936:	f200 811e 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d93a:	4a4b      	ldr	r2, [pc, #300]	@ (3418da68 <RCCEx_GetUARTCLKFreq+0x31c>)
3418d93c:	4293      	cmp	r3, r2
3418d93e:	d011      	beq.n	3418d964 <RCCEx_GetUARTCLKFreq+0x218>
3418d940:	4a49      	ldr	r2, [pc, #292]	@ (3418da68 <RCCEx_GetUARTCLKFreq+0x31c>)
3418d942:	4293      	cmp	r3, r2
3418d944:	f200 8117 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d948:	4a48      	ldr	r2, [pc, #288]	@ (3418da6c <RCCEx_GetUARTCLKFreq+0x320>)
3418d94a:	4293      	cmp	r3, r2
3418d94c:	d00a      	beq.n	3418d964 <RCCEx_GetUARTCLKFreq+0x218>
3418d94e:	4a47      	ldr	r2, [pc, #284]	@ (3418da6c <RCCEx_GetUARTCLKFreq+0x320>)
3418d950:	4293      	cmp	r3, r2
3418d952:	f200 8110 	bhi.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
3418d956:	4a46      	ldr	r2, [pc, #280]	@ (3418da70 <RCCEx_GetUARTCLKFreq+0x324>)
3418d958:	4293      	cmp	r3, r2
3418d95a:	d00f      	beq.n	3418d97c <RCCEx_GetUARTCLKFreq+0x230>
3418d95c:	4a45      	ldr	r2, [pc, #276]	@ (3418da74 <RCCEx_GetUARTCLKFreq+0x328>)
3418d95e:	4293      	cmp	r3, r2
3418d960:	f040 8109 	bne.w	3418db76 <RCCEx_GetUARTCLKFreq+0x42a>
  {
    case LL_RCC_UART4_CLKSOURCE_PCLK1:
    case LL_RCC_UART5_CLKSOURCE_PCLK1:
    case LL_RCC_UART7_CLKSOURCE_PCLK1:
    case LL_RCC_UART8_CLKSOURCE_PCLK1:
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418d964:	f7f8 f9a2 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418d968:	4603      	mov	r3, r0
3418d96a:	4618      	mov	r0, r3
3418d96c:	f7fd f944 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418d970:	4603      	mov	r3, r0
3418d972:	4618      	mov	r0, r3
3418d974:	f7fd f951 	bl	3418ac1a <RCCEx_GetPCLK1Freq>
3418d978:	60f8      	str	r0, [r7, #12]
      break;
3418d97a:	e107      	b.n	3418db8c <RCCEx_GetUARTCLKFreq+0x440>

    case LL_RCC_UART9_CLKSOURCE_PCLK2:
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418d97c:	f7f8 f996 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418d980:	4603      	mov	r3, r0
3418d982:	4618      	mov	r0, r3
3418d984:	f7fd f938 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418d988:	4603      	mov	r3, r0
3418d98a:	4618      	mov	r0, r3
3418d98c:	f7fd f955 	bl	3418ac3a <RCCEx_GetPCLK2Freq>
3418d990:	60f8      	str	r0, [r7, #12]
      break;
3418d992:	e0fb      	b.n	3418db8c <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_CLKP:
    case LL_RCC_UART5_CLKSOURCE_CLKP:
    case LL_RCC_UART7_CLKSOURCE_CLKP:
    case LL_RCC_UART8_CLKSOURCE_CLKP:
    case LL_RCC_UART9_CLKSOURCE_CLKP:
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418d994:	2007      	movs	r0, #7
3418d996:	f7fd fc1b 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418d99a:	60f8      	str	r0, [r7, #12]
      break;
3418d99c:	e0f6      	b.n	3418db8c <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_IC9:
    case LL_RCC_UART5_CLKSOURCE_IC9:
    case LL_RCC_UART7_CLKSOURCE_IC9:
    case LL_RCC_UART8_CLKSOURCE_IC9:
    case LL_RCC_UART9_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418d99e:	f7f9 fdbf 	bl	34187520 <LL_RCC_IC9_IsEnabled>
3418d9a2:	4603      	mov	r3, r0
3418d9a4:	2b00      	cmp	r3, #0
3418d9a6:	f000 80e8 	beq.w	3418db7a <RCCEx_GetUARTCLKFreq+0x42e>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
3418d9aa:	f7f9 fddb 	bl	34187564 <LL_RCC_IC9_GetDivider>
3418d9ae:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418d9b0:	f7f9 fdca 	bl	34187548 <LL_RCC_IC9_GetSource>
3418d9b4:	4603      	mov	r3, r0
3418d9b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d9ba:	d06f      	beq.n	3418da9c <RCCEx_GetUARTCLKFreq+0x350>
3418d9bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d9c0:	d875      	bhi.n	3418daae <RCCEx_GetUARTCLKFreq+0x362>
3418d9c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d9c6:	d060      	beq.n	3418da8a <RCCEx_GetUARTCLKFreq+0x33e>
3418d9c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d9cc:	d86f      	bhi.n	3418daae <RCCEx_GetUARTCLKFreq+0x362>
3418d9ce:	2b00      	cmp	r3, #0
3418d9d0:	d003      	beq.n	3418d9da <RCCEx_GetUARTCLKFreq+0x28e>
3418d9d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d9d6:	d04f      	beq.n	3418da78 <RCCEx_GetUARTCLKFreq+0x32c>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418d9d8:	e069      	b.n	3418daae <RCCEx_GetUARTCLKFreq+0x362>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418d9da:	f7fc fff5 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418d9de:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418d9e0:	68fa      	ldr	r2, [r7, #12]
3418d9e2:	68bb      	ldr	r3, [r7, #8]
3418d9e4:	fbb2 f3f3 	udiv	r3, r2, r3
3418d9e8:	60fb      	str	r3, [r7, #12]
            break;
3418d9ea:	e061      	b.n	3418dab0 <RCCEx_GetUARTCLKFreq+0x364>
3418d9ec:	07061c30 	.word	0x07061c30
3418d9f0:	07061830 	.word	0x07061830
3418d9f4:	07061030 	.word	0x07061030
3418d9f8:	07060c30 	.word	0x07060c30
3418d9fc:	07060034 	.word	0x07060034
3418da00:	07051c30 	.word	0x07051c30
3418da04:	07051830 	.word	0x07051830
3418da08:	07051030 	.word	0x07051030
3418da0c:	07050c30 	.word	0x07050c30
3418da10:	07050034 	.word	0x07050034
3418da14:	07041c30 	.word	0x07041c30
3418da18:	07041830 	.word	0x07041830
3418da1c:	07041030 	.word	0x07041030
3418da20:	07040c30 	.word	0x07040c30
3418da24:	07040034 	.word	0x07040034
3418da28:	07031c30 	.word	0x07031c30
3418da2c:	07031830 	.word	0x07031830
3418da30:	07031030 	.word	0x07031030
3418da34:	07030c30 	.word	0x07030c30
3418da38:	07030034 	.word	0x07030034
3418da3c:	07021c30 	.word	0x07021c30
3418da40:	07021830 	.word	0x07021830
3418da44:	07021030 	.word	0x07021030
3418da48:	07020c30 	.word	0x07020c30
3418da4c:	07020034 	.word	0x07020034
3418da50:	07011c30 	.word	0x07011c30
3418da54:	07011830 	.word	0x07011830
3418da58:	07011030 	.word	0x07011030
3418da5c:	07010c30 	.word	0x07010c30
3418da60:	07010034 	.word	0x07010034
3418da64:	07001c30 	.word	0x07001c30
3418da68:	07001830 	.word	0x07001830
3418da6c:	07001030 	.word	0x07001030
3418da70:	07000034 	.word	0x07000034
3418da74:	07000c30 	.word	0x07000c30
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418da78:	f7fc ffec 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418da7c:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418da7e:	68fa      	ldr	r2, [r7, #12]
3418da80:	68bb      	ldr	r3, [r7, #8]
3418da82:	fbb2 f3f3 	udiv	r3, r2, r3
3418da86:	60fb      	str	r3, [r7, #12]
            break;
3418da88:	e012      	b.n	3418dab0 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418da8a:	f7fd f829 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418da8e:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418da90:	68fa      	ldr	r2, [r7, #12]
3418da92:	68bb      	ldr	r3, [r7, #8]
3418da94:	fbb2 f3f3 	udiv	r3, r2, r3
3418da98:	60fb      	str	r3, [r7, #12]
            break;
3418da9a:	e009      	b.n	3418dab0 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418da9c:	f7fd f866 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418daa0:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418daa2:	68fa      	ldr	r2, [r7, #12]
3418daa4:	68bb      	ldr	r3, [r7, #8]
3418daa6:	fbb2 f3f3 	udiv	r3, r2, r3
3418daaa:	60fb      	str	r3, [r7, #12]
            break;
3418daac:	e000      	b.n	3418dab0 <RCCEx_GetUARTCLKFreq+0x364>
            break;
3418daae:	bf00      	nop
        }
      }
      break;
3418dab0:	e063      	b.n	3418db7a <RCCEx_GetUARTCLKFreq+0x42e>
    case LL_RCC_UART4_CLKSOURCE_IC14:
    case LL_RCC_UART5_CLKSOURCE_IC14:
    case LL_RCC_UART7_CLKSOURCE_IC14:
    case LL_RCC_UART8_CLKSOURCE_IC14:
    case LL_RCC_UART9_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418dab2:	f7f9 fe35 	bl	34187720 <LL_RCC_IC14_IsEnabled>
3418dab6:	4603      	mov	r3, r0
3418dab8:	2b00      	cmp	r3, #0
3418daba:	d060      	beq.n	3418db7e <RCCEx_GetUARTCLKFreq+0x432>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
3418dabc:	f7f9 fe52 	bl	34187764 <LL_RCC_IC14_GetDivider>
3418dac0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418dac2:	f7f9 fe41 	bl	34187748 <LL_RCC_IC14_GetSource>
3418dac6:	4603      	mov	r3, r0
3418dac8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418dacc:	d029      	beq.n	3418db22 <RCCEx_GetUARTCLKFreq+0x3d6>
3418dace:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418dad2:	d82f      	bhi.n	3418db34 <RCCEx_GetUARTCLKFreq+0x3e8>
3418dad4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418dad8:	d01a      	beq.n	3418db10 <RCCEx_GetUARTCLKFreq+0x3c4>
3418dada:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418dade:	d829      	bhi.n	3418db34 <RCCEx_GetUARTCLKFreq+0x3e8>
3418dae0:	2b00      	cmp	r3, #0
3418dae2:	d003      	beq.n	3418daec <RCCEx_GetUARTCLKFreq+0x3a0>
3418dae4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418dae8:	d009      	beq.n	3418dafe <RCCEx_GetUARTCLKFreq+0x3b2>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418daea:	e023      	b.n	3418db34 <RCCEx_GetUARTCLKFreq+0x3e8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418daec:	f7fc ff6c 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418daf0:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418daf2:	68fa      	ldr	r2, [r7, #12]
3418daf4:	68bb      	ldr	r3, [r7, #8]
3418daf6:	fbb2 f3f3 	udiv	r3, r2, r3
3418dafa:	60fb      	str	r3, [r7, #12]
            break;
3418dafc:	e01b      	b.n	3418db36 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418dafe:	f7fc ffa9 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418db02:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418db04:	68fa      	ldr	r2, [r7, #12]
3418db06:	68bb      	ldr	r3, [r7, #8]
3418db08:	fbb2 f3f3 	udiv	r3, r2, r3
3418db0c:	60fb      	str	r3, [r7, #12]
            break;
3418db0e:	e012      	b.n	3418db36 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418db10:	f7fc ffe6 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418db14:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418db16:	68fa      	ldr	r2, [r7, #12]
3418db18:	68bb      	ldr	r3, [r7, #8]
3418db1a:	fbb2 f3f3 	udiv	r3, r2, r3
3418db1e:	60fb      	str	r3, [r7, #12]
            break;
3418db20:	e009      	b.n	3418db36 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418db22:	f7fd f823 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418db26:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418db28:	68fa      	ldr	r2, [r7, #12]
3418db2a:	68bb      	ldr	r3, [r7, #8]
3418db2c:	fbb2 f3f3 	udiv	r3, r2, r3
3418db30:	60fb      	str	r3, [r7, #12]
            break;
3418db32:	e000      	b.n	3418db36 <RCCEx_GetUARTCLKFreq+0x3ea>
            break;
3418db34:	bf00      	nop
        }
      }
      break;
3418db36:	e022      	b.n	3418db7e <RCCEx_GetUARTCLKFreq+0x432>
    case LL_RCC_UART4_CLKSOURCE_HSI:
    case LL_RCC_UART5_CLKSOURCE_HSI:
    case LL_RCC_UART7_CLKSOURCE_HSI:
    case LL_RCC_UART8_CLKSOURCE_HSI:
    case LL_RCC_UART9_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418db38:	f7f8 fcce 	bl	341864d8 <LL_RCC_HSI_IsReady>
3418db3c:	4603      	mov	r3, r0
3418db3e:	2b00      	cmp	r3, #0
3418db40:	d01f      	beq.n	3418db82 <RCCEx_GetUARTCLKFreq+0x436>
      {
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418db42:	f7f8 fcdb 	bl	341864fc <LL_RCC_HSI_GetDivider>
3418db46:	4603      	mov	r3, r0
3418db48:	09db      	lsrs	r3, r3, #7
3418db4a:	4a13      	ldr	r2, [pc, #76]	@ (3418db98 <RCCEx_GetUARTCLKFreq+0x44c>)
3418db4c:	fa22 f303 	lsr.w	r3, r2, r3
3418db50:	60fb      	str	r3, [r7, #12]
      }
      break;
3418db52:	e016      	b.n	3418db82 <RCCEx_GetUARTCLKFreq+0x436>
    case LL_RCC_UART4_CLKSOURCE_MSI:
    case LL_RCC_UART5_CLKSOURCE_MSI:
    case LL_RCC_UART7_CLKSOURCE_MSI:
    case LL_RCC_UART8_CLKSOURCE_MSI:
    case LL_RCC_UART9_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418db54:	f7f8 fce0 	bl	34186518 <LL_RCC_MSI_IsReady>
3418db58:	4603      	mov	r3, r0
3418db5a:	2b00      	cmp	r3, #0
3418db5c:	d013      	beq.n	3418db86 <RCCEx_GetUARTCLKFreq+0x43a>
      {
        uart_frequency = MSI_VALUE;
3418db5e:	4b0f      	ldr	r3, [pc, #60]	@ (3418db9c <RCCEx_GetUARTCLKFreq+0x450>)
3418db60:	60fb      	str	r3, [r7, #12]
      }
      break;
3418db62:	e010      	b.n	3418db86 <RCCEx_GetUARTCLKFreq+0x43a>
    case LL_RCC_UART4_CLKSOURCE_LSE:
    case LL_RCC_UART5_CLKSOURCE_LSE:
    case LL_RCC_UART7_CLKSOURCE_LSE:
    case LL_RCC_UART8_CLKSOURCE_LSE:
    case LL_RCC_UART9_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
3418db64:	f7f8 fcf8 	bl	34186558 <LL_RCC_LSE_IsReady>
3418db68:	4603      	mov	r3, r0
3418db6a:	2b00      	cmp	r3, #0
3418db6c:	d00d      	beq.n	3418db8a <RCCEx_GetUARTCLKFreq+0x43e>
      {
        uart_frequency = LSE_VALUE;
3418db6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418db72:	60fb      	str	r3, [r7, #12]
      }
      break;
3418db74:	e009      	b.n	3418db8a <RCCEx_GetUARTCLKFreq+0x43e>

    default:
      /* Unexpected case */
      break;
3418db76:	bf00      	nop
3418db78:	e008      	b.n	3418db8c <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418db7a:	bf00      	nop
3418db7c:	e006      	b.n	3418db8c <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418db7e:	bf00      	nop
3418db80:	e004      	b.n	3418db8c <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418db82:	bf00      	nop
3418db84:	e002      	b.n	3418db8c <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418db86:	bf00      	nop
3418db88:	e000      	b.n	3418db8c <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418db8a:	bf00      	nop
  }

  return uart_frequency;
3418db8c:	68fb      	ldr	r3, [r7, #12]
}
3418db8e:	4618      	mov	r0, r3
3418db90:	3710      	adds	r7, #16
3418db92:	46bd      	mov	sp, r7
3418db94:	bd80      	pop	{r7, pc}
3418db96:	bf00      	nop
3418db98:	03d09000 	.word	0x03d09000
3418db9c:	003d0900 	.word	0x003d0900

3418dba0 <RCCEx_GetUSARTCLKFreq>:
  *         @arg @ref RCCEx_USART10_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUSARTCLKFreq(uint32_t USARTxSource)
{
3418dba0:	b580      	push	{r7, lr}
3418dba2:	b084      	sub	sp, #16
3418dba4:	af00      	add	r7, sp, #0
3418dba6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418dba8:	2300      	movs	r3, #0
3418dbaa:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3418dbac:	6878      	ldr	r0, [r7, #4]
3418dbae:	f7f9 f87b 	bl	34186ca8 <LL_RCC_GetUSARTClockSource>
3418dbb2:	4603      	mov	r3, r0
3418dbb4:	4aa2      	ldr	r2, [pc, #648]	@ (3418de40 <RCCEx_GetUSARTCLKFreq+0x2a0>)
3418dbb6:	4293      	cmp	r3, r2
3418dbb8:	f000 81e8 	beq.w	3418df8c <RCCEx_GetUSARTCLKFreq+0x3ec>
3418dbbc:	4aa0      	ldr	r2, [pc, #640]	@ (3418de40 <RCCEx_GetUSARTCLKFreq+0x2a0>)
3418dbbe:	4293      	cmp	r3, r2
3418dbc0:	f200 8203 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dbc4:	4a9f      	ldr	r2, [pc, #636]	@ (3418de44 <RCCEx_GetUSARTCLKFreq+0x2a4>)
3418dbc6:	4293      	cmp	r3, r2
3418dbc8:	f000 81e0 	beq.w	3418df8c <RCCEx_GetUSARTCLKFreq+0x3ec>
3418dbcc:	4a9d      	ldr	r2, [pc, #628]	@ (3418de44 <RCCEx_GetUSARTCLKFreq+0x2a4>)
3418dbce:	4293      	cmp	r3, r2
3418dbd0:	f200 81fb 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dbd4:	4a9c      	ldr	r2, [pc, #624]	@ (3418de48 <RCCEx_GetUSARTCLKFreq+0x2a8>)
3418dbd6:	4293      	cmp	r3, r2
3418dbd8:	f000 81d8 	beq.w	3418df8c <RCCEx_GetUSARTCLKFreq+0x3ec>
3418dbdc:	4a9a      	ldr	r2, [pc, #616]	@ (3418de48 <RCCEx_GetUSARTCLKFreq+0x2a8>)
3418dbde:	4293      	cmp	r3, r2
3418dbe0:	f200 81f3 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dbe4:	4a99      	ldr	r2, [pc, #612]	@ (3418de4c <RCCEx_GetUSARTCLKFreq+0x2ac>)
3418dbe6:	4293      	cmp	r3, r2
3418dbe8:	f000 81d0 	beq.w	3418df8c <RCCEx_GetUSARTCLKFreq+0x3ec>
3418dbec:	4a97      	ldr	r2, [pc, #604]	@ (3418de4c <RCCEx_GetUSARTCLKFreq+0x2ac>)
3418dbee:	4293      	cmp	r3, r2
3418dbf0:	f200 81eb 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dbf4:	4a96      	ldr	r2, [pc, #600]	@ (3418de50 <RCCEx_GetUSARTCLKFreq+0x2b0>)
3418dbf6:	4293      	cmp	r3, r2
3418dbf8:	f000 81c8 	beq.w	3418df8c <RCCEx_GetUSARTCLKFreq+0x3ec>
3418dbfc:	4a94      	ldr	r2, [pc, #592]	@ (3418de50 <RCCEx_GetUSARTCLKFreq+0x2b0>)
3418dbfe:	4293      	cmp	r3, r2
3418dc00:	f200 81e3 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dc04:	4a93      	ldr	r2, [pc, #588]	@ (3418de54 <RCCEx_GetUSARTCLKFreq+0x2b4>)
3418dc06:	4293      	cmp	r3, r2
3418dc08:	f000 81ce 	beq.w	3418dfa8 <RCCEx_GetUSARTCLKFreq+0x408>
3418dc0c:	4a91      	ldr	r2, [pc, #580]	@ (3418de54 <RCCEx_GetUSARTCLKFreq+0x2b4>)
3418dc0e:	4293      	cmp	r3, r2
3418dc10:	f200 81db 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dc14:	4a90      	ldr	r2, [pc, #576]	@ (3418de58 <RCCEx_GetUSARTCLKFreq+0x2b8>)
3418dc16:	4293      	cmp	r3, r2
3418dc18:	f000 81c6 	beq.w	3418dfa8 <RCCEx_GetUSARTCLKFreq+0x408>
3418dc1c:	4a8e      	ldr	r2, [pc, #568]	@ (3418de58 <RCCEx_GetUSARTCLKFreq+0x2b8>)
3418dc1e:	4293      	cmp	r3, r2
3418dc20:	f200 81d3 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dc24:	4a8d      	ldr	r2, [pc, #564]	@ (3418de5c <RCCEx_GetUSARTCLKFreq+0x2bc>)
3418dc26:	4293      	cmp	r3, r2
3418dc28:	f000 81be 	beq.w	3418dfa8 <RCCEx_GetUSARTCLKFreq+0x408>
3418dc2c:	4a8b      	ldr	r2, [pc, #556]	@ (3418de5c <RCCEx_GetUSARTCLKFreq+0x2bc>)
3418dc2e:	4293      	cmp	r3, r2
3418dc30:	f200 81cb 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dc34:	4a8a      	ldr	r2, [pc, #552]	@ (3418de60 <RCCEx_GetUSARTCLKFreq+0x2c0>)
3418dc36:	4293      	cmp	r3, r2
3418dc38:	f000 81b6 	beq.w	3418dfa8 <RCCEx_GetUSARTCLKFreq+0x408>
3418dc3c:	4a88      	ldr	r2, [pc, #544]	@ (3418de60 <RCCEx_GetUSARTCLKFreq+0x2c0>)
3418dc3e:	4293      	cmp	r3, r2
3418dc40:	f200 81c3 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dc44:	4a87      	ldr	r2, [pc, #540]	@ (3418de64 <RCCEx_GetUSARTCLKFreq+0x2c4>)
3418dc46:	4293      	cmp	r3, r2
3418dc48:	f000 81ae 	beq.w	3418dfa8 <RCCEx_GetUSARTCLKFreq+0x408>
3418dc4c:	4a85      	ldr	r2, [pc, #532]	@ (3418de64 <RCCEx_GetUSARTCLKFreq+0x2c4>)
3418dc4e:	4293      	cmp	r3, r2
3418dc50:	f200 81bb 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dc54:	4a84      	ldr	r2, [pc, #528]	@ (3418de68 <RCCEx_GetUSARTCLKFreq+0x2c8>)
3418dc56:	4293      	cmp	r3, r2
3418dc58:	f000 81ae 	beq.w	3418dfb8 <RCCEx_GetUSARTCLKFreq+0x418>
3418dc5c:	4a82      	ldr	r2, [pc, #520]	@ (3418de68 <RCCEx_GetUSARTCLKFreq+0x2c8>)
3418dc5e:	4293      	cmp	r3, r2
3418dc60:	f200 81b3 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dc64:	4a81      	ldr	r2, [pc, #516]	@ (3418de6c <RCCEx_GetUSARTCLKFreq+0x2cc>)
3418dc66:	4293      	cmp	r3, r2
3418dc68:	f000 81a6 	beq.w	3418dfb8 <RCCEx_GetUSARTCLKFreq+0x418>
3418dc6c:	4a7f      	ldr	r2, [pc, #508]	@ (3418de6c <RCCEx_GetUSARTCLKFreq+0x2cc>)
3418dc6e:	4293      	cmp	r3, r2
3418dc70:	f200 81ab 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dc74:	4a7e      	ldr	r2, [pc, #504]	@ (3418de70 <RCCEx_GetUSARTCLKFreq+0x2d0>)
3418dc76:	4293      	cmp	r3, r2
3418dc78:	f000 819e 	beq.w	3418dfb8 <RCCEx_GetUSARTCLKFreq+0x418>
3418dc7c:	4a7c      	ldr	r2, [pc, #496]	@ (3418de70 <RCCEx_GetUSARTCLKFreq+0x2d0>)
3418dc7e:	4293      	cmp	r3, r2
3418dc80:	f200 81a3 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dc84:	4a7b      	ldr	r2, [pc, #492]	@ (3418de74 <RCCEx_GetUSARTCLKFreq+0x2d4>)
3418dc86:	4293      	cmp	r3, r2
3418dc88:	f000 8196 	beq.w	3418dfb8 <RCCEx_GetUSARTCLKFreq+0x418>
3418dc8c:	4a79      	ldr	r2, [pc, #484]	@ (3418de74 <RCCEx_GetUSARTCLKFreq+0x2d4>)
3418dc8e:	4293      	cmp	r3, r2
3418dc90:	f200 819b 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dc94:	4a78      	ldr	r2, [pc, #480]	@ (3418de78 <RCCEx_GetUSARTCLKFreq+0x2d8>)
3418dc96:	4293      	cmp	r3, r2
3418dc98:	f000 818e 	beq.w	3418dfb8 <RCCEx_GetUSARTCLKFreq+0x418>
3418dc9c:	4a76      	ldr	r2, [pc, #472]	@ (3418de78 <RCCEx_GetUSARTCLKFreq+0x2d8>)
3418dc9e:	4293      	cmp	r3, r2
3418dca0:	f200 8193 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dca4:	4a75      	ldr	r2, [pc, #468]	@ (3418de7c <RCCEx_GetUSARTCLKFreq+0x2dc>)
3418dca6:	4293      	cmp	r3, r2
3418dca8:	f000 812d 	beq.w	3418df06 <RCCEx_GetUSARTCLKFreq+0x366>
3418dcac:	4a73      	ldr	r2, [pc, #460]	@ (3418de7c <RCCEx_GetUSARTCLKFreq+0x2dc>)
3418dcae:	4293      	cmp	r3, r2
3418dcb0:	f200 818b 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dcb4:	4a72      	ldr	r2, [pc, #456]	@ (3418de80 <RCCEx_GetUSARTCLKFreq+0x2e0>)
3418dcb6:	4293      	cmp	r3, r2
3418dcb8:	f000 8125 	beq.w	3418df06 <RCCEx_GetUSARTCLKFreq+0x366>
3418dcbc:	4a70      	ldr	r2, [pc, #448]	@ (3418de80 <RCCEx_GetUSARTCLKFreq+0x2e0>)
3418dcbe:	4293      	cmp	r3, r2
3418dcc0:	f200 8183 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dcc4:	4a6f      	ldr	r2, [pc, #444]	@ (3418de84 <RCCEx_GetUSARTCLKFreq+0x2e4>)
3418dcc6:	4293      	cmp	r3, r2
3418dcc8:	f000 811d 	beq.w	3418df06 <RCCEx_GetUSARTCLKFreq+0x366>
3418dccc:	4a6d      	ldr	r2, [pc, #436]	@ (3418de84 <RCCEx_GetUSARTCLKFreq+0x2e4>)
3418dcce:	4293      	cmp	r3, r2
3418dcd0:	f200 817b 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dcd4:	4a6c      	ldr	r2, [pc, #432]	@ (3418de88 <RCCEx_GetUSARTCLKFreq+0x2e8>)
3418dcd6:	4293      	cmp	r3, r2
3418dcd8:	f000 8115 	beq.w	3418df06 <RCCEx_GetUSARTCLKFreq+0x366>
3418dcdc:	4a6a      	ldr	r2, [pc, #424]	@ (3418de88 <RCCEx_GetUSARTCLKFreq+0x2e8>)
3418dcde:	4293      	cmp	r3, r2
3418dce0:	f200 8173 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dce4:	4a69      	ldr	r2, [pc, #420]	@ (3418de8c <RCCEx_GetUSARTCLKFreq+0x2ec>)
3418dce6:	4293      	cmp	r3, r2
3418dce8:	f000 810d 	beq.w	3418df06 <RCCEx_GetUSARTCLKFreq+0x366>
3418dcec:	4a67      	ldr	r2, [pc, #412]	@ (3418de8c <RCCEx_GetUSARTCLKFreq+0x2ec>)
3418dcee:	4293      	cmp	r3, r2
3418dcf0:	f200 816b 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dcf4:	4a66      	ldr	r2, [pc, #408]	@ (3418de90 <RCCEx_GetUSARTCLKFreq+0x2f0>)
3418dcf6:	4293      	cmp	r3, r2
3418dcf8:	d07b      	beq.n	3418ddf2 <RCCEx_GetUSARTCLKFreq+0x252>
3418dcfa:	4a65      	ldr	r2, [pc, #404]	@ (3418de90 <RCCEx_GetUSARTCLKFreq+0x2f0>)
3418dcfc:	4293      	cmp	r3, r2
3418dcfe:	f200 8164 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dd02:	4a64      	ldr	r2, [pc, #400]	@ (3418de94 <RCCEx_GetUSARTCLKFreq+0x2f4>)
3418dd04:	4293      	cmp	r3, r2
3418dd06:	d074      	beq.n	3418ddf2 <RCCEx_GetUSARTCLKFreq+0x252>
3418dd08:	4a62      	ldr	r2, [pc, #392]	@ (3418de94 <RCCEx_GetUSARTCLKFreq+0x2f4>)
3418dd0a:	4293      	cmp	r3, r2
3418dd0c:	f200 815d 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dd10:	4a61      	ldr	r2, [pc, #388]	@ (3418de98 <RCCEx_GetUSARTCLKFreq+0x2f8>)
3418dd12:	4293      	cmp	r3, r2
3418dd14:	d06d      	beq.n	3418ddf2 <RCCEx_GetUSARTCLKFreq+0x252>
3418dd16:	4a60      	ldr	r2, [pc, #384]	@ (3418de98 <RCCEx_GetUSARTCLKFreq+0x2f8>)
3418dd18:	4293      	cmp	r3, r2
3418dd1a:	f200 8156 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dd1e:	4a5f      	ldr	r2, [pc, #380]	@ (3418de9c <RCCEx_GetUSARTCLKFreq+0x2fc>)
3418dd20:	4293      	cmp	r3, r2
3418dd22:	d066      	beq.n	3418ddf2 <RCCEx_GetUSARTCLKFreq+0x252>
3418dd24:	4a5d      	ldr	r2, [pc, #372]	@ (3418de9c <RCCEx_GetUSARTCLKFreq+0x2fc>)
3418dd26:	4293      	cmp	r3, r2
3418dd28:	f200 814f 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dd2c:	4a5c      	ldr	r2, [pc, #368]	@ (3418dea0 <RCCEx_GetUSARTCLKFreq+0x300>)
3418dd2e:	4293      	cmp	r3, r2
3418dd30:	d05f      	beq.n	3418ddf2 <RCCEx_GetUSARTCLKFreq+0x252>
3418dd32:	4a5b      	ldr	r2, [pc, #364]	@ (3418dea0 <RCCEx_GetUSARTCLKFreq+0x300>)
3418dd34:	4293      	cmp	r3, r2
3418dd36:	f200 8148 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dd3a:	4a5a      	ldr	r2, [pc, #360]	@ (3418dea4 <RCCEx_GetUSARTCLKFreq+0x304>)
3418dd3c:	4293      	cmp	r3, r2
3418dd3e:	d053      	beq.n	3418dde8 <RCCEx_GetUSARTCLKFreq+0x248>
3418dd40:	4a58      	ldr	r2, [pc, #352]	@ (3418dea4 <RCCEx_GetUSARTCLKFreq+0x304>)
3418dd42:	4293      	cmp	r3, r2
3418dd44:	f200 8141 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dd48:	4a57      	ldr	r2, [pc, #348]	@ (3418dea8 <RCCEx_GetUSARTCLKFreq+0x308>)
3418dd4a:	4293      	cmp	r3, r2
3418dd4c:	d04c      	beq.n	3418dde8 <RCCEx_GetUSARTCLKFreq+0x248>
3418dd4e:	4a56      	ldr	r2, [pc, #344]	@ (3418dea8 <RCCEx_GetUSARTCLKFreq+0x308>)
3418dd50:	4293      	cmp	r3, r2
3418dd52:	f200 813a 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dd56:	4a55      	ldr	r2, [pc, #340]	@ (3418deac <RCCEx_GetUSARTCLKFreq+0x30c>)
3418dd58:	4293      	cmp	r3, r2
3418dd5a:	d045      	beq.n	3418dde8 <RCCEx_GetUSARTCLKFreq+0x248>
3418dd5c:	4a53      	ldr	r2, [pc, #332]	@ (3418deac <RCCEx_GetUSARTCLKFreq+0x30c>)
3418dd5e:	4293      	cmp	r3, r2
3418dd60:	f200 8133 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dd64:	4a52      	ldr	r2, [pc, #328]	@ (3418deb0 <RCCEx_GetUSARTCLKFreq+0x310>)
3418dd66:	4293      	cmp	r3, r2
3418dd68:	d03e      	beq.n	3418dde8 <RCCEx_GetUSARTCLKFreq+0x248>
3418dd6a:	4a51      	ldr	r2, [pc, #324]	@ (3418deb0 <RCCEx_GetUSARTCLKFreq+0x310>)
3418dd6c:	4293      	cmp	r3, r2
3418dd6e:	f200 812c 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dd72:	4a50      	ldr	r2, [pc, #320]	@ (3418deb4 <RCCEx_GetUSARTCLKFreq+0x314>)
3418dd74:	4293      	cmp	r3, r2
3418dd76:	d037      	beq.n	3418dde8 <RCCEx_GetUSARTCLKFreq+0x248>
3418dd78:	4a4e      	ldr	r2, [pc, #312]	@ (3418deb4 <RCCEx_GetUSARTCLKFreq+0x314>)
3418dd7a:	4293      	cmp	r3, r2
3418dd7c:	f200 8125 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dd80:	4a4d      	ldr	r2, [pc, #308]	@ (3418deb8 <RCCEx_GetUSARTCLKFreq+0x318>)
3418dd82:	4293      	cmp	r3, r2
3418dd84:	d018      	beq.n	3418ddb8 <RCCEx_GetUSARTCLKFreq+0x218>
3418dd86:	4a4c      	ldr	r2, [pc, #304]	@ (3418deb8 <RCCEx_GetUSARTCLKFreq+0x318>)
3418dd88:	4293      	cmp	r3, r2
3418dd8a:	f200 811e 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dd8e:	4a4b      	ldr	r2, [pc, #300]	@ (3418debc <RCCEx_GetUSARTCLKFreq+0x31c>)
3418dd90:	4293      	cmp	r3, r2
3418dd92:	d01d      	beq.n	3418ddd0 <RCCEx_GetUSARTCLKFreq+0x230>
3418dd94:	4a49      	ldr	r2, [pc, #292]	@ (3418debc <RCCEx_GetUSARTCLKFreq+0x31c>)
3418dd96:	4293      	cmp	r3, r2
3418dd98:	f200 8117 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418dd9c:	4a48      	ldr	r2, [pc, #288]	@ (3418dec0 <RCCEx_GetUSARTCLKFreq+0x320>)
3418dd9e:	4293      	cmp	r3, r2
3418dda0:	d00a      	beq.n	3418ddb8 <RCCEx_GetUSARTCLKFreq+0x218>
3418dda2:	4a47      	ldr	r2, [pc, #284]	@ (3418dec0 <RCCEx_GetUSARTCLKFreq+0x320>)
3418dda4:	4293      	cmp	r3, r2
3418dda6:	f200 8110 	bhi.w	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
3418ddaa:	4a46      	ldr	r2, [pc, #280]	@ (3418dec4 <RCCEx_GetUSARTCLKFreq+0x324>)
3418ddac:	4293      	cmp	r3, r2
3418ddae:	d003      	beq.n	3418ddb8 <RCCEx_GetUSARTCLKFreq+0x218>
3418ddb0:	4a45      	ldr	r2, [pc, #276]	@ (3418dec8 <RCCEx_GetUSARTCLKFreq+0x328>)
3418ddb2:	4293      	cmp	r3, r2
3418ddb4:	d00c      	beq.n	3418ddd0 <RCCEx_GetUSARTCLKFreq+0x230>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418ddb6:	e108      	b.n	3418dfca <RCCEx_GetUSARTCLKFreq+0x42a>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418ddb8:	f7f7 ff78 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418ddbc:	4603      	mov	r3, r0
3418ddbe:	4618      	mov	r0, r3
3418ddc0:	f7fc ff1a 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418ddc4:	4603      	mov	r3, r0
3418ddc6:	4618      	mov	r0, r3
3418ddc8:	f7fc ff37 	bl	3418ac3a <RCCEx_GetPCLK2Freq>
3418ddcc:	60f8      	str	r0, [r7, #12]
      break;
3418ddce:	e107      	b.n	3418dfe0 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418ddd0:	f7f7 ff6c 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418ddd4:	4603      	mov	r3, r0
3418ddd6:	4618      	mov	r0, r3
3418ddd8:	f7fc ff0e 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418dddc:	4603      	mov	r3, r0
3418ddde:	4618      	mov	r0, r3
3418dde0:	f7fc ff1b 	bl	3418ac1a <RCCEx_GetPCLK1Freq>
3418dde4:	60f8      	str	r0, [r7, #12]
      break;
3418dde6:	e0fb      	b.n	3418dfe0 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418dde8:	2007      	movs	r0, #7
3418ddea:	f7fd f9f1 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418ddee:	60f8      	str	r0, [r7, #12]
      break;
3418ddf0:	e0f6      	b.n	3418dfe0 <RCCEx_GetUSARTCLKFreq+0x440>
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418ddf2:	f7f9 fb95 	bl	34187520 <LL_RCC_IC9_IsEnabled>
3418ddf6:	4603      	mov	r3, r0
3418ddf8:	2b00      	cmp	r3, #0
3418ddfa:	f000 80e8 	beq.w	3418dfce <RCCEx_GetUSARTCLKFreq+0x42e>
        ic_divider = LL_RCC_IC9_GetDivider();
3418ddfe:	f7f9 fbb1 	bl	34187564 <LL_RCC_IC9_GetDivider>
3418de02:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418de04:	f7f9 fba0 	bl	34187548 <LL_RCC_IC9_GetSource>
3418de08:	4603      	mov	r3, r0
3418de0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418de0e:	d06f      	beq.n	3418def0 <RCCEx_GetUSARTCLKFreq+0x350>
3418de10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418de14:	d875      	bhi.n	3418df02 <RCCEx_GetUSARTCLKFreq+0x362>
3418de16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418de1a:	d060      	beq.n	3418dede <RCCEx_GetUSARTCLKFreq+0x33e>
3418de1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418de20:	d86f      	bhi.n	3418df02 <RCCEx_GetUSARTCLKFreq+0x362>
3418de22:	2b00      	cmp	r3, #0
3418de24:	d003      	beq.n	3418de2e <RCCEx_GetUSARTCLKFreq+0x28e>
3418de26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418de2a:	d04f      	beq.n	3418decc <RCCEx_GetUSARTCLKFreq+0x32c>
            break;
3418de2c:	e069      	b.n	3418df02 <RCCEx_GetUSARTCLKFreq+0x362>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418de2e:	f7fc fdcb 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418de32:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418de34:	68fa      	ldr	r2, [r7, #12]
3418de36:	68bb      	ldr	r3, [r7, #8]
3418de38:	fbb2 f3f3 	udiv	r3, r2, r3
3418de3c:	60fb      	str	r3, [r7, #12]
            break;
3418de3e:	e061      	b.n	3418df04 <RCCEx_GetUSARTCLKFreq+0x364>
3418de40:	07061430 	.word	0x07061430
3418de44:	07060830 	.word	0x07060830
3418de48:	07060434 	.word	0x07060434
3418de4c:	07060430 	.word	0x07060430
3418de50:	07060030 	.word	0x07060030
3418de54:	07051430 	.word	0x07051430
3418de58:	07050830 	.word	0x07050830
3418de5c:	07050434 	.word	0x07050434
3418de60:	07050430 	.word	0x07050430
3418de64:	07050030 	.word	0x07050030
3418de68:	07041430 	.word	0x07041430
3418de6c:	07040830 	.word	0x07040830
3418de70:	07040434 	.word	0x07040434
3418de74:	07040430 	.word	0x07040430
3418de78:	07040030 	.word	0x07040030
3418de7c:	07031430 	.word	0x07031430
3418de80:	07030830 	.word	0x07030830
3418de84:	07030434 	.word	0x07030434
3418de88:	07030430 	.word	0x07030430
3418de8c:	07030030 	.word	0x07030030
3418de90:	07021430 	.word	0x07021430
3418de94:	07020830 	.word	0x07020830
3418de98:	07020434 	.word	0x07020434
3418de9c:	07020430 	.word	0x07020430
3418dea0:	07020030 	.word	0x07020030
3418dea4:	07011430 	.word	0x07011430
3418dea8:	07010830 	.word	0x07010830
3418deac:	07010434 	.word	0x07010434
3418deb0:	07010430 	.word	0x07010430
3418deb4:	07010030 	.word	0x07010030
3418deb8:	07001430 	.word	0x07001430
3418debc:	07000830 	.word	0x07000830
3418dec0:	07000434 	.word	0x07000434
3418dec4:	07000030 	.word	0x07000030
3418dec8:	07000430 	.word	0x07000430
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418decc:	f7fc fdc2 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418ded0:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418ded2:	68fa      	ldr	r2, [r7, #12]
3418ded4:	68bb      	ldr	r3, [r7, #8]
3418ded6:	fbb2 f3f3 	udiv	r3, r2, r3
3418deda:	60fb      	str	r3, [r7, #12]
            break;
3418dedc:	e012      	b.n	3418df04 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418dede:	f7fc fdff 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418dee2:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418dee4:	68fa      	ldr	r2, [r7, #12]
3418dee6:	68bb      	ldr	r3, [r7, #8]
3418dee8:	fbb2 f3f3 	udiv	r3, r2, r3
3418deec:	60fb      	str	r3, [r7, #12]
            break;
3418deee:	e009      	b.n	3418df04 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418def0:	f7fc fe3c 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418def4:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418def6:	68fa      	ldr	r2, [r7, #12]
3418def8:	68bb      	ldr	r3, [r7, #8]
3418defa:	fbb2 f3f3 	udiv	r3, r2, r3
3418defe:	60fb      	str	r3, [r7, #12]
            break;
3418df00:	e000      	b.n	3418df04 <RCCEx_GetUSARTCLKFreq+0x364>
            break;
3418df02:	bf00      	nop
      break;
3418df04:	e063      	b.n	3418dfce <RCCEx_GetUSARTCLKFreq+0x42e>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418df06:	f7f9 fc0b 	bl	34187720 <LL_RCC_IC14_IsEnabled>
3418df0a:	4603      	mov	r3, r0
3418df0c:	2b00      	cmp	r3, #0
3418df0e:	d060      	beq.n	3418dfd2 <RCCEx_GetUSARTCLKFreq+0x432>
        ic_divider = LL_RCC_IC14_GetDivider();
3418df10:	f7f9 fc28 	bl	34187764 <LL_RCC_IC14_GetDivider>
3418df14:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418df16:	f7f9 fc17 	bl	34187748 <LL_RCC_IC14_GetSource>
3418df1a:	4603      	mov	r3, r0
3418df1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418df20:	d029      	beq.n	3418df76 <RCCEx_GetUSARTCLKFreq+0x3d6>
3418df22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418df26:	d82f      	bhi.n	3418df88 <RCCEx_GetUSARTCLKFreq+0x3e8>
3418df28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418df2c:	d01a      	beq.n	3418df64 <RCCEx_GetUSARTCLKFreq+0x3c4>
3418df2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418df32:	d829      	bhi.n	3418df88 <RCCEx_GetUSARTCLKFreq+0x3e8>
3418df34:	2b00      	cmp	r3, #0
3418df36:	d003      	beq.n	3418df40 <RCCEx_GetUSARTCLKFreq+0x3a0>
3418df38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418df3c:	d009      	beq.n	3418df52 <RCCEx_GetUSARTCLKFreq+0x3b2>
            break;
3418df3e:	e023      	b.n	3418df88 <RCCEx_GetUSARTCLKFreq+0x3e8>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418df40:	f7fc fd42 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418df44:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418df46:	68fa      	ldr	r2, [r7, #12]
3418df48:	68bb      	ldr	r3, [r7, #8]
3418df4a:	fbb2 f3f3 	udiv	r3, r2, r3
3418df4e:	60fb      	str	r3, [r7, #12]
            break;
3418df50:	e01b      	b.n	3418df8a <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418df52:	f7fc fd7f 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418df56:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418df58:	68fa      	ldr	r2, [r7, #12]
3418df5a:	68bb      	ldr	r3, [r7, #8]
3418df5c:	fbb2 f3f3 	udiv	r3, r2, r3
3418df60:	60fb      	str	r3, [r7, #12]
            break;
3418df62:	e012      	b.n	3418df8a <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418df64:	f7fc fdbc 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418df68:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418df6a:	68fa      	ldr	r2, [r7, #12]
3418df6c:	68bb      	ldr	r3, [r7, #8]
3418df6e:	fbb2 f3f3 	udiv	r3, r2, r3
3418df72:	60fb      	str	r3, [r7, #12]
            break;
3418df74:	e009      	b.n	3418df8a <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418df76:	f7fc fdf9 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418df7a:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418df7c:	68fa      	ldr	r2, [r7, #12]
3418df7e:	68bb      	ldr	r3, [r7, #8]
3418df80:	fbb2 f3f3 	udiv	r3, r2, r3
3418df84:	60fb      	str	r3, [r7, #12]
            break;
3418df86:	e000      	b.n	3418df8a <RCCEx_GetUSARTCLKFreq+0x3ea>
            break;
3418df88:	bf00      	nop
      break;
3418df8a:	e022      	b.n	3418dfd2 <RCCEx_GetUSARTCLKFreq+0x432>
      if (LL_RCC_HSI_IsReady() != 0U)
3418df8c:	f7f8 faa4 	bl	341864d8 <LL_RCC_HSI_IsReady>
3418df90:	4603      	mov	r3, r0
3418df92:	2b00      	cmp	r3, #0
3418df94:	d01f      	beq.n	3418dfd6 <RCCEx_GetUSARTCLKFreq+0x436>
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418df96:	f7f8 fab1 	bl	341864fc <LL_RCC_HSI_GetDivider>
3418df9a:	4603      	mov	r3, r0
3418df9c:	09db      	lsrs	r3, r3, #7
3418df9e:	4a13      	ldr	r2, [pc, #76]	@ (3418dfec <RCCEx_GetUSARTCLKFreq+0x44c>)
3418dfa0:	fa22 f303 	lsr.w	r3, r2, r3
3418dfa4:	60fb      	str	r3, [r7, #12]
      break;
3418dfa6:	e016      	b.n	3418dfd6 <RCCEx_GetUSARTCLKFreq+0x436>
      if (LL_RCC_MSI_IsReady() != 0U)
3418dfa8:	f7f8 fab6 	bl	34186518 <LL_RCC_MSI_IsReady>
3418dfac:	4603      	mov	r3, r0
3418dfae:	2b00      	cmp	r3, #0
3418dfb0:	d013      	beq.n	3418dfda <RCCEx_GetUSARTCLKFreq+0x43a>
        usart_frequency = MSI_VALUE;
3418dfb2:	4b0f      	ldr	r3, [pc, #60]	@ (3418dff0 <RCCEx_GetUSARTCLKFreq+0x450>)
3418dfb4:	60fb      	str	r3, [r7, #12]
      break;
3418dfb6:	e010      	b.n	3418dfda <RCCEx_GetUSARTCLKFreq+0x43a>
      if (LL_RCC_LSE_IsReady() != 0U)
3418dfb8:	f7f8 face 	bl	34186558 <LL_RCC_LSE_IsReady>
3418dfbc:	4603      	mov	r3, r0
3418dfbe:	2b00      	cmp	r3, #0
3418dfc0:	d00d      	beq.n	3418dfde <RCCEx_GetUSARTCLKFreq+0x43e>
        usart_frequency = LSE_VALUE;
3418dfc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418dfc6:	60fb      	str	r3, [r7, #12]
      break;
3418dfc8:	e009      	b.n	3418dfde <RCCEx_GetUSARTCLKFreq+0x43e>
      break;
3418dfca:	bf00      	nop
3418dfcc:	e008      	b.n	3418dfe0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418dfce:	bf00      	nop
3418dfd0:	e006      	b.n	3418dfe0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418dfd2:	bf00      	nop
3418dfd4:	e004      	b.n	3418dfe0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418dfd6:	bf00      	nop
3418dfd8:	e002      	b.n	3418dfe0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418dfda:	bf00      	nop
3418dfdc:	e000      	b.n	3418dfe0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418dfde:	bf00      	nop
  }

  return usart_frequency;
3418dfe0:	68fb      	ldr	r3, [r7, #12]
}
3418dfe2:	4618      	mov	r0, r3
3418dfe4:	3710      	adds	r7, #16
3418dfe6:	46bd      	mov	sp, r7
3418dfe8:	bd80      	pop	{r7, pc}
3418dfea:	bf00      	nop
3418dfec:	03d09000 	.word	0x03d09000
3418dff0:	003d0900 	.word	0x003d0900

3418dff4 <RCCEx_GetOTGPHYCLKFreq>:
  *         @arg @ref RCCEx_USB_OTGHS2_Clock_Source
  * @retval OTGPHY clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCLKFreq(uint32_t OTGPHYxSource)
{
3418dff4:	b580      	push	{r7, lr}
3418dff6:	b084      	sub	sp, #16
3418dff8:	af00      	add	r7, sp, #0
3418dffa:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3418dffc:	2300      	movs	r3, #0
3418dffe:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
3418e000:	6878      	ldr	r0, [r7, #4]
3418e002:	f7f8 fe69 	bl	34186cd8 <LL_RCC_GetUSBClockSource>
3418e006:	4603      	mov	r3, r0
3418e008:	4a4b      	ldr	r2, [pc, #300]	@ (3418e138 <RCCEx_GetOTGPHYCLKFreq+0x144>)
3418e00a:	4293      	cmp	r3, r2
3418e00c:	d035      	beq.n	3418e07a <RCCEx_GetOTGPHYCLKFreq+0x86>
3418e00e:	4a4a      	ldr	r2, [pc, #296]	@ (3418e138 <RCCEx_GetOTGPHYCLKFreq+0x144>)
3418e010:	4293      	cmp	r3, r2
3418e012:	f200 8085 	bhi.w	3418e120 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418e016:	4a49      	ldr	r2, [pc, #292]	@ (3418e13c <RCCEx_GetOTGPHYCLKFreq+0x148>)
3418e018:	4293      	cmp	r3, r2
3418e01a:	d02e      	beq.n	3418e07a <RCCEx_GetOTGPHYCLKFreq+0x86>
3418e01c:	4a47      	ldr	r2, [pc, #284]	@ (3418e13c <RCCEx_GetOTGPHYCLKFreq+0x148>)
3418e01e:	4293      	cmp	r3, r2
3418e020:	d87e      	bhi.n	3418e120 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418e022:	4a47      	ldr	r2, [pc, #284]	@ (3418e140 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
3418e024:	4293      	cmp	r3, r2
3418e026:	d038      	beq.n	3418e09a <RCCEx_GetOTGPHYCLKFreq+0xa6>
3418e028:	4a45      	ldr	r2, [pc, #276]	@ (3418e140 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
3418e02a:	4293      	cmp	r3, r2
3418e02c:	d878      	bhi.n	3418e120 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418e02e:	4a45      	ldr	r2, [pc, #276]	@ (3418e144 <RCCEx_GetOTGPHYCLKFreq+0x150>)
3418e030:	4293      	cmp	r3, r2
3418e032:	d032      	beq.n	3418e09a <RCCEx_GetOTGPHYCLKFreq+0xa6>
3418e034:	4a43      	ldr	r2, [pc, #268]	@ (3418e144 <RCCEx_GetOTGPHYCLKFreq+0x150>)
3418e036:	4293      	cmp	r3, r2
3418e038:	d872      	bhi.n	3418e120 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418e03a:	4a43      	ldr	r2, [pc, #268]	@ (3418e148 <RCCEx_GetOTGPHYCLKFreq+0x154>)
3418e03c:	4293      	cmp	r3, r2
3418e03e:	d00f      	beq.n	3418e060 <RCCEx_GetOTGPHYCLKFreq+0x6c>
3418e040:	4a41      	ldr	r2, [pc, #260]	@ (3418e148 <RCCEx_GetOTGPHYCLKFreq+0x154>)
3418e042:	4293      	cmp	r3, r2
3418e044:	d86c      	bhi.n	3418e120 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418e046:	4a41      	ldr	r2, [pc, #260]	@ (3418e14c <RCCEx_GetOTGPHYCLKFreq+0x158>)
3418e048:	4293      	cmp	r3, r2
3418e04a:	d009      	beq.n	3418e060 <RCCEx_GetOTGPHYCLKFreq+0x6c>
3418e04c:	4a3f      	ldr	r2, [pc, #252]	@ (3418e14c <RCCEx_GetOTGPHYCLKFreq+0x158>)
3418e04e:	4293      	cmp	r3, r2
3418e050:	d866      	bhi.n	3418e120 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418e052:	4a3f      	ldr	r2, [pc, #252]	@ (3418e150 <RCCEx_GetOTGPHYCLKFreq+0x15c>)
3418e054:	4293      	cmp	r3, r2
3418e056:	d008      	beq.n	3418e06a <RCCEx_GetOTGPHYCLKFreq+0x76>
3418e058:	4a3e      	ldr	r2, [pc, #248]	@ (3418e154 <RCCEx_GetOTGPHYCLKFreq+0x160>)
3418e05a:	4293      	cmp	r3, r2
3418e05c:	d005      	beq.n	3418e06a <RCCEx_GetOTGPHYCLKFreq+0x76>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418e05e:	e05f      	b.n	3418e120 <RCCEx_GetOTGPHYCLKFreq+0x12c>
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418e060:	2007      	movs	r0, #7
3418e062:	f7fd f8b5 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418e066:	60f8      	str	r0, [r7, #12]
      break;
3418e068:	e061      	b.n	3418e12e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      if (LL_RCC_HSE_IsReady() != 0U)
3418e06a:	f7f8 fa23 	bl	341864b4 <LL_RCC_HSE_IsReady>
3418e06e:	4603      	mov	r3, r0
3418e070:	2b00      	cmp	r3, #0
3418e072:	d057      	beq.n	3418e124 <RCCEx_GetOTGPHYCLKFreq+0x130>
        usb_frequency = HSE_VALUE / 2U;
3418e074:	4b38      	ldr	r3, [pc, #224]	@ (3418e158 <RCCEx_GetOTGPHYCLKFreq+0x164>)
3418e076:	60fb      	str	r3, [r7, #12]
      break;
3418e078:	e054      	b.n	3418e124 <RCCEx_GetOTGPHYCLKFreq+0x130>
      if (LL_RCC_HSE_IsReady() != 0U)
3418e07a:	f7f8 fa1b 	bl	341864b4 <LL_RCC_HSE_IsReady>
3418e07e:	4603      	mov	r3, r0
3418e080:	2b00      	cmp	r3, #0
3418e082:	d051      	beq.n	3418e128 <RCCEx_GetOTGPHYCLKFreq+0x134>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3418e084:	f7f8 fa04 	bl	34186490 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
3418e088:	4603      	mov	r3, r0
3418e08a:	2b00      	cmp	r3, #0
3418e08c:	d102      	bne.n	3418e094 <RCCEx_GetOTGPHYCLKFreq+0xa0>
          usb_frequency = HSE_VALUE;
3418e08e:	4b33      	ldr	r3, [pc, #204]	@ (3418e15c <RCCEx_GetOTGPHYCLKFreq+0x168>)
3418e090:	60fb      	str	r3, [r7, #12]
      break;
3418e092:	e049      	b.n	3418e128 <RCCEx_GetOTGPHYCLKFreq+0x134>
          usb_frequency = HSE_VALUE / 2U;
3418e094:	4b30      	ldr	r3, [pc, #192]	@ (3418e158 <RCCEx_GetOTGPHYCLKFreq+0x164>)
3418e096:	60fb      	str	r3, [r7, #12]
      break;
3418e098:	e046      	b.n	3418e128 <RCCEx_GetOTGPHYCLKFreq+0x134>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3418e09a:	f7f9 fb81 	bl	341877a0 <LL_RCC_IC15_IsEnabled>
3418e09e:	4603      	mov	r3, r0
3418e0a0:	2b00      	cmp	r3, #0
3418e0a2:	d043      	beq.n	3418e12c <RCCEx_GetOTGPHYCLKFreq+0x138>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
3418e0a4:	f7f9 fb9e 	bl	341877e4 <LL_RCC_IC15_GetDivider>
3418e0a8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418e0aa:	f7f9 fb8d 	bl	341877c8 <LL_RCC_IC15_GetSource>
3418e0ae:	4603      	mov	r3, r0
3418e0b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418e0b4:	d029      	beq.n	3418e10a <RCCEx_GetOTGPHYCLKFreq+0x116>
3418e0b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418e0ba:	d82f      	bhi.n	3418e11c <RCCEx_GetOTGPHYCLKFreq+0x128>
3418e0bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418e0c0:	d01a      	beq.n	3418e0f8 <RCCEx_GetOTGPHYCLKFreq+0x104>
3418e0c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418e0c6:	d829      	bhi.n	3418e11c <RCCEx_GetOTGPHYCLKFreq+0x128>
3418e0c8:	2b00      	cmp	r3, #0
3418e0ca:	d003      	beq.n	3418e0d4 <RCCEx_GetOTGPHYCLKFreq+0xe0>
3418e0cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418e0d0:	d009      	beq.n	3418e0e6 <RCCEx_GetOTGPHYCLKFreq+0xf2>
            break;
3418e0d2:	e023      	b.n	3418e11c <RCCEx_GetOTGPHYCLKFreq+0x128>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418e0d4:	f7fc fc78 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418e0d8:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418e0da:	68fa      	ldr	r2, [r7, #12]
3418e0dc:	68bb      	ldr	r3, [r7, #8]
3418e0de:	fbb2 f3f3 	udiv	r3, r2, r3
3418e0e2:	60fb      	str	r3, [r7, #12]
            break;
3418e0e4:	e01b      	b.n	3418e11e <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418e0e6:	f7fc fcb5 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418e0ea:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418e0ec:	68fa      	ldr	r2, [r7, #12]
3418e0ee:	68bb      	ldr	r3, [r7, #8]
3418e0f0:	fbb2 f3f3 	udiv	r3, r2, r3
3418e0f4:	60fb      	str	r3, [r7, #12]
            break;
3418e0f6:	e012      	b.n	3418e11e <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418e0f8:	f7fc fcf2 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418e0fc:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418e0fe:	68fa      	ldr	r2, [r7, #12]
3418e100:	68bb      	ldr	r3, [r7, #8]
3418e102:	fbb2 f3f3 	udiv	r3, r2, r3
3418e106:	60fb      	str	r3, [r7, #12]
            break;
3418e108:	e009      	b.n	3418e11e <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418e10a:	f7fc fd2f 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418e10e:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418e110:	68fa      	ldr	r2, [r7, #12]
3418e112:	68bb      	ldr	r3, [r7, #8]
3418e114:	fbb2 f3f3 	udiv	r3, r2, r3
3418e118:	60fb      	str	r3, [r7, #12]
            break;
3418e11a:	e000      	b.n	3418e11e <RCCEx_GetOTGPHYCLKFreq+0x12a>
            break;
3418e11c:	bf00      	nop
      break;
3418e11e:	e005      	b.n	3418e12c <RCCEx_GetOTGPHYCLKFreq+0x138>
      break;
3418e120:	bf00      	nop
3418e122:	e004      	b.n	3418e12e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418e124:	bf00      	nop
3418e126:	e002      	b.n	3418e12e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418e128:	bf00      	nop
3418e12a:	e000      	b.n	3418e12e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418e12c:	bf00      	nop
  }

  return usb_frequency;
3418e12e:	68fb      	ldr	r3, [r7, #12]
}
3418e130:	4618      	mov	r0, r3
3418e132:	3710      	adds	r7, #16
3418e134:	46bd      	mov	sp, r7
3418e136:	bd80      	pop	{r7, pc}
3418e138:	03031414 	.word	0x03031414
3418e13c:	03030c14 	.word	0x03030c14
3418e140:	03021414 	.word	0x03021414
3418e144:	03020c14 	.word	0x03020c14
3418e148:	03011414 	.word	0x03011414
3418e14c:	03010c14 	.word	0x03010c14
3418e150:	03000c14 	.word	0x03000c14
3418e154:	03001414 	.word	0x03001414
3418e158:	00b71b00 	.word	0x00b71b00
3418e15c:	016e3600 	.word	0x016e3600

3418e160 <RCCEx_GetOTGPHYCKREFCLKFreq>:
  *         @arg @ref RCCEx_USBPHY2_Clock_Source
  * @retval OTGPHYCKREF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCKREFCLKFreq(uint32_t OTGPHYxCKREFSource)
{
3418e160:	b580      	push	{r7, lr}
3418e162:	b084      	sub	sp, #16
3418e164:	af00      	add	r7, sp, #0
3418e166:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3418e168:	2300      	movs	r3, #0
3418e16a:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
3418e16c:	6878      	ldr	r0, [r7, #4]
3418e16e:	f7f8 fdb3 	bl	34186cd8 <LL_RCC_GetUSBClockSource>
3418e172:	4603      	mov	r3, r0
3418e174:	4a1a      	ldr	r2, [pc, #104]	@ (3418e1e0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
3418e176:	4293      	cmp	r3, r2
3418e178:	d00f      	beq.n	3418e19a <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
3418e17a:	4a19      	ldr	r2, [pc, #100]	@ (3418e1e0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
3418e17c:	4293      	cmp	r3, r2
3418e17e:	d826      	bhi.n	3418e1ce <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
3418e180:	4a18      	ldr	r2, [pc, #96]	@ (3418e1e4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
3418e182:	4293      	cmp	r3, r2
3418e184:	d009      	beq.n	3418e19a <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
3418e186:	4a17      	ldr	r2, [pc, #92]	@ (3418e1e4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
3418e188:	4293      	cmp	r3, r2
3418e18a:	d820      	bhi.n	3418e1ce <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
3418e18c:	4a16      	ldr	r2, [pc, #88]	@ (3418e1e8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x88>)
3418e18e:	4293      	cmp	r3, r2
3418e190:	d013      	beq.n	3418e1ba <RCCEx_GetOTGPHYCKREFCLKFreq+0x5a>
3418e192:	4a16      	ldr	r2, [pc, #88]	@ (3418e1ec <RCCEx_GetOTGPHYCKREFCLKFreq+0x8c>)
3418e194:	4293      	cmp	r3, r2
3418e196:	d015      	beq.n	3418e1c4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x64>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
      break;

    default:
      /* Unexpected case */
      break;
3418e198:	e019      	b.n	3418e1ce <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
      if (LL_RCC_HSE_IsReady() != 0U)
3418e19a:	f7f8 f98b 	bl	341864b4 <LL_RCC_HSE_IsReady>
3418e19e:	4603      	mov	r3, r0
3418e1a0:	2b00      	cmp	r3, #0
3418e1a2:	d016      	beq.n	3418e1d2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3418e1a4:	f7f8 f974 	bl	34186490 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
3418e1a8:	4603      	mov	r3, r0
3418e1aa:	2b00      	cmp	r3, #0
3418e1ac:	d102      	bne.n	3418e1b4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>
          usb_frequency = HSE_VALUE;
3418e1ae:	4b10      	ldr	r3, [pc, #64]	@ (3418e1f0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x90>)
3418e1b0:	60fb      	str	r3, [r7, #12]
      break;
3418e1b2:	e00e      	b.n	3418e1d2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
          usb_frequency = HSE_VALUE / 2U;
3418e1b4:	4b0f      	ldr	r3, [pc, #60]	@ (3418e1f4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x94>)
3418e1b6:	60fb      	str	r3, [r7, #12]
      break;
3418e1b8:	e00b      	b.n	3418e1d2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
3418e1ba:	480f      	ldr	r0, [pc, #60]	@ (3418e1f8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x98>)
3418e1bc:	f7ff ff1a 	bl	3418dff4 <RCCEx_GetOTGPHYCLKFreq>
3418e1c0:	60f8      	str	r0, [r7, #12]
      break;
3418e1c2:	e007      	b.n	3418e1d4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3418e1c4:	480d      	ldr	r0, [pc, #52]	@ (3418e1fc <RCCEx_GetOTGPHYCKREFCLKFreq+0x9c>)
3418e1c6:	f7ff ff15 	bl	3418dff4 <RCCEx_GetOTGPHYCLKFreq>
3418e1ca:	60f8      	str	r0, [r7, #12]
      break;
3418e1cc:	e002      	b.n	3418e1d4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
3418e1ce:	bf00      	nop
3418e1d0:	e000      	b.n	3418e1d4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
3418e1d2:	bf00      	nop
  }

  return usb_frequency;
3418e1d4:	68fb      	ldr	r3, [r7, #12]
}
3418e1d6:	4618      	mov	r0, r3
3418e1d8:	3710      	adds	r7, #16
3418e1da:	46bd      	mov	sp, r7
3418e1dc:	bd80      	pop	{r7, pc}
3418e1de:	bf00      	nop
3418e1e0:	01011814 	.word	0x01011814
3418e1e4:	01011014 	.word	0x01011014
3418e1e8:	01001014 	.word	0x01001014
3418e1ec:	01001814 	.word	0x01001814
3418e1f0:	016e3600 	.word	0x016e3600
3418e1f4:	00b71b00 	.word	0x00b71b00
3418e1f8:	03000c14 	.word	0x03000c14
3418e1fc:	03001414 	.word	0x03001414

3418e200 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
3418e200:	b580      	push	{r7, lr}
3418e202:	b084      	sub	sp, #16
3418e204:	af00      	add	r7, sp, #0
3418e206:	6078      	str	r0, [r7, #4]
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
3418e208:	2300      	movs	r3, #0
3418e20a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
3418e20c:	6878      	ldr	r0, [r7, #4]
3418e20e:	f7f8 fd6f 	bl	34186cf0 <LL_RCC_GetXSPIClockSource>
3418e212:	4603      	mov	r3, r0
3418e214:	4a76      	ldr	r2, [pc, #472]	@ (3418e3f0 <RCCEx_GetXSPICLKFreq+0x1f0>)
3418e216:	4293      	cmp	r3, r2
3418e218:	f000 809d 	beq.w	3418e356 <RCCEx_GetXSPICLKFreq+0x156>
3418e21c:	4a74      	ldr	r2, [pc, #464]	@ (3418e3f0 <RCCEx_GetXSPICLKFreq+0x1f0>)
3418e21e:	4293      	cmp	r3, r2
3418e220:	f200 80dc 	bhi.w	3418e3dc <RCCEx_GetXSPICLKFreq+0x1dc>
3418e224:	4a73      	ldr	r2, [pc, #460]	@ (3418e3f4 <RCCEx_GetXSPICLKFreq+0x1f4>)
3418e226:	4293      	cmp	r3, r2
3418e228:	f000 8095 	beq.w	3418e356 <RCCEx_GetXSPICLKFreq+0x156>
3418e22c:	4a71      	ldr	r2, [pc, #452]	@ (3418e3f4 <RCCEx_GetXSPICLKFreq+0x1f4>)
3418e22e:	4293      	cmp	r3, r2
3418e230:	f200 80d4 	bhi.w	3418e3dc <RCCEx_GetXSPICLKFreq+0x1dc>
3418e234:	4a70      	ldr	r2, [pc, #448]	@ (3418e3f8 <RCCEx_GetXSPICLKFreq+0x1f8>)
3418e236:	4293      	cmp	r3, r2
3418e238:	f000 808d 	beq.w	3418e356 <RCCEx_GetXSPICLKFreq+0x156>
3418e23c:	4a6e      	ldr	r2, [pc, #440]	@ (3418e3f8 <RCCEx_GetXSPICLKFreq+0x1f8>)
3418e23e:	4293      	cmp	r3, r2
3418e240:	f200 80cc 	bhi.w	3418e3dc <RCCEx_GetXSPICLKFreq+0x1dc>
3418e244:	4a6d      	ldr	r2, [pc, #436]	@ (3418e3fc <RCCEx_GetXSPICLKFreq+0x1fc>)
3418e246:	4293      	cmp	r3, r2
3418e248:	d041      	beq.n	3418e2ce <RCCEx_GetXSPICLKFreq+0xce>
3418e24a:	4a6c      	ldr	r2, [pc, #432]	@ (3418e3fc <RCCEx_GetXSPICLKFreq+0x1fc>)
3418e24c:	4293      	cmp	r3, r2
3418e24e:	f200 80c5 	bhi.w	3418e3dc <RCCEx_GetXSPICLKFreq+0x1dc>
3418e252:	4a6b      	ldr	r2, [pc, #428]	@ (3418e400 <RCCEx_GetXSPICLKFreq+0x200>)
3418e254:	4293      	cmp	r3, r2
3418e256:	d03a      	beq.n	3418e2ce <RCCEx_GetXSPICLKFreq+0xce>
3418e258:	4a69      	ldr	r2, [pc, #420]	@ (3418e400 <RCCEx_GetXSPICLKFreq+0x200>)
3418e25a:	4293      	cmp	r3, r2
3418e25c:	f200 80be 	bhi.w	3418e3dc <RCCEx_GetXSPICLKFreq+0x1dc>
3418e260:	4a68      	ldr	r2, [pc, #416]	@ (3418e404 <RCCEx_GetXSPICLKFreq+0x204>)
3418e262:	4293      	cmp	r3, r2
3418e264:	d033      	beq.n	3418e2ce <RCCEx_GetXSPICLKFreq+0xce>
3418e266:	4a67      	ldr	r2, [pc, #412]	@ (3418e404 <RCCEx_GetXSPICLKFreq+0x204>)
3418e268:	4293      	cmp	r3, r2
3418e26a:	f200 80b7 	bhi.w	3418e3dc <RCCEx_GetXSPICLKFreq+0x1dc>
3418e26e:	4a66      	ldr	r2, [pc, #408]	@ (3418e408 <RCCEx_GetXSPICLKFreq+0x208>)
3418e270:	4293      	cmp	r3, r2
3418e272:	d027      	beq.n	3418e2c4 <RCCEx_GetXSPICLKFreq+0xc4>
3418e274:	4a64      	ldr	r2, [pc, #400]	@ (3418e408 <RCCEx_GetXSPICLKFreq+0x208>)
3418e276:	4293      	cmp	r3, r2
3418e278:	f200 80b0 	bhi.w	3418e3dc <RCCEx_GetXSPICLKFreq+0x1dc>
3418e27c:	4a63      	ldr	r2, [pc, #396]	@ (3418e40c <RCCEx_GetXSPICLKFreq+0x20c>)
3418e27e:	4293      	cmp	r3, r2
3418e280:	d020      	beq.n	3418e2c4 <RCCEx_GetXSPICLKFreq+0xc4>
3418e282:	4a62      	ldr	r2, [pc, #392]	@ (3418e40c <RCCEx_GetXSPICLKFreq+0x20c>)
3418e284:	4293      	cmp	r3, r2
3418e286:	f200 80a9 	bhi.w	3418e3dc <RCCEx_GetXSPICLKFreq+0x1dc>
3418e28a:	4a61      	ldr	r2, [pc, #388]	@ (3418e410 <RCCEx_GetXSPICLKFreq+0x210>)
3418e28c:	4293      	cmp	r3, r2
3418e28e:	d019      	beq.n	3418e2c4 <RCCEx_GetXSPICLKFreq+0xc4>
3418e290:	4a5f      	ldr	r2, [pc, #380]	@ (3418e410 <RCCEx_GetXSPICLKFreq+0x210>)
3418e292:	4293      	cmp	r3, r2
3418e294:	f200 80a2 	bhi.w	3418e3dc <RCCEx_GetXSPICLKFreq+0x1dc>
3418e298:	4a5e      	ldr	r2, [pc, #376]	@ (3418e414 <RCCEx_GetXSPICLKFreq+0x214>)
3418e29a:	4293      	cmp	r3, r2
3418e29c:	d00a      	beq.n	3418e2b4 <RCCEx_GetXSPICLKFreq+0xb4>
3418e29e:	4a5d      	ldr	r2, [pc, #372]	@ (3418e414 <RCCEx_GetXSPICLKFreq+0x214>)
3418e2a0:	4293      	cmp	r3, r2
3418e2a2:	f200 809b 	bhi.w	3418e3dc <RCCEx_GetXSPICLKFreq+0x1dc>
3418e2a6:	4a5c      	ldr	r2, [pc, #368]	@ (3418e418 <RCCEx_GetXSPICLKFreq+0x218>)
3418e2a8:	4293      	cmp	r3, r2
3418e2aa:	d003      	beq.n	3418e2b4 <RCCEx_GetXSPICLKFreq+0xb4>
3418e2ac:	4a5b      	ldr	r2, [pc, #364]	@ (3418e41c <RCCEx_GetXSPICLKFreq+0x21c>)
3418e2ae:	4293      	cmp	r3, r2
3418e2b0:	f040 8094 	bne.w	3418e3dc <RCCEx_GetXSPICLKFreq+0x1dc>
  {
    case LL_RCC_XSPI1_CLKSOURCE_HCLK:
    case LL_RCC_XSPI2_CLKSOURCE_HCLK:
    case LL_RCC_XSPI3_CLKSOURCE_HCLK:
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418e2b4:	f7f7 fcfa 	bl	34185cac <HAL_RCC_GetSysClockFreq>
3418e2b8:	4603      	mov	r3, r0
3418e2ba:	4618      	mov	r0, r3
3418e2bc:	f7fc fc9c 	bl	3418abf8 <RCCEx_GetHCLKFreq>
3418e2c0:	60f8      	str	r0, [r7, #12]
      break;
3418e2c2:	e090      	b.n	3418e3e6 <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_CLKP:
    case LL_RCC_XSPI2_CLKSOURCE_CLKP:
    case LL_RCC_XSPI3_CLKSOURCE_CLKP:
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418e2c4:	2007      	movs	r0, #7
3418e2c6:	f7fc ff83 	bl	3418b1d0 <RCCEx_GetCLKPCLKFreq>
3418e2ca:	60f8      	str	r0, [r7, #12]
      break;
3418e2cc:	e08b      	b.n	3418e3e6 <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_IC3:
    case LL_RCC_XSPI2_CLKSOURCE_IC3:
    case LL_RCC_XSPI3_CLKSOURCE_IC3:
      if (LL_RCC_IC3_IsEnabled() != 0U)
3418e2ce:	f7f8 ffe7 	bl	341872a0 <LL_RCC_IC3_IsEnabled>
3418e2d2:	4603      	mov	r3, r0
3418e2d4:	2b00      	cmp	r3, #0
3418e2d6:	f000 8083 	beq.w	3418e3e0 <RCCEx_GetXSPICLKFreq+0x1e0>
      {
        ic_divider = LL_RCC_IC3_GetDivider();
3418e2da:	f7f9 f803 	bl	341872e4 <LL_RCC_IC3_GetDivider>
3418e2de:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
3418e2e0:	f7f8 fff2 	bl	341872c8 <LL_RCC_IC3_GetSource>
3418e2e4:	4603      	mov	r3, r0
3418e2e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418e2ea:	d029      	beq.n	3418e340 <RCCEx_GetXSPICLKFreq+0x140>
3418e2ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418e2f0:	d82f      	bhi.n	3418e352 <RCCEx_GetXSPICLKFreq+0x152>
3418e2f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418e2f6:	d01a      	beq.n	3418e32e <RCCEx_GetXSPICLKFreq+0x12e>
3418e2f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418e2fc:	d829      	bhi.n	3418e352 <RCCEx_GetXSPICLKFreq+0x152>
3418e2fe:	2b00      	cmp	r3, #0
3418e300:	d003      	beq.n	3418e30a <RCCEx_GetXSPICLKFreq+0x10a>
3418e302:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418e306:	d009      	beq.n	3418e31c <RCCEx_GetXSPICLKFreq+0x11c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418e308:	e023      	b.n	3418e352 <RCCEx_GetXSPICLKFreq+0x152>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418e30a:	f7fc fb5d 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418e30e:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418e310:	68fa      	ldr	r2, [r7, #12]
3418e312:	68bb      	ldr	r3, [r7, #8]
3418e314:	fbb2 f3f3 	udiv	r3, r2, r3
3418e318:	60fb      	str	r3, [r7, #12]
            break;
3418e31a:	e01b      	b.n	3418e354 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418e31c:	f7fc fb9a 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418e320:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418e322:	68fa      	ldr	r2, [r7, #12]
3418e324:	68bb      	ldr	r3, [r7, #8]
3418e326:	fbb2 f3f3 	udiv	r3, r2, r3
3418e32a:	60fb      	str	r3, [r7, #12]
            break;
3418e32c:	e012      	b.n	3418e354 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418e32e:	f7fc fbd7 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418e332:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418e334:	68fa      	ldr	r2, [r7, #12]
3418e336:	68bb      	ldr	r3, [r7, #8]
3418e338:	fbb2 f3f3 	udiv	r3, r2, r3
3418e33c:	60fb      	str	r3, [r7, #12]
            break;
3418e33e:	e009      	b.n	3418e354 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418e340:	f7fc fc14 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418e344:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418e346:	68fa      	ldr	r2, [r7, #12]
3418e348:	68bb      	ldr	r3, [r7, #8]
3418e34a:	fbb2 f3f3 	udiv	r3, r2, r3
3418e34e:	60fb      	str	r3, [r7, #12]
            break;
3418e350:	e000      	b.n	3418e354 <RCCEx_GetXSPICLKFreq+0x154>
            break;
3418e352:	bf00      	nop
        }
      }
      break;
3418e354:	e044      	b.n	3418e3e0 <RCCEx_GetXSPICLKFreq+0x1e0>

    case LL_RCC_XSPI1_CLKSOURCE_IC4:
    case LL_RCC_XSPI2_CLKSOURCE_IC4:
    case LL_RCC_XSPI3_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
3418e356:	f7f8 ffe3 	bl	34187320 <LL_RCC_IC4_IsEnabled>
3418e35a:	4603      	mov	r3, r0
3418e35c:	2b00      	cmp	r3, #0
3418e35e:	d041      	beq.n	3418e3e4 <RCCEx_GetXSPICLKFreq+0x1e4>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
3418e360:	f7f9 f800 	bl	34187364 <LL_RCC_IC4_GetDivider>
3418e364:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
3418e366:	f7f8 ffef 	bl	34187348 <LL_RCC_IC4_GetSource>
3418e36a:	4603      	mov	r3, r0
3418e36c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418e370:	d029      	beq.n	3418e3c6 <RCCEx_GetXSPICLKFreq+0x1c6>
3418e372:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418e376:	d82f      	bhi.n	3418e3d8 <RCCEx_GetXSPICLKFreq+0x1d8>
3418e378:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418e37c:	d01a      	beq.n	3418e3b4 <RCCEx_GetXSPICLKFreq+0x1b4>
3418e37e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418e382:	d829      	bhi.n	3418e3d8 <RCCEx_GetXSPICLKFreq+0x1d8>
3418e384:	2b00      	cmp	r3, #0
3418e386:	d003      	beq.n	3418e390 <RCCEx_GetXSPICLKFreq+0x190>
3418e388:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418e38c:	d009      	beq.n	3418e3a2 <RCCEx_GetXSPICLKFreq+0x1a2>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418e38e:	e023      	b.n	3418e3d8 <RCCEx_GetXSPICLKFreq+0x1d8>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418e390:	f7fc fb1a 	bl	3418a9c8 <HAL_RCCEx_GetPLL1CLKFreq>
3418e394:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418e396:	68fa      	ldr	r2, [r7, #12]
3418e398:	68bb      	ldr	r3, [r7, #8]
3418e39a:	fbb2 f3f3 	udiv	r3, r2, r3
3418e39e:	60fb      	str	r3, [r7, #12]
            break;
3418e3a0:	e01b      	b.n	3418e3da <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418e3a2:	f7fc fb57 	bl	3418aa54 <HAL_RCCEx_GetPLL2CLKFreq>
3418e3a6:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418e3a8:	68fa      	ldr	r2, [r7, #12]
3418e3aa:	68bb      	ldr	r3, [r7, #8]
3418e3ac:	fbb2 f3f3 	udiv	r3, r2, r3
3418e3b0:	60fb      	str	r3, [r7, #12]
            break;
3418e3b2:	e012      	b.n	3418e3da <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418e3b4:	f7fc fb94 	bl	3418aae0 <HAL_RCCEx_GetPLL3CLKFreq>
3418e3b8:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418e3ba:	68fa      	ldr	r2, [r7, #12]
3418e3bc:	68bb      	ldr	r3, [r7, #8]
3418e3be:	fbb2 f3f3 	udiv	r3, r2, r3
3418e3c2:	60fb      	str	r3, [r7, #12]
            break;
3418e3c4:	e009      	b.n	3418e3da <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418e3c6:	f7fc fbd1 	bl	3418ab6c <HAL_RCCEx_GetPLL4CLKFreq>
3418e3ca:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418e3cc:	68fa      	ldr	r2, [r7, #12]
3418e3ce:	68bb      	ldr	r3, [r7, #8]
3418e3d0:	fbb2 f3f3 	udiv	r3, r2, r3
3418e3d4:	60fb      	str	r3, [r7, #12]
            break;
3418e3d6:	e000      	b.n	3418e3da <RCCEx_GetXSPICLKFreq+0x1da>
            break;
3418e3d8:	bf00      	nop
        }
      }
      break;
3418e3da:	e003      	b.n	3418e3e4 <RCCEx_GetXSPICLKFreq+0x1e4>

    default:
      /* Nothing to do */
      break;
3418e3dc:	bf00      	nop
3418e3de:	e002      	b.n	3418e3e6 <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
3418e3e0:	bf00      	nop
3418e3e2:	e000      	b.n	3418e3e6 <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
3418e3e4:	bf00      	nop
  }

  return xspi_frequency;
3418e3e6:	68fb      	ldr	r3, [r7, #12]
}
3418e3e8:	4618      	mov	r0, r3
3418e3ea:	3710      	adds	r7, #16
3418e3ec:	46bd      	mov	sp, r7
3418e3ee:	bd80      	pop	{r7, pc}
3418e3f0:	03030814 	.word	0x03030814
3418e3f4:	03030414 	.word	0x03030414
3418e3f8:	03030014 	.word	0x03030014
3418e3fc:	03020814 	.word	0x03020814
3418e400:	03020414 	.word	0x03020414
3418e404:	03020014 	.word	0x03020014
3418e408:	03010814 	.word	0x03010814
3418e40c:	03010414 	.word	0x03010414
3418e410:	03010014 	.word	0x03010014
3418e414:	03000814 	.word	0x03000814
3418e418:	03000014 	.word	0x03000014
3418e41c:	03000414 	.word	0x03000414

3418e420 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
3418e420:	b580      	push	{r7, lr}
3418e422:	b08a      	sub	sp, #40	@ 0x28
3418e424:	af00      	add	r7, sp, #0
3418e426:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
3418e428:	687b      	ldr	r3, [r7, #4]
3418e42a:	2b00      	cmp	r3, #0
3418e42c:	d101      	bne.n	3418e432 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
3418e42e:	2301      	movs	r3, #1
3418e430:	e1de      	b.n	3418e7f0 <HAL_SAI_Init+0x3d0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
3418e432:	687b      	ldr	r3, [r7, #4]
3418e434:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
3418e438:	2b01      	cmp	r3, #1
3418e43a:	d10e      	bne.n	3418e45a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
3418e43c:	687b      	ldr	r3, [r7, #4]
3418e43e:	681b      	ldr	r3, [r3, #0]
3418e440:	4a89      	ldr	r2, [pc, #548]	@ (3418e668 <HAL_SAI_Init+0x248>)
3418e442:	4293      	cmp	r3, r2
3418e444:	d107      	bne.n	3418e456 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
3418e446:	687b      	ldr	r3, [r7, #4]
3418e448:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
3418e44a:	2b01      	cmp	r3, #1
3418e44c:	d103      	bne.n	3418e456 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
3418e44e:	687b      	ldr	r3, [r7, #4]
3418e450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
3418e452:	2b00      	cmp	r3, #0
3418e454:	d001      	beq.n	3418e45a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
3418e456:	2301      	movs	r3, #1
3418e458:	e1ca      	b.n	3418e7f0 <HAL_SAI_Init+0x3d0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
3418e45a:	687b      	ldr	r3, [r7, #4]
3418e45c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
3418e460:	b2db      	uxtb	r3, r3
3418e462:	2b00      	cmp	r3, #0
3418e464:	d106      	bne.n	3418e474 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
3418e466:	687b      	ldr	r3, [r7, #4]
3418e468:	2200      	movs	r2, #0
3418e46a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
3418e46e:	6878      	ldr	r0, [r7, #4]
3418e470:	f7f3 fd54 	bl	34181f1c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
3418e474:	6878      	ldr	r0, [r7, #4]
3418e476:	f000 f9c7 	bl	3418e808 <SAI_Disable>
3418e47a:	4603      	mov	r3, r0
3418e47c:	2b00      	cmp	r3, #0
3418e47e:	d001      	beq.n	3418e484 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
3418e480:	2301      	movs	r3, #1
3418e482:	e1b5      	b.n	3418e7f0 <HAL_SAI_Init+0x3d0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
3418e484:	687b      	ldr	r3, [r7, #4]
3418e486:	2202      	movs	r2, #2
3418e488:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
3418e48c:	687b      	ldr	r3, [r7, #4]
3418e48e:	68db      	ldr	r3, [r3, #12]
3418e490:	2b02      	cmp	r3, #2
3418e492:	d00c      	beq.n	3418e4ae <HAL_SAI_Init+0x8e>
3418e494:	2b02      	cmp	r3, #2
3418e496:	d80d      	bhi.n	3418e4b4 <HAL_SAI_Init+0x94>
3418e498:	2b00      	cmp	r3, #0
3418e49a:	d002      	beq.n	3418e4a2 <HAL_SAI_Init+0x82>
3418e49c:	2b01      	cmp	r3, #1
3418e49e:	d003      	beq.n	3418e4a8 <HAL_SAI_Init+0x88>
3418e4a0:	e008      	b.n	3418e4b4 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
3418e4a2:	2300      	movs	r3, #0
3418e4a4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
3418e4a6:	e008      	b.n	3418e4ba <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
3418e4a8:	2310      	movs	r3, #16
3418e4aa:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
3418e4ac:	e005      	b.n	3418e4ba <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
3418e4ae:	2320      	movs	r3, #32
3418e4b0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
3418e4b2:	e002      	b.n	3418e4ba <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
3418e4b4:	2300      	movs	r3, #0
3418e4b6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
3418e4b8:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
3418e4ba:	687b      	ldr	r3, [r7, #4]
3418e4bc:	689b      	ldr	r3, [r3, #8]
3418e4be:	2b03      	cmp	r3, #3
3418e4c0:	d81d      	bhi.n	3418e4fe <HAL_SAI_Init+0xde>
3418e4c2:	a201      	add	r2, pc, #4	@ (adr r2, 3418e4c8 <HAL_SAI_Init+0xa8>)
3418e4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418e4c8:	3418e4d9 	.word	0x3418e4d9
3418e4cc:	3418e4df 	.word	0x3418e4df
3418e4d0:	3418e4e7 	.word	0x3418e4e7
3418e4d4:	3418e4ef 	.word	0x3418e4ef
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
3418e4d8:	2300      	movs	r3, #0
3418e4da:	61fb      	str	r3, [r7, #28]
      break;
3418e4dc:	e012      	b.n	3418e504 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
3418e4de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418e4e2:	61fb      	str	r3, [r7, #28]
      break;
3418e4e4:	e00e      	b.n	3418e504 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
3418e4e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418e4ea:	61fb      	str	r3, [r7, #28]
      break;
3418e4ec:	e00a      	b.n	3418e504 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
3418e4ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418e4f2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
3418e4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418e4f6:	f043 0301 	orr.w	r3, r3, #1
3418e4fa:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
3418e4fc:	e002      	b.n	3418e504 <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
3418e4fe:	2300      	movs	r3, #0
3418e500:	61fb      	str	r3, [r7, #28]
      break;
3418e502:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
3418e504:	687b      	ldr	r3, [r7, #4]
3418e506:	681b      	ldr	r3, [r3, #0]
3418e508:	4a57      	ldr	r2, [pc, #348]	@ (3418e668 <HAL_SAI_Init+0x248>)
3418e50a:	4293      	cmp	r3, r2
3418e50c:	d004      	beq.n	3418e518 <HAL_SAI_Init+0xf8>
3418e50e:	687b      	ldr	r3, [r7, #4]
3418e510:	681b      	ldr	r3, [r3, #0]
3418e512:	4a56      	ldr	r2, [pc, #344]	@ (3418e66c <HAL_SAI_Init+0x24c>)
3418e514:	4293      	cmp	r3, r2
3418e516:	d103      	bne.n	3418e520 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
3418e518:	4a55      	ldr	r2, [pc, #340]	@ (3418e670 <HAL_SAI_Init+0x250>)
3418e51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418e51c:	6013      	str	r3, [r2, #0]
3418e51e:	e002      	b.n	3418e526 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
3418e520:	4a54      	ldr	r2, [pc, #336]	@ (3418e674 <HAL_SAI_Init+0x254>)
3418e522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418e524:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
3418e526:	687b      	ldr	r3, [r7, #4]
3418e528:	6a1b      	ldr	r3, [r3, #32]
3418e52a:	2b00      	cmp	r3, #0
3418e52c:	f000 8083 	beq.w	3418e636 <HAL_SAI_Init+0x216>
  {
    uint32_t freq = 0;
3418e530:	2300      	movs	r3, #0
3418e532:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
3418e534:	687b      	ldr	r3, [r7, #4]
3418e536:	681b      	ldr	r3, [r3, #0]
3418e538:	4a4b      	ldr	r2, [pc, #300]	@ (3418e668 <HAL_SAI_Init+0x248>)
3418e53a:	4293      	cmp	r3, r2
3418e53c:	d004      	beq.n	3418e548 <HAL_SAI_Init+0x128>
3418e53e:	687b      	ldr	r3, [r7, #4]
3418e540:	681b      	ldr	r3, [r3, #0]
3418e542:	4a4a      	ldr	r2, [pc, #296]	@ (3418e66c <HAL_SAI_Init+0x24c>)
3418e544:	4293      	cmp	r3, r2
3418e546:	d106      	bne.n	3418e556 <HAL_SAI_Init+0x136>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
3418e548:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
3418e54c:	f04f 0100 	mov.w	r1, #0
3418e550:	f7fb fd9e 	bl	3418a090 <HAL_RCCEx_GetPeriphCLKFreq>
3418e554:	61b8      	str	r0, [r7, #24]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
3418e556:	687b      	ldr	r3, [r7, #4]
3418e558:	681b      	ldr	r3, [r3, #0]
3418e55a:	4a47      	ldr	r2, [pc, #284]	@ (3418e678 <HAL_SAI_Init+0x258>)
3418e55c:	4293      	cmp	r3, r2
3418e55e:	d004      	beq.n	3418e56a <HAL_SAI_Init+0x14a>
3418e560:	687b      	ldr	r3, [r7, #4]
3418e562:	681b      	ldr	r3, [r3, #0]
3418e564:	4a45      	ldr	r2, [pc, #276]	@ (3418e67c <HAL_SAI_Init+0x25c>)
3418e566:	4293      	cmp	r3, r2
3418e568:	d106      	bne.n	3418e578 <HAL_SAI_Init+0x158>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
3418e56a:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
3418e56e:	f04f 0100 	mov.w	r1, #0
3418e572:	f7fb fd8d 	bl	3418a090 <HAL_RCCEx_GetPeriphCLKFreq>
3418e576:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
3418e578:	687b      	ldr	r3, [r7, #4]
3418e57a:	699b      	ldr	r3, [r3, #24]
3418e57c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
3418e580:	d120      	bne.n	3418e5c4 <HAL_SAI_Init+0x1a4>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
3418e582:	687b      	ldr	r3, [r7, #4]
3418e584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418e586:	2b04      	cmp	r3, #4
3418e588:	d102      	bne.n	3418e590 <HAL_SAI_Init+0x170>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
3418e58a:	2340      	movs	r3, #64	@ 0x40
3418e58c:	613b      	str	r3, [r7, #16]
3418e58e:	e00a      	b.n	3418e5a6 <HAL_SAI_Init+0x186>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
3418e590:	687b      	ldr	r3, [r7, #4]
3418e592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418e594:	2b08      	cmp	r3, #8
3418e596:	d103      	bne.n	3418e5a0 <HAL_SAI_Init+0x180>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
3418e598:	f44f 7380 	mov.w	r3, #256	@ 0x100
3418e59c:	613b      	str	r3, [r7, #16]
3418e59e:	e002      	b.n	3418e5a6 <HAL_SAI_Init+0x186>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
3418e5a0:	687b      	ldr	r3, [r7, #4]
3418e5a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418e5a4:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
3418e5a6:	69ba      	ldr	r2, [r7, #24]
3418e5a8:	4613      	mov	r3, r2
3418e5aa:	009b      	lsls	r3, r3, #2
3418e5ac:	4413      	add	r3, r2
3418e5ae:	005b      	lsls	r3, r3, #1
3418e5b0:	4619      	mov	r1, r3
3418e5b2:	687b      	ldr	r3, [r7, #4]
3418e5b4:	6a1b      	ldr	r3, [r3, #32]
3418e5b6:	693a      	ldr	r2, [r7, #16]
3418e5b8:	fb02 f303 	mul.w	r3, r2, r3
3418e5bc:	fbb1 f3f3 	udiv	r3, r1, r3
3418e5c0:	617b      	str	r3, [r7, #20]
3418e5c2:	e017      	b.n	3418e5f4 <HAL_SAI_Init+0x1d4>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
3418e5c4:	687b      	ldr	r3, [r7, #4]
3418e5c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418e5c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418e5cc:	d101      	bne.n	3418e5d2 <HAL_SAI_Init+0x1b2>
3418e5ce:	2302      	movs	r3, #2
3418e5d0:	e000      	b.n	3418e5d4 <HAL_SAI_Init+0x1b4>
3418e5d2:	2301      	movs	r3, #1
3418e5d4:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
3418e5d6:	69ba      	ldr	r2, [r7, #24]
3418e5d8:	4613      	mov	r3, r2
3418e5da:	009b      	lsls	r3, r3, #2
3418e5dc:	4413      	add	r3, r2
3418e5de:	005b      	lsls	r3, r3, #1
3418e5e0:	4619      	mov	r1, r3
3418e5e2:	687b      	ldr	r3, [r7, #4]
3418e5e4:	6a1b      	ldr	r3, [r3, #32]
3418e5e6:	68fa      	ldr	r2, [r7, #12]
3418e5e8:	fb02 f303 	mul.w	r3, r2, r3
3418e5ec:	021b      	lsls	r3, r3, #8
3418e5ee:	fbb1 f3f3 	udiv	r3, r1, r3
3418e5f2:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
3418e5f4:	697b      	ldr	r3, [r7, #20]
3418e5f6:	4a22      	ldr	r2, [pc, #136]	@ (3418e680 <HAL_SAI_Init+0x260>)
3418e5f8:	fba2 2303 	umull	r2, r3, r2, r3
3418e5fc:	08da      	lsrs	r2, r3, #3
3418e5fe:	687b      	ldr	r3, [r7, #4]
3418e600:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
3418e602:	6979      	ldr	r1, [r7, #20]
3418e604:	4b1e      	ldr	r3, [pc, #120]	@ (3418e680 <HAL_SAI_Init+0x260>)
3418e606:	fba3 2301 	umull	r2, r3, r3, r1
3418e60a:	08da      	lsrs	r2, r3, #3
3418e60c:	4613      	mov	r3, r2
3418e60e:	009b      	lsls	r3, r3, #2
3418e610:	4413      	add	r3, r2
3418e612:	005b      	lsls	r3, r3, #1
3418e614:	1aca      	subs	r2, r1, r3
3418e616:	2a08      	cmp	r2, #8
3418e618:	d904      	bls.n	3418e624 <HAL_SAI_Init+0x204>
    {
      hsai->Init.Mckdiv += 1U;
3418e61a:	687b      	ldr	r3, [r7, #4]
3418e61c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418e61e:	1c5a      	adds	r2, r3, #1
3418e620:	687b      	ldr	r3, [r7, #4]
3418e622:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
3418e624:	687b      	ldr	r3, [r7, #4]
3418e626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418e628:	2b04      	cmp	r3, #4
3418e62a:	d104      	bne.n	3418e636 <HAL_SAI_Init+0x216>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
3418e62c:	687b      	ldr	r3, [r7, #4]
3418e62e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418e630:	085a      	lsrs	r2, r3, #1
3418e632:	687b      	ldr	r3, [r7, #4]
3418e634:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
3418e636:	687b      	ldr	r3, [r7, #4]
3418e638:	685b      	ldr	r3, [r3, #4]
3418e63a:	2b00      	cmp	r3, #0
3418e63c:	d003      	beq.n	3418e646 <HAL_SAI_Init+0x226>
3418e63e:	687b      	ldr	r3, [r7, #4]
3418e640:	685b      	ldr	r3, [r3, #4]
3418e642:	2b02      	cmp	r3, #2
3418e644:	d109      	bne.n	3418e65a <HAL_SAI_Init+0x23a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
3418e646:	687b      	ldr	r3, [r7, #4]
3418e648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3418e64a:	2b01      	cmp	r3, #1
3418e64c:	d101      	bne.n	3418e652 <HAL_SAI_Init+0x232>
3418e64e:	2300      	movs	r3, #0
3418e650:	e001      	b.n	3418e656 <HAL_SAI_Init+0x236>
3418e652:	f44f 7300 	mov.w	r3, #512	@ 0x200
3418e656:	623b      	str	r3, [r7, #32]
3418e658:	e016      	b.n	3418e688 <HAL_SAI_Init+0x268>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
3418e65a:	687b      	ldr	r3, [r7, #4]
3418e65c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3418e65e:	2b01      	cmp	r3, #1
3418e660:	d110      	bne.n	3418e684 <HAL_SAI_Init+0x264>
3418e662:	f44f 7300 	mov.w	r3, #512	@ 0x200
3418e666:	e00e      	b.n	3418e686 <HAL_SAI_Init+0x266>
3418e668:	52005804 	.word	0x52005804
3418e66c:	52005824 	.word	0x52005824
3418e670:	52005800 	.word	0x52005800
3418e674:	52005c00 	.word	0x52005c00
3418e678:	52005c04 	.word	0x52005c04
3418e67c:	52005c24 	.word	0x52005c24
3418e680:	cccccccd 	.word	0xcccccccd
3418e684:	2300      	movs	r3, #0
3418e686:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
3418e688:	687b      	ldr	r3, [r7, #4]
3418e68a:	681b      	ldr	r3, [r3, #0]
3418e68c:	6819      	ldr	r1, [r3, #0]
3418e68e:	687b      	ldr	r3, [r7, #4]
3418e690:	681a      	ldr	r2, [r3, #0]
3418e692:	4b59      	ldr	r3, [pc, #356]	@ (3418e7f8 <HAL_SAI_Init+0x3d8>)
3418e694:	400b      	ands	r3, r1
3418e696:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
3418e698:	687b      	ldr	r3, [r7, #4]
3418e69a:	681b      	ldr	r3, [r3, #0]
3418e69c:	6819      	ldr	r1, [r3, #0]
3418e69e:	687b      	ldr	r3, [r7, #4]
3418e6a0:	685a      	ldr	r2, [r3, #4]
3418e6a2:	687b      	ldr	r3, [r7, #4]
3418e6a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418e6a6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
3418e6a8:	687b      	ldr	r3, [r7, #4]
3418e6aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
3418e6ac:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
3418e6ae:	687b      	ldr	r3, [r7, #4]
3418e6b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418e6b2:	431a      	orrs	r2, r3
3418e6b4:	6a3b      	ldr	r3, [r7, #32]
3418e6b6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
3418e6b8:	69fb      	ldr	r3, [r7, #28]
3418e6ba:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
3418e6bc:	687b      	ldr	r3, [r7, #4]
3418e6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
3418e6c0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
3418e6c2:	687b      	ldr	r3, [r7, #4]
3418e6c4:	695b      	ldr	r3, [r3, #20]
3418e6c6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
3418e6c8:	687b      	ldr	r3, [r7, #4]
3418e6ca:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
3418e6cc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
3418e6ce:	687b      	ldr	r3, [r7, #4]
3418e6d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418e6d2:	051b      	lsls	r3, r3, #20
3418e6d4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
3418e6d6:	687b      	ldr	r3, [r7, #4]
3418e6d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
3418e6da:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
3418e6dc:	687b      	ldr	r3, [r7, #4]
3418e6de:	691b      	ldr	r3, [r3, #16]
3418e6e0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
3418e6e2:	687b      	ldr	r3, [r7, #4]
3418e6e4:	681b      	ldr	r3, [r3, #0]
3418e6e6:	430a      	orrs	r2, r1
3418e6e8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
3418e6ea:	687b      	ldr	r3, [r7, #4]
3418e6ec:	681b      	ldr	r3, [r3, #0]
3418e6ee:	685b      	ldr	r3, [r3, #4]
3418e6f0:	687a      	ldr	r2, [r7, #4]
3418e6f2:	6812      	ldr	r2, [r2, #0]
3418e6f4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
3418e6f8:	f023 030f 	bic.w	r3, r3, #15
3418e6fc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
3418e6fe:	687b      	ldr	r3, [r7, #4]
3418e700:	681b      	ldr	r3, [r3, #0]
3418e702:	6859      	ldr	r1, [r3, #4]
3418e704:	687b      	ldr	r3, [r7, #4]
3418e706:	69da      	ldr	r2, [r3, #28]
3418e708:	687b      	ldr	r3, [r7, #4]
3418e70a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418e70c:	431a      	orrs	r2, r3
3418e70e:	687b      	ldr	r3, [r7, #4]
3418e710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418e712:	431a      	orrs	r2, r3
3418e714:	687b      	ldr	r3, [r7, #4]
3418e716:	681b      	ldr	r3, [r3, #0]
3418e718:	430a      	orrs	r2, r1
3418e71a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
3418e71c:	687b      	ldr	r3, [r7, #4]
3418e71e:	681b      	ldr	r3, [r3, #0]
3418e720:	6899      	ldr	r1, [r3, #8]
3418e722:	687b      	ldr	r3, [r7, #4]
3418e724:	681a      	ldr	r2, [r3, #0]
3418e726:	4b35      	ldr	r3, [pc, #212]	@ (3418e7fc <HAL_SAI_Init+0x3dc>)
3418e728:	400b      	ands	r3, r1
3418e72a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
3418e72c:	687b      	ldr	r3, [r7, #4]
3418e72e:	681b      	ldr	r3, [r3, #0]
3418e730:	6899      	ldr	r1, [r3, #8]
3418e732:	687b      	ldr	r3, [r7, #4]
3418e734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418e736:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
3418e738:	687b      	ldr	r3, [r7, #4]
3418e73a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
3418e73c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
3418e73e:	687b      	ldr	r3, [r7, #4]
3418e740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
3418e742:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
3418e744:	687b      	ldr	r3, [r7, #4]
3418e746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
3418e748:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
3418e74a:	687b      	ldr	r3, [r7, #4]
3418e74c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418e74e:	3b01      	subs	r3, #1
3418e750:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
3418e752:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
3418e754:	687b      	ldr	r3, [r7, #4]
3418e756:	681b      	ldr	r3, [r3, #0]
3418e758:	430a      	orrs	r2, r1
3418e75a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
3418e75c:	687b      	ldr	r3, [r7, #4]
3418e75e:	681b      	ldr	r3, [r3, #0]
3418e760:	68d9      	ldr	r1, [r3, #12]
3418e762:	687b      	ldr	r3, [r7, #4]
3418e764:	681a      	ldr	r2, [r3, #0]
3418e766:	f24f 0320 	movw	r3, #61472	@ 0xf020
3418e76a:	400b      	ands	r3, r1
3418e76c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
3418e76e:	687b      	ldr	r3, [r7, #4]
3418e770:	681b      	ldr	r3, [r3, #0]
3418e772:	68d9      	ldr	r1, [r3, #12]
3418e774:	687b      	ldr	r3, [r7, #4]
3418e776:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
3418e778:	687b      	ldr	r3, [r7, #4]
3418e77a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3418e77c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
3418e77e:	687b      	ldr	r3, [r7, #4]
3418e780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418e782:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
3418e784:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
3418e786:	687b      	ldr	r3, [r7, #4]
3418e788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3418e78a:	3b01      	subs	r3, #1
3418e78c:	021b      	lsls	r3, r3, #8
3418e78e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
3418e790:	687b      	ldr	r3, [r7, #4]
3418e792:	681b      	ldr	r3, [r3, #0]
3418e794:	430a      	orrs	r2, r1
3418e796:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
3418e798:	687b      	ldr	r3, [r7, #4]
3418e79a:	681b      	ldr	r3, [r3, #0]
3418e79c:	4a18      	ldr	r2, [pc, #96]	@ (3418e800 <HAL_SAI_Init+0x3e0>)
3418e79e:	4293      	cmp	r3, r2
3418e7a0:	d119      	bne.n	3418e7d6 <HAL_SAI_Init+0x3b6>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
3418e7a2:	4b18      	ldr	r3, [pc, #96]	@ (3418e804 <HAL_SAI_Init+0x3e4>)
3418e7a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418e7a6:	4a17      	ldr	r2, [pc, #92]	@ (3418e804 <HAL_SAI_Init+0x3e4>)
3418e7a8:	f023 0301 	bic.w	r3, r3, #1
3418e7ac:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
3418e7ae:	687b      	ldr	r3, [r7, #4]
3418e7b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
3418e7b4:	2b01      	cmp	r3, #1
3418e7b6:	d10e      	bne.n	3418e7d6 <HAL_SAI_Init+0x3b6>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
3418e7b8:	687b      	ldr	r3, [r7, #4]
3418e7ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
3418e7bc:	687b      	ldr	r3, [r7, #4]
3418e7be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418e7c0:	3b01      	subs	r3, #1
3418e7c2:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
3418e7c4:	490f      	ldr	r1, [pc, #60]	@ (3418e804 <HAL_SAI_Init+0x3e4>)
3418e7c6:	4313      	orrs	r3, r2
3418e7c8:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
3418e7ca:	4b0e      	ldr	r3, [pc, #56]	@ (3418e804 <HAL_SAI_Init+0x3e4>)
3418e7cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418e7ce:	4a0d      	ldr	r2, [pc, #52]	@ (3418e804 <HAL_SAI_Init+0x3e4>)
3418e7d0:	f043 0301 	orr.w	r3, r3, #1
3418e7d4:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
3418e7d6:	687b      	ldr	r3, [r7, #4]
3418e7d8:	2200      	movs	r2, #0
3418e7da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
3418e7de:	687b      	ldr	r3, [r7, #4]
3418e7e0:	2201      	movs	r2, #1
3418e7e2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
3418e7e6:	687b      	ldr	r3, [r7, #4]
3418e7e8:	2200      	movs	r2, #0
3418e7ea:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
3418e7ee:	2300      	movs	r3, #0
}
3418e7f0:	4618      	mov	r0, r3
3418e7f2:	3728      	adds	r7, #40	@ 0x28
3418e7f4:	46bd      	mov	sp, r7
3418e7f6:	bd80      	pop	{r7, pc}
3418e7f8:	f005c010 	.word	0xf005c010
3418e7fc:	fff88000 	.word	0xfff88000
3418e800:	52005804 	.word	0x52005804
3418e804:	52005800 	.word	0x52005800

3418e808 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
3418e808:	b480      	push	{r7}
3418e80a:	b085      	sub	sp, #20
3418e80c:	af00      	add	r7, sp, #0
3418e80e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
3418e810:	4b18      	ldr	r3, [pc, #96]	@ (3418e874 <SAI_Disable+0x6c>)
3418e812:	681b      	ldr	r3, [r3, #0]
3418e814:	4a18      	ldr	r2, [pc, #96]	@ (3418e878 <SAI_Disable+0x70>)
3418e816:	fba2 2303 	umull	r2, r3, r2, r3
3418e81a:	0b1b      	lsrs	r3, r3, #12
3418e81c:	009b      	lsls	r3, r3, #2
3418e81e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
3418e820:	2300      	movs	r3, #0
3418e822:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
3418e824:	687b      	ldr	r3, [r7, #4]
3418e826:	681b      	ldr	r3, [r3, #0]
3418e828:	681a      	ldr	r2, [r3, #0]
3418e82a:	687b      	ldr	r3, [r7, #4]
3418e82c:	681b      	ldr	r3, [r3, #0]
3418e82e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
3418e832:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
3418e834:	68fb      	ldr	r3, [r7, #12]
3418e836:	2b00      	cmp	r3, #0
3418e838:	d10a      	bne.n	3418e850 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
3418e83a:	687b      	ldr	r3, [r7, #4]
3418e83c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418e840:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
3418e844:	687b      	ldr	r3, [r7, #4]
3418e846:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
3418e84a:	2303      	movs	r3, #3
3418e84c:	72fb      	strb	r3, [r7, #11]
      break;
3418e84e:	e009      	b.n	3418e864 <SAI_Disable+0x5c>
    }
    count--;
3418e850:	68fb      	ldr	r3, [r7, #12]
3418e852:	3b01      	subs	r3, #1
3418e854:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
3418e856:	687b      	ldr	r3, [r7, #4]
3418e858:	681b      	ldr	r3, [r3, #0]
3418e85a:	681b      	ldr	r3, [r3, #0]
3418e85c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418e860:	2b00      	cmp	r3, #0
3418e862:	d1e7      	bne.n	3418e834 <SAI_Disable+0x2c>

  return status;
3418e864:	7afb      	ldrb	r3, [r7, #11]
}
3418e866:	4618      	mov	r0, r3
3418e868:	3714      	adds	r7, #20
3418e86a:	46bd      	mov	sp, r7
3418e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e870:	4770      	bx	lr
3418e872:	bf00      	nop
3418e874:	341c0000 	.word	0x341c0000
3418e878:	95cbec1b 	.word	0x95cbec1b

3418e87c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
3418e87c:	b580      	push	{r7, lr}
3418e87e:	b08a      	sub	sp, #40	@ 0x28
3418e880:	af00      	add	r7, sp, #0
3418e882:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
3418e884:	687b      	ldr	r3, [r7, #4]
3418e886:	2b00      	cmp	r3, #0
3418e888:	d101      	bne.n	3418e88e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
3418e88a:	2301      	movs	r3, #1
3418e88c:	e075      	b.n	3418e97a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
3418e88e:	687b      	ldr	r3, [r7, #4]
3418e890:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
3418e894:	b2db      	uxtb	r3, r3
3418e896:	2b00      	cmp	r3, #0
3418e898:	d105      	bne.n	3418e8a6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
3418e89a:	687b      	ldr	r3, [r7, #4]
3418e89c:	2200      	movs	r2, #0
3418e89e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
3418e8a0:	6878      	ldr	r0, [r7, #4]
3418e8a2:	f7f3 f91d 	bl	34181ae0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
3418e8a6:	687b      	ldr	r3, [r7, #4]
3418e8a8:	2204      	movs	r2, #4
3418e8aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
3418e8ae:	6878      	ldr	r0, [r7, #4]
3418e8b0:	f000 f868 	bl	3418e984 <HAL_SD_InitCard>
3418e8b4:	4603      	mov	r3, r0
3418e8b6:	2b00      	cmp	r3, #0
3418e8b8:	d001      	beq.n	3418e8be <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
3418e8ba:	2301      	movs	r3, #1
3418e8bc:	e05d      	b.n	3418e97a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
3418e8be:	f107 0308 	add.w	r3, r7, #8
3418e8c2:	4619      	mov	r1, r3
3418e8c4:	6878      	ldr	r0, [r7, #4]
3418e8c6:	f000 fab5 	bl	3418ee34 <HAL_SD_GetCardStatus>
3418e8ca:	4603      	mov	r3, r0
3418e8cc:	2b00      	cmp	r3, #0
3418e8ce:	d001      	beq.n	3418e8d4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
3418e8d0:	2301      	movs	r3, #1
3418e8d2:	e052      	b.n	3418e97a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
3418e8d4:	7e3b      	ldrb	r3, [r7, #24]
3418e8d6:	b2db      	uxtb	r3, r3
3418e8d8:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
3418e8da:	7e7b      	ldrb	r3, [r7, #25]
3418e8dc:	b2db      	uxtb	r3, r3
3418e8de:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
3418e8e0:	687b      	ldr	r3, [r7, #4]
3418e8e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418e8e4:	2b01      	cmp	r3, #1
3418e8e6:	d10a      	bne.n	3418e8fe <HAL_SD_Init+0x82>
3418e8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418e8ea:	2b00      	cmp	r3, #0
3418e8ec:	d102      	bne.n	3418e8f4 <HAL_SD_Init+0x78>
3418e8ee:	6a3b      	ldr	r3, [r7, #32]
3418e8f0:	2b00      	cmp	r3, #0
3418e8f2:	d004      	beq.n	3418e8fe <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
3418e8f4:	687b      	ldr	r3, [r7, #4]
3418e8f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
3418e8fa:	659a      	str	r2, [r3, #88]	@ 0x58
3418e8fc:	e00b      	b.n	3418e916 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
3418e8fe:	687b      	ldr	r3, [r7, #4]
3418e900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418e902:	2b01      	cmp	r3, #1
3418e904:	d104      	bne.n	3418e910 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
3418e906:	687b      	ldr	r3, [r7, #4]
3418e908:	f44f 7280 	mov.w	r2, #256	@ 0x100
3418e90c:	659a      	str	r2, [r3, #88]	@ 0x58
3418e90e:	e002      	b.n	3418e916 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
3418e910:	687b      	ldr	r3, [r7, #4]
3418e912:	2200      	movs	r2, #0
3418e914:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
3418e916:	687b      	ldr	r3, [r7, #4]
3418e918:	68db      	ldr	r3, [r3, #12]
3418e91a:	4619      	mov	r1, r3
3418e91c:	6878      	ldr	r0, [r7, #4]
3418e91e:	f000 fb47 	bl	3418efb0 <HAL_SD_ConfigWideBusOperation>
3418e922:	4603      	mov	r3, r0
3418e924:	2b00      	cmp	r3, #0
3418e926:	d001      	beq.n	3418e92c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
3418e928:	2301      	movs	r3, #1
3418e92a:	e026      	b.n	3418e97a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
3418e92c:	f7f3 ff60 	bl	341827f0 <HAL_GetTick>
3418e930:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
3418e932:	e011      	b.n	3418e958 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
3418e934:	f7f3 ff5c 	bl	341827f0 <HAL_GetTick>
3418e938:	4602      	mov	r2, r0
3418e93a:	69fb      	ldr	r3, [r7, #28]
3418e93c:	1ad3      	subs	r3, r2, r3
3418e93e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
3418e942:	d109      	bne.n	3418e958 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
3418e944:	687b      	ldr	r3, [r7, #4]
3418e946:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
3418e94a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
3418e94c:	687b      	ldr	r3, [r7, #4]
3418e94e:	2201      	movs	r2, #1
3418e950:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
3418e954:	2303      	movs	r3, #3
3418e956:	e010      	b.n	3418e97a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
3418e958:	6878      	ldr	r0, [r7, #4]
3418e95a:	f000 fc4b 	bl	3418f1f4 <HAL_SD_GetCardState>
3418e95e:	4603      	mov	r3, r0
3418e960:	2b04      	cmp	r3, #4
3418e962:	d1e7      	bne.n	3418e934 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
3418e964:	687b      	ldr	r3, [r7, #4]
3418e966:	2200      	movs	r2, #0
3418e968:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
3418e96a:	687b      	ldr	r3, [r7, #4]
3418e96c:	2200      	movs	r2, #0
3418e96e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
3418e970:	687b      	ldr	r3, [r7, #4]
3418e972:	2201      	movs	r2, #1
3418e974:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
3418e978:	2300      	movs	r3, #0
}
3418e97a:	4618      	mov	r0, r3
3418e97c:	3728      	adds	r7, #40	@ 0x28
3418e97e:	46bd      	mov	sp, r7
3418e980:	bd80      	pop	{r7, pc}
	...

3418e984 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
3418e984:	b590      	push	{r4, r7, lr}
3418e986:	b08d      	sub	sp, #52	@ 0x34
3418e988:	af02      	add	r7, sp, #8
3418e98a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
3418e98c:	2300      	movs	r3, #0
3418e98e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
3418e990:	2300      	movs	r3, #0
3418e992:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
3418e994:	2300      	movs	r3, #0
3418e996:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
3418e998:	2300      	movs	r3, #0
3418e99a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  if (hsd->Instance == SDMMC1)
3418e99c:	687b      	ldr	r3, [r7, #4]
3418e99e:	681b      	ldr	r3, [r3, #0]
3418e9a0:	4a4d      	ldr	r2, [pc, #308]	@ (3418ead8 <HAL_SD_InitCard+0x154>)
3418e9a2:	4293      	cmp	r3, r2
3418e9a4:	d107      	bne.n	3418e9b6 <HAL_SD_InitCard+0x32>
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
3418e9a6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
3418e9aa:	f04f 0100 	mov.w	r1, #0
3418e9ae:	f7fb fb6f 	bl	3418a090 <HAL_RCCEx_GetPeriphCLKFreq>
3418e9b2:	6278      	str	r0, [r7, #36]	@ 0x24
3418e9b4:	e00e      	b.n	3418e9d4 <HAL_SD_InitCard+0x50>
  }
  else if (hsd->Instance == SDMMC2)
3418e9b6:	687b      	ldr	r3, [r7, #4]
3418e9b8:	681b      	ldr	r3, [r3, #0]
3418e9ba:	4a48      	ldr	r2, [pc, #288]	@ (3418eadc <HAL_SD_InitCard+0x158>)
3418e9bc:	4293      	cmp	r3, r2
3418e9be:	d107      	bne.n	3418e9d0 <HAL_SD_InitCard+0x4c>
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC2);
3418e9c0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
3418e9c4:	f04f 0100 	mov.w	r1, #0
3418e9c8:	f7fb fb62 	bl	3418a090 <HAL_RCCEx_GetPeriphCLKFreq>
3418e9cc:	6278      	str	r0, [r7, #36]	@ 0x24
3418e9ce:	e001      	b.n	3418e9d4 <HAL_SD_InitCard+0x50>
  }
  else
  {
    sdmmc_clk = 0;
3418e9d0:	2300      	movs	r3, #0
3418e9d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  if (sdmmc_clk == 0U)
3418e9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418e9d6:	2b00      	cmp	r3, #0
3418e9d8:	d109      	bne.n	3418e9ee <HAL_SD_InitCard+0x6a>
  {
    hsd->State = HAL_SD_STATE_READY;
3418e9da:	687b      	ldr	r3, [r7, #4]
3418e9dc:	2201      	movs	r2, #1
3418e9de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
3418e9e2:	687b      	ldr	r3, [r7, #4]
3418e9e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
3418e9e8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
3418e9ea:	2301      	movs	r3, #1
3418e9ec:	e070      	b.n	3418ead0 <HAL_SD_InitCard+0x14c>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
3418e9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418e9f0:	0a1b      	lsrs	r3, r3, #8
3418e9f2:	4a3b      	ldr	r2, [pc, #236]	@ (3418eae0 <HAL_SD_InitCard+0x15c>)
3418e9f4:	fba2 2303 	umull	r2, r3, r2, r3
3418e9f8:	091b      	lsrs	r3, r3, #4
3418e9fa:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
3418e9fc:	687b      	ldr	r3, [r7, #4]
3418e9fe:	681c      	ldr	r4, [r3, #0]
3418ea00:	466a      	mov	r2, sp
3418ea02:	f107 0318 	add.w	r3, r7, #24
3418ea06:	e893 0003 	ldmia.w	r3, {r0, r1}
3418ea0a:	e882 0003 	stmia.w	r2, {r0, r1}
3418ea0e:	f107 030c 	add.w	r3, r7, #12
3418ea12:	cb0e      	ldmia	r3, {r1, r2, r3}
3418ea14:	4620      	mov	r0, r4
3418ea16:	f002 fdf7 	bl	34191608 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
3418ea1a:	687b      	ldr	r3, [r7, #4]
3418ea1c:	681b      	ldr	r3, [r3, #0]
3418ea1e:	4618      	mov	r0, r3
3418ea20:	f002 fe29 	bl	34191676 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
3418ea24:	69fb      	ldr	r3, [r7, #28]
3418ea26:	2b00      	cmp	r3, #0
3418ea28:	d005      	beq.n	3418ea36 <HAL_SD_InitCard+0xb2>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
3418ea2a:	69fb      	ldr	r3, [r7, #28]
3418ea2c:	005b      	lsls	r3, r3, #1
3418ea2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
3418ea30:	fbb2 f3f3 	udiv	r3, r2, r3
3418ea34:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
3418ea36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418ea38:	2b00      	cmp	r3, #0
3418ea3a:	d007      	beq.n	3418ea4c <HAL_SD_InitCard+0xc8>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
3418ea3c:	4a29      	ldr	r2, [pc, #164]	@ (3418eae4 <HAL_SD_InitCard+0x160>)
3418ea3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418ea40:	fbb2 f3f3 	udiv	r3, r2, r3
3418ea44:	3301      	adds	r3, #1
3418ea46:	4618      	mov	r0, r3
3418ea48:	f7f3 fede 	bl	34182808 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
3418ea4c:	6878      	ldr	r0, [r7, #4]
3418ea4e:	f000 fcbf 	bl	3418f3d0 <SD_PowerON>
3418ea52:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
3418ea54:	6a3b      	ldr	r3, [r7, #32]
3418ea56:	2b00      	cmp	r3, #0
3418ea58:	d00b      	beq.n	3418ea72 <HAL_SD_InitCard+0xee>
  {
    hsd->State = HAL_SD_STATE_READY;
3418ea5a:	687b      	ldr	r3, [r7, #4]
3418ea5c:	2201      	movs	r2, #1
3418ea5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
3418ea62:	687b      	ldr	r3, [r7, #4]
3418ea64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418ea66:	6a3b      	ldr	r3, [r7, #32]
3418ea68:	431a      	orrs	r2, r3
3418ea6a:	687b      	ldr	r3, [r7, #4]
3418ea6c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
3418ea6e:	2301      	movs	r3, #1
3418ea70:	e02e      	b.n	3418ead0 <HAL_SD_InitCard+0x14c>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
3418ea72:	6878      	ldr	r0, [r7, #4]
3418ea74:	f000 fbde 	bl	3418f234 <SD_InitCard>
3418ea78:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
3418ea7a:	6a3b      	ldr	r3, [r7, #32]
3418ea7c:	2b00      	cmp	r3, #0
3418ea7e:	d00b      	beq.n	3418ea98 <HAL_SD_InitCard+0x114>
  {
    hsd->State = HAL_SD_STATE_READY;
3418ea80:	687b      	ldr	r3, [r7, #4]
3418ea82:	2201      	movs	r2, #1
3418ea84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
3418ea88:	687b      	ldr	r3, [r7, #4]
3418ea8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418ea8c:	6a3b      	ldr	r3, [r7, #32]
3418ea8e:	431a      	orrs	r2, r3
3418ea90:	687b      	ldr	r3, [r7, #4]
3418ea92:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
3418ea94:	2301      	movs	r3, #1
3418ea96:	e01b      	b.n	3418ead0 <HAL_SD_InitCard+0x14c>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
3418ea98:	687b      	ldr	r3, [r7, #4]
3418ea9a:	681b      	ldr	r3, [r3, #0]
3418ea9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
3418eaa0:	4618      	mov	r0, r3
3418eaa2:	f002 fe7d 	bl	341917a0 <SDMMC_CmdBlockLength>
3418eaa6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
3418eaa8:	6a3b      	ldr	r3, [r7, #32]
3418eaaa:	2b00      	cmp	r3, #0
3418eaac:	d00f      	beq.n	3418eace <HAL_SD_InitCard+0x14a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
3418eaae:	687b      	ldr	r3, [r7, #4]
3418eab0:	681b      	ldr	r3, [r3, #0]
3418eab2:	4a0d      	ldr	r2, [pc, #52]	@ (3418eae8 <HAL_SD_InitCard+0x164>)
3418eab4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
3418eab6:	687b      	ldr	r3, [r7, #4]
3418eab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418eaba:	6a3b      	ldr	r3, [r7, #32]
3418eabc:	431a      	orrs	r2, r3
3418eabe:	687b      	ldr	r3, [r7, #4]
3418eac0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
3418eac2:	687b      	ldr	r3, [r7, #4]
3418eac4:	2201      	movs	r2, #1
3418eac6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
3418eaca:	2301      	movs	r3, #1
3418eacc:	e000      	b.n	3418ead0 <HAL_SD_InitCard+0x14c>
  }

  return HAL_OK;
3418eace:	2300      	movs	r3, #0
}
3418ead0:	4618      	mov	r0, r3
3418ead2:	372c      	adds	r7, #44	@ 0x2c
3418ead4:	46bd      	mov	sp, r7
3418ead6:	bd90      	pop	{r4, r7, pc}
3418ead8:	58027000 	.word	0x58027000
3418eadc:	58026800 	.word	0x58026800
3418eae0:	014f8b59 	.word	0x014f8b59
3418eae4:	00012110 	.word	0x00012110
3418eae8:	1fe00fff 	.word	0x1fe00fff

3418eaec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
3418eaec:	b480      	push	{r7}
3418eaee:	b083      	sub	sp, #12
3418eaf0:	af00      	add	r7, sp, #0
3418eaf2:	6078      	str	r0, [r7, #4]
3418eaf4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
3418eaf6:	687b      	ldr	r3, [r7, #4]
3418eaf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418eafa:	0f9b      	lsrs	r3, r3, #30
3418eafc:	b2da      	uxtb	r2, r3
3418eafe:	683b      	ldr	r3, [r7, #0]
3418eb00:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
3418eb02:	687b      	ldr	r3, [r7, #4]
3418eb04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418eb06:	0e9b      	lsrs	r3, r3, #26
3418eb08:	b2db      	uxtb	r3, r3
3418eb0a:	f003 030f 	and.w	r3, r3, #15
3418eb0e:	b2da      	uxtb	r2, r3
3418eb10:	683b      	ldr	r3, [r7, #0]
3418eb12:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
3418eb14:	687b      	ldr	r3, [r7, #4]
3418eb16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418eb18:	0e1b      	lsrs	r3, r3, #24
3418eb1a:	b2db      	uxtb	r3, r3
3418eb1c:	f003 0303 	and.w	r3, r3, #3
3418eb20:	b2da      	uxtb	r2, r3
3418eb22:	683b      	ldr	r3, [r7, #0]
3418eb24:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
3418eb26:	687b      	ldr	r3, [r7, #4]
3418eb28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418eb2a:	0c1b      	lsrs	r3, r3, #16
3418eb2c:	b2da      	uxtb	r2, r3
3418eb2e:	683b      	ldr	r3, [r7, #0]
3418eb30:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
3418eb32:	687b      	ldr	r3, [r7, #4]
3418eb34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418eb36:	0a1b      	lsrs	r3, r3, #8
3418eb38:	b2da      	uxtb	r2, r3
3418eb3a:	683b      	ldr	r3, [r7, #0]
3418eb3c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
3418eb3e:	687b      	ldr	r3, [r7, #4]
3418eb40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418eb42:	b2da      	uxtb	r2, r3
3418eb44:	683b      	ldr	r3, [r7, #0]
3418eb46:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
3418eb48:	687b      	ldr	r3, [r7, #4]
3418eb4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418eb4c:	0d1b      	lsrs	r3, r3, #20
3418eb4e:	b29a      	uxth	r2, r3
3418eb50:	683b      	ldr	r3, [r7, #0]
3418eb52:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
3418eb54:	687b      	ldr	r3, [r7, #4]
3418eb56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418eb58:	0c1b      	lsrs	r3, r3, #16
3418eb5a:	b2db      	uxtb	r3, r3
3418eb5c:	f003 030f 	and.w	r3, r3, #15
3418eb60:	b2da      	uxtb	r2, r3
3418eb62:	683b      	ldr	r3, [r7, #0]
3418eb64:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
3418eb66:	687b      	ldr	r3, [r7, #4]
3418eb68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418eb6a:	0bdb      	lsrs	r3, r3, #15
3418eb6c:	b2db      	uxtb	r3, r3
3418eb6e:	f003 0301 	and.w	r3, r3, #1
3418eb72:	b2da      	uxtb	r2, r3
3418eb74:	683b      	ldr	r3, [r7, #0]
3418eb76:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
3418eb78:	687b      	ldr	r3, [r7, #4]
3418eb7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418eb7c:	0b9b      	lsrs	r3, r3, #14
3418eb7e:	b2db      	uxtb	r3, r3
3418eb80:	f003 0301 	and.w	r3, r3, #1
3418eb84:	b2da      	uxtb	r2, r3
3418eb86:	683b      	ldr	r3, [r7, #0]
3418eb88:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
3418eb8a:	687b      	ldr	r3, [r7, #4]
3418eb8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418eb8e:	0b5b      	lsrs	r3, r3, #13
3418eb90:	b2db      	uxtb	r3, r3
3418eb92:	f003 0301 	and.w	r3, r3, #1
3418eb96:	b2da      	uxtb	r2, r3
3418eb98:	683b      	ldr	r3, [r7, #0]
3418eb9a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
3418eb9c:	687b      	ldr	r3, [r7, #4]
3418eb9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418eba0:	0b1b      	lsrs	r3, r3, #12
3418eba2:	b2db      	uxtb	r3, r3
3418eba4:	f003 0301 	and.w	r3, r3, #1
3418eba8:	b2da      	uxtb	r2, r3
3418ebaa:	683b      	ldr	r3, [r7, #0]
3418ebac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
3418ebae:	683b      	ldr	r3, [r7, #0]
3418ebb0:	2200      	movs	r2, #0
3418ebb2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
3418ebb4:	687b      	ldr	r3, [r7, #4]
3418ebb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418ebb8:	2b00      	cmp	r3, #0
3418ebba:	d163      	bne.n	3418ec84 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
3418ebbc:	687b      	ldr	r3, [r7, #4]
3418ebbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418ebc0:	009a      	lsls	r2, r3, #2
3418ebc2:	f640 73fc 	movw	r3, #4092	@ 0xffc
3418ebc6:	4013      	ands	r3, r2
3418ebc8:	687a      	ldr	r2, [r7, #4]
3418ebca:	6e52      	ldr	r2, [r2, #100]	@ 0x64
3418ebcc:	0f92      	lsrs	r2, r2, #30
3418ebce:	431a      	orrs	r2, r3
3418ebd0:	683b      	ldr	r3, [r7, #0]
3418ebd2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
3418ebd4:	687b      	ldr	r3, [r7, #4]
3418ebd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3418ebd8:	0edb      	lsrs	r3, r3, #27
3418ebda:	b2db      	uxtb	r3, r3
3418ebdc:	f003 0307 	and.w	r3, r3, #7
3418ebe0:	b2da      	uxtb	r2, r3
3418ebe2:	683b      	ldr	r3, [r7, #0]
3418ebe4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
3418ebe6:	687b      	ldr	r3, [r7, #4]
3418ebe8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3418ebea:	0e1b      	lsrs	r3, r3, #24
3418ebec:	b2db      	uxtb	r3, r3
3418ebee:	f003 0307 	and.w	r3, r3, #7
3418ebf2:	b2da      	uxtb	r2, r3
3418ebf4:	683b      	ldr	r3, [r7, #0]
3418ebf6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
3418ebf8:	687b      	ldr	r3, [r7, #4]
3418ebfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3418ebfc:	0d5b      	lsrs	r3, r3, #21
3418ebfe:	b2db      	uxtb	r3, r3
3418ec00:	f003 0307 	and.w	r3, r3, #7
3418ec04:	b2da      	uxtb	r2, r3
3418ec06:	683b      	ldr	r3, [r7, #0]
3418ec08:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
3418ec0a:	687b      	ldr	r3, [r7, #4]
3418ec0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3418ec0e:	0c9b      	lsrs	r3, r3, #18
3418ec10:	b2db      	uxtb	r3, r3
3418ec12:	f003 0307 	and.w	r3, r3, #7
3418ec16:	b2da      	uxtb	r2, r3
3418ec18:	683b      	ldr	r3, [r7, #0]
3418ec1a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
3418ec1c:	687b      	ldr	r3, [r7, #4]
3418ec1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3418ec20:	0bdb      	lsrs	r3, r3, #15
3418ec22:	b2db      	uxtb	r3, r3
3418ec24:	f003 0307 	and.w	r3, r3, #7
3418ec28:	b2da      	uxtb	r2, r3
3418ec2a:	683b      	ldr	r3, [r7, #0]
3418ec2c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
3418ec2e:	683b      	ldr	r3, [r7, #0]
3418ec30:	691b      	ldr	r3, [r3, #16]
3418ec32:	1c5a      	adds	r2, r3, #1
3418ec34:	687b      	ldr	r3, [r7, #4]
3418ec36:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
3418ec38:	683b      	ldr	r3, [r7, #0]
3418ec3a:	7e1b      	ldrb	r3, [r3, #24]
3418ec3c:	b2db      	uxtb	r3, r3
3418ec3e:	f003 0307 	and.w	r3, r3, #7
3418ec42:	3302      	adds	r3, #2
3418ec44:	2201      	movs	r2, #1
3418ec46:	fa02 f303 	lsl.w	r3, r2, r3
3418ec4a:	687a      	ldr	r2, [r7, #4]
3418ec4c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
3418ec4e:	fb03 f202 	mul.w	r2, r3, r2
3418ec52:	687b      	ldr	r3, [r7, #4]
3418ec54:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
3418ec56:	683b      	ldr	r3, [r7, #0]
3418ec58:	7a1b      	ldrb	r3, [r3, #8]
3418ec5a:	b2db      	uxtb	r3, r3
3418ec5c:	f003 030f 	and.w	r3, r3, #15
3418ec60:	2201      	movs	r2, #1
3418ec62:	409a      	lsls	r2, r3
3418ec64:	687b      	ldr	r3, [r7, #4]
3418ec66:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
3418ec68:	687b      	ldr	r3, [r7, #4]
3418ec6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418ec6c:	687a      	ldr	r2, [r7, #4]
3418ec6e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
3418ec70:	0a52      	lsrs	r2, r2, #9
3418ec72:	fb03 f202 	mul.w	r2, r3, r2
3418ec76:	687b      	ldr	r3, [r7, #4]
3418ec78:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
3418ec7a:	687b      	ldr	r3, [r7, #4]
3418ec7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
3418ec80:	655a      	str	r2, [r3, #84]	@ 0x54
3418ec82:	e031      	b.n	3418ece8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
3418ec84:	687b      	ldr	r3, [r7, #4]
3418ec86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418ec88:	2b01      	cmp	r3, #1
3418ec8a:	d11d      	bne.n	3418ecc8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
3418ec8c:	687b      	ldr	r3, [r7, #4]
3418ec8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418ec90:	041b      	lsls	r3, r3, #16
3418ec92:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
3418ec96:	687b      	ldr	r3, [r7, #4]
3418ec98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3418ec9a:	0c1b      	lsrs	r3, r3, #16
3418ec9c:	431a      	orrs	r2, r3
3418ec9e:	683b      	ldr	r3, [r7, #0]
3418eca0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
3418eca2:	683b      	ldr	r3, [r7, #0]
3418eca4:	691b      	ldr	r3, [r3, #16]
3418eca6:	3301      	adds	r3, #1
3418eca8:	029a      	lsls	r2, r3, #10
3418ecaa:	687b      	ldr	r3, [r7, #4]
3418ecac:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
3418ecae:	687b      	ldr	r3, [r7, #4]
3418ecb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418ecb2:	687b      	ldr	r3, [r7, #4]
3418ecb4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
3418ecb6:	687b      	ldr	r3, [r7, #4]
3418ecb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
3418ecbc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
3418ecbe:	687b      	ldr	r3, [r7, #4]
3418ecc0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3418ecc2:	687b      	ldr	r3, [r7, #4]
3418ecc4:	655a      	str	r2, [r3, #84]	@ 0x54
3418ecc6:	e00f      	b.n	3418ece8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
3418ecc8:	687b      	ldr	r3, [r7, #4]
3418ecca:	681b      	ldr	r3, [r3, #0]
3418eccc:	4a58      	ldr	r2, [pc, #352]	@ (3418ee30 <HAL_SD_GetCardCSD+0x344>)
3418ecce:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
3418ecd0:	687b      	ldr	r3, [r7, #4]
3418ecd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418ecd4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
3418ecd8:	687b      	ldr	r3, [r7, #4]
3418ecda:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
3418ecdc:	687b      	ldr	r3, [r7, #4]
3418ecde:	2201      	movs	r2, #1
3418ece0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
3418ece4:	2301      	movs	r3, #1
3418ece6:	e09d      	b.n	3418ee24 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
3418ece8:	687b      	ldr	r3, [r7, #4]
3418ecea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3418ecec:	0b9b      	lsrs	r3, r3, #14
3418ecee:	b2db      	uxtb	r3, r3
3418ecf0:	f003 0301 	and.w	r3, r3, #1
3418ecf4:	b2da      	uxtb	r2, r3
3418ecf6:	683b      	ldr	r3, [r7, #0]
3418ecf8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
3418ecfa:	687b      	ldr	r3, [r7, #4]
3418ecfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3418ecfe:	09db      	lsrs	r3, r3, #7
3418ed00:	b2db      	uxtb	r3, r3
3418ed02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
3418ed06:	b2da      	uxtb	r2, r3
3418ed08:	683b      	ldr	r3, [r7, #0]
3418ed0a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
3418ed0c:	687b      	ldr	r3, [r7, #4]
3418ed0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3418ed10:	b2db      	uxtb	r3, r3
3418ed12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
3418ed16:	b2da      	uxtb	r2, r3
3418ed18:	683b      	ldr	r3, [r7, #0]
3418ed1a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
3418ed1c:	687b      	ldr	r3, [r7, #4]
3418ed1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418ed20:	0fdb      	lsrs	r3, r3, #31
3418ed22:	b2da      	uxtb	r2, r3
3418ed24:	683b      	ldr	r3, [r7, #0]
3418ed26:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
3418ed28:	687b      	ldr	r3, [r7, #4]
3418ed2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418ed2c:	0f5b      	lsrs	r3, r3, #29
3418ed2e:	b2db      	uxtb	r3, r3
3418ed30:	f003 0303 	and.w	r3, r3, #3
3418ed34:	b2da      	uxtb	r2, r3
3418ed36:	683b      	ldr	r3, [r7, #0]
3418ed38:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
3418ed3a:	687b      	ldr	r3, [r7, #4]
3418ed3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418ed3e:	0e9b      	lsrs	r3, r3, #26
3418ed40:	b2db      	uxtb	r3, r3
3418ed42:	f003 0307 	and.w	r3, r3, #7
3418ed46:	b2da      	uxtb	r2, r3
3418ed48:	683b      	ldr	r3, [r7, #0]
3418ed4a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
3418ed4c:	687b      	ldr	r3, [r7, #4]
3418ed4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418ed50:	0d9b      	lsrs	r3, r3, #22
3418ed52:	b2db      	uxtb	r3, r3
3418ed54:	f003 030f 	and.w	r3, r3, #15
3418ed58:	b2da      	uxtb	r2, r3
3418ed5a:	683b      	ldr	r3, [r7, #0]
3418ed5c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
3418ed5e:	687b      	ldr	r3, [r7, #4]
3418ed60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418ed62:	0d5b      	lsrs	r3, r3, #21
3418ed64:	b2db      	uxtb	r3, r3
3418ed66:	f003 0301 	and.w	r3, r3, #1
3418ed6a:	b2da      	uxtb	r2, r3
3418ed6c:	683b      	ldr	r3, [r7, #0]
3418ed6e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
3418ed72:	683b      	ldr	r3, [r7, #0]
3418ed74:	2200      	movs	r2, #0
3418ed76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
3418ed7a:	687b      	ldr	r3, [r7, #4]
3418ed7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418ed7e:	0c1b      	lsrs	r3, r3, #16
3418ed80:	b2db      	uxtb	r3, r3
3418ed82:	f003 0301 	and.w	r3, r3, #1
3418ed86:	b2da      	uxtb	r2, r3
3418ed88:	683b      	ldr	r3, [r7, #0]
3418ed8a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
3418ed8e:	687b      	ldr	r3, [r7, #4]
3418ed90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418ed92:	0bdb      	lsrs	r3, r3, #15
3418ed94:	b2db      	uxtb	r3, r3
3418ed96:	f003 0301 	and.w	r3, r3, #1
3418ed9a:	b2da      	uxtb	r2, r3
3418ed9c:	683b      	ldr	r3, [r7, #0]
3418ed9e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
3418eda2:	687b      	ldr	r3, [r7, #4]
3418eda4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418eda6:	0b9b      	lsrs	r3, r3, #14
3418eda8:	b2db      	uxtb	r3, r3
3418edaa:	f003 0301 	and.w	r3, r3, #1
3418edae:	b2da      	uxtb	r2, r3
3418edb0:	683b      	ldr	r3, [r7, #0]
3418edb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
3418edb6:	687b      	ldr	r3, [r7, #4]
3418edb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418edba:	0b5b      	lsrs	r3, r3, #13
3418edbc:	b2db      	uxtb	r3, r3
3418edbe:	f003 0301 	and.w	r3, r3, #1
3418edc2:	b2da      	uxtb	r2, r3
3418edc4:	683b      	ldr	r3, [r7, #0]
3418edc6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
3418edca:	687b      	ldr	r3, [r7, #4]
3418edcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418edce:	0b1b      	lsrs	r3, r3, #12
3418edd0:	b2db      	uxtb	r3, r3
3418edd2:	f003 0301 	and.w	r3, r3, #1
3418edd6:	b2da      	uxtb	r2, r3
3418edd8:	683b      	ldr	r3, [r7, #0]
3418edda:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
3418edde:	687b      	ldr	r3, [r7, #4]
3418ede0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418ede2:	0a9b      	lsrs	r3, r3, #10
3418ede4:	b2db      	uxtb	r3, r3
3418ede6:	f003 0303 	and.w	r3, r3, #3
3418edea:	b2da      	uxtb	r2, r3
3418edec:	683b      	ldr	r3, [r7, #0]
3418edee:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
3418edf2:	687b      	ldr	r3, [r7, #4]
3418edf4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418edf6:	0a1b      	lsrs	r3, r3, #8
3418edf8:	b2db      	uxtb	r3, r3
3418edfa:	f003 0303 	and.w	r3, r3, #3
3418edfe:	b2da      	uxtb	r2, r3
3418ee00:	683b      	ldr	r3, [r7, #0]
3418ee02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
3418ee06:	687b      	ldr	r3, [r7, #4]
3418ee08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418ee0a:	085b      	lsrs	r3, r3, #1
3418ee0c:	b2db      	uxtb	r3, r3
3418ee0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
3418ee12:	b2da      	uxtb	r2, r3
3418ee14:	683b      	ldr	r3, [r7, #0]
3418ee16:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
3418ee1a:	683b      	ldr	r3, [r7, #0]
3418ee1c:	2201      	movs	r2, #1
3418ee1e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
3418ee22:	2300      	movs	r3, #0
}
3418ee24:	4618      	mov	r0, r3
3418ee26:	370c      	adds	r7, #12
3418ee28:	46bd      	mov	sp, r7
3418ee2a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ee2e:	4770      	bx	lr
3418ee30:	1fe00fff 	.word	0x1fe00fff

3418ee34 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
3418ee34:	b580      	push	{r7, lr}
3418ee36:	b094      	sub	sp, #80	@ 0x50
3418ee38:	af00      	add	r7, sp, #0
3418ee3a:	6078      	str	r0, [r7, #4]
3418ee3c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
3418ee3e:	2300      	movs	r3, #0
3418ee40:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
3418ee44:	687b      	ldr	r3, [r7, #4]
3418ee46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
3418ee4a:	b2db      	uxtb	r3, r3
3418ee4c:	2b03      	cmp	r3, #3
3418ee4e:	d101      	bne.n	3418ee54 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
3418ee50:	2301      	movs	r3, #1
3418ee52:	e0a7      	b.n	3418efa4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
3418ee54:	f107 0308 	add.w	r3, r7, #8
3418ee58:	4619      	mov	r1, r3
3418ee5a:	6878      	ldr	r0, [r7, #4]
3418ee5c:	f000 fb46 	bl	3418f4ec <SD_SendSDStatus>
3418ee60:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
3418ee62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
3418ee64:	2b00      	cmp	r3, #0
3418ee66:	d011      	beq.n	3418ee8c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
3418ee68:	687b      	ldr	r3, [r7, #4]
3418ee6a:	681b      	ldr	r3, [r3, #0]
3418ee6c:	4a4f      	ldr	r2, [pc, #316]	@ (3418efac <HAL_SD_GetCardStatus+0x178>)
3418ee6e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
3418ee70:	687b      	ldr	r3, [r7, #4]
3418ee72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418ee74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
3418ee76:	431a      	orrs	r2, r3
3418ee78:	687b      	ldr	r3, [r7, #4]
3418ee7a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
3418ee7c:	687b      	ldr	r3, [r7, #4]
3418ee7e:	2201      	movs	r2, #1
3418ee80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
3418ee84:	2301      	movs	r3, #1
3418ee86:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
3418ee8a:	e070      	b.n	3418ef6e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
3418ee8c:	68bb      	ldr	r3, [r7, #8]
3418ee8e:	099b      	lsrs	r3, r3, #6
3418ee90:	b2db      	uxtb	r3, r3
3418ee92:	f003 0303 	and.w	r3, r3, #3
3418ee96:	b2da      	uxtb	r2, r3
3418ee98:	683b      	ldr	r3, [r7, #0]
3418ee9a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
3418ee9c:	68bb      	ldr	r3, [r7, #8]
3418ee9e:	095b      	lsrs	r3, r3, #5
3418eea0:	b2db      	uxtb	r3, r3
3418eea2:	f003 0301 	and.w	r3, r3, #1
3418eea6:	b2da      	uxtb	r2, r3
3418eea8:	683b      	ldr	r3, [r7, #0]
3418eeaa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
3418eeac:	68bb      	ldr	r3, [r7, #8]
3418eeae:	0a1b      	lsrs	r3, r3, #8
3418eeb0:	b29b      	uxth	r3, r3
3418eeb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3418eeb6:	b29a      	uxth	r2, r3
3418eeb8:	68bb      	ldr	r3, [r7, #8]
3418eeba:	0e1b      	lsrs	r3, r3, #24
3418eebc:	b29b      	uxth	r3, r3
3418eebe:	4313      	orrs	r3, r2
3418eec0:	b29a      	uxth	r2, r3
3418eec2:	683b      	ldr	r3, [r7, #0]
3418eec4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
3418eec6:	68fb      	ldr	r3, [r7, #12]
3418eec8:	061a      	lsls	r2, r3, #24
3418eeca:	68fb      	ldr	r3, [r7, #12]
3418eecc:	021b      	lsls	r3, r3, #8
3418eece:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
3418eed2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
3418eed4:	68fb      	ldr	r3, [r7, #12]
3418eed6:	0a1b      	lsrs	r3, r3, #8
3418eed8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
3418eedc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
3418eede:	68fb      	ldr	r3, [r7, #12]
3418eee0:	0e1b      	lsrs	r3, r3, #24
3418eee2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
3418eee4:	683b      	ldr	r3, [r7, #0]
3418eee6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
3418eee8:	693b      	ldr	r3, [r7, #16]
3418eeea:	b2da      	uxtb	r2, r3
3418eeec:	683b      	ldr	r3, [r7, #0]
3418eeee:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
3418eef0:	693b      	ldr	r3, [r7, #16]
3418eef2:	0a1b      	lsrs	r3, r3, #8
3418eef4:	b2da      	uxtb	r2, r3
3418eef6:	683b      	ldr	r3, [r7, #0]
3418eef8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
3418eefa:	693b      	ldr	r3, [r7, #16]
3418eefc:	0d1b      	lsrs	r3, r3, #20
3418eefe:	b2db      	uxtb	r3, r3
3418ef00:	f003 030f 	and.w	r3, r3, #15
3418ef04:	b2da      	uxtb	r2, r3
3418ef06:	683b      	ldr	r3, [r7, #0]
3418ef08:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
3418ef0a:	693b      	ldr	r3, [r7, #16]
3418ef0c:	0c1b      	lsrs	r3, r3, #16
3418ef0e:	b29b      	uxth	r3, r3
3418ef10:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3418ef14:	b29a      	uxth	r2, r3
3418ef16:	697b      	ldr	r3, [r7, #20]
3418ef18:	b29b      	uxth	r3, r3
3418ef1a:	b2db      	uxtb	r3, r3
3418ef1c:	b29b      	uxth	r3, r3
3418ef1e:	4313      	orrs	r3, r2
3418ef20:	b29a      	uxth	r2, r3
3418ef22:	683b      	ldr	r3, [r7, #0]
3418ef24:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
3418ef26:	697b      	ldr	r3, [r7, #20]
3418ef28:	0a9b      	lsrs	r3, r3, #10
3418ef2a:	b2db      	uxtb	r3, r3
3418ef2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
3418ef30:	b2da      	uxtb	r2, r3
3418ef32:	683b      	ldr	r3, [r7, #0]
3418ef34:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
3418ef36:	697b      	ldr	r3, [r7, #20]
3418ef38:	0a1b      	lsrs	r3, r3, #8
3418ef3a:	b2db      	uxtb	r3, r3
3418ef3c:	f003 0303 	and.w	r3, r3, #3
3418ef40:	b2da      	uxtb	r2, r3
3418ef42:	683b      	ldr	r3, [r7, #0]
3418ef44:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
3418ef46:	697b      	ldr	r3, [r7, #20]
3418ef48:	091b      	lsrs	r3, r3, #4
3418ef4a:	b2db      	uxtb	r3, r3
3418ef4c:	f003 030f 	and.w	r3, r3, #15
3418ef50:	b2da      	uxtb	r2, r3
3418ef52:	683b      	ldr	r3, [r7, #0]
3418ef54:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
3418ef56:	697b      	ldr	r3, [r7, #20]
3418ef58:	b2db      	uxtb	r3, r3
3418ef5a:	f003 030f 	and.w	r3, r3, #15
3418ef5e:	b2da      	uxtb	r2, r3
3418ef60:	683b      	ldr	r3, [r7, #0]
3418ef62:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
3418ef64:	69bb      	ldr	r3, [r7, #24]
3418ef66:	0e1b      	lsrs	r3, r3, #24
3418ef68:	b2da      	uxtb	r2, r3
3418ef6a:	683b      	ldr	r3, [r7, #0]
3418ef6c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
3418ef6e:	687b      	ldr	r3, [r7, #4]
3418ef70:	681b      	ldr	r3, [r3, #0]
3418ef72:	f44f 7100 	mov.w	r1, #512	@ 0x200
3418ef76:	4618      	mov	r0, r3
3418ef78:	f002 fc12 	bl	341917a0 <SDMMC_CmdBlockLength>
3418ef7c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
3418ef7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
3418ef80:	2b00      	cmp	r3, #0
3418ef82:	d00d      	beq.n	3418efa0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
3418ef84:	687b      	ldr	r3, [r7, #4]
3418ef86:	681b      	ldr	r3, [r3, #0]
3418ef88:	4a08      	ldr	r2, [pc, #32]	@ (3418efac <HAL_SD_GetCardStatus+0x178>)
3418ef8a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
3418ef8c:	687b      	ldr	r3, [r7, #4]
3418ef8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
3418ef90:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
3418ef92:	687b      	ldr	r3, [r7, #4]
3418ef94:	2201      	movs	r2, #1
3418ef96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
3418ef9a:	2301      	movs	r3, #1
3418ef9c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
3418efa0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
3418efa4:	4618      	mov	r0, r3
3418efa6:	3750      	adds	r7, #80	@ 0x50
3418efa8:	46bd      	mov	sp, r7
3418efaa:	bd80      	pop	{r7, pc}
3418efac:	1fe00fff 	.word	0x1fe00fff

3418efb0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
3418efb0:	b590      	push	{r4, r7, lr}
3418efb2:	b08d      	sub	sp, #52	@ 0x34
3418efb4:	af02      	add	r7, sp, #8
3418efb6:	6078      	str	r0, [r7, #4]
3418efb8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
3418efba:	2300      	movs	r3, #0
3418efbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
3418efc0:	687b      	ldr	r3, [r7, #4]
3418efc2:	2203      	movs	r2, #3
3418efc4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
3418efc8:	687b      	ldr	r3, [r7, #4]
3418efca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418efcc:	2b03      	cmp	r3, #3
3418efce:	d02e      	beq.n	3418f02e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
3418efd0:	683b      	ldr	r3, [r7, #0]
3418efd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3418efd6:	d106      	bne.n	3418efe6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
3418efd8:	687b      	ldr	r3, [r7, #4]
3418efda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418efdc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
3418efe0:	687b      	ldr	r3, [r7, #4]
3418efe2:	635a      	str	r2, [r3, #52]	@ 0x34
3418efe4:	e029      	b.n	3418f03a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
3418efe6:	683b      	ldr	r3, [r7, #0]
3418efe8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
3418efec:	d10a      	bne.n	3418f004 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
3418efee:	6878      	ldr	r0, [r7, #4]
3418eff0:	f000 fb74 	bl	3418f6dc <SD_WideBus_Enable>
3418eff4:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
3418eff6:	687b      	ldr	r3, [r7, #4]
3418eff8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418effa:	69fb      	ldr	r3, [r7, #28]
3418effc:	431a      	orrs	r2, r3
3418effe:	687b      	ldr	r3, [r7, #4]
3418f000:	635a      	str	r2, [r3, #52]	@ 0x34
3418f002:	e01a      	b.n	3418f03a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
3418f004:	683b      	ldr	r3, [r7, #0]
3418f006:	2b00      	cmp	r3, #0
3418f008:	d10a      	bne.n	3418f020 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
3418f00a:	6878      	ldr	r0, [r7, #4]
3418f00c:	f000 fbb1 	bl	3418f772 <SD_WideBus_Disable>
3418f010:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
3418f012:	687b      	ldr	r3, [r7, #4]
3418f014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418f016:	69fb      	ldr	r3, [r7, #28]
3418f018:	431a      	orrs	r2, r3
3418f01a:	687b      	ldr	r3, [r7, #4]
3418f01c:	635a      	str	r2, [r3, #52]	@ 0x34
3418f01e:	e00c      	b.n	3418f03a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
3418f020:	687b      	ldr	r3, [r7, #4]
3418f022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418f024:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
3418f028:	687b      	ldr	r3, [r7, #4]
3418f02a:	635a      	str	r2, [r3, #52]	@ 0x34
3418f02c:	e005      	b.n	3418f03a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
3418f02e:	687b      	ldr	r3, [r7, #4]
3418f030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418f032:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
3418f036:	687b      	ldr	r3, [r7, #4]
3418f038:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
3418f03a:	687b      	ldr	r3, [r7, #4]
3418f03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418f03e:	2b00      	cmp	r3, #0
3418f040:	d007      	beq.n	3418f052 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
3418f042:	687b      	ldr	r3, [r7, #4]
3418f044:	681b      	ldr	r3, [r3, #0]
3418f046:	4a66      	ldr	r2, [pc, #408]	@ (3418f1e0 <HAL_SD_ConfigWideBusOperation+0x230>)
3418f048:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
3418f04a:	2301      	movs	r3, #1
3418f04c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
3418f050:	e0a3      	b.n	3418f19a <HAL_SD_ConfigWideBusOperation+0x1ea>
  }
  else
  {
    if (hsd->Instance == SDMMC1)
3418f052:	687b      	ldr	r3, [r7, #4]
3418f054:	681b      	ldr	r3, [r3, #0]
3418f056:	4a63      	ldr	r2, [pc, #396]	@ (3418f1e4 <HAL_SD_ConfigWideBusOperation+0x234>)
3418f058:	4293      	cmp	r3, r2
3418f05a:	d107      	bne.n	3418f06c <HAL_SD_ConfigWideBusOperation+0xbc>
    {
      sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
3418f05c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
3418f060:	f04f 0100 	mov.w	r1, #0
3418f064:	f7fb f814 	bl	3418a090 <HAL_RCCEx_GetPeriphCLKFreq>
3418f068:	6278      	str	r0, [r7, #36]	@ 0x24
3418f06a:	e006      	b.n	3418f07a <HAL_SD_ConfigWideBusOperation+0xca>
    }
    else
    {
      sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC2);
3418f06c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
3418f070:	f04f 0100 	mov.w	r1, #0
3418f074:	f7fb f80c 	bl	3418a090 <HAL_RCCEx_GetPeriphCLKFreq>
3418f078:	6278      	str	r0, [r7, #36]	@ 0x24
    }
    if (sdmmc_clk != 0U)
3418f07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f07c:	2b00      	cmp	r3, #0
3418f07e:	f000 8083 	beq.w	3418f188 <HAL_SD_ConfigWideBusOperation+0x1d8>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
3418f082:	687b      	ldr	r3, [r7, #4]
3418f084:	685b      	ldr	r3, [r3, #4]
3418f086:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
3418f088:	687b      	ldr	r3, [r7, #4]
3418f08a:	689b      	ldr	r3, [r3, #8]
3418f08c:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
3418f08e:	683b      	ldr	r3, [r7, #0]
3418f090:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
3418f092:	687b      	ldr	r3, [r7, #4]
3418f094:	691b      	ldr	r3, [r3, #16]
3418f096:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
3418f098:	687b      	ldr	r3, [r7, #4]
3418f09a:	695a      	ldr	r2, [r3, #20]
3418f09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f09e:	4952      	ldr	r1, [pc, #328]	@ (3418f1e8 <HAL_SD_ConfigWideBusOperation+0x238>)
3418f0a0:	fba1 1303 	umull	r1, r3, r1, r3
3418f0a4:	0e1b      	lsrs	r3, r3, #24
3418f0a6:	429a      	cmp	r2, r3
3418f0a8:	d303      	bcc.n	3418f0b2 <HAL_SD_ConfigWideBusOperation+0x102>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
3418f0aa:	687b      	ldr	r3, [r7, #4]
3418f0ac:	695b      	ldr	r3, [r3, #20]
3418f0ae:	61bb      	str	r3, [r7, #24]
3418f0b0:	e05a      	b.n	3418f168 <HAL_SD_ConfigWideBusOperation+0x1b8>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
3418f0b2:	687b      	ldr	r3, [r7, #4]
3418f0b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418f0b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418f0ba:	d103      	bne.n	3418f0c4 <HAL_SD_ConfigWideBusOperation+0x114>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
3418f0bc:	687b      	ldr	r3, [r7, #4]
3418f0be:	695b      	ldr	r3, [r3, #20]
3418f0c0:	61bb      	str	r3, [r7, #24]
3418f0c2:	e051      	b.n	3418f168 <HAL_SD_ConfigWideBusOperation+0x1b8>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
3418f0c4:	687b      	ldr	r3, [r7, #4]
3418f0c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418f0c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418f0cc:	d126      	bne.n	3418f11c <HAL_SD_ConfigWideBusOperation+0x16c>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
3418f0ce:	687b      	ldr	r3, [r7, #4]
3418f0d0:	695b      	ldr	r3, [r3, #20]
3418f0d2:	2b00      	cmp	r3, #0
3418f0d4:	d10e      	bne.n	3418f0f4 <HAL_SD_ConfigWideBusOperation+0x144>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
3418f0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f0d8:	4a44      	ldr	r2, [pc, #272]	@ (3418f1ec <HAL_SD_ConfigWideBusOperation+0x23c>)
3418f0da:	4293      	cmp	r3, r2
3418f0dc:	d906      	bls.n	3418f0ec <HAL_SD_ConfigWideBusOperation+0x13c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
3418f0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f0e0:	4a41      	ldr	r2, [pc, #260]	@ (3418f1e8 <HAL_SD_ConfigWideBusOperation+0x238>)
3418f0e2:	fba2 2303 	umull	r2, r3, r2, r3
3418f0e6:	0e5b      	lsrs	r3, r3, #25
3418f0e8:	61bb      	str	r3, [r7, #24]
3418f0ea:	e03d      	b.n	3418f168 <HAL_SD_ConfigWideBusOperation+0x1b8>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
3418f0ec:	687b      	ldr	r3, [r7, #4]
3418f0ee:	695b      	ldr	r3, [r3, #20]
3418f0f0:	61bb      	str	r3, [r7, #24]
3418f0f2:	e039      	b.n	3418f168 <HAL_SD_ConfigWideBusOperation+0x1b8>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
3418f0f4:	687b      	ldr	r3, [r7, #4]
3418f0f6:	695b      	ldr	r3, [r3, #20]
3418f0f8:	005b      	lsls	r3, r3, #1
3418f0fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
3418f0fc:	fbb2 f3f3 	udiv	r3, r2, r3
3418f100:	4a3a      	ldr	r2, [pc, #232]	@ (3418f1ec <HAL_SD_ConfigWideBusOperation+0x23c>)
3418f102:	4293      	cmp	r3, r2
3418f104:	d906      	bls.n	3418f114 <HAL_SD_ConfigWideBusOperation+0x164>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
3418f106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f108:	4a37      	ldr	r2, [pc, #220]	@ (3418f1e8 <HAL_SD_ConfigWideBusOperation+0x238>)
3418f10a:	fba2 2303 	umull	r2, r3, r2, r3
3418f10e:	0e5b      	lsrs	r3, r3, #25
3418f110:	61bb      	str	r3, [r7, #24]
3418f112:	e029      	b.n	3418f168 <HAL_SD_ConfigWideBusOperation+0x1b8>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
3418f114:	687b      	ldr	r3, [r7, #4]
3418f116:	695b      	ldr	r3, [r3, #20]
3418f118:	61bb      	str	r3, [r7, #24]
3418f11a:	e025      	b.n	3418f168 <HAL_SD_ConfigWideBusOperation+0x1b8>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
3418f11c:	687b      	ldr	r3, [r7, #4]
3418f11e:	695b      	ldr	r3, [r3, #20]
3418f120:	2b00      	cmp	r3, #0
3418f122:	d10e      	bne.n	3418f142 <HAL_SD_ConfigWideBusOperation+0x192>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
3418f124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f126:	4a32      	ldr	r2, [pc, #200]	@ (3418f1f0 <HAL_SD_ConfigWideBusOperation+0x240>)
3418f128:	4293      	cmp	r3, r2
3418f12a:	d906      	bls.n	3418f13a <HAL_SD_ConfigWideBusOperation+0x18a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
3418f12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f12e:	4a2e      	ldr	r2, [pc, #184]	@ (3418f1e8 <HAL_SD_ConfigWideBusOperation+0x238>)
3418f130:	fba2 2303 	umull	r2, r3, r2, r3
3418f134:	0e1b      	lsrs	r3, r3, #24
3418f136:	61bb      	str	r3, [r7, #24]
3418f138:	e016      	b.n	3418f168 <HAL_SD_ConfigWideBusOperation+0x1b8>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
3418f13a:	687b      	ldr	r3, [r7, #4]
3418f13c:	695b      	ldr	r3, [r3, #20]
3418f13e:	61bb      	str	r3, [r7, #24]
3418f140:	e012      	b.n	3418f168 <HAL_SD_ConfigWideBusOperation+0x1b8>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
3418f142:	687b      	ldr	r3, [r7, #4]
3418f144:	695b      	ldr	r3, [r3, #20]
3418f146:	005b      	lsls	r3, r3, #1
3418f148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
3418f14a:	fbb2 f3f3 	udiv	r3, r2, r3
3418f14e:	4a28      	ldr	r2, [pc, #160]	@ (3418f1f0 <HAL_SD_ConfigWideBusOperation+0x240>)
3418f150:	4293      	cmp	r3, r2
3418f152:	d906      	bls.n	3418f162 <HAL_SD_ConfigWideBusOperation+0x1b2>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
3418f154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f156:	4a24      	ldr	r2, [pc, #144]	@ (3418f1e8 <HAL_SD_ConfigWideBusOperation+0x238>)
3418f158:	fba2 2303 	umull	r2, r3, r2, r3
3418f15c:	0e1b      	lsrs	r3, r3, #24
3418f15e:	61bb      	str	r3, [r7, #24]
3418f160:	e002      	b.n	3418f168 <HAL_SD_ConfigWideBusOperation+0x1b8>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
3418f162:	687b      	ldr	r3, [r7, #4]
3418f164:	695b      	ldr	r3, [r3, #20]
3418f166:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
3418f168:	687b      	ldr	r3, [r7, #4]
3418f16a:	681c      	ldr	r4, [r3, #0]
3418f16c:	466a      	mov	r2, sp
3418f16e:	f107 0314 	add.w	r3, r7, #20
3418f172:	e893 0003 	ldmia.w	r3, {r0, r1}
3418f176:	e882 0003 	stmia.w	r2, {r0, r1}
3418f17a:	f107 0308 	add.w	r3, r7, #8
3418f17e:	cb0e      	ldmia	r3, {r1, r2, r3}
3418f180:	4620      	mov	r0, r4
3418f182:	f002 fa41 	bl	34191608 <SDMMC_Init>
3418f186:	e008      	b.n	3418f19a <HAL_SD_ConfigWideBusOperation+0x1ea>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
3418f188:	687b      	ldr	r3, [r7, #4]
3418f18a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418f18c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
3418f190:	687b      	ldr	r3, [r7, #4]
3418f192:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
3418f194:	2301      	movs	r3, #1
3418f196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
3418f19a:	687b      	ldr	r3, [r7, #4]
3418f19c:	681b      	ldr	r3, [r3, #0]
3418f19e:	f44f 7100 	mov.w	r1, #512	@ 0x200
3418f1a2:	4618      	mov	r0, r3
3418f1a4:	f002 fafc 	bl	341917a0 <SDMMC_CmdBlockLength>
3418f1a8:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
3418f1aa:	69fb      	ldr	r3, [r7, #28]
3418f1ac:	2b00      	cmp	r3, #0
3418f1ae:	d00c      	beq.n	3418f1ca <HAL_SD_ConfigWideBusOperation+0x21a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
3418f1b0:	687b      	ldr	r3, [r7, #4]
3418f1b2:	681b      	ldr	r3, [r3, #0]
3418f1b4:	4a0a      	ldr	r2, [pc, #40]	@ (3418f1e0 <HAL_SD_ConfigWideBusOperation+0x230>)
3418f1b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
3418f1b8:	687b      	ldr	r3, [r7, #4]
3418f1ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418f1bc:	69fb      	ldr	r3, [r7, #28]
3418f1be:	431a      	orrs	r2, r3
3418f1c0:	687b      	ldr	r3, [r7, #4]
3418f1c2:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
3418f1c4:	2301      	movs	r3, #1
3418f1c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
3418f1ca:	687b      	ldr	r3, [r7, #4]
3418f1cc:	2201      	movs	r2, #1
3418f1ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
3418f1d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
3418f1d6:	4618      	mov	r0, r3
3418f1d8:	372c      	adds	r7, #44	@ 0x2c
3418f1da:	46bd      	mov	sp, r7
3418f1dc:	bd90      	pop	{r4, r7, pc}
3418f1de:	bf00      	nop
3418f1e0:	1fe00fff 	.word	0x1fe00fff
3418f1e4:	58027000 	.word	0x58027000
3418f1e8:	55e63b89 	.word	0x55e63b89
3418f1ec:	02faf080 	.word	0x02faf080
3418f1f0:	017d7840 	.word	0x017d7840

3418f1f4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
3418f1f4:	b580      	push	{r7, lr}
3418f1f6:	b086      	sub	sp, #24
3418f1f8:	af00      	add	r7, sp, #0
3418f1fa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
3418f1fc:	2300      	movs	r3, #0
3418f1fe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
3418f200:	f107 030c 	add.w	r3, r7, #12
3418f204:	4619      	mov	r1, r3
3418f206:	6878      	ldr	r0, [r7, #4]
3418f208:	f000 fa40 	bl	3418f68c <SD_SendStatus>
3418f20c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
3418f20e:	697b      	ldr	r3, [r7, #20]
3418f210:	2b00      	cmp	r3, #0
3418f212:	d005      	beq.n	3418f220 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
3418f214:	687b      	ldr	r3, [r7, #4]
3418f216:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418f218:	697b      	ldr	r3, [r7, #20]
3418f21a:	431a      	orrs	r2, r3
3418f21c:	687b      	ldr	r3, [r7, #4]
3418f21e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
3418f220:	68fb      	ldr	r3, [r7, #12]
3418f222:	0a5b      	lsrs	r3, r3, #9
3418f224:	f003 030f 	and.w	r3, r3, #15
3418f228:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
3418f22a:	693b      	ldr	r3, [r7, #16]
}
3418f22c:	4618      	mov	r0, r3
3418f22e:	3718      	adds	r7, #24
3418f230:	46bd      	mov	sp, r7
3418f232:	bd80      	pop	{r7, pc}

3418f234 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
3418f234:	b580      	push	{r7, lr}
3418f236:	b090      	sub	sp, #64	@ 0x40
3418f238:	af00      	add	r7, sp, #0
3418f23a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
3418f23c:	2300      	movs	r3, #0
3418f23e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
3418f240:	f7f3 fad6 	bl	341827f0 <HAL_GetTick>
3418f244:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
3418f246:	687b      	ldr	r3, [r7, #4]
3418f248:	681b      	ldr	r3, [r3, #0]
3418f24a:	4618      	mov	r0, r3
3418f24c:	f002 fa24 	bl	34191698 <SDMMC_GetPowerState>
3418f250:	4603      	mov	r3, r0
3418f252:	2b00      	cmp	r3, #0
3418f254:	d102      	bne.n	3418f25c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
3418f256:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418f25a:	e0b5      	b.n	3418f3c8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
3418f25c:	687b      	ldr	r3, [r7, #4]
3418f25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418f260:	2b03      	cmp	r3, #3
3418f262:	d02e      	beq.n	3418f2c2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
3418f264:	687b      	ldr	r3, [r7, #4]
3418f266:	681b      	ldr	r3, [r3, #0]
3418f268:	4618      	mov	r0, r3
3418f26a:	f002 fba5 	bl	341919b8 <SDMMC_CmdSendCID>
3418f26e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
3418f270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418f272:	2b00      	cmp	r3, #0
3418f274:	d001      	beq.n	3418f27a <SD_InitCard+0x46>
    {
      return errorstate;
3418f276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418f278:	e0a6      	b.n	3418f3c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
3418f27a:	687b      	ldr	r3, [r7, #4]
3418f27c:	681b      	ldr	r3, [r3, #0]
3418f27e:	2100      	movs	r1, #0
3418f280:	4618      	mov	r0, r3
3418f282:	f002 fa4e 	bl	34191722 <SDMMC_GetResponse>
3418f286:	4602      	mov	r2, r0
3418f288:	687b      	ldr	r3, [r7, #4]
3418f28a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
3418f28c:	687b      	ldr	r3, [r7, #4]
3418f28e:	681b      	ldr	r3, [r3, #0]
3418f290:	2104      	movs	r1, #4
3418f292:	4618      	mov	r0, r3
3418f294:	f002 fa45 	bl	34191722 <SDMMC_GetResponse>
3418f298:	4602      	mov	r2, r0
3418f29a:	687b      	ldr	r3, [r7, #4]
3418f29c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
3418f29e:	687b      	ldr	r3, [r7, #4]
3418f2a0:	681b      	ldr	r3, [r3, #0]
3418f2a2:	2108      	movs	r1, #8
3418f2a4:	4618      	mov	r0, r3
3418f2a6:	f002 fa3c 	bl	34191722 <SDMMC_GetResponse>
3418f2aa:	4602      	mov	r2, r0
3418f2ac:	687b      	ldr	r3, [r7, #4]
3418f2ae:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
3418f2b0:	687b      	ldr	r3, [r7, #4]
3418f2b2:	681b      	ldr	r3, [r3, #0]
3418f2b4:	210c      	movs	r1, #12
3418f2b6:	4618      	mov	r0, r3
3418f2b8:	f002 fa33 	bl	34191722 <SDMMC_GetResponse>
3418f2bc:	4602      	mov	r2, r0
3418f2be:	687b      	ldr	r3, [r7, #4]
3418f2c0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
3418f2c2:	687b      	ldr	r3, [r7, #4]
3418f2c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418f2c6:	2b03      	cmp	r3, #3
3418f2c8:	d01d      	beq.n	3418f306 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
3418f2ca:	e019      	b.n	3418f300 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
3418f2cc:	687b      	ldr	r3, [r7, #4]
3418f2ce:	681b      	ldr	r3, [r3, #0]
3418f2d0:	f107 020a 	add.w	r2, r7, #10
3418f2d4:	4611      	mov	r1, r2
3418f2d6:	4618      	mov	r0, r3
3418f2d8:	f002 fbad 	bl	34191a36 <SDMMC_CmdSetRelAdd>
3418f2dc:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
3418f2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418f2e0:	2b00      	cmp	r3, #0
3418f2e2:	d001      	beq.n	3418f2e8 <SD_InitCard+0xb4>
      {
        return errorstate;
3418f2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418f2e6:	e06f      	b.n	3418f3c8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
3418f2e8:	f7f3 fa82 	bl	341827f0 <HAL_GetTick>
3418f2ec:	4602      	mov	r2, r0
3418f2ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3418f2f0:	1ad3      	subs	r3, r2, r3
3418f2f2:	f241 3287 	movw	r2, #4999	@ 0x1387
3418f2f6:	4293      	cmp	r3, r2
3418f2f8:	d902      	bls.n	3418f300 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
3418f2fa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
3418f2fe:	e063      	b.n	3418f3c8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
3418f300:	897b      	ldrh	r3, [r7, #10]
3418f302:	2b00      	cmp	r3, #0
3418f304:	d0e2      	beq.n	3418f2cc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
3418f306:	687b      	ldr	r3, [r7, #4]
3418f308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418f30a:	2b03      	cmp	r3, #3
3418f30c:	d036      	beq.n	3418f37c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
3418f30e:	897b      	ldrh	r3, [r7, #10]
3418f310:	461a      	mov	r2, r3
3418f312:	687b      	ldr	r3, [r7, #4]
3418f314:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
3418f316:	687b      	ldr	r3, [r7, #4]
3418f318:	681a      	ldr	r2, [r3, #0]
3418f31a:	687b      	ldr	r3, [r7, #4]
3418f31c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418f31e:	041b      	lsls	r3, r3, #16
3418f320:	4619      	mov	r1, r3
3418f322:	4610      	mov	r0, r2
3418f324:	f002 fb67 	bl	341919f6 <SDMMC_CmdSendCSD>
3418f328:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
3418f32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418f32c:	2b00      	cmp	r3, #0
3418f32e:	d001      	beq.n	3418f334 <SD_InitCard+0x100>
    {
      return errorstate;
3418f330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418f332:	e049      	b.n	3418f3c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
3418f334:	687b      	ldr	r3, [r7, #4]
3418f336:	681b      	ldr	r3, [r3, #0]
3418f338:	2100      	movs	r1, #0
3418f33a:	4618      	mov	r0, r3
3418f33c:	f002 f9f1 	bl	34191722 <SDMMC_GetResponse>
3418f340:	4602      	mov	r2, r0
3418f342:	687b      	ldr	r3, [r7, #4]
3418f344:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
3418f346:	687b      	ldr	r3, [r7, #4]
3418f348:	681b      	ldr	r3, [r3, #0]
3418f34a:	2104      	movs	r1, #4
3418f34c:	4618      	mov	r0, r3
3418f34e:	f002 f9e8 	bl	34191722 <SDMMC_GetResponse>
3418f352:	4602      	mov	r2, r0
3418f354:	687b      	ldr	r3, [r7, #4]
3418f356:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
3418f358:	687b      	ldr	r3, [r7, #4]
3418f35a:	681b      	ldr	r3, [r3, #0]
3418f35c:	2108      	movs	r1, #8
3418f35e:	4618      	mov	r0, r3
3418f360:	f002 f9df 	bl	34191722 <SDMMC_GetResponse>
3418f364:	4602      	mov	r2, r0
3418f366:	687b      	ldr	r3, [r7, #4]
3418f368:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
3418f36a:	687b      	ldr	r3, [r7, #4]
3418f36c:	681b      	ldr	r3, [r3, #0]
3418f36e:	210c      	movs	r1, #12
3418f370:	4618      	mov	r0, r3
3418f372:	f002 f9d6 	bl	34191722 <SDMMC_GetResponse>
3418f376:	4602      	mov	r2, r0
3418f378:	687b      	ldr	r3, [r7, #4]
3418f37a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
3418f37c:	687b      	ldr	r3, [r7, #4]
3418f37e:	681b      	ldr	r3, [r3, #0]
3418f380:	2104      	movs	r1, #4
3418f382:	4618      	mov	r0, r3
3418f384:	f002 f9cd 	bl	34191722 <SDMMC_GetResponse>
3418f388:	4603      	mov	r3, r0
3418f38a:	0d1a      	lsrs	r2, r3, #20
3418f38c:	687b      	ldr	r3, [r7, #4]
3418f38e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
3418f390:	f107 030c 	add.w	r3, r7, #12
3418f394:	4619      	mov	r1, r3
3418f396:	6878      	ldr	r0, [r7, #4]
3418f398:	f7ff fba8 	bl	3418eaec <HAL_SD_GetCardCSD>
3418f39c:	4603      	mov	r3, r0
3418f39e:	2b00      	cmp	r3, #0
3418f3a0:	d002      	beq.n	3418f3a8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
3418f3a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
3418f3a6:	e00f      	b.n	3418f3c8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
3418f3a8:	687b      	ldr	r3, [r7, #4]
3418f3aa:	681a      	ldr	r2, [r3, #0]
3418f3ac:	687b      	ldr	r3, [r7, #4]
3418f3ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418f3b0:	041b      	lsls	r3, r3, #16
3418f3b2:	4619      	mov	r1, r3
3418f3b4:	4610      	mov	r0, r2
3418f3b6:	f002 fa16 	bl	341917e6 <SDMMC_CmdSelDesel>
3418f3ba:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
3418f3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418f3be:	2b00      	cmp	r3, #0
3418f3c0:	d001      	beq.n	3418f3c6 <SD_InitCard+0x192>
  {
    return errorstate;
3418f3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418f3c4:	e000      	b.n	3418f3c8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
3418f3c6:	2300      	movs	r3, #0
}
3418f3c8:	4618      	mov	r0, r3
3418f3ca:	3740      	adds	r7, #64	@ 0x40
3418f3cc:	46bd      	mov	sp, r7
3418f3ce:	bd80      	pop	{r7, pc}

3418f3d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
3418f3d0:	b580      	push	{r7, lr}
3418f3d2:	b086      	sub	sp, #24
3418f3d4:	af00      	add	r7, sp, #0
3418f3d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
3418f3d8:	2300      	movs	r3, #0
3418f3da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
3418f3dc:	2300      	movs	r3, #0
3418f3de:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
3418f3e0:	2300      	movs	r3, #0
3418f3e2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
3418f3e4:	687b      	ldr	r3, [r7, #4]
3418f3e6:	681b      	ldr	r3, [r3, #0]
3418f3e8:	4618      	mov	r0, r3
3418f3ea:	f002 fa1f 	bl	3419182c <SDMMC_CmdGoIdleState>
3418f3ee:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
3418f3f0:	68fb      	ldr	r3, [r7, #12]
3418f3f2:	2b00      	cmp	r3, #0
3418f3f4:	d001      	beq.n	3418f3fa <SD_PowerON+0x2a>
  {
    return errorstate;
3418f3f6:	68fb      	ldr	r3, [r7, #12]
3418f3f8:	e072      	b.n	3418f4e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
3418f3fa:	687b      	ldr	r3, [r7, #4]
3418f3fc:	681b      	ldr	r3, [r3, #0]
3418f3fe:	4618      	mov	r0, r3
3418f400:	f002 fa32 	bl	34191868 <SDMMC_CmdOperCond>
3418f404:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
3418f406:	68fb      	ldr	r3, [r7, #12]
3418f408:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
3418f40c:	d10d      	bne.n	3418f42a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
3418f40e:	687b      	ldr	r3, [r7, #4]
3418f410:	2200      	movs	r2, #0
3418f412:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
3418f414:	687b      	ldr	r3, [r7, #4]
3418f416:	681b      	ldr	r3, [r3, #0]
3418f418:	4618      	mov	r0, r3
3418f41a:	f002 fa07 	bl	3419182c <SDMMC_CmdGoIdleState>
3418f41e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
3418f420:	68fb      	ldr	r3, [r7, #12]
3418f422:	2b00      	cmp	r3, #0
3418f424:	d004      	beq.n	3418f430 <SD_PowerON+0x60>
    {
      return errorstate;
3418f426:	68fb      	ldr	r3, [r7, #12]
3418f428:	e05a      	b.n	3418f4e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
3418f42a:	687b      	ldr	r3, [r7, #4]
3418f42c:	2201      	movs	r2, #1
3418f42e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
3418f430:	687b      	ldr	r3, [r7, #4]
3418f432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418f434:	2b01      	cmp	r3, #1
3418f436:	d137      	bne.n	3418f4a8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
3418f438:	687b      	ldr	r3, [r7, #4]
3418f43a:	681b      	ldr	r3, [r3, #0]
3418f43c:	2100      	movs	r1, #0
3418f43e:	4618      	mov	r0, r3
3418f440:	f002 fa32 	bl	341918a8 <SDMMC_CmdAppCommand>
3418f444:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
3418f446:	68fb      	ldr	r3, [r7, #12]
3418f448:	2b00      	cmp	r3, #0
3418f44a:	d02d      	beq.n	3418f4a8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
3418f44c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
3418f450:	e046      	b.n	3418f4e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
3418f452:	687b      	ldr	r3, [r7, #4]
3418f454:	681b      	ldr	r3, [r3, #0]
3418f456:	2100      	movs	r1, #0
3418f458:	4618      	mov	r0, r3
3418f45a:	f002 fa25 	bl	341918a8 <SDMMC_CmdAppCommand>
3418f45e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
3418f460:	68fb      	ldr	r3, [r7, #12]
3418f462:	2b00      	cmp	r3, #0
3418f464:	d001      	beq.n	3418f46a <SD_PowerON+0x9a>
    {
      return errorstate;
3418f466:	68fb      	ldr	r3, [r7, #12]
3418f468:	e03a      	b.n	3418f4e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
3418f46a:	687b      	ldr	r3, [r7, #4]
3418f46c:	681b      	ldr	r3, [r3, #0]
3418f46e:	491e      	ldr	r1, [pc, #120]	@ (3418f4e8 <SD_PowerON+0x118>)
3418f470:	4618      	mov	r0, r3
3418f472:	f002 fa3c 	bl	341918ee <SDMMC_CmdAppOperCommand>
3418f476:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
3418f478:	68fb      	ldr	r3, [r7, #12]
3418f47a:	2b00      	cmp	r3, #0
3418f47c:	d002      	beq.n	3418f484 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
3418f47e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
3418f482:	e02d      	b.n	3418f4e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
3418f484:	687b      	ldr	r3, [r7, #4]
3418f486:	681b      	ldr	r3, [r3, #0]
3418f488:	2100      	movs	r1, #0
3418f48a:	4618      	mov	r0, r3
3418f48c:	f002 f949 	bl	34191722 <SDMMC_GetResponse>
3418f490:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
3418f492:	697b      	ldr	r3, [r7, #20]
3418f494:	0fdb      	lsrs	r3, r3, #31
3418f496:	2b01      	cmp	r3, #1
3418f498:	d101      	bne.n	3418f49e <SD_PowerON+0xce>
3418f49a:	2301      	movs	r3, #1
3418f49c:	e000      	b.n	3418f4a0 <SD_PowerON+0xd0>
3418f49e:	2300      	movs	r3, #0
3418f4a0:	613b      	str	r3, [r7, #16]

    count++;
3418f4a2:	68bb      	ldr	r3, [r7, #8]
3418f4a4:	3301      	adds	r3, #1
3418f4a6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
3418f4a8:	68bb      	ldr	r3, [r7, #8]
3418f4aa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
3418f4ae:	4293      	cmp	r3, r2
3418f4b0:	d802      	bhi.n	3418f4b8 <SD_PowerON+0xe8>
3418f4b2:	693b      	ldr	r3, [r7, #16]
3418f4b4:	2b00      	cmp	r3, #0
3418f4b6:	d0cc      	beq.n	3418f452 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
3418f4b8:	68bb      	ldr	r3, [r7, #8]
3418f4ba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
3418f4be:	4293      	cmp	r3, r2
3418f4c0:	d902      	bls.n	3418f4c8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
3418f4c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418f4c6:	e00b      	b.n	3418f4e0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
3418f4c8:	687b      	ldr	r3, [r7, #4]
3418f4ca:	2200      	movs	r2, #0
3418f4cc:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
3418f4ce:	697b      	ldr	r3, [r7, #20]
3418f4d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3418f4d4:	2b00      	cmp	r3, #0
3418f4d6:	d002      	beq.n	3418f4de <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
3418f4d8:	687b      	ldr	r3, [r7, #4]
3418f4da:	2201      	movs	r2, #1
3418f4dc:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
3418f4de:	2300      	movs	r3, #0
}
3418f4e0:	4618      	mov	r0, r3
3418f4e2:	3718      	adds	r7, #24
3418f4e4:	46bd      	mov	sp, r7
3418f4e6:	bd80      	pop	{r7, pc}
3418f4e8:	c1100000 	.word	0xc1100000

3418f4ec <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
3418f4ec:	b580      	push	{r7, lr}
3418f4ee:	b08c      	sub	sp, #48	@ 0x30
3418f4f0:	af00      	add	r7, sp, #0
3418f4f2:	6078      	str	r0, [r7, #4]
3418f4f4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
3418f4f6:	f7f3 f97b 	bl	341827f0 <HAL_GetTick>
3418f4fa:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count = 0;
3418f4fc:	2300      	movs	r3, #0
3418f4fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t *pData = pSDstatus;
3418f500:	683b      	ldr	r3, [r7, #0]
3418f502:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
3418f504:	687b      	ldr	r3, [r7, #4]
3418f506:	681b      	ldr	r3, [r3, #0]
3418f508:	2100      	movs	r1, #0
3418f50a:	4618      	mov	r0, r3
3418f50c:	f002 f909 	bl	34191722 <SDMMC_GetResponse>
3418f510:	4603      	mov	r3, r0
3418f512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
3418f516:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418f51a:	d102      	bne.n	3418f522 <SD_SendSDStatus+0x36>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
3418f51c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418f520:	e0ad      	b.n	3418f67e <SD_SendSDStatus+0x192>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
3418f522:	687b      	ldr	r3, [r7, #4]
3418f524:	681b      	ldr	r3, [r3, #0]
3418f526:	2140      	movs	r1, #64	@ 0x40
3418f528:	4618      	mov	r0, r3
3418f52a:	f002 f939 	bl	341917a0 <SDMMC_CmdBlockLength>
3418f52e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
3418f530:	6a3b      	ldr	r3, [r7, #32]
3418f532:	2b00      	cmp	r3, #0
3418f534:	d005      	beq.n	3418f542 <SD_SendSDStatus+0x56>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
3418f536:	687b      	ldr	r3, [r7, #4]
3418f538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418f53a:	687b      	ldr	r3, [r7, #4]
3418f53c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
3418f53e:	6a3b      	ldr	r3, [r7, #32]
3418f540:	e09d      	b.n	3418f67e <SD_SendSDStatus+0x192>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
3418f542:	687b      	ldr	r3, [r7, #4]
3418f544:	681a      	ldr	r2, [r3, #0]
3418f546:	687b      	ldr	r3, [r7, #4]
3418f548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418f54a:	041b      	lsls	r3, r3, #16
3418f54c:	4619      	mov	r1, r3
3418f54e:	4610      	mov	r0, r2
3418f550:	f002 f9aa 	bl	341918a8 <SDMMC_CmdAppCommand>
3418f554:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
3418f556:	6a3b      	ldr	r3, [r7, #32]
3418f558:	2b00      	cmp	r3, #0
3418f55a:	d005      	beq.n	3418f568 <SD_SendSDStatus+0x7c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
3418f55c:	687b      	ldr	r3, [r7, #4]
3418f55e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418f560:	687b      	ldr	r3, [r7, #4]
3418f562:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
3418f564:	6a3b      	ldr	r3, [r7, #32]
3418f566:	e08a      	b.n	3418f67e <SD_SendSDStatus+0x192>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
3418f568:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3418f56c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
3418f56e:	2340      	movs	r3, #64	@ 0x40
3418f570:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
3418f572:	2360      	movs	r3, #96	@ 0x60
3418f574:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
3418f576:	2302      	movs	r3, #2
3418f578:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
3418f57a:	2300      	movs	r3, #0
3418f57c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
3418f57e:	2301      	movs	r3, #1
3418f580:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
3418f582:	687b      	ldr	r3, [r7, #4]
3418f584:	681b      	ldr	r3, [r3, #0]
3418f586:	f107 0208 	add.w	r2, r7, #8
3418f58a:	4611      	mov	r1, r2
3418f58c:	4618      	mov	r0, r3
3418f58e:	f002 f8db 	bl	34191748 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
3418f592:	687b      	ldr	r3, [r7, #4]
3418f594:	681b      	ldr	r3, [r3, #0]
3418f596:	4618      	mov	r0, r3
3418f598:	f002 fa92 	bl	34191ac0 <SDMMC_CmdStatusRegister>
3418f59c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
3418f59e:	6a3b      	ldr	r3, [r7, #32]
3418f5a0:	2b00      	cmp	r3, #0
3418f5a2:	d028      	beq.n	3418f5f6 <SD_SendSDStatus+0x10a>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
3418f5a4:	687b      	ldr	r3, [r7, #4]
3418f5a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418f5a8:	687b      	ldr	r3, [r7, #4]
3418f5aa:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
3418f5ac:	6a3b      	ldr	r3, [r7, #32]
3418f5ae:	e066      	b.n	3418f67e <SD_SendSDStatus+0x192>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (count < 16U))
3418f5b0:	687b      	ldr	r3, [r7, #4]
3418f5b2:	681b      	ldr	r3, [r3, #0]
3418f5b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418f5b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3418f5ba:	2b00      	cmp	r3, #0
3418f5bc:	d110      	bne.n	3418f5e0 <SD_SendSDStatus+0xf4>
3418f5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418f5c0:	2b0f      	cmp	r3, #15
3418f5c2:	d80d      	bhi.n	3418f5e0 <SD_SendSDStatus+0xf4>
    {
      *pData = SDMMC_ReadFIFO(hsd->Instance);
3418f5c4:	687b      	ldr	r3, [r7, #4]
3418f5c6:	681b      	ldr	r3, [r3, #0]
3418f5c8:	4618      	mov	r0, r3
3418f5ca:	f002 f847 	bl	3419165c <SDMMC_ReadFIFO>
3418f5ce:	4602      	mov	r2, r0
3418f5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418f5d2:	601a      	str	r2, [r3, #0]
      pData++;
3418f5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418f5d6:	3304      	adds	r3, #4
3418f5d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      count++;
3418f5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418f5dc:	3301      	adds	r3, #1
3418f5de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
3418f5e0:	f7f3 f906 	bl	341827f0 <HAL_GetTick>
3418f5e4:	4602      	mov	r2, r0
3418f5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f5e8:	1ad3      	subs	r3, r2, r3
3418f5ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
3418f5ee:	d102      	bne.n	3418f5f6 <SD_SendSDStatus+0x10a>
    {
      return HAL_SD_ERROR_TIMEOUT;
3418f5f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
3418f5f4:	e043      	b.n	3418f67e <SD_SendSDStatus+0x192>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
3418f5f6:	687b      	ldr	r3, [r7, #4]
3418f5f8:	681b      	ldr	r3, [r3, #0]
3418f5fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418f5fc:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
3418f600:	2b00      	cmp	r3, #0
3418f602:	d0d5      	beq.n	3418f5b0 <SD_SendSDStatus+0xc4>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
3418f604:	687b      	ldr	r3, [r7, #4]
3418f606:	681b      	ldr	r3, [r3, #0]
3418f608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418f60a:	f003 0308 	and.w	r3, r3, #8
3418f60e:	2b00      	cmp	r3, #0
3418f610:	d001      	beq.n	3418f616 <SD_SendSDStatus+0x12a>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
3418f612:	2308      	movs	r3, #8
3418f614:	e033      	b.n	3418f67e <SD_SendSDStatus+0x192>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
3418f616:	687b      	ldr	r3, [r7, #4]
3418f618:	681b      	ldr	r3, [r3, #0]
3418f61a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418f61c:	f003 0302 	and.w	r3, r3, #2
3418f620:	2b00      	cmp	r3, #0
3418f622:	d001      	beq.n	3418f628 <SD_SendSDStatus+0x13c>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
3418f624:	2302      	movs	r3, #2
3418f626:	e02a      	b.n	3418f67e <SD_SendSDStatus+0x192>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
3418f628:	687b      	ldr	r3, [r7, #4]
3418f62a:	681b      	ldr	r3, [r3, #0]
3418f62c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418f62e:	f003 0320 	and.w	r3, r3, #32
3418f632:	2b00      	cmp	r3, #0
3418f634:	d017      	beq.n	3418f666 <SD_SendSDStatus+0x17a>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
3418f636:	2320      	movs	r3, #32
3418f638:	e021      	b.n	3418f67e <SD_SendSDStatus+0x192>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
3418f63a:	687b      	ldr	r3, [r7, #4]
3418f63c:	681b      	ldr	r3, [r3, #0]
3418f63e:	4618      	mov	r0, r3
3418f640:	f002 f80c 	bl	3419165c <SDMMC_ReadFIFO>
3418f644:	4602      	mov	r2, r0
3418f646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418f648:	601a      	str	r2, [r3, #0]
    pData++;
3418f64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418f64c:	3304      	adds	r3, #4
3418f64e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
3418f650:	f7f3 f8ce 	bl	341827f0 <HAL_GetTick>
3418f654:	4602      	mov	r2, r0
3418f656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f658:	1ad3      	subs	r3, r2, r3
3418f65a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
3418f65e:	d102      	bne.n	3418f666 <SD_SendSDStatus+0x17a>
    {
      return HAL_SD_ERROR_TIMEOUT;
3418f660:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
3418f664:	e00b      	b.n	3418f67e <SD_SendSDStatus+0x192>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
3418f666:	687b      	ldr	r3, [r7, #4]
3418f668:	681b      	ldr	r3, [r3, #0]
3418f66a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418f66c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3418f670:	2b00      	cmp	r3, #0
3418f672:	d1e2      	bne.n	3418f63a <SD_SendSDStatus+0x14e>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
3418f674:	687b      	ldr	r3, [r7, #4]
3418f676:	681b      	ldr	r3, [r3, #0]
3418f678:	4a03      	ldr	r2, [pc, #12]	@ (3418f688 <SD_SendSDStatus+0x19c>)
3418f67a:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
3418f67c:	2300      	movs	r3, #0
}
3418f67e:	4618      	mov	r0, r3
3418f680:	3730      	adds	r7, #48	@ 0x30
3418f682:	46bd      	mov	sp, r7
3418f684:	bd80      	pop	{r7, pc}
3418f686:	bf00      	nop
3418f688:	18000f3a 	.word	0x18000f3a

3418f68c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
3418f68c:	b580      	push	{r7, lr}
3418f68e:	b084      	sub	sp, #16
3418f690:	af00      	add	r7, sp, #0
3418f692:	6078      	str	r0, [r7, #4]
3418f694:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
3418f696:	683b      	ldr	r3, [r7, #0]
3418f698:	2b00      	cmp	r3, #0
3418f69a:	d102      	bne.n	3418f6a2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
3418f69c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418f6a0:	e018      	b.n	3418f6d4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
3418f6a2:	687b      	ldr	r3, [r7, #4]
3418f6a4:	681a      	ldr	r2, [r3, #0]
3418f6a6:	687b      	ldr	r3, [r7, #4]
3418f6a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418f6aa:	041b      	lsls	r3, r3, #16
3418f6ac:	4619      	mov	r1, r3
3418f6ae:	4610      	mov	r0, r2
3418f6b0:	f002 f9e3 	bl	34191a7a <SDMMC_CmdSendStatus>
3418f6b4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
3418f6b6:	68fb      	ldr	r3, [r7, #12]
3418f6b8:	2b00      	cmp	r3, #0
3418f6ba:	d001      	beq.n	3418f6c0 <SD_SendStatus+0x34>
  {
    return errorstate;
3418f6bc:	68fb      	ldr	r3, [r7, #12]
3418f6be:	e009      	b.n	3418f6d4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
3418f6c0:	687b      	ldr	r3, [r7, #4]
3418f6c2:	681b      	ldr	r3, [r3, #0]
3418f6c4:	2100      	movs	r1, #0
3418f6c6:	4618      	mov	r0, r3
3418f6c8:	f002 f82b 	bl	34191722 <SDMMC_GetResponse>
3418f6cc:	4602      	mov	r2, r0
3418f6ce:	683b      	ldr	r3, [r7, #0]
3418f6d0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
3418f6d2:	2300      	movs	r3, #0
}
3418f6d4:	4618      	mov	r0, r3
3418f6d6:	3710      	adds	r7, #16
3418f6d8:	46bd      	mov	sp, r7
3418f6da:	bd80      	pop	{r7, pc}

3418f6dc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
3418f6dc:	b580      	push	{r7, lr}
3418f6de:	b086      	sub	sp, #24
3418f6e0:	af00      	add	r7, sp, #0
3418f6e2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
3418f6e4:	2300      	movs	r3, #0
3418f6e6:	60fb      	str	r3, [r7, #12]
3418f6e8:	2300      	movs	r3, #0
3418f6ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
3418f6ec:	687b      	ldr	r3, [r7, #4]
3418f6ee:	681b      	ldr	r3, [r3, #0]
3418f6f0:	2100      	movs	r1, #0
3418f6f2:	4618      	mov	r0, r3
3418f6f4:	f002 f815 	bl	34191722 <SDMMC_GetResponse>
3418f6f8:	4603      	mov	r3, r0
3418f6fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
3418f6fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418f702:	d102      	bne.n	3418f70a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
3418f704:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418f708:	e02f      	b.n	3418f76a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
3418f70a:	f107 030c 	add.w	r3, r7, #12
3418f70e:	4619      	mov	r1, r3
3418f710:	6878      	ldr	r0, [r7, #4]
3418f712:	f000 f879 	bl	3418f808 <SD_FindSCR>
3418f716:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
3418f718:	697b      	ldr	r3, [r7, #20]
3418f71a:	2b00      	cmp	r3, #0
3418f71c:	d001      	beq.n	3418f722 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
3418f71e:	697b      	ldr	r3, [r7, #20]
3418f720:	e023      	b.n	3418f76a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
3418f722:	693b      	ldr	r3, [r7, #16]
3418f724:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3418f728:	2b00      	cmp	r3, #0
3418f72a:	d01c      	beq.n	3418f766 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
3418f72c:	687b      	ldr	r3, [r7, #4]
3418f72e:	681a      	ldr	r2, [r3, #0]
3418f730:	687b      	ldr	r3, [r7, #4]
3418f732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418f734:	041b      	lsls	r3, r3, #16
3418f736:	4619      	mov	r1, r3
3418f738:	4610      	mov	r0, r2
3418f73a:	f002 f8b5 	bl	341918a8 <SDMMC_CmdAppCommand>
3418f73e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
3418f740:	697b      	ldr	r3, [r7, #20]
3418f742:	2b00      	cmp	r3, #0
3418f744:	d001      	beq.n	3418f74a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
3418f746:	697b      	ldr	r3, [r7, #20]
3418f748:	e00f      	b.n	3418f76a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
3418f74a:	687b      	ldr	r3, [r7, #4]
3418f74c:	681b      	ldr	r3, [r3, #0]
3418f74e:	2102      	movs	r1, #2
3418f750:	4618      	mov	r0, r3
3418f752:	f002 f8ec 	bl	3419192e <SDMMC_CmdBusWidth>
3418f756:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
3418f758:	697b      	ldr	r3, [r7, #20]
3418f75a:	2b00      	cmp	r3, #0
3418f75c:	d001      	beq.n	3418f762 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
3418f75e:	697b      	ldr	r3, [r7, #20]
3418f760:	e003      	b.n	3418f76a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
3418f762:	2300      	movs	r3, #0
3418f764:	e001      	b.n	3418f76a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
3418f766:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
3418f76a:	4618      	mov	r0, r3
3418f76c:	3718      	adds	r7, #24
3418f76e:	46bd      	mov	sp, r7
3418f770:	bd80      	pop	{r7, pc}

3418f772 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
3418f772:	b580      	push	{r7, lr}
3418f774:	b086      	sub	sp, #24
3418f776:	af00      	add	r7, sp, #0
3418f778:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
3418f77a:	2300      	movs	r3, #0
3418f77c:	60fb      	str	r3, [r7, #12]
3418f77e:	2300      	movs	r3, #0
3418f780:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
3418f782:	687b      	ldr	r3, [r7, #4]
3418f784:	681b      	ldr	r3, [r3, #0]
3418f786:	2100      	movs	r1, #0
3418f788:	4618      	mov	r0, r3
3418f78a:	f001 ffca 	bl	34191722 <SDMMC_GetResponse>
3418f78e:	4603      	mov	r3, r0
3418f790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
3418f794:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418f798:	d102      	bne.n	3418f7a0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
3418f79a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418f79e:	e02f      	b.n	3418f800 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
3418f7a0:	f107 030c 	add.w	r3, r7, #12
3418f7a4:	4619      	mov	r1, r3
3418f7a6:	6878      	ldr	r0, [r7, #4]
3418f7a8:	f000 f82e 	bl	3418f808 <SD_FindSCR>
3418f7ac:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
3418f7ae:	697b      	ldr	r3, [r7, #20]
3418f7b0:	2b00      	cmp	r3, #0
3418f7b2:	d001      	beq.n	3418f7b8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
3418f7b4:	697b      	ldr	r3, [r7, #20]
3418f7b6:	e023      	b.n	3418f800 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
3418f7b8:	693b      	ldr	r3, [r7, #16]
3418f7ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418f7be:	2b00      	cmp	r3, #0
3418f7c0:	d01c      	beq.n	3418f7fc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
3418f7c2:	687b      	ldr	r3, [r7, #4]
3418f7c4:	681a      	ldr	r2, [r3, #0]
3418f7c6:	687b      	ldr	r3, [r7, #4]
3418f7c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418f7ca:	041b      	lsls	r3, r3, #16
3418f7cc:	4619      	mov	r1, r3
3418f7ce:	4610      	mov	r0, r2
3418f7d0:	f002 f86a 	bl	341918a8 <SDMMC_CmdAppCommand>
3418f7d4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
3418f7d6:	697b      	ldr	r3, [r7, #20]
3418f7d8:	2b00      	cmp	r3, #0
3418f7da:	d001      	beq.n	3418f7e0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
3418f7dc:	697b      	ldr	r3, [r7, #20]
3418f7de:	e00f      	b.n	3418f800 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
3418f7e0:	687b      	ldr	r3, [r7, #4]
3418f7e2:	681b      	ldr	r3, [r3, #0]
3418f7e4:	2100      	movs	r1, #0
3418f7e6:	4618      	mov	r0, r3
3418f7e8:	f002 f8a1 	bl	3419192e <SDMMC_CmdBusWidth>
3418f7ec:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
3418f7ee:	697b      	ldr	r3, [r7, #20]
3418f7f0:	2b00      	cmp	r3, #0
3418f7f2:	d001      	beq.n	3418f7f8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
3418f7f4:	697b      	ldr	r3, [r7, #20]
3418f7f6:	e003      	b.n	3418f800 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
3418f7f8:	2300      	movs	r3, #0
3418f7fa:	e001      	b.n	3418f800 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
3418f7fc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
3418f800:	4618      	mov	r0, r3
3418f802:	3718      	adds	r7, #24
3418f804:	46bd      	mov	sp, r7
3418f806:	bd80      	pop	{r7, pc}

3418f808 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
3418f808:	b580      	push	{r7, lr}
3418f80a:	b08e      	sub	sp, #56	@ 0x38
3418f80c:	af00      	add	r7, sp, #0
3418f80e:	6078      	str	r0, [r7, #4]
3418f810:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
3418f812:	f7f2 ffed 	bl	341827f0 <HAL_GetTick>
3418f816:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
3418f818:	2300      	movs	r3, #0
3418f81a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
3418f81c:	2300      	movs	r3, #0
3418f81e:	60bb      	str	r3, [r7, #8]
3418f820:	2300      	movs	r3, #0
3418f822:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
3418f824:	683b      	ldr	r3, [r7, #0]
3418f826:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
3418f828:	687b      	ldr	r3, [r7, #4]
3418f82a:	681b      	ldr	r3, [r3, #0]
3418f82c:	2108      	movs	r1, #8
3418f82e:	4618      	mov	r0, r3
3418f830:	f001 ffb6 	bl	341917a0 <SDMMC_CmdBlockLength>
3418f834:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
3418f836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418f838:	2b00      	cmp	r3, #0
3418f83a:	d001      	beq.n	3418f840 <SD_FindSCR+0x38>
  {
    return errorstate;
3418f83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418f83e:	e0ad      	b.n	3418f99c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
3418f840:	687b      	ldr	r3, [r7, #4]
3418f842:	681a      	ldr	r2, [r3, #0]
3418f844:	687b      	ldr	r3, [r7, #4]
3418f846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418f848:	041b      	lsls	r3, r3, #16
3418f84a:	4619      	mov	r1, r3
3418f84c:	4610      	mov	r0, r2
3418f84e:	f002 f82b 	bl	341918a8 <SDMMC_CmdAppCommand>
3418f852:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
3418f854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418f856:	2b00      	cmp	r3, #0
3418f858:	d001      	beq.n	3418f85e <SD_FindSCR+0x56>
  {
    return errorstate;
3418f85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418f85c:	e09e      	b.n	3418f99c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
3418f85e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3418f862:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
3418f864:	2308      	movs	r3, #8
3418f866:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
3418f868:	2330      	movs	r3, #48	@ 0x30
3418f86a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
3418f86c:	2302      	movs	r3, #2
3418f86e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
3418f870:	2300      	movs	r3, #0
3418f872:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
3418f874:	2301      	movs	r3, #1
3418f876:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
3418f878:	687b      	ldr	r3, [r7, #4]
3418f87a:	681b      	ldr	r3, [r3, #0]
3418f87c:	f107 0210 	add.w	r2, r7, #16
3418f880:	4611      	mov	r1, r2
3418f882:	4618      	mov	r0, r3
3418f884:	f001 ff60 	bl	34191748 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
3418f888:	687b      	ldr	r3, [r7, #4]
3418f88a:	681b      	ldr	r3, [r3, #0]
3418f88c:	4618      	mov	r0, r3
3418f88e:	f002 f871 	bl	34191974 <SDMMC_CmdSendSCR>
3418f892:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
3418f894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418f896:	2b00      	cmp	r3, #0
3418f898:	d027      	beq.n	3418f8ea <SD_FindSCR+0xe2>
  {
    return errorstate;
3418f89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418f89c:	e07e      	b.n	3418f99c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
3418f89e:	687b      	ldr	r3, [r7, #4]
3418f8a0:	681b      	ldr	r3, [r3, #0]
3418f8a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418f8a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3418f8a8:	2b00      	cmp	r3, #0
3418f8aa:	d113      	bne.n	3418f8d4 <SD_FindSCR+0xcc>
3418f8ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418f8ae:	2b00      	cmp	r3, #0
3418f8b0:	d110      	bne.n	3418f8d4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
3418f8b2:	687b      	ldr	r3, [r7, #4]
3418f8b4:	681b      	ldr	r3, [r3, #0]
3418f8b6:	4618      	mov	r0, r3
3418f8b8:	f001 fed0 	bl	3419165c <SDMMC_ReadFIFO>
3418f8bc:	4603      	mov	r3, r0
3418f8be:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
3418f8c0:	687b      	ldr	r3, [r7, #4]
3418f8c2:	681b      	ldr	r3, [r3, #0]
3418f8c4:	4618      	mov	r0, r3
3418f8c6:	f001 fec9 	bl	3419165c <SDMMC_ReadFIFO>
3418f8ca:	4603      	mov	r3, r0
3418f8cc:	60fb      	str	r3, [r7, #12]
      index++;
3418f8ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418f8d0:	3301      	adds	r3, #1
3418f8d2:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
3418f8d4:	f7f2 ff8c 	bl	341827f0 <HAL_GetTick>
3418f8d8:	4602      	mov	r2, r0
3418f8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f8dc:	1ad3      	subs	r3, r2, r3
3418f8de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
3418f8e2:	d102      	bne.n	3418f8ea <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
3418f8e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
3418f8e8:	e058      	b.n	3418f99c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
3418f8ea:	687b      	ldr	r3, [r7, #4]
3418f8ec:	681b      	ldr	r3, [r3, #0]
3418f8ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418f8f0:	f240 532a 	movw	r3, #1322	@ 0x52a
3418f8f4:	4013      	ands	r3, r2
3418f8f6:	2b00      	cmp	r3, #0
3418f8f8:	d0d1      	beq.n	3418f89e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
3418f8fa:	687b      	ldr	r3, [r7, #4]
3418f8fc:	681b      	ldr	r3, [r3, #0]
3418f8fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418f900:	f003 0308 	and.w	r3, r3, #8
3418f904:	2b00      	cmp	r3, #0
3418f906:	d005      	beq.n	3418f914 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
3418f908:	687b      	ldr	r3, [r7, #4]
3418f90a:	681b      	ldr	r3, [r3, #0]
3418f90c:	2208      	movs	r2, #8
3418f90e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
3418f910:	2308      	movs	r3, #8
3418f912:	e043      	b.n	3418f99c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
3418f914:	687b      	ldr	r3, [r7, #4]
3418f916:	681b      	ldr	r3, [r3, #0]
3418f918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418f91a:	f003 0302 	and.w	r3, r3, #2
3418f91e:	2b00      	cmp	r3, #0
3418f920:	d005      	beq.n	3418f92e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
3418f922:	687b      	ldr	r3, [r7, #4]
3418f924:	681b      	ldr	r3, [r3, #0]
3418f926:	2202      	movs	r2, #2
3418f928:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
3418f92a:	2302      	movs	r3, #2
3418f92c:	e036      	b.n	3418f99c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
3418f92e:	687b      	ldr	r3, [r7, #4]
3418f930:	681b      	ldr	r3, [r3, #0]
3418f932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418f934:	f003 0320 	and.w	r3, r3, #32
3418f938:	2b00      	cmp	r3, #0
3418f93a:	d005      	beq.n	3418f948 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
3418f93c:	687b      	ldr	r3, [r7, #4]
3418f93e:	681b      	ldr	r3, [r3, #0]
3418f940:	2220      	movs	r2, #32
3418f942:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
3418f944:	2320      	movs	r3, #32
3418f946:	e029      	b.n	3418f99c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
3418f948:	687b      	ldr	r3, [r7, #4]
3418f94a:	681b      	ldr	r3, [r3, #0]
3418f94c:	4a15      	ldr	r2, [pc, #84]	@ (3418f9a4 <SD_FindSCR+0x19c>)
3418f94e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
3418f950:	68fb      	ldr	r3, [r7, #12]
3418f952:	061a      	lsls	r2, r3, #24
3418f954:	68fb      	ldr	r3, [r7, #12]
3418f956:	021b      	lsls	r3, r3, #8
3418f958:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
3418f95c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
3418f95e:	68fb      	ldr	r3, [r7, #12]
3418f960:	0a1b      	lsrs	r3, r3, #8
3418f962:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
3418f966:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
3418f968:	68fb      	ldr	r3, [r7, #12]
3418f96a:	0e1b      	lsrs	r3, r3, #24
3418f96c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
3418f96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418f970:	601a      	str	r2, [r3, #0]
    scr++;
3418f972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418f974:	3304      	adds	r3, #4
3418f976:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
3418f978:	68bb      	ldr	r3, [r7, #8]
3418f97a:	061a      	lsls	r2, r3, #24
3418f97c:	68bb      	ldr	r3, [r7, #8]
3418f97e:	021b      	lsls	r3, r3, #8
3418f980:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
3418f984:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
3418f986:	68bb      	ldr	r3, [r7, #8]
3418f988:	0a1b      	lsrs	r3, r3, #8
3418f98a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
3418f98e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
3418f990:	68bb      	ldr	r3, [r7, #8]
3418f992:	0e1b      	lsrs	r3, r3, #24
3418f994:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
3418f996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418f998:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
3418f99a:	2300      	movs	r3, #0
}
3418f99c:	4618      	mov	r0, r3
3418f99e:	3738      	adds	r7, #56	@ 0x38
3418f9a0:	46bd      	mov	sp, r7
3418f9a2:	bd80      	pop	{r7, pc}
3418f9a4:	18000f3a 	.word	0x18000f3a

3418f9a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
3418f9a8:	b580      	push	{r7, lr}
3418f9aa:	b082      	sub	sp, #8
3418f9ac:	af00      	add	r7, sp, #0
3418f9ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
3418f9b0:	687b      	ldr	r3, [r7, #4]
3418f9b2:	2b00      	cmp	r3, #0
3418f9b4:	d101      	bne.n	3418f9ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
3418f9b6:	2301      	movs	r3, #1
3418f9b8:	e049      	b.n	3418fa4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
3418f9ba:	687b      	ldr	r3, [r7, #4]
3418f9bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
3418f9c0:	b2db      	uxtb	r3, r3
3418f9c2:	2b00      	cmp	r3, #0
3418f9c4:	d106      	bne.n	3418f9d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
3418f9c6:	687b      	ldr	r3, [r7, #4]
3418f9c8:	2200      	movs	r2, #0
3418f9ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
3418f9ce:	6878      	ldr	r0, [r7, #4]
3418f9d0:	f000 f841 	bl	3418fa56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
3418f9d4:	687b      	ldr	r3, [r7, #4]
3418f9d6:	2202      	movs	r2, #2
3418f9d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
3418f9dc:	687b      	ldr	r3, [r7, #4]
3418f9de:	681a      	ldr	r2, [r3, #0]
3418f9e0:	687b      	ldr	r3, [r7, #4]
3418f9e2:	3304      	adds	r3, #4
3418f9e4:	4619      	mov	r1, r3
3418f9e6:	4610      	mov	r0, r2
3418f9e8:	f000 fa70 	bl	3418fecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
3418f9ec:	687b      	ldr	r3, [r7, #4]
3418f9ee:	2201      	movs	r2, #1
3418f9f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
3418f9f4:	687b      	ldr	r3, [r7, #4]
3418f9f6:	2201      	movs	r2, #1
3418f9f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
3418f9fc:	687b      	ldr	r3, [r7, #4]
3418f9fe:	2201      	movs	r2, #1
3418fa00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
3418fa04:	687b      	ldr	r3, [r7, #4]
3418fa06:	2201      	movs	r2, #1
3418fa08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
3418fa0c:	687b      	ldr	r3, [r7, #4]
3418fa0e:	2201      	movs	r2, #1
3418fa10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
3418fa14:	687b      	ldr	r3, [r7, #4]
3418fa16:	2201      	movs	r2, #1
3418fa18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
3418fa1c:	687b      	ldr	r3, [r7, #4]
3418fa1e:	2201      	movs	r2, #1
3418fa20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
3418fa24:	687b      	ldr	r3, [r7, #4]
3418fa26:	2201      	movs	r2, #1
3418fa28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
3418fa2c:	687b      	ldr	r3, [r7, #4]
3418fa2e:	2201      	movs	r2, #1
3418fa30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
3418fa34:	687b      	ldr	r3, [r7, #4]
3418fa36:	2201      	movs	r2, #1
3418fa38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
3418fa3c:	687b      	ldr	r3, [r7, #4]
3418fa3e:	2201      	movs	r2, #1
3418fa40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
3418fa44:	687b      	ldr	r3, [r7, #4]
3418fa46:	2201      	movs	r2, #1
3418fa48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
3418fa4c:	2300      	movs	r3, #0
}
3418fa4e:	4618      	mov	r0, r3
3418fa50:	3708      	adds	r7, #8
3418fa52:	46bd      	mov	sp, r7
3418fa54:	bd80      	pop	{r7, pc}

3418fa56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
3418fa56:	b480      	push	{r7}
3418fa58:	b083      	sub	sp, #12
3418fa5a:	af00      	add	r7, sp, #0
3418fa5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
3418fa5e:	bf00      	nop
3418fa60:	370c      	adds	r7, #12
3418fa62:	46bd      	mov	sp, r7
3418fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
3418fa68:	4770      	bx	lr
	...

3418fa6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
3418fa6c:	b480      	push	{r7}
3418fa6e:	b085      	sub	sp, #20
3418fa70:	af00      	add	r7, sp, #0
3418fa72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
3418fa74:	687b      	ldr	r3, [r7, #4]
3418fa76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
3418fa7a:	b2db      	uxtb	r3, r3
3418fa7c:	2b01      	cmp	r3, #1
3418fa7e:	d001      	beq.n	3418fa84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
3418fa80:	2301      	movs	r3, #1
3418fa82:	e086      	b.n	3418fb92 <HAL_TIM_Base_Start_IT+0x126>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
3418fa84:	687b      	ldr	r3, [r7, #4]
3418fa86:	2202      	movs	r2, #2
3418fa88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
3418fa8c:	687b      	ldr	r3, [r7, #4]
3418fa8e:	681b      	ldr	r3, [r3, #0]
3418fa90:	68da      	ldr	r2, [r3, #12]
3418fa92:	687b      	ldr	r3, [r7, #4]
3418fa94:	681b      	ldr	r3, [r3, #0]
3418fa96:	f042 0201 	orr.w	r2, r2, #1
3418fa9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
3418fa9c:	687b      	ldr	r3, [r7, #4]
3418fa9e:	681b      	ldr	r3, [r3, #0]
3418faa0:	f1b3 4fa4 	cmp.w	r3, #1375731712	@ 0x52000000
3418faa4:	d054      	beq.n	3418fb50 <HAL_TIM_Base_Start_IT+0xe4>
3418faa6:	687b      	ldr	r3, [r7, #4]
3418faa8:	681b      	ldr	r3, [r3, #0]
3418faaa:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
3418faae:	d04f      	beq.n	3418fb50 <HAL_TIM_Base_Start_IT+0xe4>
3418fab0:	687b      	ldr	r3, [r7, #4]
3418fab2:	681b      	ldr	r3, [r3, #0]
3418fab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
3418fab8:	d04a      	beq.n	3418fb50 <HAL_TIM_Base_Start_IT+0xe4>
3418faba:	687b      	ldr	r3, [r7, #4]
3418fabc:	681b      	ldr	r3, [r3, #0]
3418fabe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418fac2:	d045      	beq.n	3418fb50 <HAL_TIM_Base_Start_IT+0xe4>
3418fac4:	687b      	ldr	r3, [r7, #4]
3418fac6:	681b      	ldr	r3, [r3, #0]
3418fac8:	4a35      	ldr	r2, [pc, #212]	@ (3418fba0 <HAL_TIM_Base_Start_IT+0x134>)
3418faca:	4293      	cmp	r3, r2
3418facc:	d040      	beq.n	3418fb50 <HAL_TIM_Base_Start_IT+0xe4>
3418face:	687b      	ldr	r3, [r7, #4]
3418fad0:	681b      	ldr	r3, [r3, #0]
3418fad2:	4a34      	ldr	r2, [pc, #208]	@ (3418fba4 <HAL_TIM_Base_Start_IT+0x138>)
3418fad4:	4293      	cmp	r3, r2
3418fad6:	d03b      	beq.n	3418fb50 <HAL_TIM_Base_Start_IT+0xe4>
3418fad8:	687b      	ldr	r3, [r7, #4]
3418fada:	681b      	ldr	r3, [r3, #0]
3418fadc:	4a32      	ldr	r2, [pc, #200]	@ (3418fba8 <HAL_TIM_Base_Start_IT+0x13c>)
3418fade:	4293      	cmp	r3, r2
3418fae0:	d036      	beq.n	3418fb50 <HAL_TIM_Base_Start_IT+0xe4>
3418fae2:	687b      	ldr	r3, [r7, #4]
3418fae4:	681b      	ldr	r3, [r3, #0]
3418fae6:	4a31      	ldr	r2, [pc, #196]	@ (3418fbac <HAL_TIM_Base_Start_IT+0x140>)
3418fae8:	4293      	cmp	r3, r2
3418faea:	d031      	beq.n	3418fb50 <HAL_TIM_Base_Start_IT+0xe4>
3418faec:	687b      	ldr	r3, [r7, #4]
3418faee:	681b      	ldr	r3, [r3, #0]
3418faf0:	4a2f      	ldr	r2, [pc, #188]	@ (3418fbb0 <HAL_TIM_Base_Start_IT+0x144>)
3418faf2:	4293      	cmp	r3, r2
3418faf4:	d02c      	beq.n	3418fb50 <HAL_TIM_Base_Start_IT+0xe4>
3418faf6:	687b      	ldr	r3, [r7, #4]
3418faf8:	681b      	ldr	r3, [r3, #0]
3418fafa:	4a2e      	ldr	r2, [pc, #184]	@ (3418fbb4 <HAL_TIM_Base_Start_IT+0x148>)
3418fafc:	4293      	cmp	r3, r2
3418fafe:	d027      	beq.n	3418fb50 <HAL_TIM_Base_Start_IT+0xe4>
3418fb00:	687b      	ldr	r3, [r7, #4]
3418fb02:	681b      	ldr	r3, [r3, #0]
3418fb04:	4a2c      	ldr	r2, [pc, #176]	@ (3418fbb8 <HAL_TIM_Base_Start_IT+0x14c>)
3418fb06:	4293      	cmp	r3, r2
3418fb08:	d022      	beq.n	3418fb50 <HAL_TIM_Base_Start_IT+0xe4>
3418fb0a:	687b      	ldr	r3, [r7, #4]
3418fb0c:	681b      	ldr	r3, [r3, #0]
3418fb0e:	4a2b      	ldr	r2, [pc, #172]	@ (3418fbbc <HAL_TIM_Base_Start_IT+0x150>)
3418fb10:	4293      	cmp	r3, r2
3418fb12:	d01d      	beq.n	3418fb50 <HAL_TIM_Base_Start_IT+0xe4>
3418fb14:	687b      	ldr	r3, [r7, #4]
3418fb16:	681b      	ldr	r3, [r3, #0]
3418fb18:	4a29      	ldr	r2, [pc, #164]	@ (3418fbc0 <HAL_TIM_Base_Start_IT+0x154>)
3418fb1a:	4293      	cmp	r3, r2
3418fb1c:	d018      	beq.n	3418fb50 <HAL_TIM_Base_Start_IT+0xe4>
3418fb1e:	687b      	ldr	r3, [r7, #4]
3418fb20:	681b      	ldr	r3, [r3, #0]
3418fb22:	4a28      	ldr	r2, [pc, #160]	@ (3418fbc4 <HAL_TIM_Base_Start_IT+0x158>)
3418fb24:	4293      	cmp	r3, r2
3418fb26:	d013      	beq.n	3418fb50 <HAL_TIM_Base_Start_IT+0xe4>
3418fb28:	687b      	ldr	r3, [r7, #4]
3418fb2a:	681b      	ldr	r3, [r3, #0]
3418fb2c:	4a26      	ldr	r2, [pc, #152]	@ (3418fbc8 <HAL_TIM_Base_Start_IT+0x15c>)
3418fb2e:	4293      	cmp	r3, r2
3418fb30:	d00e      	beq.n	3418fb50 <HAL_TIM_Base_Start_IT+0xe4>
3418fb32:	687b      	ldr	r3, [r7, #4]
3418fb34:	681b      	ldr	r3, [r3, #0]
3418fb36:	4a25      	ldr	r2, [pc, #148]	@ (3418fbcc <HAL_TIM_Base_Start_IT+0x160>)
3418fb38:	4293      	cmp	r3, r2
3418fb3a:	d009      	beq.n	3418fb50 <HAL_TIM_Base_Start_IT+0xe4>
3418fb3c:	687b      	ldr	r3, [r7, #4]
3418fb3e:	681b      	ldr	r3, [r3, #0]
3418fb40:	4a23      	ldr	r2, [pc, #140]	@ (3418fbd0 <HAL_TIM_Base_Start_IT+0x164>)
3418fb42:	4293      	cmp	r3, r2
3418fb44:	d004      	beq.n	3418fb50 <HAL_TIM_Base_Start_IT+0xe4>
3418fb46:	687b      	ldr	r3, [r7, #4]
3418fb48:	681b      	ldr	r3, [r3, #0]
3418fb4a:	4a22      	ldr	r2, [pc, #136]	@ (3418fbd4 <HAL_TIM_Base_Start_IT+0x168>)
3418fb4c:	4293      	cmp	r3, r2
3418fb4e:	d115      	bne.n	3418fb7c <HAL_TIM_Base_Start_IT+0x110>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
3418fb50:	687b      	ldr	r3, [r7, #4]
3418fb52:	681b      	ldr	r3, [r3, #0]
3418fb54:	689a      	ldr	r2, [r3, #8]
3418fb56:	4b20      	ldr	r3, [pc, #128]	@ (3418fbd8 <HAL_TIM_Base_Start_IT+0x16c>)
3418fb58:	4013      	ands	r3, r2
3418fb5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
3418fb5c:	68fb      	ldr	r3, [r7, #12]
3418fb5e:	2b06      	cmp	r3, #6
3418fb60:	d015      	beq.n	3418fb8e <HAL_TIM_Base_Start_IT+0x122>
3418fb62:	68fb      	ldr	r3, [r7, #12]
3418fb64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418fb68:	d011      	beq.n	3418fb8e <HAL_TIM_Base_Start_IT+0x122>
    {
      __HAL_TIM_ENABLE(htim);
3418fb6a:	687b      	ldr	r3, [r7, #4]
3418fb6c:	681b      	ldr	r3, [r3, #0]
3418fb6e:	681a      	ldr	r2, [r3, #0]
3418fb70:	687b      	ldr	r3, [r7, #4]
3418fb72:	681b      	ldr	r3, [r3, #0]
3418fb74:	f042 0201 	orr.w	r2, r2, #1
3418fb78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
3418fb7a:	e008      	b.n	3418fb8e <HAL_TIM_Base_Start_IT+0x122>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
3418fb7c:	687b      	ldr	r3, [r7, #4]
3418fb7e:	681b      	ldr	r3, [r3, #0]
3418fb80:	681a      	ldr	r2, [r3, #0]
3418fb82:	687b      	ldr	r3, [r7, #4]
3418fb84:	681b      	ldr	r3, [r3, #0]
3418fb86:	f042 0201 	orr.w	r2, r2, #1
3418fb8a:	601a      	str	r2, [r3, #0]
3418fb8c:	e000      	b.n	3418fb90 <HAL_TIM_Base_Start_IT+0x124>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
3418fb8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
3418fb90:	2300      	movs	r3, #0
}
3418fb92:	4618      	mov	r0, r3
3418fb94:	3714      	adds	r7, #20
3418fb96:	46bd      	mov	sp, r7
3418fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
3418fb9c:	4770      	bx	lr
3418fb9e:	bf00      	nop
3418fba0:	50000400 	.word	0x50000400
3418fba4:	40000400 	.word	0x40000400
3418fba8:	50000800 	.word	0x50000800
3418fbac:	40000800 	.word	0x40000800
3418fbb0:	50000c00 	.word	0x50000c00
3418fbb4:	40000c00 	.word	0x40000c00
3418fbb8:	52000400 	.word	0x52000400
3418fbbc:	42000400 	.word	0x42000400
3418fbc0:	52004c00 	.word	0x52004c00
3418fbc4:	42004c00 	.word	0x42004c00
3418fbc8:	50001800 	.word	0x50001800
3418fbcc:	40001800 	.word	0x40001800
3418fbd0:	52004000 	.word	0x52004000
3418fbd4:	42004000 	.word	0x42004000
3418fbd8:	00010007 	.word	0x00010007

3418fbdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
3418fbdc:	b580      	push	{r7, lr}
3418fbde:	b084      	sub	sp, #16
3418fbe0:	af00      	add	r7, sp, #0
3418fbe2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
3418fbe4:	687b      	ldr	r3, [r7, #4]
3418fbe6:	681b      	ldr	r3, [r3, #0]
3418fbe8:	68db      	ldr	r3, [r3, #12]
3418fbea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
3418fbec:	687b      	ldr	r3, [r7, #4]
3418fbee:	681b      	ldr	r3, [r3, #0]
3418fbf0:	691b      	ldr	r3, [r3, #16]
3418fbf2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
3418fbf4:	68bb      	ldr	r3, [r7, #8]
3418fbf6:	f003 0302 	and.w	r3, r3, #2
3418fbfa:	2b00      	cmp	r3, #0
3418fbfc:	d020      	beq.n	3418fc40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
3418fbfe:	68fb      	ldr	r3, [r7, #12]
3418fc00:	f003 0302 	and.w	r3, r3, #2
3418fc04:	2b00      	cmp	r3, #0
3418fc06:	d01b      	beq.n	3418fc40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
3418fc08:	687b      	ldr	r3, [r7, #4]
3418fc0a:	681b      	ldr	r3, [r3, #0]
3418fc0c:	f06f 0202 	mvn.w	r2, #2
3418fc10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
3418fc12:	687b      	ldr	r3, [r7, #4]
3418fc14:	2201      	movs	r2, #1
3418fc16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
3418fc18:	687b      	ldr	r3, [r7, #4]
3418fc1a:	681b      	ldr	r3, [r3, #0]
3418fc1c:	699b      	ldr	r3, [r3, #24]
3418fc1e:	f003 0303 	and.w	r3, r3, #3
3418fc22:	2b00      	cmp	r3, #0
3418fc24:	d003      	beq.n	3418fc2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
3418fc26:	6878      	ldr	r0, [r7, #4]
3418fc28:	f000 f931 	bl	3418fe8e <HAL_TIM_IC_CaptureCallback>
3418fc2c:	e005      	b.n	3418fc3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
3418fc2e:	6878      	ldr	r0, [r7, #4]
3418fc30:	f000 f923 	bl	3418fe7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
3418fc34:	6878      	ldr	r0, [r7, #4]
3418fc36:	f000 f934 	bl	3418fea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
3418fc3a:	687b      	ldr	r3, [r7, #4]
3418fc3c:	2200      	movs	r2, #0
3418fc3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
3418fc40:	68bb      	ldr	r3, [r7, #8]
3418fc42:	f003 0304 	and.w	r3, r3, #4
3418fc46:	2b00      	cmp	r3, #0
3418fc48:	d020      	beq.n	3418fc8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
3418fc4a:	68fb      	ldr	r3, [r7, #12]
3418fc4c:	f003 0304 	and.w	r3, r3, #4
3418fc50:	2b00      	cmp	r3, #0
3418fc52:	d01b      	beq.n	3418fc8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
3418fc54:	687b      	ldr	r3, [r7, #4]
3418fc56:	681b      	ldr	r3, [r3, #0]
3418fc58:	f06f 0204 	mvn.w	r2, #4
3418fc5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
3418fc5e:	687b      	ldr	r3, [r7, #4]
3418fc60:	2202      	movs	r2, #2
3418fc62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
3418fc64:	687b      	ldr	r3, [r7, #4]
3418fc66:	681b      	ldr	r3, [r3, #0]
3418fc68:	699b      	ldr	r3, [r3, #24]
3418fc6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3418fc6e:	2b00      	cmp	r3, #0
3418fc70:	d003      	beq.n	3418fc7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
3418fc72:	6878      	ldr	r0, [r7, #4]
3418fc74:	f000 f90b 	bl	3418fe8e <HAL_TIM_IC_CaptureCallback>
3418fc78:	e005      	b.n	3418fc86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
3418fc7a:	6878      	ldr	r0, [r7, #4]
3418fc7c:	f000 f8fd 	bl	3418fe7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
3418fc80:	6878      	ldr	r0, [r7, #4]
3418fc82:	f000 f90e 	bl	3418fea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
3418fc86:	687b      	ldr	r3, [r7, #4]
3418fc88:	2200      	movs	r2, #0
3418fc8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
3418fc8c:	68bb      	ldr	r3, [r7, #8]
3418fc8e:	f003 0308 	and.w	r3, r3, #8
3418fc92:	2b00      	cmp	r3, #0
3418fc94:	d020      	beq.n	3418fcd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
3418fc96:	68fb      	ldr	r3, [r7, #12]
3418fc98:	f003 0308 	and.w	r3, r3, #8
3418fc9c:	2b00      	cmp	r3, #0
3418fc9e:	d01b      	beq.n	3418fcd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
3418fca0:	687b      	ldr	r3, [r7, #4]
3418fca2:	681b      	ldr	r3, [r3, #0]
3418fca4:	f06f 0208 	mvn.w	r2, #8
3418fca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
3418fcaa:	687b      	ldr	r3, [r7, #4]
3418fcac:	2204      	movs	r2, #4
3418fcae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
3418fcb0:	687b      	ldr	r3, [r7, #4]
3418fcb2:	681b      	ldr	r3, [r3, #0]
3418fcb4:	69db      	ldr	r3, [r3, #28]
3418fcb6:	f003 0303 	and.w	r3, r3, #3
3418fcba:	2b00      	cmp	r3, #0
3418fcbc:	d003      	beq.n	3418fcc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
3418fcbe:	6878      	ldr	r0, [r7, #4]
3418fcc0:	f000 f8e5 	bl	3418fe8e <HAL_TIM_IC_CaptureCallback>
3418fcc4:	e005      	b.n	3418fcd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
3418fcc6:	6878      	ldr	r0, [r7, #4]
3418fcc8:	f000 f8d7 	bl	3418fe7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
3418fccc:	6878      	ldr	r0, [r7, #4]
3418fcce:	f000 f8e8 	bl	3418fea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
3418fcd2:	687b      	ldr	r3, [r7, #4]
3418fcd4:	2200      	movs	r2, #0
3418fcd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
3418fcd8:	68bb      	ldr	r3, [r7, #8]
3418fcda:	f003 0310 	and.w	r3, r3, #16
3418fcde:	2b00      	cmp	r3, #0
3418fce0:	d020      	beq.n	3418fd24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
3418fce2:	68fb      	ldr	r3, [r7, #12]
3418fce4:	f003 0310 	and.w	r3, r3, #16
3418fce8:	2b00      	cmp	r3, #0
3418fcea:	d01b      	beq.n	3418fd24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
3418fcec:	687b      	ldr	r3, [r7, #4]
3418fcee:	681b      	ldr	r3, [r3, #0]
3418fcf0:	f06f 0210 	mvn.w	r2, #16
3418fcf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
3418fcf6:	687b      	ldr	r3, [r7, #4]
3418fcf8:	2208      	movs	r2, #8
3418fcfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
3418fcfc:	687b      	ldr	r3, [r7, #4]
3418fcfe:	681b      	ldr	r3, [r3, #0]
3418fd00:	69db      	ldr	r3, [r3, #28]
3418fd02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3418fd06:	2b00      	cmp	r3, #0
3418fd08:	d003      	beq.n	3418fd12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
3418fd0a:	6878      	ldr	r0, [r7, #4]
3418fd0c:	f000 f8bf 	bl	3418fe8e <HAL_TIM_IC_CaptureCallback>
3418fd10:	e005      	b.n	3418fd1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
3418fd12:	6878      	ldr	r0, [r7, #4]
3418fd14:	f000 f8b1 	bl	3418fe7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
3418fd18:	6878      	ldr	r0, [r7, #4]
3418fd1a:	f000 f8c2 	bl	3418fea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
3418fd1e:	687b      	ldr	r3, [r7, #4]
3418fd20:	2200      	movs	r2, #0
3418fd22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
3418fd24:	68bb      	ldr	r3, [r7, #8]
3418fd26:	f003 0301 	and.w	r3, r3, #1
3418fd2a:	2b00      	cmp	r3, #0
3418fd2c:	d00c      	beq.n	3418fd48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
3418fd2e:	68fb      	ldr	r3, [r7, #12]
3418fd30:	f003 0301 	and.w	r3, r3, #1
3418fd34:	2b00      	cmp	r3, #0
3418fd36:	d007      	beq.n	3418fd48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
3418fd38:	687b      	ldr	r3, [r7, #4]
3418fd3a:	681b      	ldr	r3, [r3, #0]
3418fd3c:	f06f 0201 	mvn.w	r2, #1
3418fd40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
3418fd42:	6878      	ldr	r0, [r7, #4]
3418fd44:	f7f1 fc2c 	bl	341815a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
3418fd48:	68bb      	ldr	r3, [r7, #8]
3418fd4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418fd4e:	2b00      	cmp	r3, #0
3418fd50:	d104      	bne.n	3418fd5c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
3418fd52:	68bb      	ldr	r3, [r7, #8]
3418fd54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
3418fd58:	2b00      	cmp	r3, #0
3418fd5a:	d00c      	beq.n	3418fd76 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
3418fd5c:	68fb      	ldr	r3, [r7, #12]
3418fd5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418fd62:	2b00      	cmp	r3, #0
3418fd64:	d007      	beq.n	3418fd76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
3418fd66:	687b      	ldr	r3, [r7, #4]
3418fd68:	681b      	ldr	r3, [r3, #0]
3418fd6a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
3418fd6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
3418fd70:	6878      	ldr	r0, [r7, #4]
3418fd72:	f000 f9cf 	bl	34190114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
3418fd76:	68bb      	ldr	r3, [r7, #8]
3418fd78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418fd7c:	2b00      	cmp	r3, #0
3418fd7e:	d00c      	beq.n	3418fd9a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
3418fd80:	68fb      	ldr	r3, [r7, #12]
3418fd82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418fd86:	2b00      	cmp	r3, #0
3418fd88:	d007      	beq.n	3418fd9a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
3418fd8a:	687b      	ldr	r3, [r7, #4]
3418fd8c:	681b      	ldr	r3, [r3, #0]
3418fd8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
3418fd92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
3418fd94:	6878      	ldr	r0, [r7, #4]
3418fd96:	f000 f9c7 	bl	34190128 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
3418fd9a:	68bb      	ldr	r3, [r7, #8]
3418fd9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418fda0:	2b00      	cmp	r3, #0
3418fda2:	d00c      	beq.n	3418fdbe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
3418fda4:	68fb      	ldr	r3, [r7, #12]
3418fda6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418fdaa:	2b00      	cmp	r3, #0
3418fdac:	d007      	beq.n	3418fdbe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
3418fdae:	687b      	ldr	r3, [r7, #4]
3418fdb0:	681b      	ldr	r3, [r3, #0]
3418fdb2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
3418fdb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
3418fdb8:	6878      	ldr	r0, [r7, #4]
3418fdba:	f000 f87c 	bl	3418feb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
3418fdbe:	68bb      	ldr	r3, [r7, #8]
3418fdc0:	f003 0320 	and.w	r3, r3, #32
3418fdc4:	2b00      	cmp	r3, #0
3418fdc6:	d00c      	beq.n	3418fde2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
3418fdc8:	68fb      	ldr	r3, [r7, #12]
3418fdca:	f003 0320 	and.w	r3, r3, #32
3418fdce:	2b00      	cmp	r3, #0
3418fdd0:	d007      	beq.n	3418fde2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
3418fdd2:	687b      	ldr	r3, [r7, #4]
3418fdd4:	681b      	ldr	r3, [r3, #0]
3418fdd6:	f06f 0220 	mvn.w	r2, #32
3418fdda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
3418fddc:	6878      	ldr	r0, [r7, #4]
3418fdde:	f000 f98f 	bl	34190100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
3418fde2:	68bb      	ldr	r3, [r7, #8]
3418fde4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3418fde8:	2b00      	cmp	r3, #0
3418fdea:	d00c      	beq.n	3418fe06 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
3418fdec:	68fb      	ldr	r3, [r7, #12]
3418fdee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3418fdf2:	2b00      	cmp	r3, #0
3418fdf4:	d007      	beq.n	3418fe06 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
3418fdf6:	687b      	ldr	r3, [r7, #4]
3418fdf8:	681b      	ldr	r3, [r3, #0]
3418fdfa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
3418fdfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
3418fe00:	6878      	ldr	r0, [r7, #4]
3418fe02:	f000 f99b 	bl	3419013c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
3418fe06:	68bb      	ldr	r3, [r7, #8]
3418fe08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3418fe0c:	2b00      	cmp	r3, #0
3418fe0e:	d00c      	beq.n	3418fe2a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
3418fe10:	68fb      	ldr	r3, [r7, #12]
3418fe12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3418fe16:	2b00      	cmp	r3, #0
3418fe18:	d007      	beq.n	3418fe2a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
3418fe1a:	687b      	ldr	r3, [r7, #4]
3418fe1c:	681b      	ldr	r3, [r3, #0]
3418fe1e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
3418fe22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
3418fe24:	6878      	ldr	r0, [r7, #4]
3418fe26:	f000 f993 	bl	34190150 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
3418fe2a:	68bb      	ldr	r3, [r7, #8]
3418fe2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
3418fe30:	2b00      	cmp	r3, #0
3418fe32:	d00c      	beq.n	3418fe4e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
3418fe34:	68fb      	ldr	r3, [r7, #12]
3418fe36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
3418fe3a:	2b00      	cmp	r3, #0
3418fe3c:	d007      	beq.n	3418fe4e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
3418fe3e:	687b      	ldr	r3, [r7, #4]
3418fe40:	681b      	ldr	r3, [r3, #0]
3418fe42:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
3418fe46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
3418fe48:	6878      	ldr	r0, [r7, #4]
3418fe4a:	f000 f98b 	bl	34190164 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
3418fe4e:	68bb      	ldr	r3, [r7, #8]
3418fe50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
3418fe54:	2b00      	cmp	r3, #0
3418fe56:	d00c      	beq.n	3418fe72 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
3418fe58:	68fb      	ldr	r3, [r7, #12]
3418fe5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
3418fe5e:	2b00      	cmp	r3, #0
3418fe60:	d007      	beq.n	3418fe72 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
3418fe62:	687b      	ldr	r3, [r7, #4]
3418fe64:	681b      	ldr	r3, [r3, #0]
3418fe66:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
3418fe6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
3418fe6c:	6878      	ldr	r0, [r7, #4]
3418fe6e:	f000 f983 	bl	34190178 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
3418fe72:	bf00      	nop
3418fe74:	3710      	adds	r7, #16
3418fe76:	46bd      	mov	sp, r7
3418fe78:	bd80      	pop	{r7, pc}

3418fe7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
3418fe7a:	b480      	push	{r7}
3418fe7c:	b083      	sub	sp, #12
3418fe7e:	af00      	add	r7, sp, #0
3418fe80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
3418fe82:	bf00      	nop
3418fe84:	370c      	adds	r7, #12
3418fe86:	46bd      	mov	sp, r7
3418fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
3418fe8c:	4770      	bx	lr

3418fe8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
3418fe8e:	b480      	push	{r7}
3418fe90:	b083      	sub	sp, #12
3418fe92:	af00      	add	r7, sp, #0
3418fe94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
3418fe96:	bf00      	nop
3418fe98:	370c      	adds	r7, #12
3418fe9a:	46bd      	mov	sp, r7
3418fe9c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418fea0:	4770      	bx	lr

3418fea2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
3418fea2:	b480      	push	{r7}
3418fea4:	b083      	sub	sp, #12
3418fea6:	af00      	add	r7, sp, #0
3418fea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
3418feaa:	bf00      	nop
3418feac:	370c      	adds	r7, #12
3418feae:	46bd      	mov	sp, r7
3418feb0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418feb4:	4770      	bx	lr

3418feb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
3418feb6:	b480      	push	{r7}
3418feb8:	b083      	sub	sp, #12
3418feba:	af00      	add	r7, sp, #0
3418febc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
3418febe:	bf00      	nop
3418fec0:	370c      	adds	r7, #12
3418fec2:	46bd      	mov	sp, r7
3418fec4:	f85d 7b04 	ldr.w	r7, [sp], #4
3418fec8:	4770      	bx	lr
	...

3418fecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
3418fecc:	b480      	push	{r7}
3418fece:	b085      	sub	sp, #20
3418fed0:	af00      	add	r7, sp, #0
3418fed2:	6078      	str	r0, [r7, #4]
3418fed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
3418fed6:	687b      	ldr	r3, [r7, #4]
3418fed8:	681b      	ldr	r3, [r3, #0]
3418feda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
3418fedc:	687b      	ldr	r3, [r7, #4]
3418fede:	f1b3 4fa4 	cmp.w	r3, #1375731712	@ 0x52000000
3418fee2:	d02b      	beq.n	3418ff3c <TIM_Base_SetConfig+0x70>
3418fee4:	687b      	ldr	r3, [r7, #4]
3418fee6:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
3418feea:	d027      	beq.n	3418ff3c <TIM_Base_SetConfig+0x70>
3418feec:	687b      	ldr	r3, [r7, #4]
3418feee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
3418fef2:	d023      	beq.n	3418ff3c <TIM_Base_SetConfig+0x70>
3418fef4:	687b      	ldr	r3, [r7, #4]
3418fef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418fefa:	d01f      	beq.n	3418ff3c <TIM_Base_SetConfig+0x70>
3418fefc:	687b      	ldr	r3, [r7, #4]
3418fefe:	4a6e      	ldr	r2, [pc, #440]	@ (341900b8 <TIM_Base_SetConfig+0x1ec>)
3418ff00:	4293      	cmp	r3, r2
3418ff02:	d01b      	beq.n	3418ff3c <TIM_Base_SetConfig+0x70>
3418ff04:	687b      	ldr	r3, [r7, #4]
3418ff06:	4a6d      	ldr	r2, [pc, #436]	@ (341900bc <TIM_Base_SetConfig+0x1f0>)
3418ff08:	4293      	cmp	r3, r2
3418ff0a:	d017      	beq.n	3418ff3c <TIM_Base_SetConfig+0x70>
3418ff0c:	687b      	ldr	r3, [r7, #4]
3418ff0e:	4a6c      	ldr	r2, [pc, #432]	@ (341900c0 <TIM_Base_SetConfig+0x1f4>)
3418ff10:	4293      	cmp	r3, r2
3418ff12:	d013      	beq.n	3418ff3c <TIM_Base_SetConfig+0x70>
3418ff14:	687b      	ldr	r3, [r7, #4]
3418ff16:	4a6b      	ldr	r2, [pc, #428]	@ (341900c4 <TIM_Base_SetConfig+0x1f8>)
3418ff18:	4293      	cmp	r3, r2
3418ff1a:	d00f      	beq.n	3418ff3c <TIM_Base_SetConfig+0x70>
3418ff1c:	687b      	ldr	r3, [r7, #4]
3418ff1e:	4a6a      	ldr	r2, [pc, #424]	@ (341900c8 <TIM_Base_SetConfig+0x1fc>)
3418ff20:	4293      	cmp	r3, r2
3418ff22:	d00b      	beq.n	3418ff3c <TIM_Base_SetConfig+0x70>
3418ff24:	687b      	ldr	r3, [r7, #4]
3418ff26:	4a69      	ldr	r2, [pc, #420]	@ (341900cc <TIM_Base_SetConfig+0x200>)
3418ff28:	4293      	cmp	r3, r2
3418ff2a:	d007      	beq.n	3418ff3c <TIM_Base_SetConfig+0x70>
3418ff2c:	687b      	ldr	r3, [r7, #4]
3418ff2e:	4a68      	ldr	r2, [pc, #416]	@ (341900d0 <TIM_Base_SetConfig+0x204>)
3418ff30:	4293      	cmp	r3, r2
3418ff32:	d003      	beq.n	3418ff3c <TIM_Base_SetConfig+0x70>
3418ff34:	687b      	ldr	r3, [r7, #4]
3418ff36:	4a67      	ldr	r2, [pc, #412]	@ (341900d4 <TIM_Base_SetConfig+0x208>)
3418ff38:	4293      	cmp	r3, r2
3418ff3a:	d108      	bne.n	3418ff4e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
3418ff3c:	68fb      	ldr	r3, [r7, #12]
3418ff3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
3418ff42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
3418ff44:	683b      	ldr	r3, [r7, #0]
3418ff46:	685b      	ldr	r3, [r3, #4]
3418ff48:	68fa      	ldr	r2, [r7, #12]
3418ff4a:	4313      	orrs	r3, r2
3418ff4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
3418ff4e:	687b      	ldr	r3, [r7, #4]
3418ff50:	f1b3 4fa4 	cmp.w	r3, #1375731712	@ 0x52000000
3418ff54:	d053      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ff56:	687b      	ldr	r3, [r7, #4]
3418ff58:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
3418ff5c:	d04f      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ff5e:	687b      	ldr	r3, [r7, #4]
3418ff60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
3418ff64:	d04b      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ff66:	687b      	ldr	r3, [r7, #4]
3418ff68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418ff6c:	d047      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ff6e:	687b      	ldr	r3, [r7, #4]
3418ff70:	4a51      	ldr	r2, [pc, #324]	@ (341900b8 <TIM_Base_SetConfig+0x1ec>)
3418ff72:	4293      	cmp	r3, r2
3418ff74:	d043      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ff76:	687b      	ldr	r3, [r7, #4]
3418ff78:	4a50      	ldr	r2, [pc, #320]	@ (341900bc <TIM_Base_SetConfig+0x1f0>)
3418ff7a:	4293      	cmp	r3, r2
3418ff7c:	d03f      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ff7e:	687b      	ldr	r3, [r7, #4]
3418ff80:	4a4f      	ldr	r2, [pc, #316]	@ (341900c0 <TIM_Base_SetConfig+0x1f4>)
3418ff82:	4293      	cmp	r3, r2
3418ff84:	d03b      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ff86:	687b      	ldr	r3, [r7, #4]
3418ff88:	4a4e      	ldr	r2, [pc, #312]	@ (341900c4 <TIM_Base_SetConfig+0x1f8>)
3418ff8a:	4293      	cmp	r3, r2
3418ff8c:	d037      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ff8e:	687b      	ldr	r3, [r7, #4]
3418ff90:	4a4d      	ldr	r2, [pc, #308]	@ (341900c8 <TIM_Base_SetConfig+0x1fc>)
3418ff92:	4293      	cmp	r3, r2
3418ff94:	d033      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ff96:	687b      	ldr	r3, [r7, #4]
3418ff98:	4a4c      	ldr	r2, [pc, #304]	@ (341900cc <TIM_Base_SetConfig+0x200>)
3418ff9a:	4293      	cmp	r3, r2
3418ff9c:	d02f      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ff9e:	687b      	ldr	r3, [r7, #4]
3418ffa0:	4a4b      	ldr	r2, [pc, #300]	@ (341900d0 <TIM_Base_SetConfig+0x204>)
3418ffa2:	4293      	cmp	r3, r2
3418ffa4:	d02b      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ffa6:	687b      	ldr	r3, [r7, #4]
3418ffa8:	4a4a      	ldr	r2, [pc, #296]	@ (341900d4 <TIM_Base_SetConfig+0x208>)
3418ffaa:	4293      	cmp	r3, r2
3418ffac:	d027      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ffae:	687b      	ldr	r3, [r7, #4]
3418ffb0:	4a49      	ldr	r2, [pc, #292]	@ (341900d8 <TIM_Base_SetConfig+0x20c>)
3418ffb2:	4293      	cmp	r3, r2
3418ffb4:	d023      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ffb6:	687b      	ldr	r3, [r7, #4]
3418ffb8:	4a48      	ldr	r2, [pc, #288]	@ (341900dc <TIM_Base_SetConfig+0x210>)
3418ffba:	4293      	cmp	r3, r2
3418ffbc:	d01f      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ffbe:	687b      	ldr	r3, [r7, #4]
3418ffc0:	4a47      	ldr	r2, [pc, #284]	@ (341900e0 <TIM_Base_SetConfig+0x214>)
3418ffc2:	4293      	cmp	r3, r2
3418ffc4:	d01b      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ffc6:	687b      	ldr	r3, [r7, #4]
3418ffc8:	4a46      	ldr	r2, [pc, #280]	@ (341900e4 <TIM_Base_SetConfig+0x218>)
3418ffca:	4293      	cmp	r3, r2
3418ffcc:	d017      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ffce:	687b      	ldr	r3, [r7, #4]
3418ffd0:	4a45      	ldr	r2, [pc, #276]	@ (341900e8 <TIM_Base_SetConfig+0x21c>)
3418ffd2:	4293      	cmp	r3, r2
3418ffd4:	d013      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ffd6:	687b      	ldr	r3, [r7, #4]
3418ffd8:	4a44      	ldr	r2, [pc, #272]	@ (341900ec <TIM_Base_SetConfig+0x220>)
3418ffda:	4293      	cmp	r3, r2
3418ffdc:	d00f      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ffde:	687b      	ldr	r3, [r7, #4]
3418ffe0:	4a43      	ldr	r2, [pc, #268]	@ (341900f0 <TIM_Base_SetConfig+0x224>)
3418ffe2:	4293      	cmp	r3, r2
3418ffe4:	d00b      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ffe6:	687b      	ldr	r3, [r7, #4]
3418ffe8:	4a42      	ldr	r2, [pc, #264]	@ (341900f4 <TIM_Base_SetConfig+0x228>)
3418ffea:	4293      	cmp	r3, r2
3418ffec:	d007      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418ffee:	687b      	ldr	r3, [r7, #4]
3418fff0:	4a41      	ldr	r2, [pc, #260]	@ (341900f8 <TIM_Base_SetConfig+0x22c>)
3418fff2:	4293      	cmp	r3, r2
3418fff4:	d003      	beq.n	3418fffe <TIM_Base_SetConfig+0x132>
3418fff6:	687b      	ldr	r3, [r7, #4]
3418fff8:	4a40      	ldr	r2, [pc, #256]	@ (341900fc <TIM_Base_SetConfig+0x230>)
3418fffa:	4293      	cmp	r3, r2
3418fffc:	d108      	bne.n	34190010 <TIM_Base_SetConfig+0x144>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
3418fffe:	68fb      	ldr	r3, [r7, #12]
34190000:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34190004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
34190006:	683b      	ldr	r3, [r7, #0]
34190008:	68db      	ldr	r3, [r3, #12]
3419000a:	68fa      	ldr	r2, [r7, #12]
3419000c:	4313      	orrs	r3, r2
3419000e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
34190010:	68fb      	ldr	r3, [r7, #12]
34190012:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
34190016:	683b      	ldr	r3, [r7, #0]
34190018:	695b      	ldr	r3, [r3, #20]
3419001a:	4313      	orrs	r3, r2
3419001c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
3419001e:	687b      	ldr	r3, [r7, #4]
34190020:	68fa      	ldr	r2, [r7, #12]
34190022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
34190024:	683b      	ldr	r3, [r7, #0]
34190026:	689a      	ldr	r2, [r3, #8]
34190028:	687b      	ldr	r3, [r7, #4]
3419002a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
3419002c:	683b      	ldr	r3, [r7, #0]
3419002e:	681a      	ldr	r2, [r3, #0]
34190030:	687b      	ldr	r3, [r7, #4]
34190032:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
34190034:	687b      	ldr	r3, [r7, #4]
34190036:	f1b3 4fa4 	cmp.w	r3, #1375731712	@ 0x52000000
3419003a:	d023      	beq.n	34190084 <TIM_Base_SetConfig+0x1b8>
3419003c:	687b      	ldr	r3, [r7, #4]
3419003e:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
34190042:	d01f      	beq.n	34190084 <TIM_Base_SetConfig+0x1b8>
34190044:	687b      	ldr	r3, [r7, #4]
34190046:	4a22      	ldr	r2, [pc, #136]	@ (341900d0 <TIM_Base_SetConfig+0x204>)
34190048:	4293      	cmp	r3, r2
3419004a:	d01b      	beq.n	34190084 <TIM_Base_SetConfig+0x1b8>
3419004c:	687b      	ldr	r3, [r7, #4]
3419004e:	4a21      	ldr	r2, [pc, #132]	@ (341900d4 <TIM_Base_SetConfig+0x208>)
34190050:	4293      	cmp	r3, r2
34190052:	d017      	beq.n	34190084 <TIM_Base_SetConfig+0x1b8>
34190054:	687b      	ldr	r3, [r7, #4]
34190056:	4a24      	ldr	r2, [pc, #144]	@ (341900e8 <TIM_Base_SetConfig+0x21c>)
34190058:	4293      	cmp	r3, r2
3419005a:	d013      	beq.n	34190084 <TIM_Base_SetConfig+0x1b8>
3419005c:	687b      	ldr	r3, [r7, #4]
3419005e:	4a23      	ldr	r2, [pc, #140]	@ (341900ec <TIM_Base_SetConfig+0x220>)
34190060:	4293      	cmp	r3, r2
34190062:	d00f      	beq.n	34190084 <TIM_Base_SetConfig+0x1b8>
34190064:	687b      	ldr	r3, [r7, #4]
34190066:	4a22      	ldr	r2, [pc, #136]	@ (341900f0 <TIM_Base_SetConfig+0x224>)
34190068:	4293      	cmp	r3, r2
3419006a:	d00b      	beq.n	34190084 <TIM_Base_SetConfig+0x1b8>
3419006c:	687b      	ldr	r3, [r7, #4]
3419006e:	4a21      	ldr	r2, [pc, #132]	@ (341900f4 <TIM_Base_SetConfig+0x228>)
34190070:	4293      	cmp	r3, r2
34190072:	d007      	beq.n	34190084 <TIM_Base_SetConfig+0x1b8>
34190074:	687b      	ldr	r3, [r7, #4]
34190076:	4a20      	ldr	r2, [pc, #128]	@ (341900f8 <TIM_Base_SetConfig+0x22c>)
34190078:	4293      	cmp	r3, r2
3419007a:	d003      	beq.n	34190084 <TIM_Base_SetConfig+0x1b8>
3419007c:	687b      	ldr	r3, [r7, #4]
3419007e:	4a1f      	ldr	r2, [pc, #124]	@ (341900fc <TIM_Base_SetConfig+0x230>)
34190080:	4293      	cmp	r3, r2
34190082:	d103      	bne.n	3419008c <TIM_Base_SetConfig+0x1c0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
34190084:	683b      	ldr	r3, [r7, #0]
34190086:	691a      	ldr	r2, [r3, #16]
34190088:	687b      	ldr	r3, [r7, #4]
3419008a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
3419008c:	687b      	ldr	r3, [r7, #4]
3419008e:	2201      	movs	r2, #1
34190090:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
34190092:	687b      	ldr	r3, [r7, #4]
34190094:	691b      	ldr	r3, [r3, #16]
34190096:	f003 0301 	and.w	r3, r3, #1
3419009a:	2b01      	cmp	r3, #1
3419009c:	d105      	bne.n	341900aa <TIM_Base_SetConfig+0x1de>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
3419009e:	687b      	ldr	r3, [r7, #4]
341900a0:	691b      	ldr	r3, [r3, #16]
341900a2:	f023 0201 	bic.w	r2, r3, #1
341900a6:	687b      	ldr	r3, [r7, #4]
341900a8:	611a      	str	r2, [r3, #16]
  }
}
341900aa:	bf00      	nop
341900ac:	3714      	adds	r7, #20
341900ae:	46bd      	mov	sp, r7
341900b0:	f85d 7b04 	ldr.w	r7, [sp], #4
341900b4:	4770      	bx	lr
341900b6:	bf00      	nop
341900b8:	50000400 	.word	0x50000400
341900bc:	40000400 	.word	0x40000400
341900c0:	50000800 	.word	0x50000800
341900c4:	40000800 	.word	0x40000800
341900c8:	50000c00 	.word	0x50000c00
341900cc:	40000c00 	.word	0x40000c00
341900d0:	52000400 	.word	0x52000400
341900d4:	42000400 	.word	0x42000400
341900d8:	52004c00 	.word	0x52004c00
341900dc:	42004c00 	.word	0x42004c00
341900e0:	50001800 	.word	0x50001800
341900e4:	40001800 	.word	0x40001800
341900e8:	52004000 	.word	0x52004000
341900ec:	42004000 	.word	0x42004000
341900f0:	52004400 	.word	0x52004400
341900f4:	42004400 	.word	0x42004400
341900f8:	52004800 	.word	0x52004800
341900fc:	42004800 	.word	0x42004800

34190100 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
34190100:	b480      	push	{r7}
34190102:	b083      	sub	sp, #12
34190104:	af00      	add	r7, sp, #0
34190106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
34190108:	bf00      	nop
3419010a:	370c      	adds	r7, #12
3419010c:	46bd      	mov	sp, r7
3419010e:	f85d 7b04 	ldr.w	r7, [sp], #4
34190112:	4770      	bx	lr

34190114 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
34190114:	b480      	push	{r7}
34190116:	b083      	sub	sp, #12
34190118:	af00      	add	r7, sp, #0
3419011a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
3419011c:	bf00      	nop
3419011e:	370c      	adds	r7, #12
34190120:	46bd      	mov	sp, r7
34190122:	f85d 7b04 	ldr.w	r7, [sp], #4
34190126:	4770      	bx	lr

34190128 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
34190128:	b480      	push	{r7}
3419012a:	b083      	sub	sp, #12
3419012c:	af00      	add	r7, sp, #0
3419012e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
34190130:	bf00      	nop
34190132:	370c      	adds	r7, #12
34190134:	46bd      	mov	sp, r7
34190136:	f85d 7b04 	ldr.w	r7, [sp], #4
3419013a:	4770      	bx	lr

3419013c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
3419013c:	b480      	push	{r7}
3419013e:	b083      	sub	sp, #12
34190140:	af00      	add	r7, sp, #0
34190142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
34190144:	bf00      	nop
34190146:	370c      	adds	r7, #12
34190148:	46bd      	mov	sp, r7
3419014a:	f85d 7b04 	ldr.w	r7, [sp], #4
3419014e:	4770      	bx	lr

34190150 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
34190150:	b480      	push	{r7}
34190152:	b083      	sub	sp, #12
34190154:	af00      	add	r7, sp, #0
34190156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
34190158:	bf00      	nop
3419015a:	370c      	adds	r7, #12
3419015c:	46bd      	mov	sp, r7
3419015e:	f85d 7b04 	ldr.w	r7, [sp], #4
34190162:	4770      	bx	lr

34190164 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
34190164:	b480      	push	{r7}
34190166:	b083      	sub	sp, #12
34190168:	af00      	add	r7, sp, #0
3419016a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
3419016c:	bf00      	nop
3419016e:	370c      	adds	r7, #12
34190170:	46bd      	mov	sp, r7
34190172:	f85d 7b04 	ldr.w	r7, [sp], #4
34190176:	4770      	bx	lr

34190178 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
34190178:	b480      	push	{r7}
3419017a:	b083      	sub	sp, #12
3419017c:	af00      	add	r7, sp, #0
3419017e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
34190180:	bf00      	nop
34190182:	370c      	adds	r7, #12
34190184:	46bd      	mov	sp, r7
34190186:	f85d 7b04 	ldr.w	r7, [sp], #4
3419018a:	4770      	bx	lr

3419018c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
3419018c:	b580      	push	{r7, lr}
3419018e:	b082      	sub	sp, #8
34190190:	af00      	add	r7, sp, #0
34190192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
34190194:	687b      	ldr	r3, [r7, #4]
34190196:	2b00      	cmp	r3, #0
34190198:	d101      	bne.n	3419019e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
3419019a:	2301      	movs	r3, #1
3419019c:	e042      	b.n	34190224 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
3419019e:	687b      	ldr	r3, [r7, #4]
341901a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
341901a4:	2b00      	cmp	r3, #0
341901a6:	d106      	bne.n	341901b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
341901a8:	687b      	ldr	r3, [r7, #4]
341901aa:	2200      	movs	r2, #0
341901ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
341901b0:	6878      	ldr	r0, [r7, #4]
341901b2:	f7f1 fcfb 	bl	34181bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
341901b6:	687b      	ldr	r3, [r7, #4]
341901b8:	2224      	movs	r2, #36	@ 0x24
341901ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
341901be:	687b      	ldr	r3, [r7, #4]
341901c0:	681b      	ldr	r3, [r3, #0]
341901c2:	681a      	ldr	r2, [r3, #0]
341901c4:	687b      	ldr	r3, [r7, #4]
341901c6:	681b      	ldr	r3, [r3, #0]
341901c8:	f022 0201 	bic.w	r2, r2, #1
341901cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
341901ce:	687b      	ldr	r3, [r7, #4]
341901d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
341901d2:	2b00      	cmp	r3, #0
341901d4:	d002      	beq.n	341901dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
341901d6:	6878      	ldr	r0, [r7, #4]
341901d8:	f000 fa14 	bl	34190604 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
341901dc:	6878      	ldr	r0, [r7, #4]
341901de:	f000 f825 	bl	3419022c <UART_SetConfig>
341901e2:	4603      	mov	r3, r0
341901e4:	2b01      	cmp	r3, #1
341901e6:	d101      	bne.n	341901ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
341901e8:	2301      	movs	r3, #1
341901ea:	e01b      	b.n	34190224 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
341901ec:	687b      	ldr	r3, [r7, #4]
341901ee:	681b      	ldr	r3, [r3, #0]
341901f0:	685a      	ldr	r2, [r3, #4]
341901f2:	687b      	ldr	r3, [r7, #4]
341901f4:	681b      	ldr	r3, [r3, #0]
341901f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
341901fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
341901fc:	687b      	ldr	r3, [r7, #4]
341901fe:	681b      	ldr	r3, [r3, #0]
34190200:	689a      	ldr	r2, [r3, #8]
34190202:	687b      	ldr	r3, [r7, #4]
34190204:	681b      	ldr	r3, [r3, #0]
34190206:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
3419020a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
3419020c:	687b      	ldr	r3, [r7, #4]
3419020e:	681b      	ldr	r3, [r3, #0]
34190210:	681a      	ldr	r2, [r3, #0]
34190212:	687b      	ldr	r3, [r7, #4]
34190214:	681b      	ldr	r3, [r3, #0]
34190216:	f042 0201 	orr.w	r2, r2, #1
3419021a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
3419021c:	6878      	ldr	r0, [r7, #4]
3419021e:	f000 fa93 	bl	34190748 <UART_CheckIdleState>
34190222:	4603      	mov	r3, r0
}
34190224:	4618      	mov	r0, r3
34190226:	3708      	adds	r7, #8
34190228:	46bd      	mov	sp, r7
3419022a:	bd80      	pop	{r7, pc}

3419022c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
3419022c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
34190230:	b090      	sub	sp, #64	@ 0x40
34190232:	af00      	add	r7, sp, #0
34190234:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint64_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
34190236:	2300      	movs	r3, #0
34190238:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
3419023c:	697b      	ldr	r3, [r7, #20]
3419023e:	681b      	ldr	r3, [r3, #0]
34190240:	4aa3      	ldr	r2, [pc, #652]	@ (341904d0 <UART_SetConfig+0x2a4>)
34190242:	4293      	cmp	r3, r2
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
34190244:	697b      	ldr	r3, [r7, #20]
34190246:	689a      	ldr	r2, [r3, #8]
34190248:	697b      	ldr	r3, [r7, #20]
3419024a:	691b      	ldr	r3, [r3, #16]
3419024c:	431a      	orrs	r2, r3
3419024e:	697b      	ldr	r3, [r7, #20]
34190250:	695b      	ldr	r3, [r3, #20]
34190252:	431a      	orrs	r2, r3
34190254:	697b      	ldr	r3, [r7, #20]
34190256:	69db      	ldr	r3, [r3, #28]
34190258:	4313      	orrs	r3, r2
3419025a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3419025c:	697b      	ldr	r3, [r7, #20]
3419025e:	681b      	ldr	r3, [r3, #0]
34190260:	681a      	ldr	r2, [r3, #0]
34190262:	4b9c      	ldr	r3, [pc, #624]	@ (341904d4 <UART_SetConfig+0x2a8>)
34190264:	4013      	ands	r3, r2
34190266:	697a      	ldr	r2, [r7, #20]
34190268:	6812      	ldr	r2, [r2, #0]
3419026a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3419026c:	430b      	orrs	r3, r1
3419026e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
34190270:	697b      	ldr	r3, [r7, #20]
34190272:	681b      	ldr	r3, [r3, #0]
34190274:	685b      	ldr	r3, [r3, #4]
34190276:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
3419027a:	697b      	ldr	r3, [r7, #20]
3419027c:	68da      	ldr	r2, [r3, #12]
3419027e:	697b      	ldr	r3, [r7, #20]
34190280:	681b      	ldr	r3, [r3, #0]
34190282:	430a      	orrs	r2, r1
34190284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
34190286:	697b      	ldr	r3, [r7, #20]
34190288:	699b      	ldr	r3, [r3, #24]
3419028a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
3419028c:	697b      	ldr	r3, [r7, #20]
3419028e:	681b      	ldr	r3, [r3, #0]
34190290:	4a8f      	ldr	r2, [pc, #572]	@ (341904d0 <UART_SetConfig+0x2a4>)
34190292:	4293      	cmp	r3, r2
34190294:	d009      	beq.n	341902aa <UART_SetConfig+0x7e>
34190296:	697b      	ldr	r3, [r7, #20]
34190298:	681b      	ldr	r3, [r3, #0]
3419029a:	4a8f      	ldr	r2, [pc, #572]	@ (341904d8 <UART_SetConfig+0x2ac>)
3419029c:	4293      	cmp	r3, r2
3419029e:	d004      	beq.n	341902aa <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
341902a0:	697b      	ldr	r3, [r7, #20]
341902a2:	6a1b      	ldr	r3, [r3, #32]
341902a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
341902a6:	4313      	orrs	r3, r2
341902a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
341902aa:	697b      	ldr	r3, [r7, #20]
341902ac:	681b      	ldr	r3, [r3, #0]
341902ae:	689b      	ldr	r3, [r3, #8]
341902b0:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
341902b4:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
341902b8:	697a      	ldr	r2, [r7, #20]
341902ba:	6812      	ldr	r2, [r2, #0]
341902bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
341902be:	430b      	orrs	r3, r1
341902c0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
341902c2:	697b      	ldr	r3, [r7, #20]
341902c4:	681b      	ldr	r3, [r3, #0]
341902c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
341902c8:	f023 010f 	bic.w	r1, r3, #15
341902cc:	697b      	ldr	r3, [r7, #20]
341902ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
341902d0:	697b      	ldr	r3, [r7, #20]
341902d2:	681b      	ldr	r3, [r3, #0]
341902d4:	430a      	orrs	r2, r1
341902d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
341902d8:	697b      	ldr	r3, [r7, #20]
341902da:	681b      	ldr	r3, [r3, #0]
341902dc:	4a7f      	ldr	r2, [pc, #508]	@ (341904dc <UART_SetConfig+0x2b0>)
341902de:	4293      	cmp	r3, r2
341902e0:	d106      	bne.n	341902f0 <UART_SetConfig+0xc4>
341902e2:	f04f 0200 	mov.w	r2, #0
341902e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
341902ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
341902ee:	e07d      	b.n	341903ec <UART_SetConfig+0x1c0>
341902f0:	697b      	ldr	r3, [r7, #20]
341902f2:	681b      	ldr	r3, [r3, #0]
341902f4:	4a7a      	ldr	r2, [pc, #488]	@ (341904e0 <UART_SetConfig+0x2b4>)
341902f6:	4293      	cmp	r3, r2
341902f8:	d106      	bne.n	34190308 <UART_SetConfig+0xdc>
341902fa:	f04f 0200 	mov.w	r2, #0
341902fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
34190302:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34190306:	e071      	b.n	341903ec <UART_SetConfig+0x1c0>
34190308:	697b      	ldr	r3, [r7, #20]
3419030a:	681b      	ldr	r3, [r3, #0]
3419030c:	4a75      	ldr	r2, [pc, #468]	@ (341904e4 <UART_SetConfig+0x2b8>)
3419030e:	4293      	cmp	r3, r2
34190310:	d106      	bne.n	34190320 <UART_SetConfig+0xf4>
34190312:	f04f 0200 	mov.w	r2, #0
34190316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3419031a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3419031e:	e065      	b.n	341903ec <UART_SetConfig+0x1c0>
34190320:	697b      	ldr	r3, [r7, #20]
34190322:	681b      	ldr	r3, [r3, #0]
34190324:	4a70      	ldr	r2, [pc, #448]	@ (341904e8 <UART_SetConfig+0x2bc>)
34190326:	4293      	cmp	r3, r2
34190328:	d106      	bne.n	34190338 <UART_SetConfig+0x10c>
3419032a:	f04f 0200 	mov.w	r2, #0
3419032e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34190332:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34190336:	e059      	b.n	341903ec <UART_SetConfig+0x1c0>
34190338:	697b      	ldr	r3, [r7, #20]
3419033a:	681b      	ldr	r3, [r3, #0]
3419033c:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
34190340:	d106      	bne.n	34190350 <UART_SetConfig+0x124>
34190342:	f04f 0200 	mov.w	r2, #0
34190346:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
3419034a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3419034e:	e04d      	b.n	341903ec <UART_SetConfig+0x1c0>
34190350:	697b      	ldr	r3, [r7, #20]
34190352:	681b      	ldr	r3, [r3, #0]
34190354:	4a65      	ldr	r2, [pc, #404]	@ (341904ec <UART_SetConfig+0x2c0>)
34190356:	4293      	cmp	r3, r2
34190358:	d106      	bne.n	34190368 <UART_SetConfig+0x13c>
3419035a:	f04f 0200 	mov.w	r2, #0
3419035e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34190362:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34190366:	e041      	b.n	341903ec <UART_SetConfig+0x1c0>
34190368:	697b      	ldr	r3, [r7, #20]
3419036a:	681b      	ldr	r3, [r3, #0]
3419036c:	4a60      	ldr	r2, [pc, #384]	@ (341904f0 <UART_SetConfig+0x2c4>)
3419036e:	4293      	cmp	r3, r2
34190370:	d106      	bne.n	34190380 <UART_SetConfig+0x154>
34190372:	f04f 0200 	mov.w	r2, #0
34190376:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3419037a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3419037e:	e035      	b.n	341903ec <UART_SetConfig+0x1c0>
34190380:	697b      	ldr	r3, [r7, #20]
34190382:	681b      	ldr	r3, [r3, #0]
34190384:	4a5b      	ldr	r2, [pc, #364]	@ (341904f4 <UART_SetConfig+0x2c8>)
34190386:	4293      	cmp	r3, r2
34190388:	d106      	bne.n	34190398 <UART_SetConfig+0x16c>
3419038a:	f04f 0200 	mov.w	r2, #0
3419038e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34190392:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34190396:	e029      	b.n	341903ec <UART_SetConfig+0x1c0>
34190398:	697b      	ldr	r3, [r7, #20]
3419039a:	681b      	ldr	r3, [r3, #0]
3419039c:	4a56      	ldr	r2, [pc, #344]	@ (341904f8 <UART_SetConfig+0x2cc>)
3419039e:	4293      	cmp	r3, r2
341903a0:	d106      	bne.n	341903b0 <UART_SetConfig+0x184>
341903a2:	f04f 0200 	mov.w	r2, #0
341903a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
341903aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
341903ae:	e01d      	b.n	341903ec <UART_SetConfig+0x1c0>
341903b0:	697b      	ldr	r3, [r7, #20]
341903b2:	681b      	ldr	r3, [r3, #0]
341903b4:	4a51      	ldr	r2, [pc, #324]	@ (341904fc <UART_SetConfig+0x2d0>)
341903b6:	4293      	cmp	r3, r2
341903b8:	d106      	bne.n	341903c8 <UART_SetConfig+0x19c>
341903ba:	f04f 0200 	mov.w	r2, #0
341903be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
341903c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
341903c6:	e011      	b.n	341903ec <UART_SetConfig+0x1c0>
341903c8:	697b      	ldr	r3, [r7, #20]
341903ca:	681b      	ldr	r3, [r3, #0]
341903cc:	4a40      	ldr	r2, [pc, #256]	@ (341904d0 <UART_SetConfig+0x2a4>)
341903ce:	4293      	cmp	r3, r2
341903d0:	d106      	bne.n	341903e0 <UART_SetConfig+0x1b4>
341903d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
341903d6:	f04f 0300 	mov.w	r3, #0
341903da:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
341903de:	e005      	b.n	341903ec <UART_SetConfig+0x1c0>
341903e0:	f04f 0200 	mov.w	r2, #0
341903e4:	f04f 0300 	mov.w	r3, #0
341903e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
341903ec:	697b      	ldr	r3, [r7, #20]
341903ee:	681b      	ldr	r3, [r3, #0]
341903f0:	4a37      	ldr	r2, [pc, #220]	@ (341904d0 <UART_SetConfig+0x2a4>)
341903f2:	4293      	cmp	r3, r2
341903f4:	d005      	beq.n	34190402 <UART_SetConfig+0x1d6>
341903f6:	697b      	ldr	r3, [r7, #20]
341903f8:	681b      	ldr	r3, [r3, #0]
341903fa:	4a37      	ldr	r2, [pc, #220]	@ (341904d8 <UART_SetConfig+0x2ac>)
341903fc:	4293      	cmp	r3, r2
341903fe:	f040 8081 	bne.w	34190504 <UART_SetConfig+0x2d8>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
34190402:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34190406:	f7f9 fe43 	bl	3418a090 <HAL_RCCEx_GetPeriphCLKFreq>
3419040a:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
3419040c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419040e:	2b00      	cmp	r3, #0
34190410:	f000 80e0 	beq.w	341905d4 <UART_SetConfig+0x3a8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
34190414:	697b      	ldr	r3, [r7, #20]
34190416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34190418:	4a39      	ldr	r2, [pc, #228]	@ (34190500 <UART_SetConfig+0x2d4>)
3419041a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3419041e:	461a      	mov	r2, r3
34190420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34190422:	fbb3 f3f2 	udiv	r3, r3, r2
34190426:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
34190428:	697b      	ldr	r3, [r7, #20]
3419042a:	685a      	ldr	r2, [r3, #4]
3419042c:	4613      	mov	r3, r2
3419042e:	005b      	lsls	r3, r3, #1
34190430:	4413      	add	r3, r2
34190432:	69fa      	ldr	r2, [r7, #28]
34190434:	429a      	cmp	r2, r3
34190436:	d305      	bcc.n	34190444 <UART_SetConfig+0x218>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
34190438:	697b      	ldr	r3, [r7, #20]
3419043a:	685b      	ldr	r3, [r3, #4]
3419043c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3419043e:	69fa      	ldr	r2, [r7, #28]
34190440:	429a      	cmp	r2, r3
34190442:	d903      	bls.n	3419044c <UART_SetConfig+0x220>
      {
        ret = HAL_ERROR;
34190444:	2301      	movs	r3, #1
34190446:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
3419044a:	e040      	b.n	341904ce <UART_SetConfig+0x2a2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3419044c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419044e:	2200      	movs	r2, #0
34190450:	60bb      	str	r3, [r7, #8]
34190452:	60fa      	str	r2, [r7, #12]
34190454:	697b      	ldr	r3, [r7, #20]
34190456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34190458:	4a29      	ldr	r2, [pc, #164]	@ (34190500 <UART_SetConfig+0x2d4>)
3419045a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3419045e:	b29b      	uxth	r3, r3
34190460:	2200      	movs	r2, #0
34190462:	603b      	str	r3, [r7, #0]
34190464:	607a      	str	r2, [r7, #4]
34190466:	e9d7 2300 	ldrd	r2, r3, [r7]
3419046a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
3419046e:	f7f0 f98d 	bl	3418078c <__aeabi_uldivmod>
34190472:	4602      	mov	r2, r0
34190474:	460b      	mov	r3, r1
34190476:	ea52 230f 	orrs.w	r3, r2, pc, lsl #8
3419047a:	6979      	ldr	r1, [r7, #20]
3419047c:	6849      	ldr	r1, [r1, #4]
3419047e:	0849      	lsrs	r1, r1, #1
34190480:	2000      	movs	r0, #0
34190482:	460c      	mov	r4, r1
34190484:	4605      	mov	r5, r0
34190486:	eb12 0804 	adds.w	r8, r2, r4
3419048a:	eb43 0905 	adc.w	r9, r3, r5
3419048e:	697b      	ldr	r3, [r7, #20]
34190490:	685b      	ldr	r3, [r3, #4]
34190492:	2200      	movs	r2, #0
34190494:	469a      	mov	sl, r3
34190496:	4693      	mov	fp, r2
34190498:	4652      	mov	r2, sl
3419049a:	465b      	mov	r3, fp
3419049c:	4640      	mov	r0, r8
3419049e:	4649      	mov	r1, r9
341904a0:	f7f0 f974 	bl	3418078c <__aeabi_uldivmod>
341904a4:	4602      	mov	r2, r0
341904a6:	460b      	mov	r3, r1
341904a8:	4613      	mov	r3, r2
341904aa:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
341904ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341904ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
341904b2:	d308      	bcc.n	341904c6 <UART_SetConfig+0x29a>
341904b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341904b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
341904ba:	d204      	bcs.n	341904c6 <UART_SetConfig+0x29a>
        {
          huart->Instance->BRR = usartdiv;
341904bc:	697b      	ldr	r3, [r7, #20]
341904be:	681b      	ldr	r3, [r3, #0]
341904c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
341904c2:	60da      	str	r2, [r3, #12]
341904c4:	e003      	b.n	341904ce <UART_SetConfig+0x2a2>
        }
        else
        {
          ret = HAL_ERROR;
341904c6:	2301      	movs	r3, #1
341904c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (pclk != 0U)
341904cc:	e082      	b.n	341905d4 <UART_SetConfig+0x3a8>
341904ce:	e081      	b.n	341905d4 <UART_SetConfig+0x3a8>
341904d0:	56000c00 	.word	0x56000c00
341904d4:	cfff69f3 	.word	0xcfff69f3
341904d8:	46000c00 	.word	0x46000c00
341904dc:	52001000 	.word	0x52001000
341904e0:	50004400 	.word	0x50004400
341904e4:	50004800 	.word	0x50004800
341904e8:	50004c00 	.word	0x50004c00
341904ec:	52001400 	.word	0x52001400
341904f0:	50007800 	.word	0x50007800
341904f4:	50007c00 	.word	0x50007c00
341904f8:	52001800 	.word	0x52001800
341904fc:	52001c00 	.word	0x52001c00
34190500:	34192494 	.word	0x34192494
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
34190504:	697b      	ldr	r3, [r7, #20]
34190506:	69db      	ldr	r3, [r3, #28]
34190508:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3419050c:	d138      	bne.n	34190580 <UART_SetConfig+0x354>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3419050e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34190512:	f7f9 fdbd 	bl	3418a090 <HAL_RCCEx_GetPeriphCLKFreq>
34190516:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
34190518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419051a:	2b00      	cmp	r3, #0
3419051c:	d05a      	beq.n	341905d4 <UART_SetConfig+0x3a8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3419051e:	697b      	ldr	r3, [r7, #20]
34190520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34190522:	4a37      	ldr	r2, [pc, #220]	@ (34190600 <UART_SetConfig+0x3d4>)
34190524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
34190528:	461a      	mov	r2, r3
3419052a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419052c:	fbb3 f3f2 	udiv	r3, r3, r2
34190530:	005a      	lsls	r2, r3, #1
34190532:	697b      	ldr	r3, [r7, #20]
34190534:	685b      	ldr	r3, [r3, #4]
34190536:	085b      	lsrs	r3, r3, #1
34190538:	441a      	add	r2, r3
3419053a:	697b      	ldr	r3, [r7, #20]
3419053c:	685b      	ldr	r3, [r3, #4]
3419053e:	fbb2 f3f3 	udiv	r3, r2, r3
34190542:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
34190544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34190546:	2b0f      	cmp	r3, #15
34190548:	d916      	bls.n	34190578 <UART_SetConfig+0x34c>
3419054a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3419054c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34190550:	d212      	bcs.n	34190578 <UART_SetConfig+0x34c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
34190552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34190554:	b29b      	uxth	r3, r3
34190556:	f023 030f 	bic.w	r3, r3, #15
3419055a:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3419055c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3419055e:	085b      	lsrs	r3, r3, #1
34190560:	b29b      	uxth	r3, r3
34190562:	f003 0307 	and.w	r3, r3, #7
34190566:	b29a      	uxth	r2, r3
34190568:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
3419056a:	4313      	orrs	r3, r2
3419056c:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
3419056e:	697b      	ldr	r3, [r7, #20]
34190570:	681b      	ldr	r3, [r3, #0]
34190572:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
34190574:	60da      	str	r2, [r3, #12]
34190576:	e02d      	b.n	341905d4 <UART_SetConfig+0x3a8>
      }
      else
      {
        ret = HAL_ERROR;
34190578:	2301      	movs	r3, #1
3419057a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
3419057e:	e029      	b.n	341905d4 <UART_SetConfig+0x3a8>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
34190580:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34190584:	f7f9 fd84 	bl	3418a090 <HAL_RCCEx_GetPeriphCLKFreq>
34190588:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
3419058a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419058c:	2b00      	cmp	r3, #0
3419058e:	d021      	beq.n	341905d4 <UART_SetConfig+0x3a8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
34190590:	697b      	ldr	r3, [r7, #20]
34190592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34190594:	4a1a      	ldr	r2, [pc, #104]	@ (34190600 <UART_SetConfig+0x3d4>)
34190596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3419059a:	461a      	mov	r2, r3
3419059c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419059e:	fbb3 f2f2 	udiv	r2, r3, r2
341905a2:	697b      	ldr	r3, [r7, #20]
341905a4:	685b      	ldr	r3, [r3, #4]
341905a6:	085b      	lsrs	r3, r3, #1
341905a8:	441a      	add	r2, r3
341905aa:	697b      	ldr	r3, [r7, #20]
341905ac:	685b      	ldr	r3, [r3, #4]
341905ae:	fbb2 f3f3 	udiv	r3, r2, r3
341905b2:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
341905b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341905b6:	2b0f      	cmp	r3, #15
341905b8:	d909      	bls.n	341905ce <UART_SetConfig+0x3a2>
341905ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341905bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
341905c0:	d205      	bcs.n	341905ce <UART_SetConfig+0x3a2>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
341905c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341905c4:	b29a      	uxth	r2, r3
341905c6:	697b      	ldr	r3, [r7, #20]
341905c8:	681b      	ldr	r3, [r3, #0]
341905ca:	60da      	str	r2, [r3, #12]
341905cc:	e002      	b.n	341905d4 <UART_SetConfig+0x3a8>
      }
      else
      {
        ret = HAL_ERROR;
341905ce:	2301      	movs	r3, #1
341905d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
341905d4:	697b      	ldr	r3, [r7, #20]
341905d6:	2201      	movs	r2, #1
341905d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
341905dc:	697b      	ldr	r3, [r7, #20]
341905de:	2201      	movs	r2, #1
341905e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
341905e4:	697b      	ldr	r3, [r7, #20]
341905e6:	2200      	movs	r2, #0
341905e8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
341905ea:	697b      	ldr	r3, [r7, #20]
341905ec:	2200      	movs	r2, #0
341905ee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
341905f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
341905f4:	4618      	mov	r0, r3
341905f6:	3740      	adds	r7, #64	@ 0x40
341905f8:	46bd      	mov	sp, r7
341905fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
341905fe:	bf00      	nop
34190600:	34192494 	.word	0x34192494

34190604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
34190604:	b480      	push	{r7}
34190606:	b083      	sub	sp, #12
34190608:	af00      	add	r7, sp, #0
3419060a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3419060c:	687b      	ldr	r3, [r7, #4]
3419060e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34190610:	f003 0308 	and.w	r3, r3, #8
34190614:	2b00      	cmp	r3, #0
34190616:	d00a      	beq.n	3419062e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
34190618:	687b      	ldr	r3, [r7, #4]
3419061a:	681b      	ldr	r3, [r3, #0]
3419061c:	685b      	ldr	r3, [r3, #4]
3419061e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
34190622:	687b      	ldr	r3, [r7, #4]
34190624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34190626:	687b      	ldr	r3, [r7, #4]
34190628:	681b      	ldr	r3, [r3, #0]
3419062a:	430a      	orrs	r2, r1
3419062c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3419062e:	687b      	ldr	r3, [r7, #4]
34190630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34190632:	f003 0301 	and.w	r3, r3, #1
34190636:	2b00      	cmp	r3, #0
34190638:	d00a      	beq.n	34190650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
3419063a:	687b      	ldr	r3, [r7, #4]
3419063c:	681b      	ldr	r3, [r3, #0]
3419063e:	685b      	ldr	r3, [r3, #4]
34190640:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
34190644:	687b      	ldr	r3, [r7, #4]
34190646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
34190648:	687b      	ldr	r3, [r7, #4]
3419064a:	681b      	ldr	r3, [r3, #0]
3419064c:	430a      	orrs	r2, r1
3419064e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
34190650:	687b      	ldr	r3, [r7, #4]
34190652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34190654:	f003 0302 	and.w	r3, r3, #2
34190658:	2b00      	cmp	r3, #0
3419065a:	d00a      	beq.n	34190672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3419065c:	687b      	ldr	r3, [r7, #4]
3419065e:	681b      	ldr	r3, [r3, #0]
34190660:	685b      	ldr	r3, [r3, #4]
34190662:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34190666:	687b      	ldr	r3, [r7, #4]
34190668:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
3419066a:	687b      	ldr	r3, [r7, #4]
3419066c:	681b      	ldr	r3, [r3, #0]
3419066e:	430a      	orrs	r2, r1
34190670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
34190672:	687b      	ldr	r3, [r7, #4]
34190674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34190676:	f003 0304 	and.w	r3, r3, #4
3419067a:	2b00      	cmp	r3, #0
3419067c:	d00a      	beq.n	34190694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
3419067e:	687b      	ldr	r3, [r7, #4]
34190680:	681b      	ldr	r3, [r3, #0]
34190682:	685b      	ldr	r3, [r3, #4]
34190684:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
34190688:	687b      	ldr	r3, [r7, #4]
3419068a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3419068c:	687b      	ldr	r3, [r7, #4]
3419068e:	681b      	ldr	r3, [r3, #0]
34190690:	430a      	orrs	r2, r1
34190692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
34190694:	687b      	ldr	r3, [r7, #4]
34190696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34190698:	f003 0310 	and.w	r3, r3, #16
3419069c:	2b00      	cmp	r3, #0
3419069e:	d00a      	beq.n	341906b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
341906a0:	687b      	ldr	r3, [r7, #4]
341906a2:	681b      	ldr	r3, [r3, #0]
341906a4:	689b      	ldr	r3, [r3, #8]
341906a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
341906aa:	687b      	ldr	r3, [r7, #4]
341906ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
341906ae:	687b      	ldr	r3, [r7, #4]
341906b0:	681b      	ldr	r3, [r3, #0]
341906b2:	430a      	orrs	r2, r1
341906b4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
341906b6:	687b      	ldr	r3, [r7, #4]
341906b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
341906ba:	f003 0320 	and.w	r3, r3, #32
341906be:	2b00      	cmp	r3, #0
341906c0:	d00a      	beq.n	341906d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
341906c2:	687b      	ldr	r3, [r7, #4]
341906c4:	681b      	ldr	r3, [r3, #0]
341906c6:	689b      	ldr	r3, [r3, #8]
341906c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
341906cc:	687b      	ldr	r3, [r7, #4]
341906ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341906d0:	687b      	ldr	r3, [r7, #4]
341906d2:	681b      	ldr	r3, [r3, #0]
341906d4:	430a      	orrs	r2, r1
341906d6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
341906d8:	687b      	ldr	r3, [r7, #4]
341906da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
341906dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
341906e0:	2b00      	cmp	r3, #0
341906e2:	d01a      	beq.n	3419071a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
341906e4:	687b      	ldr	r3, [r7, #4]
341906e6:	681b      	ldr	r3, [r3, #0]
341906e8:	685b      	ldr	r3, [r3, #4]
341906ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
341906ee:	687b      	ldr	r3, [r7, #4]
341906f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
341906f2:	687b      	ldr	r3, [r7, #4]
341906f4:	681b      	ldr	r3, [r3, #0]
341906f6:	430a      	orrs	r2, r1
341906f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
341906fa:	687b      	ldr	r3, [r7, #4]
341906fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341906fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34190702:	d10a      	bne.n	3419071a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
34190704:	687b      	ldr	r3, [r7, #4]
34190706:	681b      	ldr	r3, [r3, #0]
34190708:	685b      	ldr	r3, [r3, #4]
3419070a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
3419070e:	687b      	ldr	r3, [r7, #4]
34190710:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34190712:	687b      	ldr	r3, [r7, #4]
34190714:	681b      	ldr	r3, [r3, #0]
34190716:	430a      	orrs	r2, r1
34190718:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
3419071a:	687b      	ldr	r3, [r7, #4]
3419071c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3419071e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34190722:	2b00      	cmp	r3, #0
34190724:	d00a      	beq.n	3419073c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
34190726:	687b      	ldr	r3, [r7, #4]
34190728:	681b      	ldr	r3, [r3, #0]
3419072a:	685b      	ldr	r3, [r3, #4]
3419072c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
34190730:	687b      	ldr	r3, [r7, #4]
34190732:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
34190734:	687b      	ldr	r3, [r7, #4]
34190736:	681b      	ldr	r3, [r3, #0]
34190738:	430a      	orrs	r2, r1
3419073a:	605a      	str	r2, [r3, #4]
  }
}
3419073c:	bf00      	nop
3419073e:	370c      	adds	r7, #12
34190740:	46bd      	mov	sp, r7
34190742:	f85d 7b04 	ldr.w	r7, [sp], #4
34190746:	4770      	bx	lr

34190748 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
34190748:	b580      	push	{r7, lr}
3419074a:	b098      	sub	sp, #96	@ 0x60
3419074c:	af02      	add	r7, sp, #8
3419074e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
34190750:	687b      	ldr	r3, [r7, #4]
34190752:	2200      	movs	r2, #0
34190754:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
34190758:	f7f2 f84a 	bl	341827f0 <HAL_GetTick>
3419075c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3419075e:	687b      	ldr	r3, [r7, #4]
34190760:	681b      	ldr	r3, [r3, #0]
34190762:	681b      	ldr	r3, [r3, #0]
34190764:	f003 0308 	and.w	r3, r3, #8
34190768:	2b08      	cmp	r3, #8
3419076a:	d12f      	bne.n	341907cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3419076c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
34190770:	9300      	str	r3, [sp, #0]
34190772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34190774:	2200      	movs	r2, #0
34190776:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3419077a:	6878      	ldr	r0, [r7, #4]
3419077c:	f000 f88e 	bl	3419089c <UART_WaitOnFlagUntilTimeout>
34190780:	4603      	mov	r3, r0
34190782:	2b00      	cmp	r3, #0
34190784:	d022      	beq.n	341907cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
34190786:	687b      	ldr	r3, [r7, #4]
34190788:	681b      	ldr	r3, [r3, #0]
3419078a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3419078c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3419078e:	e853 3f00 	ldrex	r3, [r3]
34190792:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
34190794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34190796:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
3419079a:	653b      	str	r3, [r7, #80]	@ 0x50
3419079c:	687b      	ldr	r3, [r7, #4]
3419079e:	681b      	ldr	r3, [r3, #0]
341907a0:	461a      	mov	r2, r3
341907a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
341907a4:	647b      	str	r3, [r7, #68]	@ 0x44
341907a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
341907a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
341907aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
341907ac:	e841 2300 	strex	r3, r2, [r1]
341907b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
341907b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
341907b4:	2b00      	cmp	r3, #0
341907b6:	d1e6      	bne.n	34190786 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
341907b8:	687b      	ldr	r3, [r7, #4]
341907ba:	2220      	movs	r2, #32
341907bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
341907c0:	687b      	ldr	r3, [r7, #4]
341907c2:	2200      	movs	r2, #0
341907c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
341907c8:	2303      	movs	r3, #3
341907ca:	e063      	b.n	34190894 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
341907cc:	687b      	ldr	r3, [r7, #4]
341907ce:	681b      	ldr	r3, [r3, #0]
341907d0:	681b      	ldr	r3, [r3, #0]
341907d2:	f003 0304 	and.w	r3, r3, #4
341907d6:	2b04      	cmp	r3, #4
341907d8:	d149      	bne.n	3419086e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
341907da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
341907de:	9300      	str	r3, [sp, #0]
341907e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
341907e2:	2200      	movs	r2, #0
341907e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
341907e8:	6878      	ldr	r0, [r7, #4]
341907ea:	f000 f857 	bl	3419089c <UART_WaitOnFlagUntilTimeout>
341907ee:	4603      	mov	r3, r0
341907f0:	2b00      	cmp	r3, #0
341907f2:	d03c      	beq.n	3419086e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
341907f4:	687b      	ldr	r3, [r7, #4]
341907f6:	681b      	ldr	r3, [r3, #0]
341907f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
341907fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341907fc:	e853 3f00 	ldrex	r3, [r3]
34190800:	623b      	str	r3, [r7, #32]
   return(result);
34190802:	6a3b      	ldr	r3, [r7, #32]
34190804:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
34190808:	64fb      	str	r3, [r7, #76]	@ 0x4c
3419080a:	687b      	ldr	r3, [r7, #4]
3419080c:	681b      	ldr	r3, [r3, #0]
3419080e:	461a      	mov	r2, r3
34190810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34190812:	633b      	str	r3, [r7, #48]	@ 0x30
34190814:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34190816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
34190818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
3419081a:	e841 2300 	strex	r3, r2, [r1]
3419081e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
34190820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34190822:	2b00      	cmp	r3, #0
34190824:	d1e6      	bne.n	341907f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
34190826:	687b      	ldr	r3, [r7, #4]
34190828:	681b      	ldr	r3, [r3, #0]
3419082a:	3308      	adds	r3, #8
3419082c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3419082e:	693b      	ldr	r3, [r7, #16]
34190830:	e853 3f00 	ldrex	r3, [r3]
34190834:	60fb      	str	r3, [r7, #12]
   return(result);
34190836:	68fb      	ldr	r3, [r7, #12]
34190838:	f023 0301 	bic.w	r3, r3, #1
3419083c:	64bb      	str	r3, [r7, #72]	@ 0x48
3419083e:	687b      	ldr	r3, [r7, #4]
34190840:	681b      	ldr	r3, [r3, #0]
34190842:	3308      	adds	r3, #8
34190844:	6cba      	ldr	r2, [r7, #72]	@ 0x48
34190846:	61fa      	str	r2, [r7, #28]
34190848:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3419084a:	69b9      	ldr	r1, [r7, #24]
3419084c:	69fa      	ldr	r2, [r7, #28]
3419084e:	e841 2300 	strex	r3, r2, [r1]
34190852:	617b      	str	r3, [r7, #20]
   return(result);
34190854:	697b      	ldr	r3, [r7, #20]
34190856:	2b00      	cmp	r3, #0
34190858:	d1e5      	bne.n	34190826 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
3419085a:	687b      	ldr	r3, [r7, #4]
3419085c:	2220      	movs	r2, #32
3419085e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
34190862:	687b      	ldr	r3, [r7, #4]
34190864:	2200      	movs	r2, #0
34190866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
3419086a:	2303      	movs	r3, #3
3419086c:	e012      	b.n	34190894 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
3419086e:	687b      	ldr	r3, [r7, #4]
34190870:	2220      	movs	r2, #32
34190872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
34190876:	687b      	ldr	r3, [r7, #4]
34190878:	2220      	movs	r2, #32
3419087a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3419087e:	687b      	ldr	r3, [r7, #4]
34190880:	2200      	movs	r2, #0
34190882:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
34190884:	687b      	ldr	r3, [r7, #4]
34190886:	2200      	movs	r2, #0
34190888:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
3419088a:	687b      	ldr	r3, [r7, #4]
3419088c:	2200      	movs	r2, #0
3419088e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
34190892:	2300      	movs	r3, #0
}
34190894:	4618      	mov	r0, r3
34190896:	3758      	adds	r7, #88	@ 0x58
34190898:	46bd      	mov	sp, r7
3419089a:	bd80      	pop	{r7, pc}

3419089c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
3419089c:	b580      	push	{r7, lr}
3419089e:	b084      	sub	sp, #16
341908a0:	af00      	add	r7, sp, #0
341908a2:	60f8      	str	r0, [r7, #12]
341908a4:	60b9      	str	r1, [r7, #8]
341908a6:	603b      	str	r3, [r7, #0]
341908a8:	4613      	mov	r3, r2
341908aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
341908ac:	e04f      	b.n	3419094e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
341908ae:	69bb      	ldr	r3, [r7, #24]
341908b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
341908b4:	d04b      	beq.n	3419094e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
341908b6:	f7f1 ff9b 	bl	341827f0 <HAL_GetTick>
341908ba:	4602      	mov	r2, r0
341908bc:	683b      	ldr	r3, [r7, #0]
341908be:	1ad3      	subs	r3, r2, r3
341908c0:	69ba      	ldr	r2, [r7, #24]
341908c2:	429a      	cmp	r2, r3
341908c4:	d302      	bcc.n	341908cc <UART_WaitOnFlagUntilTimeout+0x30>
341908c6:	69bb      	ldr	r3, [r7, #24]
341908c8:	2b00      	cmp	r3, #0
341908ca:	d101      	bne.n	341908d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
341908cc:	2303      	movs	r3, #3
341908ce:	e04e      	b.n	3419096e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
341908d0:	68fb      	ldr	r3, [r7, #12]
341908d2:	681b      	ldr	r3, [r3, #0]
341908d4:	681b      	ldr	r3, [r3, #0]
341908d6:	f003 0304 	and.w	r3, r3, #4
341908da:	2b00      	cmp	r3, #0
341908dc:	d037      	beq.n	3419094e <UART_WaitOnFlagUntilTimeout+0xb2>
341908de:	68bb      	ldr	r3, [r7, #8]
341908e0:	2b80      	cmp	r3, #128	@ 0x80
341908e2:	d034      	beq.n	3419094e <UART_WaitOnFlagUntilTimeout+0xb2>
341908e4:	68bb      	ldr	r3, [r7, #8]
341908e6:	2b40      	cmp	r3, #64	@ 0x40
341908e8:	d031      	beq.n	3419094e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
341908ea:	68fb      	ldr	r3, [r7, #12]
341908ec:	681b      	ldr	r3, [r3, #0]
341908ee:	69db      	ldr	r3, [r3, #28]
341908f0:	f003 0308 	and.w	r3, r3, #8
341908f4:	2b08      	cmp	r3, #8
341908f6:	d110      	bne.n	3419091a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
341908f8:	68fb      	ldr	r3, [r7, #12]
341908fa:	681b      	ldr	r3, [r3, #0]
341908fc:	2208      	movs	r2, #8
341908fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
34190900:	68f8      	ldr	r0, [r7, #12]
34190902:	f000 f838 	bl	34190976 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
34190906:	68fb      	ldr	r3, [r7, #12]
34190908:	2208      	movs	r2, #8
3419090a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3419090e:	68fb      	ldr	r3, [r7, #12]
34190910:	2200      	movs	r2, #0
34190912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
34190916:	2301      	movs	r3, #1
34190918:	e029      	b.n	3419096e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3419091a:	68fb      	ldr	r3, [r7, #12]
3419091c:	681b      	ldr	r3, [r3, #0]
3419091e:	69db      	ldr	r3, [r3, #28]
34190920:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34190924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34190928:	d111      	bne.n	3419094e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3419092a:	68fb      	ldr	r3, [r7, #12]
3419092c:	681b      	ldr	r3, [r3, #0]
3419092e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34190932:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
34190934:	68f8      	ldr	r0, [r7, #12]
34190936:	f000 f81e 	bl	34190976 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
3419093a:	68fb      	ldr	r3, [r7, #12]
3419093c:	2220      	movs	r2, #32
3419093e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
34190942:	68fb      	ldr	r3, [r7, #12]
34190944:	2200      	movs	r2, #0
34190946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
3419094a:	2303      	movs	r3, #3
3419094c:	e00f      	b.n	3419096e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3419094e:	68fb      	ldr	r3, [r7, #12]
34190950:	681b      	ldr	r3, [r3, #0]
34190952:	69da      	ldr	r2, [r3, #28]
34190954:	68bb      	ldr	r3, [r7, #8]
34190956:	4013      	ands	r3, r2
34190958:	68ba      	ldr	r2, [r7, #8]
3419095a:	429a      	cmp	r2, r3
3419095c:	bf0c      	ite	eq
3419095e:	2301      	moveq	r3, #1
34190960:	2300      	movne	r3, #0
34190962:	b2db      	uxtb	r3, r3
34190964:	461a      	mov	r2, r3
34190966:	79fb      	ldrb	r3, [r7, #7]
34190968:	429a      	cmp	r2, r3
3419096a:	d0a0      	beq.n	341908ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
3419096c:	2300      	movs	r3, #0
}
3419096e:	4618      	mov	r0, r3
34190970:	3710      	adds	r7, #16
34190972:	46bd      	mov	sp, r7
34190974:	bd80      	pop	{r7, pc}

34190976 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
34190976:	b480      	push	{r7}
34190978:	b095      	sub	sp, #84	@ 0x54
3419097a:	af00      	add	r7, sp, #0
3419097c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3419097e:	687b      	ldr	r3, [r7, #4]
34190980:	681b      	ldr	r3, [r3, #0]
34190982:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34190984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34190986:	e853 3f00 	ldrex	r3, [r3]
3419098a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
3419098c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419098e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
34190992:	64fb      	str	r3, [r7, #76]	@ 0x4c
34190994:	687b      	ldr	r3, [r7, #4]
34190996:	681b      	ldr	r3, [r3, #0]
34190998:	461a      	mov	r2, r3
3419099a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3419099c:	643b      	str	r3, [r7, #64]	@ 0x40
3419099e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
341909a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
341909a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
341909a4:	e841 2300 	strex	r3, r2, [r1]
341909a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
341909aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
341909ac:	2b00      	cmp	r3, #0
341909ae:	d1e6      	bne.n	3419097e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
341909b0:	687b      	ldr	r3, [r7, #4]
341909b2:	681b      	ldr	r3, [r3, #0]
341909b4:	3308      	adds	r3, #8
341909b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
341909b8:	6a3b      	ldr	r3, [r7, #32]
341909ba:	e853 3f00 	ldrex	r3, [r3]
341909be:	61fb      	str	r3, [r7, #28]
   return(result);
341909c0:	69fb      	ldr	r3, [r7, #28]
341909c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
341909c6:	f023 0301 	bic.w	r3, r3, #1
341909ca:	64bb      	str	r3, [r7, #72]	@ 0x48
341909cc:	687b      	ldr	r3, [r7, #4]
341909ce:	681b      	ldr	r3, [r3, #0]
341909d0:	3308      	adds	r3, #8
341909d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
341909d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
341909d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
341909d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341909da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
341909dc:	e841 2300 	strex	r3, r2, [r1]
341909e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
341909e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341909e4:	2b00      	cmp	r3, #0
341909e6:	d1e3      	bne.n	341909b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
341909e8:	687b      	ldr	r3, [r7, #4]
341909ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
341909ec:	2b01      	cmp	r3, #1
341909ee:	d118      	bne.n	34190a22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
341909f0:	687b      	ldr	r3, [r7, #4]
341909f2:	681b      	ldr	r3, [r3, #0]
341909f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
341909f6:	68fb      	ldr	r3, [r7, #12]
341909f8:	e853 3f00 	ldrex	r3, [r3]
341909fc:	60bb      	str	r3, [r7, #8]
   return(result);
341909fe:	68bb      	ldr	r3, [r7, #8]
34190a00:	f023 0310 	bic.w	r3, r3, #16
34190a04:	647b      	str	r3, [r7, #68]	@ 0x44
34190a06:	687b      	ldr	r3, [r7, #4]
34190a08:	681b      	ldr	r3, [r3, #0]
34190a0a:	461a      	mov	r2, r3
34190a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34190a0e:	61bb      	str	r3, [r7, #24]
34190a10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34190a12:	6979      	ldr	r1, [r7, #20]
34190a14:	69ba      	ldr	r2, [r7, #24]
34190a16:	e841 2300 	strex	r3, r2, [r1]
34190a1a:	613b      	str	r3, [r7, #16]
   return(result);
34190a1c:	693b      	ldr	r3, [r7, #16]
34190a1e:	2b00      	cmp	r3, #0
34190a20:	d1e6      	bne.n	341909f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
34190a22:	687b      	ldr	r3, [r7, #4]
34190a24:	2220      	movs	r2, #32
34190a26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
34190a2a:	687b      	ldr	r3, [r7, #4]
34190a2c:	2200      	movs	r2, #0
34190a2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
34190a30:	687b      	ldr	r3, [r7, #4]
34190a32:	2200      	movs	r2, #0
34190a34:	675a      	str	r2, [r3, #116]	@ 0x74
}
34190a36:	bf00      	nop
34190a38:	3754      	adds	r7, #84	@ 0x54
34190a3a:	46bd      	mov	sp, r7
34190a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
34190a40:	4770      	bx	lr

34190a42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
34190a42:	b480      	push	{r7}
34190a44:	b085      	sub	sp, #20
34190a46:	af00      	add	r7, sp, #0
34190a48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
34190a4a:	687b      	ldr	r3, [r7, #4]
34190a4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
34190a50:	2b01      	cmp	r3, #1
34190a52:	d101      	bne.n	34190a58 <HAL_UARTEx_DisableFifoMode+0x16>
34190a54:	2302      	movs	r3, #2
34190a56:	e027      	b.n	34190aa8 <HAL_UARTEx_DisableFifoMode+0x66>
34190a58:	687b      	ldr	r3, [r7, #4]
34190a5a:	2201      	movs	r2, #1
34190a5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
34190a60:	687b      	ldr	r3, [r7, #4]
34190a62:	2224      	movs	r2, #36	@ 0x24
34190a64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
34190a68:	687b      	ldr	r3, [r7, #4]
34190a6a:	681b      	ldr	r3, [r3, #0]
34190a6c:	681b      	ldr	r3, [r3, #0]
34190a6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
34190a70:	687b      	ldr	r3, [r7, #4]
34190a72:	681b      	ldr	r3, [r3, #0]
34190a74:	681a      	ldr	r2, [r3, #0]
34190a76:	687b      	ldr	r3, [r7, #4]
34190a78:	681b      	ldr	r3, [r3, #0]
34190a7a:	f022 0201 	bic.w	r2, r2, #1
34190a7e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
34190a80:	68fb      	ldr	r3, [r7, #12]
34190a82:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
34190a86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
34190a88:	687b      	ldr	r3, [r7, #4]
34190a8a:	2200      	movs	r2, #0
34190a8c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
34190a8e:	687b      	ldr	r3, [r7, #4]
34190a90:	681b      	ldr	r3, [r3, #0]
34190a92:	68fa      	ldr	r2, [r7, #12]
34190a94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
34190a96:	687b      	ldr	r3, [r7, #4]
34190a98:	2220      	movs	r2, #32
34190a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
34190a9e:	687b      	ldr	r3, [r7, #4]
34190aa0:	2200      	movs	r2, #0
34190aa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
34190aa6:	2300      	movs	r3, #0
}
34190aa8:	4618      	mov	r0, r3
34190aaa:	3714      	adds	r7, #20
34190aac:	46bd      	mov	sp, r7
34190aae:	f85d 7b04 	ldr.w	r7, [sp], #4
34190ab2:	4770      	bx	lr

34190ab4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
34190ab4:	b580      	push	{r7, lr}
34190ab6:	b084      	sub	sp, #16
34190ab8:	af00      	add	r7, sp, #0
34190aba:	6078      	str	r0, [r7, #4]
34190abc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
34190abe:	687b      	ldr	r3, [r7, #4]
34190ac0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
34190ac4:	2b01      	cmp	r3, #1
34190ac6:	d101      	bne.n	34190acc <HAL_UARTEx_SetTxFifoThreshold+0x18>
34190ac8:	2302      	movs	r3, #2
34190aca:	e02d      	b.n	34190b28 <HAL_UARTEx_SetTxFifoThreshold+0x74>
34190acc:	687b      	ldr	r3, [r7, #4]
34190ace:	2201      	movs	r2, #1
34190ad0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
34190ad4:	687b      	ldr	r3, [r7, #4]
34190ad6:	2224      	movs	r2, #36	@ 0x24
34190ad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
34190adc:	687b      	ldr	r3, [r7, #4]
34190ade:	681b      	ldr	r3, [r3, #0]
34190ae0:	681b      	ldr	r3, [r3, #0]
34190ae2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
34190ae4:	687b      	ldr	r3, [r7, #4]
34190ae6:	681b      	ldr	r3, [r3, #0]
34190ae8:	681a      	ldr	r2, [r3, #0]
34190aea:	687b      	ldr	r3, [r7, #4]
34190aec:	681b      	ldr	r3, [r3, #0]
34190aee:	f022 0201 	bic.w	r2, r2, #1
34190af2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
34190af4:	687b      	ldr	r3, [r7, #4]
34190af6:	681b      	ldr	r3, [r3, #0]
34190af8:	689b      	ldr	r3, [r3, #8]
34190afa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
34190afe:	687b      	ldr	r3, [r7, #4]
34190b00:	681b      	ldr	r3, [r3, #0]
34190b02:	683a      	ldr	r2, [r7, #0]
34190b04:	430a      	orrs	r2, r1
34190b06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
34190b08:	6878      	ldr	r0, [r7, #4]
34190b0a:	f000 f84f 	bl	34190bac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
34190b0e:	687b      	ldr	r3, [r7, #4]
34190b10:	681b      	ldr	r3, [r3, #0]
34190b12:	68fa      	ldr	r2, [r7, #12]
34190b14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
34190b16:	687b      	ldr	r3, [r7, #4]
34190b18:	2220      	movs	r2, #32
34190b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
34190b1e:	687b      	ldr	r3, [r7, #4]
34190b20:	2200      	movs	r2, #0
34190b22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
34190b26:	2300      	movs	r3, #0
}
34190b28:	4618      	mov	r0, r3
34190b2a:	3710      	adds	r7, #16
34190b2c:	46bd      	mov	sp, r7
34190b2e:	bd80      	pop	{r7, pc}

34190b30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
34190b30:	b580      	push	{r7, lr}
34190b32:	b084      	sub	sp, #16
34190b34:	af00      	add	r7, sp, #0
34190b36:	6078      	str	r0, [r7, #4]
34190b38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
34190b3a:	687b      	ldr	r3, [r7, #4]
34190b3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
34190b40:	2b01      	cmp	r3, #1
34190b42:	d101      	bne.n	34190b48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
34190b44:	2302      	movs	r3, #2
34190b46:	e02d      	b.n	34190ba4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
34190b48:	687b      	ldr	r3, [r7, #4]
34190b4a:	2201      	movs	r2, #1
34190b4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
34190b50:	687b      	ldr	r3, [r7, #4]
34190b52:	2224      	movs	r2, #36	@ 0x24
34190b54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
34190b58:	687b      	ldr	r3, [r7, #4]
34190b5a:	681b      	ldr	r3, [r3, #0]
34190b5c:	681b      	ldr	r3, [r3, #0]
34190b5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
34190b60:	687b      	ldr	r3, [r7, #4]
34190b62:	681b      	ldr	r3, [r3, #0]
34190b64:	681a      	ldr	r2, [r3, #0]
34190b66:	687b      	ldr	r3, [r7, #4]
34190b68:	681b      	ldr	r3, [r3, #0]
34190b6a:	f022 0201 	bic.w	r2, r2, #1
34190b6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
34190b70:	687b      	ldr	r3, [r7, #4]
34190b72:	681b      	ldr	r3, [r3, #0]
34190b74:	689b      	ldr	r3, [r3, #8]
34190b76:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
34190b7a:	687b      	ldr	r3, [r7, #4]
34190b7c:	681b      	ldr	r3, [r3, #0]
34190b7e:	683a      	ldr	r2, [r7, #0]
34190b80:	430a      	orrs	r2, r1
34190b82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
34190b84:	6878      	ldr	r0, [r7, #4]
34190b86:	f000 f811 	bl	34190bac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
34190b8a:	687b      	ldr	r3, [r7, #4]
34190b8c:	681b      	ldr	r3, [r3, #0]
34190b8e:	68fa      	ldr	r2, [r7, #12]
34190b90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
34190b92:	687b      	ldr	r3, [r7, #4]
34190b94:	2220      	movs	r2, #32
34190b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
34190b9a:	687b      	ldr	r3, [r7, #4]
34190b9c:	2200      	movs	r2, #0
34190b9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
34190ba2:	2300      	movs	r3, #0
}
34190ba4:	4618      	mov	r0, r3
34190ba6:	3710      	adds	r7, #16
34190ba8:	46bd      	mov	sp, r7
34190baa:	bd80      	pop	{r7, pc}

34190bac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
34190bac:	b480      	push	{r7}
34190bae:	b085      	sub	sp, #20
34190bb0:	af00      	add	r7, sp, #0
34190bb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
34190bb4:	687b      	ldr	r3, [r7, #4]
34190bb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34190bb8:	2b00      	cmp	r3, #0
34190bba:	d108      	bne.n	34190bce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
34190bbc:	687b      	ldr	r3, [r7, #4]
34190bbe:	2201      	movs	r2, #1
34190bc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
34190bc4:	687b      	ldr	r3, [r7, #4]
34190bc6:	2201      	movs	r2, #1
34190bc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
34190bcc:	e031      	b.n	34190c32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
34190bce:	2310      	movs	r3, #16
34190bd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
34190bd2:	2310      	movs	r3, #16
34190bd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
34190bd6:	687b      	ldr	r3, [r7, #4]
34190bd8:	681b      	ldr	r3, [r3, #0]
34190bda:	689b      	ldr	r3, [r3, #8]
34190bdc:	0e5b      	lsrs	r3, r3, #25
34190bde:	b2db      	uxtb	r3, r3
34190be0:	f003 0307 	and.w	r3, r3, #7
34190be4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
34190be6:	687b      	ldr	r3, [r7, #4]
34190be8:	681b      	ldr	r3, [r3, #0]
34190bea:	689b      	ldr	r3, [r3, #8]
34190bec:	0f5b      	lsrs	r3, r3, #29
34190bee:	b2db      	uxtb	r3, r3
34190bf0:	f003 0307 	and.w	r3, r3, #7
34190bf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
34190bf6:	7bbb      	ldrb	r3, [r7, #14]
34190bf8:	7b3a      	ldrb	r2, [r7, #12]
34190bfa:	4911      	ldr	r1, [pc, #68]	@ (34190c40 <UARTEx_SetNbDataToProcess+0x94>)
34190bfc:	5c8a      	ldrb	r2, [r1, r2]
34190bfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
34190c02:	7b3a      	ldrb	r2, [r7, #12]
34190c04:	490f      	ldr	r1, [pc, #60]	@ (34190c44 <UARTEx_SetNbDataToProcess+0x98>)
34190c06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
34190c08:	fb93 f3f2 	sdiv	r3, r3, r2
34190c0c:	b29a      	uxth	r2, r3
34190c0e:	687b      	ldr	r3, [r7, #4]
34190c10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
34190c14:	7bfb      	ldrb	r3, [r7, #15]
34190c16:	7b7a      	ldrb	r2, [r7, #13]
34190c18:	4909      	ldr	r1, [pc, #36]	@ (34190c40 <UARTEx_SetNbDataToProcess+0x94>)
34190c1a:	5c8a      	ldrb	r2, [r1, r2]
34190c1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
34190c20:	7b7a      	ldrb	r2, [r7, #13]
34190c22:	4908      	ldr	r1, [pc, #32]	@ (34190c44 <UARTEx_SetNbDataToProcess+0x98>)
34190c24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
34190c26:	fb93 f3f2 	sdiv	r3, r3, r2
34190c2a:	b29a      	uxth	r2, r3
34190c2c:	687b      	ldr	r3, [r7, #4]
34190c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
34190c32:	bf00      	nop
34190c34:	3714      	adds	r7, #20
34190c36:	46bd      	mov	sp, r7
34190c38:	f85d 7b04 	ldr.w	r7, [sp], #4
34190c3c:	4770      	bx	lr
34190c3e:	bf00      	nop
34190c40:	341924ac 	.word	0x341924ac
34190c44:	341924b4 	.word	0x341924b4

34190c48 <LL_AHB5_GRP1_IsEnabledClock>:
{
34190c48:	b480      	push	{r7}
34190c4a:	b083      	sub	sp, #12
34190c4c:	af00      	add	r7, sp, #0
34190c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB5ENR, Periphs) == Periphs) ? 1UL : 0UL);
34190c50:	4b08      	ldr	r3, [pc, #32]	@ (34190c74 <LL_AHB5_GRP1_IsEnabledClock+0x2c>)
34190c52:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
34190c56:	687b      	ldr	r3, [r7, #4]
34190c58:	4013      	ands	r3, r2
34190c5a:	687a      	ldr	r2, [r7, #4]
34190c5c:	429a      	cmp	r2, r3
34190c5e:	d101      	bne.n	34190c64 <LL_AHB5_GRP1_IsEnabledClock+0x1c>
34190c60:	2301      	movs	r3, #1
34190c62:	e000      	b.n	34190c66 <LL_AHB5_GRP1_IsEnabledClock+0x1e>
34190c64:	2300      	movs	r3, #0
}
34190c66:	4618      	mov	r0, r3
34190c68:	370c      	adds	r7, #12
34190c6a:	46bd      	mov	sp, r7
34190c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
34190c70:	4770      	bx	lr
34190c72:	bf00      	nop
34190c74:	56028000 	.word	0x56028000

34190c78 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
34190c78:	b580      	push	{r7, lr}
34190c7a:	b086      	sub	sp, #24
34190c7c:	af02      	add	r7, sp, #8
34190c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
34190c80:	2300      	movs	r3, #0
34190c82:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
34190c84:	f7f1 fdb4 	bl	341827f0 <HAL_GetTick>
34190c88:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
34190c8a:	687b      	ldr	r3, [r7, #4]
34190c8c:	2b00      	cmp	r3, #0
34190c8e:	d102      	bne.n	34190c96 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
34190c90:	2301      	movs	r3, #1
34190c92:	73fb      	strb	r3, [r7, #15]
34190c94:	e0ef      	b.n	34190e76 <HAL_XSPI_Init+0x1fe>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
34190c96:	687b      	ldr	r3, [r7, #4]
34190c98:	2200      	movs	r2, #0
34190c9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
34190c9c:	687b      	ldr	r3, [r7, #4]
34190c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34190ca0:	2b00      	cmp	r3, #0
34190ca2:	f040 80e8 	bne.w	34190e76 <HAL_XSPI_Init+0x1fe>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
34190ca6:	6878      	ldr	r0, [r7, #4]
34190ca8:	f7f1 f848 	bl	34181d3c <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
34190cac:	f241 3188 	movw	r1, #5000	@ 0x1388
34190cb0:	6878      	ldr	r0, [r7, #4]
34190cb2:	f000 fa97 	bl	341911e4 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
34190cb6:	687b      	ldr	r3, [r7, #4]
34190cb8:	681b      	ldr	r3, [r3, #0]
34190cba:	689a      	ldr	r2, [r3, #8]
34190cbc:	4b70      	ldr	r3, [pc, #448]	@ (34190e80 <HAL_XSPI_Init+0x208>)
34190cbe:	4013      	ands	r3, r2
34190cc0:	687a      	ldr	r2, [r7, #4]
34190cc2:	68d1      	ldr	r1, [r2, #12]
34190cc4:	687a      	ldr	r2, [r7, #4]
34190cc6:	6912      	ldr	r2, [r2, #16]
34190cc8:	0412      	lsls	r2, r2, #16
34190cca:	4311      	orrs	r1, r2
34190ccc:	687a      	ldr	r2, [r7, #4]
34190cce:	6952      	ldr	r2, [r2, #20]
34190cd0:	3a01      	subs	r2, #1
34190cd2:	0212      	lsls	r2, r2, #8
34190cd4:	4311      	orrs	r1, r2
34190cd6:	687a      	ldr	r2, [r7, #4]
34190cd8:	69d2      	ldr	r2, [r2, #28]
34190cda:	4311      	orrs	r1, r2
34190cdc:	687a      	ldr	r2, [r7, #4]
34190cde:	6812      	ldr	r2, [r2, #0]
34190ce0:	430b      	orrs	r3, r1
34190ce2:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
34190ce4:	687b      	ldr	r3, [r7, #4]
34190ce6:	681b      	ldr	r3, [r3, #0]
34190ce8:	68db      	ldr	r3, [r3, #12]
34190cea:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
34190cee:	687b      	ldr	r3, [r7, #4]
34190cf0:	6a1a      	ldr	r2, [r3, #32]
34190cf2:	687b      	ldr	r3, [r7, #4]
34190cf4:	681b      	ldr	r3, [r3, #0]
34190cf6:	430a      	orrs	r2, r1
34190cf8:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
34190cfa:	687b      	ldr	r3, [r7, #4]
34190cfc:	681b      	ldr	r3, [r3, #0]
34190cfe:	691b      	ldr	r3, [r3, #16]
34190d00:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
34190d04:	687b      	ldr	r3, [r7, #4]
34190d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34190d08:	041a      	lsls	r2, r3, #16
34190d0a:	687b      	ldr	r3, [r7, #4]
34190d0c:	681b      	ldr	r3, [r3, #0]
34190d0e:	430a      	orrs	r2, r1
34190d10:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
34190d12:	687b      	ldr	r3, [r7, #4]
34190d14:	681b      	ldr	r3, [r3, #0]
34190d16:	691b      	ldr	r3, [r3, #16]
34190d18:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
34190d1c:	687b      	ldr	r3, [r7, #4]
34190d1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
34190d20:	687b      	ldr	r3, [r7, #4]
34190d22:	681b      	ldr	r3, [r3, #0]
34190d24:	430a      	orrs	r2, r1
34190d26:	611a      	str	r2, [r3, #16]
                 (hxspi->Init.MaxTran << XSPI_DCR3_MAXTRAN_Pos));

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
34190d28:	687b      	ldr	r3, [r7, #4]
34190d2a:	681b      	ldr	r3, [r3, #0]
34190d2c:	687a      	ldr	r2, [r7, #4]
34190d2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34190d30:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
34190d32:	687b      	ldr	r3, [r7, #4]
34190d34:	681b      	ldr	r3, [r3, #0]
34190d36:	681b      	ldr	r3, [r3, #0]
34190d38:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
34190d3c:	687b      	ldr	r3, [r7, #4]
34190d3e:	685b      	ldr	r3, [r3, #4]
34190d40:	3b01      	subs	r3, #1
34190d42:	021a      	lsls	r2, r3, #8
34190d44:	687b      	ldr	r3, [r7, #4]
34190d46:	681b      	ldr	r3, [r3, #0]
34190d48:	430a      	orrs	r2, r1
34190d4a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
34190d4c:	687b      	ldr	r3, [r7, #4]
34190d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34190d50:	9300      	str	r3, [sp, #0]
34190d52:	68bb      	ldr	r3, [r7, #8]
34190d54:	2200      	movs	r2, #0
34190d56:	2120      	movs	r1, #32
34190d58:	6878      	ldr	r0, [r7, #4]
34190d5a:	f000 fbbb 	bl	341914d4 <XSPI_WaitFlagStateUntilTimeout>
34190d5e:	4603      	mov	r3, r0
34190d60:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
34190d62:	7bfb      	ldrb	r3, [r7, #15]
34190d64:	2b00      	cmp	r3, #0
34190d66:	f040 8086 	bne.w	34190e76 <HAL_XSPI_Init+0x1fe>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
34190d6a:	687b      	ldr	r3, [r7, #4]
34190d6c:	681b      	ldr	r3, [r3, #0]
34190d6e:	68db      	ldr	r3, [r3, #12]
34190d70:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
34190d74:	687b      	ldr	r3, [r7, #4]
34190d76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
34190d78:	687b      	ldr	r3, [r7, #4]
34190d7a:	681b      	ldr	r3, [r3, #0]
34190d7c:	430a      	orrs	r2, r1
34190d7e:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
34190d80:	687b      	ldr	r3, [r7, #4]
34190d82:	681b      	ldr	r3, [r3, #0]
34190d84:	4a3f      	ldr	r2, [pc, #252]	@ (34190e84 <HAL_XSPI_Init+0x20c>)
34190d86:	4293      	cmp	r3, r2
34190d88:	d018      	beq.n	34190dbc <HAL_XSPI_Init+0x144>
34190d8a:	687b      	ldr	r3, [r7, #4]
34190d8c:	681b      	ldr	r3, [r3, #0]
34190d8e:	4a3e      	ldr	r2, [pc, #248]	@ (34190e88 <HAL_XSPI_Init+0x210>)
34190d90:	4293      	cmp	r3, r2
34190d92:	d013      	beq.n	34190dbc <HAL_XSPI_Init+0x144>
34190d94:	687b      	ldr	r3, [r7, #4]
34190d96:	681b      	ldr	r3, [r3, #0]
34190d98:	4a3c      	ldr	r2, [pc, #240]	@ (34190e8c <HAL_XSPI_Init+0x214>)
34190d9a:	4293      	cmp	r3, r2
34190d9c:	d00e      	beq.n	34190dbc <HAL_XSPI_Init+0x144>
34190d9e:	687b      	ldr	r3, [r7, #4]
34190da0:	681b      	ldr	r3, [r3, #0]
34190da2:	4a3b      	ldr	r2, [pc, #236]	@ (34190e90 <HAL_XSPI_Init+0x218>)
34190da4:	4293      	cmp	r3, r2
34190da6:	d009      	beq.n	34190dbc <HAL_XSPI_Init+0x144>
34190da8:	687b      	ldr	r3, [r7, #4]
34190daa:	681b      	ldr	r3, [r3, #0]
34190dac:	4a39      	ldr	r2, [pc, #228]	@ (34190e94 <HAL_XSPI_Init+0x21c>)
34190dae:	4293      	cmp	r3, r2
34190db0:	d004      	beq.n	34190dbc <HAL_XSPI_Init+0x144>
34190db2:	687b      	ldr	r3, [r7, #4]
34190db4:	681b      	ldr	r3, [r3, #0]
34190db6:	4a38      	ldr	r2, [pc, #224]	@ (34190e98 <HAL_XSPI_Init+0x220>)
34190db8:	4293      	cmp	r3, r2
34190dba:	d10f      	bne.n	34190ddc <HAL_XSPI_Init+0x164>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
34190dbc:	687b      	ldr	r3, [r7, #4]
34190dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34190dc0:	9300      	str	r3, [sp, #0]
34190dc2:	68bb      	ldr	r3, [r7, #8]
34190dc4:	2200      	movs	r2, #0
34190dc6:	2120      	movs	r1, #32
34190dc8:	6878      	ldr	r0, [r7, #4]
34190dca:	f000 fb83 	bl	341914d4 <XSPI_WaitFlagStateUntilTimeout>
34190dce:	4603      	mov	r3, r0
34190dd0:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
34190dd2:	7bfb      	ldrb	r3, [r7, #15]
34190dd4:	2b00      	cmp	r3, #0
34190dd6:	d001      	beq.n	34190ddc <HAL_XSPI_Init+0x164>
          {
            return status;
34190dd8:	7bfb      	ldrb	r3, [r7, #15]
34190dda:	e04d      	b.n	34190e78 <HAL_XSPI_Init+0x200>
          }
        }
        /* Configure Dual Memory mode and CS Selection */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
34190ddc:	687b      	ldr	r3, [r7, #4]
34190dde:	681b      	ldr	r3, [r3, #0]
34190de0:	681b      	ldr	r3, [r3, #0]
34190de2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34190de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34190dea:	687a      	ldr	r2, [r7, #4]
34190dec:	6891      	ldr	r1, [r2, #8]
34190dee:	687a      	ldr	r2, [r7, #4]
34190df0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
34190df2:	4311      	orrs	r1, r2
34190df4:	687a      	ldr	r2, [r7, #4]
34190df6:	6812      	ldr	r2, [r2, #0]
34190df8:	430b      	orrs	r3, r1
34190dfa:	6013      	str	r3, [r2, #0]
                   (hxspi->Init.MemoryMode | hxspi->Init.MemorySelect));

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
34190dfc:	687b      	ldr	r3, [r7, #4]
34190dfe:	681b      	ldr	r3, [r3, #0]
34190e00:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34190e04:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
34190e08:	687b      	ldr	r3, [r7, #4]
34190e0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34190e0c:	687b      	ldr	r3, [r7, #4]
34190e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34190e10:	431a      	orrs	r2, r3
34190e12:	687b      	ldr	r3, [r7, #4]
34190e14:	681b      	ldr	r3, [r3, #0]
34190e16:	430a      	orrs	r2, r1
34190e18:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
34190e1c:	687b      	ldr	r3, [r7, #4]
34190e1e:	681b      	ldr	r3, [r3, #0]
34190e20:	681a      	ldr	r2, [r3, #0]
34190e22:	687b      	ldr	r3, [r7, #4]
34190e24:	681b      	ldr	r3, [r3, #0]
34190e26:	f042 0201 	orr.w	r2, r2, #1
34190e2a:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
34190e2c:	687b      	ldr	r3, [r7, #4]
34190e2e:	699b      	ldr	r3, [r3, #24]
34190e30:	2b02      	cmp	r3, #2
34190e32:	d107      	bne.n	34190e44 <HAL_XSPI_Init+0x1cc>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
34190e34:	687b      	ldr	r3, [r7, #4]
34190e36:	681b      	ldr	r3, [r3, #0]
34190e38:	689a      	ldr	r2, [r3, #8]
34190e3a:	687b      	ldr	r3, [r7, #4]
34190e3c:	681b      	ldr	r3, [r3, #0]
34190e3e:	f042 0202 	orr.w	r2, r2, #2
34190e42:	609a      	str	r2, [r3, #8]
        }

        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
34190e44:	687b      	ldr	r3, [r7, #4]
34190e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34190e48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34190e4c:	d107      	bne.n	34190e5e <HAL_XSPI_Init+0x1e6>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
34190e4e:	687b      	ldr	r3, [r7, #4]
34190e50:	681b      	ldr	r3, [r3, #0]
34190e52:	689a      	ldr	r2, [r3, #8]
34190e54:	687b      	ldr	r3, [r7, #4]
34190e56:	681b      	ldr	r3, [r3, #0]
34190e58:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
34190e5c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
34190e5e:	687b      	ldr	r3, [r7, #4]
34190e60:	68db      	ldr	r3, [r3, #12]
34190e62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34190e66:	d103      	bne.n	34190e70 <HAL_XSPI_Init+0x1f8>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
34190e68:	687b      	ldr	r3, [r7, #4]
34190e6a:	2201      	movs	r2, #1
34190e6c:	659a      	str	r2, [r3, #88]	@ 0x58
34190e6e:	e002      	b.n	34190e76 <HAL_XSPI_Init+0x1fe>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
34190e70:	687b      	ldr	r3, [r7, #4]
34190e72:	2202      	movs	r2, #2
34190e74:	659a      	str	r2, [r3, #88]	@ 0x58
        }
      }
    }
  }
  return status;
34190e76:	7bfb      	ldrb	r3, [r7, #15]
}
34190e78:	4618      	mov	r0, r3
34190e7a:	3710      	adds	r7, #16
34190e7c:	46bd      	mov	sp, r7
34190e7e:	bd80      	pop	{r7, pc}
34190e80:	f8e0c0fc 	.word	0xf8e0c0fc
34190e84:	58025000 	.word	0x58025000
34190e88:	48025000 	.word	0x48025000
34190e8c:	5802a000 	.word	0x5802a000
34190e90:	4802a000 	.word	0x4802a000
34190e94:	5802d000 	.word	0x5802d000
34190e98:	4802d000 	.word	0x4802d000

34190e9c <HAL_XSPI_IRQHandler>:
  * @brief  Handle XSPI interrupt request.
  * @param  hxspi : XSPI handle
  * @retval None
  */
void HAL_XSPI_IRQHandler(XSPI_HandleTypeDef *hxspi)
{
34190e9c:	b580      	push	{r7, lr}
34190e9e:	b086      	sub	sp, #24
34190ea0:	af00      	add	r7, sp, #0
34190ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
34190ea4:	687b      	ldr	r3, [r7, #4]
34190ea6:	681b      	ldr	r3, [r3, #0]
34190ea8:	3350      	adds	r3, #80	@ 0x50
34190eaa:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hxspi->Instance->SR;
34190eac:	687b      	ldr	r3, [r7, #4]
34190eae:	681b      	ldr	r3, [r3, #0]
34190eb0:	6a1b      	ldr	r3, [r3, #32]
34190eb2:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hxspi->Instance->CR;
34190eb4:	687b      	ldr	r3, [r7, #4]
34190eb6:	681b      	ldr	r3, [r3, #0]
34190eb8:	681b      	ldr	r3, [r3, #0]
34190eba:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hxspi->State;
34190ebc:	687b      	ldr	r3, [r7, #4]
34190ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34190ec0:	60bb      	str	r3, [r7, #8]

  /* XSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_XSPI_FLAG_FT) != 0U) && ((itsource & HAL_XSPI_IT_FT) != 0U))
34190ec2:	693b      	ldr	r3, [r7, #16]
34190ec4:	f003 0304 	and.w	r3, r3, #4
34190ec8:	2b00      	cmp	r3, #0
34190eca:	d03a      	beq.n	34190f42 <HAL_XSPI_IRQHandler+0xa6>
34190ecc:	68fb      	ldr	r3, [r7, #12]
34190ece:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34190ed2:	2b00      	cmp	r3, #0
34190ed4:	d035      	beq.n	34190f42 <HAL_XSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_XSPI_STATE_BUSY_TX)
34190ed6:	68bb      	ldr	r3, [r7, #8]
34190ed8:	2b18      	cmp	r3, #24
34190eda:	d10f      	bne.n	34190efc <HAL_XSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
34190edc:	687b      	ldr	r3, [r7, #4]
34190ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34190ee0:	781a      	ldrb	r2, [r3, #0]
34190ee2:	697b      	ldr	r3, [r7, #20]
34190ee4:	701a      	strb	r2, [r3, #0]
      hxspi->pBuffPtr++;
34190ee6:	687b      	ldr	r3, [r7, #4]
34190ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34190eea:	1c5a      	adds	r2, r3, #1
34190eec:	687b      	ldr	r3, [r7, #4]
34190eee:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferCount--;
34190ef0:	687b      	ldr	r3, [r7, #4]
34190ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34190ef4:	1e5a      	subs	r2, r3, #1
34190ef6:	687b      	ldr	r3, [r7, #4]
34190ef8:	64da      	str	r2, [r3, #76]	@ 0x4c
34190efa:	e012      	b.n	34190f22 <HAL_XSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_XSPI_STATE_BUSY_RX)
34190efc:	68bb      	ldr	r3, [r7, #8]
34190efe:	2b28      	cmp	r3, #40	@ 0x28
34190f00:	d10f      	bne.n	34190f22 <HAL_XSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
34190f02:	687b      	ldr	r3, [r7, #4]
34190f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34190f06:	697a      	ldr	r2, [r7, #20]
34190f08:	7812      	ldrb	r2, [r2, #0]
34190f0a:	b2d2      	uxtb	r2, r2
34190f0c:	701a      	strb	r2, [r3, #0]
      hxspi->pBuffPtr++;
34190f0e:	687b      	ldr	r3, [r7, #4]
34190f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34190f12:	1c5a      	adds	r2, r3, #1
34190f14:	687b      	ldr	r3, [r7, #4]
34190f16:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferCount--;
34190f18:	687b      	ldr	r3, [r7, #4]
34190f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34190f1c:	1e5a      	subs	r2, r3, #1
34190f1e:	687b      	ldr	r3, [r7, #4]
34190f20:	64da      	str	r2, [r3, #76]	@ 0x4c
    else
    {
      /* Nothing to do */
    }

    if (hxspi->XferCount == 0U)
34190f22:	687b      	ldr	r3, [r7, #4]
34190f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34190f26:	2b00      	cmp	r3, #0
34190f28:	d107      	bne.n	34190f3a <HAL_XSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_FT);
34190f2a:	687b      	ldr	r3, [r7, #4]
34190f2c:	681b      	ldr	r3, [r3, #0]
34190f2e:	681a      	ldr	r2, [r3, #0]
34190f30:	687b      	ldr	r3, [r7, #4]
34190f32:	681b      	ldr	r3, [r3, #0]
34190f34:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
34190f38:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
    hxspi->FifoThresholdCallback(hxspi);
#else
    HAL_XSPI_FifoThresholdCallback(hxspi);
34190f3a:	6878      	ldr	r0, [r7, #4]
34190f3c:	f000 f916 	bl	3419116c <HAL_XSPI_FifoThresholdCallback>
34190f40:	e0f9      	b.n	34191136 <HAL_XSPI_IRQHandler+0x29a>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* XSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_XSPI_FLAG_TC) != 0U) && ((itsource & HAL_XSPI_IT_TC) != 0U))
34190f42:	693b      	ldr	r3, [r7, #16]
34190f44:	f003 0302 	and.w	r3, r3, #2
34190f48:	2b00      	cmp	r3, #0
34190f4a:	d067      	beq.n	3419101c <HAL_XSPI_IRQHandler+0x180>
34190f4c:	68fb      	ldr	r3, [r7, #12]
34190f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34190f52:	2b00      	cmp	r3, #0
34190f54:	d062      	beq.n	3419101c <HAL_XSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
34190f56:	68bb      	ldr	r3, [r7, #8]
34190f58:	2b28      	cmp	r3, #40	@ 0x28
34190f5a:	d131      	bne.n	34190fc0 <HAL_XSPI_IRQHandler+0x124>
    {
      if ((hxspi->XferCount > 0U) && ((flag & XSPI_SR_FLEVEL) != 0U))
34190f5c:	687b      	ldr	r3, [r7, #4]
34190f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34190f60:	2b00      	cmp	r3, #0
34190f62:	d015      	beq.n	34190f90 <HAL_XSPI_IRQHandler+0xf4>
34190f64:	693b      	ldr	r3, [r7, #16]
34190f66:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
34190f6a:	2b00      	cmp	r3, #0
34190f6c:	d010      	beq.n	34190f90 <HAL_XSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
34190f6e:	687b      	ldr	r3, [r7, #4]
34190f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34190f72:	697a      	ldr	r2, [r7, #20]
34190f74:	7812      	ldrb	r2, [r2, #0]
34190f76:	b2d2      	uxtb	r2, r2
34190f78:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
34190f7a:	687b      	ldr	r3, [r7, #4]
34190f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34190f7e:	1c5a      	adds	r2, r3, #1
34190f80:	687b      	ldr	r3, [r7, #4]
34190f82:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
34190f84:	687b      	ldr	r3, [r7, #4]
34190f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34190f88:	1e5a      	subs	r2, r3, #1
34190f8a:	687b      	ldr	r3, [r7, #4]
34190f8c:	64da      	str	r2, [r3, #76]	@ 0x4c
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
34190f8e:	e0cf      	b.n	34191130 <HAL_XSPI_IRQHandler+0x294>
      }
      else if (hxspi->XferCount == 0U)
34190f90:	687b      	ldr	r3, [r7, #4]
34190f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34190f94:	2b00      	cmp	r3, #0
34190f96:	f040 80cb 	bne.w	34191130 <HAL_XSPI_IRQHandler+0x294>
      {
        /* Clear flag */
        hxspi->Instance->FCR = HAL_XSPI_FLAG_TC;
34190f9a:	687b      	ldr	r3, [r7, #4]
34190f9c:	681b      	ldr	r3, [r3, #0]
34190f9e:	2202      	movs	r2, #2
34190fa0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Disable the interrupts */
        HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_TC | HAL_XSPI_IT_FT | HAL_XSPI_IT_TE);
34190fa2:	687b      	ldr	r3, [r7, #4]
34190fa4:	681b      	ldr	r3, [r3, #0]
34190fa6:	681a      	ldr	r2, [r3, #0]
34190fa8:	687b      	ldr	r3, [r7, #4]
34190faa:	681b      	ldr	r3, [r3, #0]
34190fac:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
34190fb0:	601a      	str	r2, [r3, #0]

        hxspi->State = HAL_XSPI_STATE_READY;
34190fb2:	687b      	ldr	r3, [r7, #4]
34190fb4:	2202      	movs	r2, #2
34190fb6:	659a      	str	r2, [r3, #88]	@ 0x58

        /* RX complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->RxCpltCallback(hxspi);
#else
        HAL_XSPI_RxCpltCallback(hxspi);
34190fb8:	6878      	ldr	r0, [r7, #4]
34190fba:	f000 f8eb 	bl	34191194 <HAL_XSPI_RxCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
34190fbe:	e0b7      	b.n	34191130 <HAL_XSPI_IRQHandler+0x294>
      }
    }
    else
    {
      /* Clear flag */
      hxspi->Instance->FCR = HAL_XSPI_FLAG_TC;
34190fc0:	687b      	ldr	r3, [r7, #4]
34190fc2:	681b      	ldr	r3, [r3, #0]
34190fc4:	2202      	movs	r2, #2
34190fc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Disable the interrupts */
      HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_TC | HAL_XSPI_IT_FT | HAL_XSPI_IT_TE);
34190fc8:	687b      	ldr	r3, [r7, #4]
34190fca:	681b      	ldr	r3, [r3, #0]
34190fcc:	681a      	ldr	r2, [r3, #0]
34190fce:	687b      	ldr	r3, [r7, #4]
34190fd0:	681b      	ldr	r3, [r3, #0]
34190fd2:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
34190fd6:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
34190fd8:	687b      	ldr	r3, [r7, #4]
34190fda:	2202      	movs	r2, #2
34190fdc:	659a      	str	r2, [r3, #88]	@ 0x58

      if (currentstate == HAL_XSPI_STATE_BUSY_TX)
34190fde:	68bb      	ldr	r3, [r7, #8]
34190fe0:	2b18      	cmp	r3, #24
34190fe2:	d103      	bne.n	34190fec <HAL_XSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->TxCpltCallback(hxspi);
#else
        HAL_XSPI_TxCpltCallback(hxspi);
34190fe4:	6878      	ldr	r0, [r7, #4]
34190fe6:	f000 f8df 	bl	341911a8 <HAL_XSPI_TxCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
34190fea:	e0a1      	b.n	34191130 <HAL_XSPI_IRQHandler+0x294>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_XSPI_STATE_BUSY_CMD)
34190fec:	68bb      	ldr	r3, [r7, #8]
34190fee:	2b08      	cmp	r3, #8
34190ff0:	d103      	bne.n	34190ffa <HAL_XSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->CmdCpltCallback(hxspi);
#else
        HAL_XSPI_CmdCpltCallback(hxspi);
34190ff2:	6878      	ldr	r0, [r7, #4]
34190ff4:	f000 f8c4 	bl	34191180 <HAL_XSPI_CmdCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
34190ff8:	e09a      	b.n	34191130 <HAL_XSPI_IRQHandler+0x294>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_XSPI_STATE_ABORT)
34190ffa:	68bb      	ldr	r3, [r7, #8]
34190ffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34191000:	f040 8096 	bne.w	34191130 <HAL_XSPI_IRQHandler+0x294>
      {
        if (hxspi->ErrorCode == HAL_XSPI_ERROR_NONE)
34191004:	687b      	ldr	r3, [r7, #4]
34191006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34191008:	2b00      	cmp	r3, #0
3419100a:	d103      	bne.n	34191014 <HAL_XSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
          hxspi->AbortCpltCallback(hxspi);
#else
          HAL_XSPI_AbortCpltCallback(hxspi);
3419100c:	6878      	ldr	r0, [r7, #4]
3419100e:	f000 f8a3 	bl	34191158 <HAL_XSPI_AbortCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
34191012:	e08d      	b.n	34191130 <HAL_XSPI_IRQHandler+0x294>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
          hxspi->ErrorCallback(hxspi);
#else
          HAL_XSPI_ErrorCallback(hxspi);
34191014:	6878      	ldr	r0, [r7, #4]
34191016:	f000 f895 	bl	34191144 <HAL_XSPI_ErrorCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3419101a:	e089      	b.n	34191130 <HAL_XSPI_IRQHandler+0x294>
        /* Nothing to do */
      }
    }
  }
  /* XSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_XSPI_FLAG_SM) != 0U) && ((itsource & HAL_XSPI_IT_SM) != 0U))
3419101c:	693b      	ldr	r3, [r7, #16]
3419101e:	f003 0308 	and.w	r3, r3, #8
34191022:	2b00      	cmp	r3, #0
34191024:	d01e      	beq.n	34191064 <HAL_XSPI_IRQHandler+0x1c8>
34191026:	68fb      	ldr	r3, [r7, #12]
34191028:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3419102c:	2b00      	cmp	r3, #0
3419102e:	d019      	beq.n	34191064 <HAL_XSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hxspi->Instance->FCR = HAL_XSPI_FLAG_SM;
34191030:	687b      	ldr	r3, [r7, #4]
34191032:	681b      	ldr	r3, [r3, #0]
34191034:	2208      	movs	r2, #8
34191036:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hxspi->Instance->CR & XSPI_CR_APMS) != 0U)
34191038:	687b      	ldr	r3, [r7, #4]
3419103a:	681b      	ldr	r3, [r3, #0]
3419103c:	681b      	ldr	r3, [r3, #0]
3419103e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
34191042:	2b00      	cmp	r3, #0
34191044:	d00a      	beq.n	3419105c <HAL_XSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_SM | HAL_XSPI_IT_TE);
34191046:	687b      	ldr	r3, [r7, #4]
34191048:	681b      	ldr	r3, [r3, #0]
3419104a:	681a      	ldr	r2, [r3, #0]
3419104c:	687b      	ldr	r3, [r7, #4]
3419104e:	681b      	ldr	r3, [r3, #0]
34191050:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
34191054:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
34191056:	687b      	ldr	r3, [r7, #4]
34191058:	2202      	movs	r2, #2
3419105a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Status match callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
    hxspi->StatusMatchCallback(hxspi);
#else
    HAL_XSPI_StatusMatchCallback(hxspi);
3419105c:	6878      	ldr	r0, [r7, #4]
3419105e:	f000 f8ad 	bl	341911bc <HAL_XSPI_StatusMatchCallback>
34191062:	e068      	b.n	34191136 <HAL_XSPI_IRQHandler+0x29a>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* XSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_XSPI_FLAG_TE) != 0U) && ((itsource & HAL_XSPI_IT_TE) != 0U))
34191064:	693b      	ldr	r3, [r7, #16]
34191066:	f003 0301 	and.w	r3, r3, #1
3419106a:	2b00      	cmp	r3, #0
3419106c:	d04e      	beq.n	3419110c <HAL_XSPI_IRQHandler+0x270>
3419106e:	68fb      	ldr	r3, [r7, #12]
34191070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34191074:	2b00      	cmp	r3, #0
34191076:	d049      	beq.n	3419110c <HAL_XSPI_IRQHandler+0x270>
  {
    /* Clear flag */
    hxspi->Instance->FCR = HAL_XSPI_FLAG_TE;
34191078:	687b      	ldr	r3, [r7, #4]
3419107a:	681b      	ldr	r3, [r3, #0]
3419107c:	2201      	movs	r2, #1
3419107e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable all interrupts */
    HAL_XSPI_DISABLE_IT(hxspi, (HAL_XSPI_IT_TO | HAL_XSPI_IT_SM | HAL_XSPI_IT_FT | HAL_XSPI_IT_TC | HAL_XSPI_IT_TE));
34191080:	687b      	ldr	r3, [r7, #4]
34191082:	681b      	ldr	r3, [r3, #0]
34191084:	681a      	ldr	r2, [r3, #0]
34191086:	687b      	ldr	r3, [r7, #4]
34191088:	681b      	ldr	r3, [r3, #0]
3419108a:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
3419108e:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_TRANSFER;
34191090:	687b      	ldr	r3, [r7, #4]
34191092:	2202      	movs	r2, #2
34191094:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
34191096:	687b      	ldr	r3, [r7, #4]
34191098:	681b      	ldr	r3, [r3, #0]
3419109a:	681b      	ldr	r3, [r3, #0]
3419109c:	f003 0304 	and.w	r3, r3, #4
341910a0:	2b00      	cmp	r3, #0
341910a2:	d02c      	beq.n	341910fe <HAL_XSPI_IRQHandler+0x262>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
341910a4:	687b      	ldr	r3, [r7, #4]
341910a6:	681b      	ldr	r3, [r3, #0]
341910a8:	681a      	ldr	r2, [r3, #0]
341910aa:	687b      	ldr	r3, [r7, #4]
341910ac:	681b      	ldr	r3, [r3, #0]
341910ae:	f022 0204 	bic.w	r2, r2, #4
341910b2:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      hxspi->hdmatx->XferAbortCallback = XSPI_DMAAbortCplt;
341910b4:	687b      	ldr	r3, [r7, #4]
341910b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
341910b8:	4a21      	ldr	r2, [pc, #132]	@ (34191140 <HAL_XSPI_IRQHandler+0x2a4>)
341910ba:	66da      	str	r2, [r3, #108]	@ 0x6c
      if (HAL_DMA_Abort_IT(hxspi->hdmatx) != HAL_OK)
341910bc:	687b      	ldr	r3, [r7, #4]
341910be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
341910c0:	4618      	mov	r0, r3
341910c2:	f7f2 feea 	bl	34183e9a <HAL_DMA_Abort_IT>
341910c6:	4603      	mov	r3, r0
341910c8:	2b00      	cmp	r3, #0
341910ca:	d005      	beq.n	341910d8 <HAL_XSPI_IRQHandler+0x23c>
      {
        hxspi->State = HAL_XSPI_STATE_READY;
341910cc:	687b      	ldr	r3, [r7, #4]
341910ce:	2202      	movs	r2, #2
341910d0:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->ErrorCallback(hxspi);
#else
        HAL_XSPI_ErrorCallback(hxspi);
341910d2:	6878      	ldr	r0, [r7, #4]
341910d4:	f000 f836 	bl	34191144 <HAL_XSPI_ErrorCallback>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }

      /* Disable the DMA receive on the DMA side */
      hxspi->hdmarx->XferAbortCallback = XSPI_DMAAbortCplt;
341910d8:	687b      	ldr	r3, [r7, #4]
341910da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341910dc:	4a18      	ldr	r2, [pc, #96]	@ (34191140 <HAL_XSPI_IRQHandler+0x2a4>)
341910de:	66da      	str	r2, [r3, #108]	@ 0x6c
      if (HAL_DMA_Abort_IT(hxspi->hdmarx) != HAL_OK)
341910e0:	687b      	ldr	r3, [r7, #4]
341910e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341910e4:	4618      	mov	r0, r3
341910e6:	f7f2 fed8 	bl	34183e9a <HAL_DMA_Abort_IT>
341910ea:	4603      	mov	r3, r0
341910ec:	2b00      	cmp	r3, #0
341910ee:	d021      	beq.n	34191134 <HAL_XSPI_IRQHandler+0x298>
      {
        hxspi->State = HAL_XSPI_STATE_READY;
341910f0:	687b      	ldr	r3, [r7, #4]
341910f2:	2202      	movs	r2, #2
341910f4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->ErrorCallback(hxspi);
#else
        HAL_XSPI_ErrorCallback(hxspi);
341910f6:	6878      	ldr	r0, [r7, #4]
341910f8:	f000 f824 	bl	34191144 <HAL_XSPI_ErrorCallback>
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
341910fc:	e01a      	b.n	34191134 <HAL_XSPI_IRQHandler+0x298>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }
    }
    else
    {
      hxspi->State = HAL_XSPI_STATE_READY;
341910fe:	687b      	ldr	r3, [r7, #4]
34191100:	2202      	movs	r2, #2
34191102:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
      hxspi->ErrorCallback(hxspi);
#else
      HAL_XSPI_ErrorCallback(hxspi);
34191104:	6878      	ldr	r0, [r7, #4]
34191106:	f000 f81d 	bl	34191144 <HAL_XSPI_ErrorCallback>
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
3419110a:	e013      	b.n	34191134 <HAL_XSPI_IRQHandler+0x298>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* XSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_XSPI_FLAG_TO) != 0U) && ((itsource & HAL_XSPI_IT_TO) != 0U))
3419110c:	693b      	ldr	r3, [r7, #16]
3419110e:	f003 0310 	and.w	r3, r3, #16
34191112:	2b00      	cmp	r3, #0
34191114:	d00f      	beq.n	34191136 <HAL_XSPI_IRQHandler+0x29a>
34191116:	68fb      	ldr	r3, [r7, #12]
34191118:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3419111c:	2b00      	cmp	r3, #0
3419111e:	d00a      	beq.n	34191136 <HAL_XSPI_IRQHandler+0x29a>
  {
    /* Clear flag */
    hxspi->Instance->FCR = HAL_XSPI_FLAG_TO;
34191120:	687b      	ldr	r3, [r7, #4]
34191122:	681b      	ldr	r3, [r3, #0]
34191124:	2210      	movs	r2, #16
34191126:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Timeout callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
    hxspi->TimeOutCallback(hxspi);
#else
    HAL_XSPI_TimeOutCallback(hxspi);
34191128:	6878      	ldr	r0, [r7, #4]
3419112a:	f000 f851 	bl	341911d0 <HAL_XSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
3419112e:	e002      	b.n	34191136 <HAL_XSPI_IRQHandler+0x29a>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
34191130:	bf00      	nop
34191132:	e000      	b.n	34191136 <HAL_XSPI_IRQHandler+0x29a>
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
34191134:	bf00      	nop
}
34191136:	bf00      	nop
34191138:	3718      	adds	r7, #24
3419113a:	46bd      	mov	sp, r7
3419113c:	bd80      	pop	{r7, pc}
3419113e:	bf00      	nop
34191140:	3419145d 	.word	0x3419145d

34191144 <HAL_XSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_ErrorCallback(XSPI_HandleTypeDef *hxspi)
{
34191144:	b480      	push	{r7}
34191146:	b083      	sub	sp, #12
34191148:	af00      	add	r7, sp, #0
3419114a:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_ErrorCallback could be implemented in the user file
   */
}
3419114c:	bf00      	nop
3419114e:	370c      	adds	r7, #12
34191150:	46bd      	mov	sp, r7
34191152:	f85d 7b04 	ldr.w	r7, [sp], #4
34191156:	4770      	bx	lr

34191158 <HAL_XSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_AbortCpltCallback(XSPI_HandleTypeDef *hxspi)
{
34191158:	b480      	push	{r7}
3419115a:	b083      	sub	sp, #12
3419115c:	af00      	add	r7, sp, #0
3419115e:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_AbortCpltCallback could be implemented in the user file
   */
}
34191160:	bf00      	nop
34191162:	370c      	adds	r7, #12
34191164:	46bd      	mov	sp, r7
34191166:	f85d 7b04 	ldr.w	r7, [sp], #4
3419116a:	4770      	bx	lr

3419116c <HAL_XSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_FifoThresholdCallback(XSPI_HandleTypeDef *hxspi)
{
3419116c:	b480      	push	{r7}
3419116e:	b083      	sub	sp, #12
34191170:	af00      	add	r7, sp, #0
34191172:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
34191174:	bf00      	nop
34191176:	370c      	adds	r7, #12
34191178:	46bd      	mov	sp, r7
3419117a:	f85d 7b04 	ldr.w	r7, [sp], #4
3419117e:	4770      	bx	lr

34191180 <HAL_XSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_CmdCpltCallback(XSPI_HandleTypeDef *hxspi)
{
34191180:	b480      	push	{r7}
34191182:	b083      	sub	sp, #12
34191184:	af00      	add	r7, sp, #0
34191186:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_CmdCpltCallback could be implemented in the user file
   */
}
34191188:	bf00      	nop
3419118a:	370c      	adds	r7, #12
3419118c:	46bd      	mov	sp, r7
3419118e:	f85d 7b04 	ldr.w	r7, [sp], #4
34191192:	4770      	bx	lr

34191194 <HAL_XSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_RxCpltCallback(XSPI_HandleTypeDef *hxspi)
{
34191194:	b480      	push	{r7}
34191196:	b083      	sub	sp, #12
34191198:	af00      	add	r7, sp, #0
3419119a:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_RxCpltCallback could be implemented in the user file
   */
}
3419119c:	bf00      	nop
3419119e:	370c      	adds	r7, #12
341911a0:	46bd      	mov	sp, r7
341911a2:	f85d 7b04 	ldr.w	r7, [sp], #4
341911a6:	4770      	bx	lr

341911a8 <HAL_XSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_TxCpltCallback(XSPI_HandleTypeDef *hxspi)
{
341911a8:	b480      	push	{r7}
341911aa:	b083      	sub	sp, #12
341911ac:	af00      	add	r7, sp, #0
341911ae:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_TxCpltCallback could be implemented in the user file
   */
}
341911b0:	bf00      	nop
341911b2:	370c      	adds	r7, #12
341911b4:	46bd      	mov	sp, r7
341911b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341911ba:	4770      	bx	lr

341911bc <HAL_XSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_StatusMatchCallback(XSPI_HandleTypeDef *hxspi)
{
341911bc:	b480      	push	{r7}
341911be:	b083      	sub	sp, #12
341911c0:	af00      	add	r7, sp, #0
341911c2:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_StatusMatchCallback could be implemented in the user file
   */
}
341911c4:	bf00      	nop
341911c6:	370c      	adds	r7, #12
341911c8:	46bd      	mov	sp, r7
341911ca:	f85d 7b04 	ldr.w	r7, [sp], #4
341911ce:	4770      	bx	lr

341911d0 <HAL_XSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_TimeOutCallback(XSPI_HandleTypeDef *hxspi)
{
341911d0:	b480      	push	{r7}
341911d2:	b083      	sub	sp, #12
341911d4:	af00      	add	r7, sp, #0
341911d6:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_TimeOutCallback could be implemented in the user file
   */
}
341911d8:	bf00      	nop
341911da:	370c      	adds	r7, #12
341911dc:	46bd      	mov	sp, r7
341911de:	f85d 7b04 	ldr.w	r7, [sp], #4
341911e2:	4770      	bx	lr

341911e4 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
341911e4:	b480      	push	{r7}
341911e6:	b083      	sub	sp, #12
341911e8:	af00      	add	r7, sp, #0
341911ea:	6078      	str	r0, [r7, #4]
341911ec:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
341911ee:	687b      	ldr	r3, [r7, #4]
341911f0:	683a      	ldr	r2, [r7, #0]
341911f2:	661a      	str	r2, [r3, #96]	@ 0x60
  return HAL_OK;
341911f4:	2300      	movs	r3, #0
}
341911f6:	4618      	mov	r0, r3
341911f8:	370c      	adds	r7, #12
341911fa:	46bd      	mov	sp, r7
341911fc:	f85d 7b04 	ldr.w	r7, [sp], #4
34191200:	4770      	bx	lr
	...

34191204 <HAL_XSPIM_Config>:
  * @param  pCfg     : Pointer to Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPIM_Config(XSPI_HandleTypeDef *const hxspi, XSPIM_CfgTypeDef *const pCfg, uint32_t Timeout)
{
34191204:	b580      	push	{r7, lr}
34191206:	b08e      	sub	sp, #56	@ 0x38
34191208:	af00      	add	r7, sp, #0
3419120a:	60f8      	str	r0, [r7, #12]
3419120c:	60b9      	str	r1, [r7, #8]
3419120e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
34191210:	2300      	movs	r3, #0
34191212:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  uint8_t index;
  uint8_t xspi_enabled = 0U;
34191216:	2300      	movs	r3, #0
34191218:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

  XSPIM_CfgTypeDef IOM_cfg[XSPI_NB_INSTANCE] = {0};
3419121c:	f107 0310 	add.w	r3, r7, #16
34191220:	2224      	movs	r2, #36	@ 0x24
34191222:	2100      	movs	r1, #0
34191224:	4618      	mov	r0, r3
34191226:	f001 f8c1 	bl	341923ac <memset>
  assert_param(IS_XSPIM_NCS_OVR(pCfg->nCSOverride));
  assert_param(IS_XSPIM_IO_PORT(pCfg->IOPort));
  assert_param(IS_XSPIM_REQ2ACKTIME(pCfg->Req2AckTime));

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
3419122a:	2300      	movs	r3, #0
3419122c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
34191230:	e014      	b.n	3419125c <HAL_XSPIM_Config+0x58>
  {
    XSPIM_GetConfig(index + 1U, &(IOM_cfg[index]));
34191232:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
34191236:	3301      	adds	r3, #1
34191238:	b2d8      	uxtb	r0, r3
3419123a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
3419123e:	f107 0110 	add.w	r1, r7, #16
34191242:	4613      	mov	r3, r2
34191244:	005b      	lsls	r3, r3, #1
34191246:	4413      	add	r3, r2
34191248:	009b      	lsls	r3, r3, #2
3419124a:	440b      	add	r3, r1
3419124c:	4619      	mov	r1, r3
3419124e:	f000 f977 	bl	34191540 <XSPIM_GetConfig>
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
34191252:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
34191256:	3301      	adds	r3, #1
34191258:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3419125c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
34191260:	2b02      	cmp	r3, #2
34191262:	d9e6      	bls.n	34191232 <HAL_XSPIM_Config+0x2e>
  }

  /********** Disable all XSPI to configure XSPI IO Manager **********/
  if (__HAL_RCC_XSPI1_IS_CLK_ENABLED() != 0U)
34191264:	2020      	movs	r0, #32
34191266:	f7ff fcef 	bl	34190c48 <LL_AHB5_GRP1_IsEnabledClock>
3419126a:	4603      	mov	r3, r0
3419126c:	2b00      	cmp	r3, #0
3419126e:	d011      	beq.n	34191294 <HAL_XSPIM_Config+0x90>
  {
    if ((XSPI1->CR & XSPI_CR_EN) != 0U)
34191270:	4b76      	ldr	r3, [pc, #472]	@ (3419144c <HAL_XSPIM_Config+0x248>)
34191272:	681b      	ldr	r3, [r3, #0]
34191274:	f003 0301 	and.w	r3, r3, #1
34191278:	2b00      	cmp	r3, #0
3419127a:	d00b      	beq.n	34191294 <HAL_XSPIM_Config+0x90>
    {
      CLEAR_BIT(XSPI1->CR, XSPI_CR_EN);
3419127c:	4b73      	ldr	r3, [pc, #460]	@ (3419144c <HAL_XSPIM_Config+0x248>)
3419127e:	681b      	ldr	r3, [r3, #0]
34191280:	4a72      	ldr	r2, [pc, #456]	@ (3419144c <HAL_XSPIM_Config+0x248>)
34191282:	f023 0301 	bic.w	r3, r3, #1
34191286:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x1U;
34191288:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3419128c:	f043 0301 	orr.w	r3, r3, #1
34191290:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }
  if (__HAL_RCC_XSPI2_IS_CLK_ENABLED() != 0U)
34191294:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34191298:	f7ff fcd6 	bl	34190c48 <LL_AHB5_GRP1_IsEnabledClock>
3419129c:	4603      	mov	r3, r0
3419129e:	2b00      	cmp	r3, #0
341912a0:	d011      	beq.n	341912c6 <HAL_XSPIM_Config+0xc2>
  {
    if ((XSPI2->CR & XSPI_CR_EN) != 0U)
341912a2:	4b6b      	ldr	r3, [pc, #428]	@ (34191450 <HAL_XSPIM_Config+0x24c>)
341912a4:	681b      	ldr	r3, [r3, #0]
341912a6:	f003 0301 	and.w	r3, r3, #1
341912aa:	2b00      	cmp	r3, #0
341912ac:	d00b      	beq.n	341912c6 <HAL_XSPIM_Config+0xc2>
    {
      CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
341912ae:	4b68      	ldr	r3, [pc, #416]	@ (34191450 <HAL_XSPIM_Config+0x24c>)
341912b0:	681b      	ldr	r3, [r3, #0]
341912b2:	4a67      	ldr	r2, [pc, #412]	@ (34191450 <HAL_XSPIM_Config+0x24c>)
341912b4:	f023 0301 	bic.w	r3, r3, #1
341912b8:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x2U;
341912ba:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
341912be:	f043 0302 	orr.w	r3, r3, #2
341912c2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }
  if (__HAL_RCC_XSPI3_IS_CLK_ENABLED() != 0U)
341912c6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
341912ca:	f7ff fcbd 	bl	34190c48 <LL_AHB5_GRP1_IsEnabledClock>
341912ce:	4603      	mov	r3, r0
341912d0:	2b00      	cmp	r3, #0
341912d2:	d011      	beq.n	341912f8 <HAL_XSPIM_Config+0xf4>
  {
    if ((XSPI3->CR & XSPI_CR_EN) != 0U)
341912d4:	4b5f      	ldr	r3, [pc, #380]	@ (34191454 <HAL_XSPIM_Config+0x250>)
341912d6:	681b      	ldr	r3, [r3, #0]
341912d8:	f003 0301 	and.w	r3, r3, #1
341912dc:	2b00      	cmp	r3, #0
341912de:	d00b      	beq.n	341912f8 <HAL_XSPIM_Config+0xf4>
    {
      CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
341912e0:	4b5b      	ldr	r3, [pc, #364]	@ (34191450 <HAL_XSPIM_Config+0x24c>)
341912e2:	681b      	ldr	r3, [r3, #0]
341912e4:	4a5a      	ldr	r2, [pc, #360]	@ (34191450 <HAL_XSPIM_Config+0x24c>)
341912e6:	f023 0301 	bic.w	r3, r3, #1
341912ea:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x4U;
341912ec:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
341912f0:	f043 0304 	orr.w	r3, r3, #4
341912f4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }

  /***************** Deactivation of previous configuration *****************/
  CLEAR_REG(XSPIM->CR);
341912f8:	4b57      	ldr	r3, [pc, #348]	@ (34191458 <HAL_XSPIM_Config+0x254>)
341912fa:	2200      	movs	r2, #0
341912fc:	601a      	str	r2, [r3, #0]

  /******************** Activation of new configuration *********************/
  MODIFY_REG(XSPIM->CR, XSPIM_CR_REQ2ACK_TIME, ((pCfg->Req2AckTime - 1U) << XSPIM_CR_REQ2ACK_TIME_Pos));
341912fe:	4b56      	ldr	r3, [pc, #344]	@ (34191458 <HAL_XSPIM_Config+0x254>)
34191300:	681b      	ldr	r3, [r3, #0]
34191302:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
34191306:	68bb      	ldr	r3, [r7, #8]
34191308:	689b      	ldr	r3, [r3, #8]
3419130a:	3b01      	subs	r3, #1
3419130c:	041b      	lsls	r3, r3, #16
3419130e:	4952      	ldr	r1, [pc, #328]	@ (34191458 <HAL_XSPIM_Config+0x254>)
34191310:	4313      	orrs	r3, r2
34191312:	600b      	str	r3, [r1, #0]

  if (hxspi->Instance == XSPI1)
34191314:	68fb      	ldr	r3, [r7, #12]
34191316:	681b      	ldr	r3, [r3, #0]
34191318:	4a4c      	ldr	r2, [pc, #304]	@ (3419144c <HAL_XSPIM_Config+0x248>)
3419131a:	4293      	cmp	r3, r2
3419131c:	d110      	bne.n	34191340 <HAL_XSPIM_Config+0x13c>
  {
    IOM_cfg[0].IOPort = pCfg->IOPort ;
3419131e:	68bb      	ldr	r3, [r7, #8]
34191320:	685b      	ldr	r3, [r3, #4]
34191322:	617b      	str	r3, [r7, #20]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
34191324:	68bb      	ldr	r3, [r7, #8]
34191326:	681b      	ldr	r3, [r3, #0]
34191328:	2b00      	cmp	r3, #0
3419132a:	d03e      	beq.n	341913aa <HAL_XSPIM_Config+0x1a6>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O1 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
3419132c:	4b4a      	ldr	r3, [pc, #296]	@ (34191458 <HAL_XSPIM_Config+0x254>)
3419132e:	681b      	ldr	r3, [r3, #0]
34191330:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34191334:	68bb      	ldr	r3, [r7, #8]
34191336:	681b      	ldr	r3, [r3, #0]
34191338:	4947      	ldr	r1, [pc, #284]	@ (34191458 <HAL_XSPIM_Config+0x254>)
3419133a:	4313      	orrs	r3, r2
3419133c:	600b      	str	r3, [r1, #0]
3419133e:	e034      	b.n	341913aa <HAL_XSPIM_Config+0x1a6>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI2)
34191340:	68fb      	ldr	r3, [r7, #12]
34191342:	681b      	ldr	r3, [r3, #0]
34191344:	4a42      	ldr	r2, [pc, #264]	@ (34191450 <HAL_XSPIM_Config+0x24c>)
34191346:	4293      	cmp	r3, r2
34191348:	d110      	bne.n	3419136c <HAL_XSPIM_Config+0x168>
  {
    IOM_cfg[1].IOPort = pCfg->IOPort ;
3419134a:	68bb      	ldr	r3, [r7, #8]
3419134c:	685b      	ldr	r3, [r3, #4]
3419134e:	623b      	str	r3, [r7, #32]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
34191350:	68bb      	ldr	r3, [r7, #8]
34191352:	681b      	ldr	r3, [r3, #0]
34191354:	2b00      	cmp	r3, #0
34191356:	d028      	beq.n	341913aa <HAL_XSPIM_Config+0x1a6>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O2 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
34191358:	4b3f      	ldr	r3, [pc, #252]	@ (34191458 <HAL_XSPIM_Config+0x254>)
3419135a:	681b      	ldr	r3, [r3, #0]
3419135c:	f023 0250 	bic.w	r2, r3, #80	@ 0x50
34191360:	68bb      	ldr	r3, [r7, #8]
34191362:	681b      	ldr	r3, [r3, #0]
34191364:	493c      	ldr	r1, [pc, #240]	@ (34191458 <HAL_XSPIM_Config+0x254>)
34191366:	4313      	orrs	r3, r2
34191368:	600b      	str	r3, [r1, #0]
3419136a:	e01e      	b.n	341913aa <HAL_XSPIM_Config+0x1a6>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI3)
3419136c:	68fb      	ldr	r3, [r7, #12]
3419136e:	681b      	ldr	r3, [r3, #0]
34191370:	4a38      	ldr	r2, [pc, #224]	@ (34191454 <HAL_XSPIM_Config+0x250>)
34191372:	4293      	cmp	r3, r2
34191374:	d111      	bne.n	3419139a <HAL_XSPIM_Config+0x196>
  {
    if (pCfg->IOPort == HAL_XSPIM_IOPORT_1)
34191376:	68bb      	ldr	r3, [r7, #8]
34191378:	685b      	ldr	r3, [r3, #4]
3419137a:	2b00      	cmp	r3, #0
3419137c:	d104      	bne.n	34191388 <HAL_XSPIM_Config+0x184>
    {
      IOM_cfg[0].IOPort = HAL_XSPIM_IOPORT_2 ;
3419137e:	2301      	movs	r3, #1
34191380:	617b      	str	r3, [r7, #20]
      IOM_cfg[1].IOPort = HAL_XSPIM_IOPORT_2 ;
34191382:	2301      	movs	r3, #1
34191384:	623b      	str	r3, [r7, #32]
34191386:	e010      	b.n	341913aa <HAL_XSPIM_Config+0x1a6>
    }
    else if (pCfg->IOPort == HAL_XSPIM_IOPORT_2)
34191388:	68bb      	ldr	r3, [r7, #8]
3419138a:	685b      	ldr	r3, [r3, #4]
3419138c:	2b01      	cmp	r3, #1
3419138e:	d10c      	bne.n	341913aa <HAL_XSPIM_Config+0x1a6>
    {
      IOM_cfg[0].IOPort = HAL_XSPIM_IOPORT_1 ;
34191390:	2300      	movs	r3, #0
34191392:	617b      	str	r3, [r7, #20]
      IOM_cfg[1].IOPort = HAL_XSPIM_IOPORT_1 ;
34191394:	2300      	movs	r3, #0
34191396:	623b      	str	r3, [r7, #32]
34191398:	e007      	b.n	341913aa <HAL_XSPIM_Config+0x1a6>
      /* Nothing to do */
    }
  }
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
3419139a:	68fb      	ldr	r3, [r7, #12]
3419139c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3419139e:	f043 0208 	orr.w	r2, r3, #8
341913a2:	68fb      	ldr	r3, [r7, #12]
341913a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
341913a6:	2301      	movs	r3, #1
341913a8:	e04c      	b.n	34191444 <HAL_XSPIM_Config+0x240>
  }

  for (index = 0U; index < (XSPI_NB_INSTANCE - 2U); index++)
341913aa:	2300      	movs	r3, #0
341913ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
341913b0:	e02a      	b.n	34191408 <HAL_XSPIM_Config+0x204>
  {
    if (IOM_cfg[index].IOPort == IOM_cfg[index + 1U].IOPort)
341913b2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
341913b6:	4613      	mov	r3, r2
341913b8:	005b      	lsls	r3, r3, #1
341913ba:	4413      	add	r3, r2
341913bc:	009b      	lsls	r3, r3, #2
341913be:	3338      	adds	r3, #56	@ 0x38
341913c0:	443b      	add	r3, r7
341913c2:	3b24      	subs	r3, #36	@ 0x24
341913c4:	6819      	ldr	r1, [r3, #0]
341913c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
341913ca:	1c5a      	adds	r2, r3, #1
341913cc:	4613      	mov	r3, r2
341913ce:	005b      	lsls	r3, r3, #1
341913d0:	4413      	add	r3, r2
341913d2:	009b      	lsls	r3, r3, #2
341913d4:	3338      	adds	r3, #56	@ 0x38
341913d6:	443b      	add	r3, r7
341913d8:	3b24      	subs	r3, #36	@ 0x24
341913da:	681b      	ldr	r3, [r3, #0]
341913dc:	4299      	cmp	r1, r3
341913de:	d105      	bne.n	341913ec <HAL_XSPIM_Config+0x1e8>
    {
      /*Mux*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MUXEN);
341913e0:	4b1d      	ldr	r3, [pc, #116]	@ (34191458 <HAL_XSPIM_Config+0x254>)
341913e2:	681b      	ldr	r3, [r3, #0]
341913e4:	4a1c      	ldr	r2, [pc, #112]	@ (34191458 <HAL_XSPIM_Config+0x254>)
341913e6:	f043 0301 	orr.w	r3, r3, #1
341913ea:	6013      	str	r3, [r2, #0]
    }
    else
    {
      /* Nothing to do */
    }
    if (IOM_cfg[0].IOPort == HAL_XSPIM_IOPORT_2)
341913ec:	697b      	ldr	r3, [r7, #20]
341913ee:	2b01      	cmp	r3, #1
341913f0:	d105      	bne.n	341913fe <HAL_XSPIM_Config+0x1fa>
    {
      /*Mode*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MODE);
341913f2:	4b19      	ldr	r3, [pc, #100]	@ (34191458 <HAL_XSPIM_Config+0x254>)
341913f4:	681b      	ldr	r3, [r3, #0]
341913f6:	4a18      	ldr	r2, [pc, #96]	@ (34191458 <HAL_XSPIM_Config+0x254>)
341913f8:	f043 0302 	orr.w	r3, r3, #2
341913fc:	6013      	str	r3, [r2, #0]
  for (index = 0U; index < (XSPI_NB_INSTANCE - 2U); index++)
341913fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
34191402:	3301      	adds	r3, #1
34191404:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
34191408:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3419140c:	2b00      	cmp	r3, #0
3419140e:	d0d0      	beq.n	341913b2 <HAL_XSPIM_Config+0x1ae>
      /* Nothing to do */
    }
  }

  /******* Re-enable both XSPI after configure XSPI IO Manager ********/
  if ((xspi_enabled & 0x1U) != 0U)
34191410:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
34191414:	f003 0301 	and.w	r3, r3, #1
34191418:	2b00      	cmp	r3, #0
3419141a:	d005      	beq.n	34191428 <HAL_XSPIM_Config+0x224>
  {
    SET_BIT(XSPI1->CR, XSPI_CR_EN);
3419141c:	4b0b      	ldr	r3, [pc, #44]	@ (3419144c <HAL_XSPIM_Config+0x248>)
3419141e:	681b      	ldr	r3, [r3, #0]
34191420:	4a0a      	ldr	r2, [pc, #40]	@ (3419144c <HAL_XSPIM_Config+0x248>)
34191422:	f043 0301 	orr.w	r3, r3, #1
34191426:	6013      	str	r3, [r2, #0]
  }
  if ((xspi_enabled & 0x2U) != 0U)
34191428:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3419142c:	f003 0302 	and.w	r3, r3, #2
34191430:	2b00      	cmp	r3, #0
34191432:	d005      	beq.n	34191440 <HAL_XSPIM_Config+0x23c>
  {
    SET_BIT(XSPI2->CR, XSPI_CR_EN);
34191434:	4b06      	ldr	r3, [pc, #24]	@ (34191450 <HAL_XSPIM_Config+0x24c>)
34191436:	681b      	ldr	r3, [r3, #0]
34191438:	4a05      	ldr	r2, [pc, #20]	@ (34191450 <HAL_XSPIM_Config+0x24c>)
3419143a:	f043 0301 	orr.w	r3, r3, #1
3419143e:	6013      	str	r3, [r2, #0]
  }

  return status;
34191440:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
}
34191444:	4618      	mov	r0, r3
34191446:	3738      	adds	r7, #56	@ 0x38
34191448:	46bd      	mov	sp, r7
3419144a:	bd80      	pop	{r7, pc}
3419144c:	58025000 	.word	0x58025000
34191450:	5802a000 	.word	0x5802a000
34191454:	5802d000 	.word	0x5802d000
34191458:	5802b400 	.word	0x5802b400

3419145c <XSPI_DMAAbortCplt>:
  * @brief  DMA XSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void XSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
3419145c:	b580      	push	{r7, lr}
3419145e:	b084      	sub	sp, #16
34191460:	af00      	add	r7, sp, #0
34191462:	6078      	str	r0, [r7, #4]
  XSPI_HandleTypeDef *hxspi = (XSPI_HandleTypeDef *)(hdma->Parent);
34191464:	687b      	ldr	r3, [r7, #4]
34191466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34191468:	60fb      	str	r3, [r7, #12]
  hxspi->XferCount = 0;
3419146a:	68fb      	ldr	r3, [r7, #12]
3419146c:	2200      	movs	r2, #0
3419146e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_ABORT)
34191470:	68fb      	ldr	r3, [r7, #12]
34191472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34191474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34191478:	d122      	bne.n	341914c0 <XSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by XSPI abort */
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
3419147a:	68fb      	ldr	r3, [r7, #12]
3419147c:	681b      	ldr	r3, [r3, #0]
3419147e:	6a1b      	ldr	r3, [r3, #32]
34191480:	f003 0320 	and.w	r3, r3, #32
34191484:	2b00      	cmp	r3, #0
34191486:	d014      	beq.n	341914b2 <XSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
34191488:	68fb      	ldr	r3, [r7, #12]
3419148a:	681b      	ldr	r3, [r3, #0]
3419148c:	2202      	movs	r2, #2
3419148e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enable the transfer complete interrupts */
      HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TC);
34191490:	68fb      	ldr	r3, [r7, #12]
34191492:	681b      	ldr	r3, [r3, #0]
34191494:	681a      	ldr	r2, [r3, #0]
34191496:	68fb      	ldr	r3, [r7, #12]
34191498:	681b      	ldr	r3, [r3, #0]
3419149a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
3419149e:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
341914a0:	68fb      	ldr	r3, [r7, #12]
341914a2:	681b      	ldr	r3, [r3, #0]
341914a4:	681a      	ldr	r2, [r3, #0]
341914a6:	68fb      	ldr	r3, [r7, #12]
341914a8:	681b      	ldr	r3, [r3, #0]
341914aa:	f042 0202 	orr.w	r2, r2, #2
341914ae:	601a      	str	r2, [r3, #0]
    hxspi->ErrorCallback(hxspi);
#else
    HAL_XSPI_ErrorCallback(hxspi);
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  }
}
341914b0:	e00c      	b.n	341914cc <XSPI_DMAAbortCplt+0x70>
      hxspi->State = HAL_XSPI_STATE_READY;
341914b2:	68fb      	ldr	r3, [r7, #12]
341914b4:	2202      	movs	r2, #2
341914b6:	659a      	str	r2, [r3, #88]	@ 0x58
      HAL_XSPI_AbortCpltCallback(hxspi);
341914b8:	68f8      	ldr	r0, [r7, #12]
341914ba:	f7ff fe4d 	bl	34191158 <HAL_XSPI_AbortCpltCallback>
}
341914be:	e005      	b.n	341914cc <XSPI_DMAAbortCplt+0x70>
    hxspi->State = HAL_XSPI_STATE_READY;
341914c0:	68fb      	ldr	r3, [r7, #12]
341914c2:	2202      	movs	r2, #2
341914c4:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_XSPI_ErrorCallback(hxspi);
341914c6:	68f8      	ldr	r0, [r7, #12]
341914c8:	f7ff fe3c 	bl	34191144 <HAL_XSPI_ErrorCallback>
}
341914cc:	bf00      	nop
341914ce:	3710      	adds	r7, #16
341914d0:	46bd      	mov	sp, r7
341914d2:	bd80      	pop	{r7, pc}

341914d4 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
341914d4:	b580      	push	{r7, lr}
341914d6:	b084      	sub	sp, #16
341914d8:	af00      	add	r7, sp, #0
341914da:	60f8      	str	r0, [r7, #12]
341914dc:	60b9      	str	r1, [r7, #8]
341914de:	603b      	str	r3, [r7, #0]
341914e0:	4613      	mov	r3, r2
341914e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
341914e4:	e019      	b.n	3419151a <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
341914e6:	69bb      	ldr	r3, [r7, #24]
341914e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
341914ec:	d015      	beq.n	3419151a <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
341914ee:	f7f1 f97f 	bl	341827f0 <HAL_GetTick>
341914f2:	4602      	mov	r2, r0
341914f4:	683b      	ldr	r3, [r7, #0]
341914f6:	1ad3      	subs	r3, r2, r3
341914f8:	69ba      	ldr	r2, [r7, #24]
341914fa:	429a      	cmp	r2, r3
341914fc:	d302      	bcc.n	34191504 <XSPI_WaitFlagStateUntilTimeout+0x30>
341914fe:	69bb      	ldr	r3, [r7, #24]
34191500:	2b00      	cmp	r3, #0
34191502:	d10a      	bne.n	3419151a <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
34191504:	68fb      	ldr	r3, [r7, #12]
34191506:	2202      	movs	r2, #2
34191508:	659a      	str	r2, [r3, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3419150a:	68fb      	ldr	r3, [r7, #12]
3419150c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3419150e:	f043 0201 	orr.w	r2, r3, #1
34191512:	68fb      	ldr	r3, [r7, #12]
34191514:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
34191516:	2303      	movs	r3, #3
34191518:	e00e      	b.n	34191538 <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3419151a:	68fb      	ldr	r3, [r7, #12]
3419151c:	681b      	ldr	r3, [r3, #0]
3419151e:	6a1a      	ldr	r2, [r3, #32]
34191520:	68bb      	ldr	r3, [r7, #8]
34191522:	4013      	ands	r3, r2
34191524:	2b00      	cmp	r3, #0
34191526:	bf14      	ite	ne
34191528:	2301      	movne	r3, #1
3419152a:	2300      	moveq	r3, #0
3419152c:	b2db      	uxtb	r3, r3
3419152e:	461a      	mov	r2, r3
34191530:	79fb      	ldrb	r3, [r7, #7]
34191532:	429a      	cmp	r2, r3
34191534:	d1d7      	bne.n	341914e6 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
34191536:	2300      	movs	r3, #0
}
34191538:	4618      	mov	r0, r3
3419153a:	3710      	adds	r7, #16
3419153c:	46bd      	mov	sp, r7
3419153e:	bd80      	pop	{r7, pc}

34191540 <XSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  pCfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static void XSPIM_GetConfig(uint8_t instance_nb, XSPIM_CfgTypeDef *const pCfg)
{
34191540:	b480      	push	{r7}
34191542:	b085      	sub	sp, #20
34191544:	af00      	add	r7, sp, #0
34191546:	4603      	mov	r3, r0
34191548:	6039      	str	r1, [r7, #0]
3419154a:	71fb      	strb	r3, [r7, #7]
  uint32_t mux;
  uint32_t mode;

  if (instance_nb == 1U)
3419154c:	79fb      	ldrb	r3, [r7, #7]
3419154e:	2b01      	cmp	r3, #1
34191550:	d124      	bne.n	3419159c <XSPIM_GetConfig+0x5c>
  {
    if ((XSPIM->CR & XSPIM_CR_MODE) == 0U)
34191552:	4b2c      	ldr	r3, [pc, #176]	@ (34191604 <XSPIM_GetConfig+0xc4>)
34191554:	681b      	ldr	r3, [r3, #0]
34191556:	f003 0302 	and.w	r3, r3, #2
3419155a:	2b00      	cmp	r3, #0
3419155c:	d103      	bne.n	34191566 <XSPIM_GetConfig+0x26>
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
3419155e:	683b      	ldr	r3, [r7, #0]
34191560:	2200      	movs	r2, #0
34191562:	605a      	str	r2, [r3, #4]
34191564:	e002      	b.n	3419156c <XSPIM_GetConfig+0x2c>
    }
    else
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
34191566:	683b      	ldr	r3, [r7, #0]
34191568:	2201      	movs	r2, #1
3419156a:	605a      	str	r2, [r3, #4]
    }

    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
3419156c:	4b25      	ldr	r3, [pc, #148]	@ (34191604 <XSPIM_GetConfig+0xc4>)
3419156e:	681b      	ldr	r3, [r3, #0]
34191570:	f003 0310 	and.w	r3, r3, #16
34191574:	2b10      	cmp	r3, #16
34191576:	d003      	beq.n	34191580 <XSPIM_GetConfig+0x40>
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
34191578:	683b      	ldr	r3, [r7, #0]
3419157a:	2200      	movs	r2, #0
3419157c:	601a      	str	r2, [r3, #0]
    else
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
    }
  }
}
3419157e:	e03a      	b.n	341915f6 <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O1) == XSPIM_CR_CSSEL_OVR_O1)
34191580:	4b20      	ldr	r3, [pc, #128]	@ (34191604 <XSPIM_GetConfig+0xc4>)
34191582:	681b      	ldr	r3, [r3, #0]
34191584:	f003 0320 	and.w	r3, r3, #32
34191588:	2b20      	cmp	r3, #32
3419158a:	d103      	bne.n	34191594 <XSPIM_GetConfig+0x54>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
3419158c:	683b      	ldr	r3, [r7, #0]
3419158e:	2270      	movs	r2, #112	@ 0x70
34191590:	601a      	str	r2, [r3, #0]
}
34191592:	e030      	b.n	341915f6 <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
34191594:	683b      	ldr	r3, [r7, #0]
34191596:	2210      	movs	r2, #16
34191598:	601a      	str	r2, [r3, #0]
}
3419159a:	e02c      	b.n	341915f6 <XSPIM_GetConfig+0xb6>
    mux = (XSPIM->CR & XSPIM_CR_MUXEN);
3419159c:	4b19      	ldr	r3, [pc, #100]	@ (34191604 <XSPIM_GetConfig+0xc4>)
3419159e:	681b      	ldr	r3, [r3, #0]
341915a0:	f003 0301 	and.w	r3, r3, #1
341915a4:	60fb      	str	r3, [r7, #12]
    mode = ((XSPIM->CR & XSPIM_CR_MODE) >> XSPIM_CR_MODE_Pos);
341915a6:	4b17      	ldr	r3, [pc, #92]	@ (34191604 <XSPIM_GetConfig+0xc4>)
341915a8:	681b      	ldr	r3, [r3, #0]
341915aa:	085b      	lsrs	r3, r3, #1
341915ac:	f003 0301 	and.w	r3, r3, #1
341915b0:	60bb      	str	r3, [r7, #8]
    if (mux != mode)
341915b2:	68fa      	ldr	r2, [r7, #12]
341915b4:	68bb      	ldr	r3, [r7, #8]
341915b6:	429a      	cmp	r2, r3
341915b8:	d003      	beq.n	341915c2 <XSPIM_GetConfig+0x82>
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
341915ba:	683b      	ldr	r3, [r7, #0]
341915bc:	2200      	movs	r2, #0
341915be:	605a      	str	r2, [r3, #4]
341915c0:	e002      	b.n	341915c8 <XSPIM_GetConfig+0x88>
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
341915c2:	683b      	ldr	r3, [r7, #0]
341915c4:	2201      	movs	r2, #1
341915c6:	605a      	str	r2, [r3, #4]
    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
341915c8:	4b0e      	ldr	r3, [pc, #56]	@ (34191604 <XSPIM_GetConfig+0xc4>)
341915ca:	681b      	ldr	r3, [r3, #0]
341915cc:	f003 0310 	and.w	r3, r3, #16
341915d0:	2b10      	cmp	r3, #16
341915d2:	d003      	beq.n	341915dc <XSPIM_GetConfig+0x9c>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
341915d4:	683b      	ldr	r3, [r7, #0]
341915d6:	2200      	movs	r2, #0
341915d8:	601a      	str	r2, [r3, #0]
}
341915da:	e00c      	b.n	341915f6 <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O2) == XSPIM_CR_CSSEL_OVR_O2)
341915dc:	4b09      	ldr	r3, [pc, #36]	@ (34191604 <XSPIM_GetConfig+0xc4>)
341915de:	681b      	ldr	r3, [r3, #0]
341915e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
341915e4:	2b40      	cmp	r3, #64	@ 0x40
341915e6:	d103      	bne.n	341915f0 <XSPIM_GetConfig+0xb0>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
341915e8:	683b      	ldr	r3, [r7, #0]
341915ea:	2270      	movs	r2, #112	@ 0x70
341915ec:	601a      	str	r2, [r3, #0]
}
341915ee:	e002      	b.n	341915f6 <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
341915f0:	683b      	ldr	r3, [r7, #0]
341915f2:	2210      	movs	r2, #16
341915f4:	601a      	str	r2, [r3, #0]
}
341915f6:	bf00      	nop
341915f8:	3714      	adds	r7, #20
341915fa:	46bd      	mov	sp, r7
341915fc:	f85d 7b04 	ldr.w	r7, [sp], #4
34191600:	4770      	bx	lr
34191602:	bf00      	nop
34191604:	5802b400 	.word	0x5802b400

34191608 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
34191608:	b084      	sub	sp, #16
3419160a:	b480      	push	{r7}
3419160c:	b085      	sub	sp, #20
3419160e:	af00      	add	r7, sp, #0
34191610:	6078      	str	r0, [r7, #4]
34191612:	f107 001c 	add.w	r0, r7, #28
34191616:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
3419161a:	2300      	movs	r3, #0
3419161c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
3419161e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
34191620:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
34191622:	431a      	orrs	r2, r3
             Init.BusWide             | \
34191624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
34191626:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
34191628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
3419162a:	431a      	orrs	r2, r3
             Init.ClockDiv
3419162c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
3419162e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
34191630:	68fa      	ldr	r2, [r7, #12]
34191632:	4313      	orrs	r3, r2
34191634:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
34191636:	687b      	ldr	r3, [r7, #4]
34191638:	685a      	ldr	r2, [r3, #4]
3419163a:	4b07      	ldr	r3, [pc, #28]	@ (34191658 <SDMMC_Init+0x50>)
3419163c:	4013      	ands	r3, r2
3419163e:	68fa      	ldr	r2, [r7, #12]
34191640:	431a      	orrs	r2, r3
34191642:	687b      	ldr	r3, [r7, #4]
34191644:	605a      	str	r2, [r3, #4]

  return HAL_OK;
34191646:	2300      	movs	r3, #0
}
34191648:	4618      	mov	r0, r3
3419164a:	3714      	adds	r7, #20
3419164c:	46bd      	mov	sp, r7
3419164e:	f85d 7b04 	ldr.w	r7, [sp], #4
34191652:	b004      	add	sp, #16
34191654:	4770      	bx	lr
34191656:	bf00      	nop
34191658:	ffc02c00 	.word	0xffc02c00

3419165c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
3419165c:	b480      	push	{r7}
3419165e:	b083      	sub	sp, #12
34191660:	af00      	add	r7, sp, #0
34191662:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
34191664:	687b      	ldr	r3, [r7, #4]
34191666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
3419166a:	4618      	mov	r0, r3
3419166c:	370c      	adds	r7, #12
3419166e:	46bd      	mov	sp, r7
34191670:	f85d 7b04 	ldr.w	r7, [sp], #4
34191674:	4770      	bx	lr

34191676 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
34191676:	b480      	push	{r7}
34191678:	b083      	sub	sp, #12
3419167a:	af00      	add	r7, sp, #0
3419167c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
3419167e:	687b      	ldr	r3, [r7, #4]
34191680:	681b      	ldr	r3, [r3, #0]
34191682:	f043 0203 	orr.w	r2, r3, #3
34191686:	687b      	ldr	r3, [r7, #4]
34191688:	601a      	str	r2, [r3, #0]

  return HAL_OK;
3419168a:	2300      	movs	r3, #0
}
3419168c:	4618      	mov	r0, r3
3419168e:	370c      	adds	r7, #12
34191690:	46bd      	mov	sp, r7
34191692:	f85d 7b04 	ldr.w	r7, [sp], #4
34191696:	4770      	bx	lr

34191698 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
34191698:	b480      	push	{r7}
3419169a:	b083      	sub	sp, #12
3419169c:	af00      	add	r7, sp, #0
3419169e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
341916a0:	687b      	ldr	r3, [r7, #4]
341916a2:	681b      	ldr	r3, [r3, #0]
341916a4:	f003 0303 	and.w	r3, r3, #3
}
341916a8:	4618      	mov	r0, r3
341916aa:	370c      	adds	r7, #12
341916ac:	46bd      	mov	sp, r7
341916ae:	f85d 7b04 	ldr.w	r7, [sp], #4
341916b2:	4770      	bx	lr

341916b4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
341916b4:	b480      	push	{r7}
341916b6:	b085      	sub	sp, #20
341916b8:	af00      	add	r7, sp, #0
341916ba:	6078      	str	r0, [r7, #4]
341916bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
341916be:	2300      	movs	r3, #0
341916c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
341916c2:	683b      	ldr	r3, [r7, #0]
341916c4:	681a      	ldr	r2, [r3, #0]
341916c6:	687b      	ldr	r3, [r7, #4]
341916c8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
341916ca:	683b      	ldr	r3, [r7, #0]
341916cc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
341916ce:	683b      	ldr	r3, [r7, #0]
341916d0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
341916d2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
341916d4:	683b      	ldr	r3, [r7, #0]
341916d6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
341916d8:	431a      	orrs	r2, r3
                       Command->CPSM);
341916da:	683b      	ldr	r3, [r7, #0]
341916dc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
341916de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
341916e0:	68fa      	ldr	r2, [r7, #12]
341916e2:	4313      	orrs	r3, r2
341916e4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
341916e6:	687b      	ldr	r3, [r7, #4]
341916e8:	68da      	ldr	r2, [r3, #12]
341916ea:	4b06      	ldr	r3, [pc, #24]	@ (34191704 <SDMMC_SendCommand+0x50>)
341916ec:	4013      	ands	r3, r2
341916ee:	68fa      	ldr	r2, [r7, #12]
341916f0:	431a      	orrs	r2, r3
341916f2:	687b      	ldr	r3, [r7, #4]
341916f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
341916f6:	2300      	movs	r3, #0
}
341916f8:	4618      	mov	r0, r3
341916fa:	3714      	adds	r7, #20
341916fc:	46bd      	mov	sp, r7
341916fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34191702:	4770      	bx	lr
34191704:	fffee0c0 	.word	0xfffee0c0

34191708 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
34191708:	b480      	push	{r7}
3419170a:	b083      	sub	sp, #12
3419170c:	af00      	add	r7, sp, #0
3419170e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
34191710:	687b      	ldr	r3, [r7, #4]
34191712:	691b      	ldr	r3, [r3, #16]
34191714:	b2db      	uxtb	r3, r3
}
34191716:	4618      	mov	r0, r3
34191718:	370c      	adds	r7, #12
3419171a:	46bd      	mov	sp, r7
3419171c:	f85d 7b04 	ldr.w	r7, [sp], #4
34191720:	4770      	bx	lr

34191722 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
34191722:	b480      	push	{r7}
34191724:	b085      	sub	sp, #20
34191726:	af00      	add	r7, sp, #0
34191728:	6078      	str	r0, [r7, #4]
3419172a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
3419172c:	687b      	ldr	r3, [r7, #4]
3419172e:	3314      	adds	r3, #20
34191730:	461a      	mov	r2, r3
34191732:	683b      	ldr	r3, [r7, #0]
34191734:	4413      	add	r3, r2
34191736:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
34191738:	68fb      	ldr	r3, [r7, #12]
3419173a:	681b      	ldr	r3, [r3, #0]
}
3419173c:	4618      	mov	r0, r3
3419173e:	3714      	adds	r7, #20
34191740:	46bd      	mov	sp, r7
34191742:	f85d 7b04 	ldr.w	r7, [sp], #4
34191746:	4770      	bx	lr

34191748 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
34191748:	b480      	push	{r7}
3419174a:	b085      	sub	sp, #20
3419174c:	af00      	add	r7, sp, #0
3419174e:	6078      	str	r0, [r7, #4]
34191750:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
34191752:	2300      	movs	r3, #0
34191754:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
34191756:	683b      	ldr	r3, [r7, #0]
34191758:	681a      	ldr	r2, [r3, #0]
3419175a:	687b      	ldr	r3, [r7, #4]
3419175c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
3419175e:	683b      	ldr	r3, [r7, #0]
34191760:	685a      	ldr	r2, [r3, #4]
34191762:	687b      	ldr	r3, [r7, #4]
34191764:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
34191766:	683b      	ldr	r3, [r7, #0]
34191768:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
3419176a:	683b      	ldr	r3, [r7, #0]
3419176c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
3419176e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
34191770:	683b      	ldr	r3, [r7, #0]
34191772:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
34191774:	431a      	orrs	r2, r3
                       Data->DPSM);
34191776:	683b      	ldr	r3, [r7, #0]
34191778:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
3419177a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
3419177c:	68fa      	ldr	r2, [r7, #12]
3419177e:	4313      	orrs	r3, r2
34191780:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
34191782:	687b      	ldr	r3, [r7, #4]
34191784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34191786:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
3419178a:	68fb      	ldr	r3, [r7, #12]
3419178c:	431a      	orrs	r2, r3
3419178e:	687b      	ldr	r3, [r7, #4]
34191790:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
34191792:	2300      	movs	r3, #0

}
34191794:	4618      	mov	r0, r3
34191796:	3714      	adds	r7, #20
34191798:	46bd      	mov	sp, r7
3419179a:	f85d 7b04 	ldr.w	r7, [sp], #4
3419179e:	4770      	bx	lr

341917a0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
341917a0:	b580      	push	{r7, lr}
341917a2:	b088      	sub	sp, #32
341917a4:	af00      	add	r7, sp, #0
341917a6:	6078      	str	r0, [r7, #4]
341917a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
341917aa:	683b      	ldr	r3, [r7, #0]
341917ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
341917ae:	2310      	movs	r3, #16
341917b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
341917b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
341917b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
341917b8:	2300      	movs	r3, #0
341917ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
341917bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
341917c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
341917c2:	f107 0308 	add.w	r3, r7, #8
341917c6:	4619      	mov	r1, r3
341917c8:	6878      	ldr	r0, [r7, #4]
341917ca:	f7ff ff73 	bl	341916b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
341917ce:	f241 3288 	movw	r2, #5000	@ 0x1388
341917d2:	2110      	movs	r1, #16
341917d4:	6878      	ldr	r0, [r7, #4]
341917d6:	f000 f995 	bl	34191b04 <SDMMC_GetCmdResp1>
341917da:	61f8      	str	r0, [r7, #28]

  return errorstate;
341917dc:	69fb      	ldr	r3, [r7, #28]
}
341917de:	4618      	mov	r0, r3
341917e0:	3720      	adds	r7, #32
341917e2:	46bd      	mov	sp, r7
341917e4:	bd80      	pop	{r7, pc}

341917e6 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
341917e6:	b580      	push	{r7, lr}
341917e8:	b088      	sub	sp, #32
341917ea:	af00      	add	r7, sp, #0
341917ec:	6078      	str	r0, [r7, #4]
341917ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
341917f0:	683b      	ldr	r3, [r7, #0]
341917f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
341917f4:	2307      	movs	r3, #7
341917f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
341917f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
341917fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
341917fe:	2300      	movs	r3, #0
34191800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
34191802:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34191806:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
34191808:	f107 0308 	add.w	r3, r7, #8
3419180c:	4619      	mov	r1, r3
3419180e:	6878      	ldr	r0, [r7, #4]
34191810:	f7ff ff50 	bl	341916b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
34191814:	f241 3288 	movw	r2, #5000	@ 0x1388
34191818:	2107      	movs	r1, #7
3419181a:	6878      	ldr	r0, [r7, #4]
3419181c:	f000 f972 	bl	34191b04 <SDMMC_GetCmdResp1>
34191820:	61f8      	str	r0, [r7, #28]

  return errorstate;
34191822:	69fb      	ldr	r3, [r7, #28]
}
34191824:	4618      	mov	r0, r3
34191826:	3720      	adds	r7, #32
34191828:	46bd      	mov	sp, r7
3419182a:	bd80      	pop	{r7, pc}

3419182c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
3419182c:	b580      	push	{r7, lr}
3419182e:	b088      	sub	sp, #32
34191830:	af00      	add	r7, sp, #0
34191832:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
34191834:	2300      	movs	r3, #0
34191836:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
34191838:	2300      	movs	r3, #0
3419183a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
3419183c:	2300      	movs	r3, #0
3419183e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
34191840:	2300      	movs	r3, #0
34191842:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
34191844:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34191848:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
3419184a:	f107 0308 	add.w	r3, r7, #8
3419184e:	4619      	mov	r1, r3
34191850:	6878      	ldr	r0, [r7, #4]
34191852:	f7ff ff2f 	bl	341916b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
34191856:	6878      	ldr	r0, [r7, #4]
34191858:	f000 fb96 	bl	34191f88 <SDMMC_GetCmdError>
3419185c:	61f8      	str	r0, [r7, #28]

  return errorstate;
3419185e:	69fb      	ldr	r3, [r7, #28]
}
34191860:	4618      	mov	r0, r3
34191862:	3720      	adds	r7, #32
34191864:	46bd      	mov	sp, r7
34191866:	bd80      	pop	{r7, pc}

34191868 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
34191868:	b580      	push	{r7, lr}
3419186a:	b088      	sub	sp, #32
3419186c:	af00      	add	r7, sp, #0
3419186e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
34191870:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
34191874:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
34191876:	2308      	movs	r3, #8
34191878:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
3419187a:	f44f 7380 	mov.w	r3, #256	@ 0x100
3419187e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
34191880:	2300      	movs	r3, #0
34191882:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
34191884:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34191888:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
3419188a:	f107 0308 	add.w	r3, r7, #8
3419188e:	4619      	mov	r1, r3
34191890:	6878      	ldr	r0, [r7, #4]
34191892:	f7ff ff0f 	bl	341916b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
34191896:	6878      	ldr	r0, [r7, #4]
34191898:	f000 fb28 	bl	34191eec <SDMMC_GetCmdResp7>
3419189c:	61f8      	str	r0, [r7, #28]

  return errorstate;
3419189e:	69fb      	ldr	r3, [r7, #28]
}
341918a0:	4618      	mov	r0, r3
341918a2:	3720      	adds	r7, #32
341918a4:	46bd      	mov	sp, r7
341918a6:	bd80      	pop	{r7, pc}

341918a8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
341918a8:	b580      	push	{r7, lr}
341918aa:	b088      	sub	sp, #32
341918ac:	af00      	add	r7, sp, #0
341918ae:	6078      	str	r0, [r7, #4]
341918b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
341918b2:	683b      	ldr	r3, [r7, #0]
341918b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
341918b6:	2337      	movs	r3, #55	@ 0x37
341918b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
341918ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
341918be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
341918c0:	2300      	movs	r3, #0
341918c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
341918c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
341918c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
341918ca:	f107 0308 	add.w	r3, r7, #8
341918ce:	4619      	mov	r1, r3
341918d0:	6878      	ldr	r0, [r7, #4]
341918d2:	f7ff feef 	bl	341916b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
341918d6:	f241 3288 	movw	r2, #5000	@ 0x1388
341918da:	2137      	movs	r1, #55	@ 0x37
341918dc:	6878      	ldr	r0, [r7, #4]
341918de:	f000 f911 	bl	34191b04 <SDMMC_GetCmdResp1>
341918e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
341918e4:	69fb      	ldr	r3, [r7, #28]
}
341918e6:	4618      	mov	r0, r3
341918e8:	3720      	adds	r7, #32
341918ea:	46bd      	mov	sp, r7
341918ec:	bd80      	pop	{r7, pc}

341918ee <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
341918ee:	b580      	push	{r7, lr}
341918f0:	b088      	sub	sp, #32
341918f2:	af00      	add	r7, sp, #0
341918f4:	6078      	str	r0, [r7, #4]
341918f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
341918f8:	683b      	ldr	r3, [r7, #0]
341918fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
341918fc:	2329      	movs	r3, #41	@ 0x29
341918fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
34191900:	f44f 7380 	mov.w	r3, #256	@ 0x100
34191904:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
34191906:	2300      	movs	r3, #0
34191908:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
3419190a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
3419190e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
34191910:	f107 0308 	add.w	r3, r7, #8
34191914:	4619      	mov	r1, r3
34191916:	6878      	ldr	r0, [r7, #4]
34191918:	f7ff fecc 	bl	341916b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
3419191c:	6878      	ldr	r0, [r7, #4]
3419191e:	f000 fa2d 	bl	34191d7c <SDMMC_GetCmdResp3>
34191922:	61f8      	str	r0, [r7, #28]

  return errorstate;
34191924:	69fb      	ldr	r3, [r7, #28]
}
34191926:	4618      	mov	r0, r3
34191928:	3720      	adds	r7, #32
3419192a:	46bd      	mov	sp, r7
3419192c:	bd80      	pop	{r7, pc}

3419192e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
3419192e:	b580      	push	{r7, lr}
34191930:	b088      	sub	sp, #32
34191932:	af00      	add	r7, sp, #0
34191934:	6078      	str	r0, [r7, #4]
34191936:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
34191938:	683b      	ldr	r3, [r7, #0]
3419193a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
3419193c:	2306      	movs	r3, #6
3419193e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
34191940:	f44f 7380 	mov.w	r3, #256	@ 0x100
34191944:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
34191946:	2300      	movs	r3, #0
34191948:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
3419194a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
3419194e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
34191950:	f107 0308 	add.w	r3, r7, #8
34191954:	4619      	mov	r1, r3
34191956:	6878      	ldr	r0, [r7, #4]
34191958:	f7ff feac 	bl	341916b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
3419195c:	f241 3288 	movw	r2, #5000	@ 0x1388
34191960:	2106      	movs	r1, #6
34191962:	6878      	ldr	r0, [r7, #4]
34191964:	f000 f8ce 	bl	34191b04 <SDMMC_GetCmdResp1>
34191968:	61f8      	str	r0, [r7, #28]

  return errorstate;
3419196a:	69fb      	ldr	r3, [r7, #28]
}
3419196c:	4618      	mov	r0, r3
3419196e:	3720      	adds	r7, #32
34191970:	46bd      	mov	sp, r7
34191972:	bd80      	pop	{r7, pc}

34191974 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
34191974:	b580      	push	{r7, lr}
34191976:	b088      	sub	sp, #32
34191978:	af00      	add	r7, sp, #0
3419197a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
3419197c:	2300      	movs	r3, #0
3419197e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
34191980:	2333      	movs	r3, #51	@ 0x33
34191982:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
34191984:	f44f 7380 	mov.w	r3, #256	@ 0x100
34191988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
3419198a:	2300      	movs	r3, #0
3419198c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
3419198e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34191992:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
34191994:	f107 0308 	add.w	r3, r7, #8
34191998:	4619      	mov	r1, r3
3419199a:	6878      	ldr	r0, [r7, #4]
3419199c:	f7ff fe8a 	bl	341916b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
341919a0:	f241 3288 	movw	r2, #5000	@ 0x1388
341919a4:	2133      	movs	r1, #51	@ 0x33
341919a6:	6878      	ldr	r0, [r7, #4]
341919a8:	f000 f8ac 	bl	34191b04 <SDMMC_GetCmdResp1>
341919ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
341919ae:	69fb      	ldr	r3, [r7, #28]
}
341919b0:	4618      	mov	r0, r3
341919b2:	3720      	adds	r7, #32
341919b4:	46bd      	mov	sp, r7
341919b6:	bd80      	pop	{r7, pc}

341919b8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
341919b8:	b580      	push	{r7, lr}
341919ba:	b088      	sub	sp, #32
341919bc:	af00      	add	r7, sp, #0
341919be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
341919c0:	2300      	movs	r3, #0
341919c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
341919c4:	2302      	movs	r3, #2
341919c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
341919c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
341919cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
341919ce:	2300      	movs	r3, #0
341919d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
341919d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
341919d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
341919d8:	f107 0308 	add.w	r3, r7, #8
341919dc:	4619      	mov	r1, r3
341919de:	6878      	ldr	r0, [r7, #4]
341919e0:	f7ff fe68 	bl	341916b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
341919e4:	6878      	ldr	r0, [r7, #4]
341919e6:	f000 f97f 	bl	34191ce8 <SDMMC_GetCmdResp2>
341919ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
341919ec:	69fb      	ldr	r3, [r7, #28]
}
341919ee:	4618      	mov	r0, r3
341919f0:	3720      	adds	r7, #32
341919f2:	46bd      	mov	sp, r7
341919f4:	bd80      	pop	{r7, pc}

341919f6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
341919f6:	b580      	push	{r7, lr}
341919f8:	b088      	sub	sp, #32
341919fa:	af00      	add	r7, sp, #0
341919fc:	6078      	str	r0, [r7, #4]
341919fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
34191a00:	683b      	ldr	r3, [r7, #0]
34191a02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
34191a04:	2309      	movs	r3, #9
34191a06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
34191a08:	f44f 7340 	mov.w	r3, #768	@ 0x300
34191a0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
34191a0e:	2300      	movs	r3, #0
34191a10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
34191a12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34191a16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
34191a18:	f107 0308 	add.w	r3, r7, #8
34191a1c:	4619      	mov	r1, r3
34191a1e:	6878      	ldr	r0, [r7, #4]
34191a20:	f7ff fe48 	bl	341916b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
34191a24:	6878      	ldr	r0, [r7, #4]
34191a26:	f000 f95f 	bl	34191ce8 <SDMMC_GetCmdResp2>
34191a2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
34191a2c:	69fb      	ldr	r3, [r7, #28]
}
34191a2e:	4618      	mov	r0, r3
34191a30:	3720      	adds	r7, #32
34191a32:	46bd      	mov	sp, r7
34191a34:	bd80      	pop	{r7, pc}

34191a36 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
34191a36:	b580      	push	{r7, lr}
34191a38:	b088      	sub	sp, #32
34191a3a:	af00      	add	r7, sp, #0
34191a3c:	6078      	str	r0, [r7, #4]
34191a3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
34191a40:	2300      	movs	r3, #0
34191a42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
34191a44:	2303      	movs	r3, #3
34191a46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
34191a48:	f44f 7380 	mov.w	r3, #256	@ 0x100
34191a4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
34191a4e:	2300      	movs	r3, #0
34191a50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
34191a52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34191a56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
34191a58:	f107 0308 	add.w	r3, r7, #8
34191a5c:	4619      	mov	r1, r3
34191a5e:	6878      	ldr	r0, [r7, #4]
34191a60:	f7ff fe28 	bl	341916b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
34191a64:	683a      	ldr	r2, [r7, #0]
34191a66:	2103      	movs	r1, #3
34191a68:	6878      	ldr	r0, [r7, #4]
34191a6a:	f000 f9c7 	bl	34191dfc <SDMMC_GetCmdResp6>
34191a6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
34191a70:	69fb      	ldr	r3, [r7, #28]
}
34191a72:	4618      	mov	r0, r3
34191a74:	3720      	adds	r7, #32
34191a76:	46bd      	mov	sp, r7
34191a78:	bd80      	pop	{r7, pc}

34191a7a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
34191a7a:	b580      	push	{r7, lr}
34191a7c:	b088      	sub	sp, #32
34191a7e:	af00      	add	r7, sp, #0
34191a80:	6078      	str	r0, [r7, #4]
34191a82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
34191a84:	683b      	ldr	r3, [r7, #0]
34191a86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
34191a88:	230d      	movs	r3, #13
34191a8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
34191a8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
34191a90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
34191a92:	2300      	movs	r3, #0
34191a94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
34191a96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34191a9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
34191a9c:	f107 0308 	add.w	r3, r7, #8
34191aa0:	4619      	mov	r1, r3
34191aa2:	6878      	ldr	r0, [r7, #4]
34191aa4:	f7ff fe06 	bl	341916b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
34191aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
34191aac:	210d      	movs	r1, #13
34191aae:	6878      	ldr	r0, [r7, #4]
34191ab0:	f000 f828 	bl	34191b04 <SDMMC_GetCmdResp1>
34191ab4:	61f8      	str	r0, [r7, #28]

  return errorstate;
34191ab6:	69fb      	ldr	r3, [r7, #28]
}
34191ab8:	4618      	mov	r0, r3
34191aba:	3720      	adds	r7, #32
34191abc:	46bd      	mov	sp, r7
34191abe:	bd80      	pop	{r7, pc}

34191ac0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
34191ac0:	b580      	push	{r7, lr}
34191ac2:	b088      	sub	sp, #32
34191ac4:	af00      	add	r7, sp, #0
34191ac6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
34191ac8:	2300      	movs	r3, #0
34191aca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
34191acc:	230d      	movs	r3, #13
34191ace:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
34191ad0:	f44f 7380 	mov.w	r3, #256	@ 0x100
34191ad4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
34191ad6:	2300      	movs	r3, #0
34191ad8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
34191ada:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34191ade:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
34191ae0:	f107 0308 	add.w	r3, r7, #8
34191ae4:	4619      	mov	r1, r3
34191ae6:	6878      	ldr	r0, [r7, #4]
34191ae8:	f7ff fde4 	bl	341916b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
34191aec:	f241 3288 	movw	r2, #5000	@ 0x1388
34191af0:	210d      	movs	r1, #13
34191af2:	6878      	ldr	r0, [r7, #4]
34191af4:	f000 f806 	bl	34191b04 <SDMMC_GetCmdResp1>
34191af8:	61f8      	str	r0, [r7, #28]

  return errorstate;
34191afa:	69fb      	ldr	r3, [r7, #28]
}
34191afc:	4618      	mov	r0, r3
34191afe:	3720      	adds	r7, #32
34191b00:	46bd      	mov	sp, r7
34191b02:	bd80      	pop	{r7, pc}

34191b04 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
34191b04:	b580      	push	{r7, lr}
34191b06:	b088      	sub	sp, #32
34191b08:	af00      	add	r7, sp, #0
34191b0a:	60f8      	str	r0, [r7, #12]
34191b0c:	460b      	mov	r3, r1
34191b0e:	607a      	str	r2, [r7, #4]
34191b10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
34191b12:	4b70      	ldr	r3, [pc, #448]	@ (34191cd4 <SDMMC_GetCmdResp1+0x1d0>)
34191b14:	681b      	ldr	r3, [r3, #0]
34191b16:	4a70      	ldr	r2, [pc, #448]	@ (34191cd8 <SDMMC_GetCmdResp1+0x1d4>)
34191b18:	fba2 2303 	umull	r2, r3, r2, r3
34191b1c:	0a5a      	lsrs	r2, r3, #9
34191b1e:	687b      	ldr	r3, [r7, #4]
34191b20:	fb02 f303 	mul.w	r3, r2, r3
34191b24:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
34191b26:	69fb      	ldr	r3, [r7, #28]
34191b28:	1e5a      	subs	r2, r3, #1
34191b2a:	61fa      	str	r2, [r7, #28]
34191b2c:	2b00      	cmp	r3, #0
34191b2e:	d102      	bne.n	34191b36 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
34191b30:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
34191b34:	e0c9      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
34191b36:	68fb      	ldr	r3, [r7, #12]
34191b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34191b3a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
34191b3c:	69ba      	ldr	r2, [r7, #24]
34191b3e:	4b67      	ldr	r3, [pc, #412]	@ (34191cdc <SDMMC_GetCmdResp1+0x1d8>)
34191b40:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
34191b42:	2b00      	cmp	r3, #0
34191b44:	d0ef      	beq.n	34191b26 <SDMMC_GetCmdResp1+0x22>
34191b46:	69bb      	ldr	r3, [r7, #24]
34191b48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34191b4c:	2b00      	cmp	r3, #0
34191b4e:	d1ea      	bne.n	34191b26 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
34191b50:	68fb      	ldr	r3, [r7, #12]
34191b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34191b54:	f003 0304 	and.w	r3, r3, #4
34191b58:	2b00      	cmp	r3, #0
34191b5a:	d004      	beq.n	34191b66 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
34191b5c:	68fb      	ldr	r3, [r7, #12]
34191b5e:	2204      	movs	r2, #4
34191b60:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
34191b62:	2304      	movs	r3, #4
34191b64:	e0b1      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
34191b66:	68fb      	ldr	r3, [r7, #12]
34191b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34191b6a:	f003 0301 	and.w	r3, r3, #1
34191b6e:	2b00      	cmp	r3, #0
34191b70:	d004      	beq.n	34191b7c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
34191b72:	68fb      	ldr	r3, [r7, #12]
34191b74:	2201      	movs	r2, #1
34191b76:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
34191b78:	2301      	movs	r3, #1
34191b7a:	e0a6      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
34191b7c:	68fb      	ldr	r3, [r7, #12]
34191b7e:	4a58      	ldr	r2, [pc, #352]	@ (34191ce0 <SDMMC_GetCmdResp1+0x1dc>)
34191b80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
34191b82:	68f8      	ldr	r0, [r7, #12]
34191b84:	f7ff fdc0 	bl	34191708 <SDMMC_GetCommandResponse>
34191b88:	4603      	mov	r3, r0
34191b8a:	461a      	mov	r2, r3
34191b8c:	7afb      	ldrb	r3, [r7, #11]
34191b8e:	4293      	cmp	r3, r2
34191b90:	d001      	beq.n	34191b96 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
34191b92:	2301      	movs	r3, #1
34191b94:	e099      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
34191b96:	2100      	movs	r1, #0
34191b98:	68f8      	ldr	r0, [r7, #12]
34191b9a:	f7ff fdc2 	bl	34191722 <SDMMC_GetResponse>
34191b9e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
34191ba0:	697a      	ldr	r2, [r7, #20]
34191ba2:	4b50      	ldr	r3, [pc, #320]	@ (34191ce4 <SDMMC_GetCmdResp1+0x1e0>)
34191ba4:	4013      	ands	r3, r2
34191ba6:	2b00      	cmp	r3, #0
34191ba8:	d101      	bne.n	34191bae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
34191baa:	2300      	movs	r3, #0
34191bac:	e08d      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
34191bae:	697b      	ldr	r3, [r7, #20]
34191bb0:	2b00      	cmp	r3, #0
34191bb2:	da02      	bge.n	34191bba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
34191bb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
34191bb8:	e087      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
34191bba:	697b      	ldr	r3, [r7, #20]
34191bbc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34191bc0:	2b00      	cmp	r3, #0
34191bc2:	d001      	beq.n	34191bc8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
34191bc4:	2340      	movs	r3, #64	@ 0x40
34191bc6:	e080      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
34191bc8:	697b      	ldr	r3, [r7, #20]
34191bca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34191bce:	2b00      	cmp	r3, #0
34191bd0:	d001      	beq.n	34191bd6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
34191bd2:	2380      	movs	r3, #128	@ 0x80
34191bd4:	e079      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
34191bd6:	697b      	ldr	r3, [r7, #20]
34191bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
34191bdc:	2b00      	cmp	r3, #0
34191bde:	d002      	beq.n	34191be6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
34191be0:	f44f 7380 	mov.w	r3, #256	@ 0x100
34191be4:	e071      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
34191be6:	697b      	ldr	r3, [r7, #20]
34191be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34191bec:	2b00      	cmp	r3, #0
34191bee:	d002      	beq.n	34191bf6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
34191bf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
34191bf4:	e069      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
34191bf6:	697b      	ldr	r3, [r7, #20]
34191bf8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34191bfc:	2b00      	cmp	r3, #0
34191bfe:	d002      	beq.n	34191c06 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
34191c00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34191c04:	e061      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
34191c06:	697b      	ldr	r3, [r7, #20]
34191c08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34191c0c:	2b00      	cmp	r3, #0
34191c0e:	d002      	beq.n	34191c16 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
34191c10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34191c14:	e059      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
34191c16:	697b      	ldr	r3, [r7, #20]
34191c18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
34191c1c:	2b00      	cmp	r3, #0
34191c1e:	d002      	beq.n	34191c26 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
34191c20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34191c24:	e051      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
34191c26:	697b      	ldr	r3, [r7, #20]
34191c28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
34191c2c:	2b00      	cmp	r3, #0
34191c2e:	d002      	beq.n	34191c36 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
34191c30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34191c34:	e049      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
34191c36:	697b      	ldr	r3, [r7, #20]
34191c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34191c3c:	2b00      	cmp	r3, #0
34191c3e:	d002      	beq.n	34191c46 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
34191c40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34191c44:	e041      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
34191c46:	697b      	ldr	r3, [r7, #20]
34191c48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34191c4c:	2b00      	cmp	r3, #0
34191c4e:	d002      	beq.n	34191c56 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
34191c50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34191c54:	e039      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
34191c56:	697b      	ldr	r3, [r7, #20]
34191c58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34191c5c:	2b00      	cmp	r3, #0
34191c5e:	d002      	beq.n	34191c66 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
34191c60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
34191c64:	e031      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
34191c66:	697b      	ldr	r3, [r7, #20]
34191c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34191c6c:	2b00      	cmp	r3, #0
34191c6e:	d002      	beq.n	34191c76 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
34191c70:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
34191c74:	e029      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
34191c76:	697b      	ldr	r3, [r7, #20]
34191c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34191c7c:	2b00      	cmp	r3, #0
34191c7e:	d002      	beq.n	34191c86 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
34191c80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
34191c84:	e021      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
34191c86:	697b      	ldr	r3, [r7, #20]
34191c88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34191c8c:	2b00      	cmp	r3, #0
34191c8e:	d002      	beq.n	34191c96 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
34191c90:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
34191c94:	e019      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
34191c96:	697b      	ldr	r3, [r7, #20]
34191c98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34191c9c:	2b00      	cmp	r3, #0
34191c9e:	d002      	beq.n	34191ca6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
34191ca0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
34191ca4:	e011      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
34191ca6:	697b      	ldr	r3, [r7, #20]
34191ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34191cac:	2b00      	cmp	r3, #0
34191cae:	d002      	beq.n	34191cb6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
34191cb0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
34191cb4:	e009      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
34191cb6:	697b      	ldr	r3, [r7, #20]
34191cb8:	f003 0308 	and.w	r3, r3, #8
34191cbc:	2b00      	cmp	r3, #0
34191cbe:	d002      	beq.n	34191cc6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
34191cc0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
34191cc4:	e001      	b.n	34191cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
34191cc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
34191cca:	4618      	mov	r0, r3
34191ccc:	3720      	adds	r7, #32
34191cce:	46bd      	mov	sp, r7
34191cd0:	bd80      	pop	{r7, pc}
34191cd2:	bf00      	nop
34191cd4:	341c0000 	.word	0x341c0000
34191cd8:	10624dd3 	.word	0x10624dd3
34191cdc:	00200045 	.word	0x00200045
34191ce0:	002000c5 	.word	0x002000c5
34191ce4:	fdffe008 	.word	0xfdffe008

34191ce8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
34191ce8:	b480      	push	{r7}
34191cea:	b085      	sub	sp, #20
34191cec:	af00      	add	r7, sp, #0
34191cee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
34191cf0:	4b1f      	ldr	r3, [pc, #124]	@ (34191d70 <SDMMC_GetCmdResp2+0x88>)
34191cf2:	681b      	ldr	r3, [r3, #0]
34191cf4:	4a1f      	ldr	r2, [pc, #124]	@ (34191d74 <SDMMC_GetCmdResp2+0x8c>)
34191cf6:	fba2 2303 	umull	r2, r3, r2, r3
34191cfa:	0a5b      	lsrs	r3, r3, #9
34191cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
34191d00:	fb02 f303 	mul.w	r3, r2, r3
34191d04:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
34191d06:	68fb      	ldr	r3, [r7, #12]
34191d08:	1e5a      	subs	r2, r3, #1
34191d0a:	60fa      	str	r2, [r7, #12]
34191d0c:	2b00      	cmp	r3, #0
34191d0e:	d102      	bne.n	34191d16 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
34191d10:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
34191d14:	e026      	b.n	34191d64 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
34191d16:	687b      	ldr	r3, [r7, #4]
34191d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34191d1a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
34191d1c:	68bb      	ldr	r3, [r7, #8]
34191d1e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
34191d22:	2b00      	cmp	r3, #0
34191d24:	d0ef      	beq.n	34191d06 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
34191d26:	68bb      	ldr	r3, [r7, #8]
34191d28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
34191d2c:	2b00      	cmp	r3, #0
34191d2e:	d1ea      	bne.n	34191d06 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
34191d30:	687b      	ldr	r3, [r7, #4]
34191d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34191d34:	f003 0304 	and.w	r3, r3, #4
34191d38:	2b00      	cmp	r3, #0
34191d3a:	d004      	beq.n	34191d46 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
34191d3c:	687b      	ldr	r3, [r7, #4]
34191d3e:	2204      	movs	r2, #4
34191d40:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
34191d42:	2304      	movs	r3, #4
34191d44:	e00e      	b.n	34191d64 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
34191d46:	687b      	ldr	r3, [r7, #4]
34191d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34191d4a:	f003 0301 	and.w	r3, r3, #1
34191d4e:	2b00      	cmp	r3, #0
34191d50:	d004      	beq.n	34191d5c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
34191d52:	687b      	ldr	r3, [r7, #4]
34191d54:	2201      	movs	r2, #1
34191d56:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
34191d58:	2301      	movs	r3, #1
34191d5a:	e003      	b.n	34191d64 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
34191d5c:	687b      	ldr	r3, [r7, #4]
34191d5e:	4a06      	ldr	r2, [pc, #24]	@ (34191d78 <SDMMC_GetCmdResp2+0x90>)
34191d60:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
34191d62:	2300      	movs	r3, #0
}
34191d64:	4618      	mov	r0, r3
34191d66:	3714      	adds	r7, #20
34191d68:	46bd      	mov	sp, r7
34191d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
34191d6e:	4770      	bx	lr
34191d70:	341c0000 	.word	0x341c0000
34191d74:	10624dd3 	.word	0x10624dd3
34191d78:	002000c5 	.word	0x002000c5

34191d7c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
34191d7c:	b480      	push	{r7}
34191d7e:	b085      	sub	sp, #20
34191d80:	af00      	add	r7, sp, #0
34191d82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
34191d84:	4b1a      	ldr	r3, [pc, #104]	@ (34191df0 <SDMMC_GetCmdResp3+0x74>)
34191d86:	681b      	ldr	r3, [r3, #0]
34191d88:	4a1a      	ldr	r2, [pc, #104]	@ (34191df4 <SDMMC_GetCmdResp3+0x78>)
34191d8a:	fba2 2303 	umull	r2, r3, r2, r3
34191d8e:	0a5b      	lsrs	r3, r3, #9
34191d90:	f241 3288 	movw	r2, #5000	@ 0x1388
34191d94:	fb02 f303 	mul.w	r3, r2, r3
34191d98:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
34191d9a:	68fb      	ldr	r3, [r7, #12]
34191d9c:	1e5a      	subs	r2, r3, #1
34191d9e:	60fa      	str	r2, [r7, #12]
34191da0:	2b00      	cmp	r3, #0
34191da2:	d102      	bne.n	34191daa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
34191da4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
34191da8:	e01b      	b.n	34191de2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
34191daa:	687b      	ldr	r3, [r7, #4]
34191dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34191dae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
34191db0:	68bb      	ldr	r3, [r7, #8]
34191db2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
34191db6:	2b00      	cmp	r3, #0
34191db8:	d0ef      	beq.n	34191d9a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
34191dba:	68bb      	ldr	r3, [r7, #8]
34191dbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
34191dc0:	2b00      	cmp	r3, #0
34191dc2:	d1ea      	bne.n	34191d9a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
34191dc4:	687b      	ldr	r3, [r7, #4]
34191dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34191dc8:	f003 0304 	and.w	r3, r3, #4
34191dcc:	2b00      	cmp	r3, #0
34191dce:	d004      	beq.n	34191dda <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
34191dd0:	687b      	ldr	r3, [r7, #4]
34191dd2:	2204      	movs	r2, #4
34191dd4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
34191dd6:	2304      	movs	r3, #4
34191dd8:	e003      	b.n	34191de2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
34191dda:	687b      	ldr	r3, [r7, #4]
34191ddc:	4a06      	ldr	r2, [pc, #24]	@ (34191df8 <SDMMC_GetCmdResp3+0x7c>)
34191dde:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
34191de0:	2300      	movs	r3, #0
}
34191de2:	4618      	mov	r0, r3
34191de4:	3714      	adds	r7, #20
34191de6:	46bd      	mov	sp, r7
34191de8:	f85d 7b04 	ldr.w	r7, [sp], #4
34191dec:	4770      	bx	lr
34191dee:	bf00      	nop
34191df0:	341c0000 	.word	0x341c0000
34191df4:	10624dd3 	.word	0x10624dd3
34191df8:	002000c5 	.word	0x002000c5

34191dfc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
34191dfc:	b580      	push	{r7, lr}
34191dfe:	b088      	sub	sp, #32
34191e00:	af00      	add	r7, sp, #0
34191e02:	60f8      	str	r0, [r7, #12]
34191e04:	460b      	mov	r3, r1
34191e06:	607a      	str	r2, [r7, #4]
34191e08:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
34191e0a:	4b35      	ldr	r3, [pc, #212]	@ (34191ee0 <SDMMC_GetCmdResp6+0xe4>)
34191e0c:	681b      	ldr	r3, [r3, #0]
34191e0e:	4a35      	ldr	r2, [pc, #212]	@ (34191ee4 <SDMMC_GetCmdResp6+0xe8>)
34191e10:	fba2 2303 	umull	r2, r3, r2, r3
34191e14:	0a5b      	lsrs	r3, r3, #9
34191e16:	f241 3288 	movw	r2, #5000	@ 0x1388
34191e1a:	fb02 f303 	mul.w	r3, r2, r3
34191e1e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
34191e20:	69fb      	ldr	r3, [r7, #28]
34191e22:	1e5a      	subs	r2, r3, #1
34191e24:	61fa      	str	r2, [r7, #28]
34191e26:	2b00      	cmp	r3, #0
34191e28:	d102      	bne.n	34191e30 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
34191e2a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
34191e2e:	e052      	b.n	34191ed6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
34191e30:	68fb      	ldr	r3, [r7, #12]
34191e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34191e34:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
34191e36:	69bb      	ldr	r3, [r7, #24]
34191e38:	f003 0345 	and.w	r3, r3, #69	@ 0x45
34191e3c:	2b00      	cmp	r3, #0
34191e3e:	d0ef      	beq.n	34191e20 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
34191e40:	69bb      	ldr	r3, [r7, #24]
34191e42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
34191e46:	2b00      	cmp	r3, #0
34191e48:	d1ea      	bne.n	34191e20 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
34191e4a:	68fb      	ldr	r3, [r7, #12]
34191e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34191e4e:	f003 0304 	and.w	r3, r3, #4
34191e52:	2b00      	cmp	r3, #0
34191e54:	d004      	beq.n	34191e60 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
34191e56:	68fb      	ldr	r3, [r7, #12]
34191e58:	2204      	movs	r2, #4
34191e5a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
34191e5c:	2304      	movs	r3, #4
34191e5e:	e03a      	b.n	34191ed6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
34191e60:	68fb      	ldr	r3, [r7, #12]
34191e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34191e64:	f003 0301 	and.w	r3, r3, #1
34191e68:	2b00      	cmp	r3, #0
34191e6a:	d004      	beq.n	34191e76 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
34191e6c:	68fb      	ldr	r3, [r7, #12]
34191e6e:	2201      	movs	r2, #1
34191e70:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
34191e72:	2301      	movs	r3, #1
34191e74:	e02f      	b.n	34191ed6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
34191e76:	68f8      	ldr	r0, [r7, #12]
34191e78:	f7ff fc46 	bl	34191708 <SDMMC_GetCommandResponse>
34191e7c:	4603      	mov	r3, r0
34191e7e:	461a      	mov	r2, r3
34191e80:	7afb      	ldrb	r3, [r7, #11]
34191e82:	4293      	cmp	r3, r2
34191e84:	d001      	beq.n	34191e8a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
34191e86:	2301      	movs	r3, #1
34191e88:	e025      	b.n	34191ed6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
34191e8a:	68fb      	ldr	r3, [r7, #12]
34191e8c:	4a16      	ldr	r2, [pc, #88]	@ (34191ee8 <SDMMC_GetCmdResp6+0xec>)
34191e8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
34191e90:	2100      	movs	r1, #0
34191e92:	68f8      	ldr	r0, [r7, #12]
34191e94:	f7ff fc45 	bl	34191722 <SDMMC_GetResponse>
34191e98:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
34191e9a:	697b      	ldr	r3, [r7, #20]
34191e9c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
34191ea0:	2b00      	cmp	r3, #0
34191ea2:	d106      	bne.n	34191eb2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
34191ea4:	697b      	ldr	r3, [r7, #20]
34191ea6:	0c1b      	lsrs	r3, r3, #16
34191ea8:	b29a      	uxth	r2, r3
34191eaa:	687b      	ldr	r3, [r7, #4]
34191eac:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
34191eae:	2300      	movs	r3, #0
34191eb0:	e011      	b.n	34191ed6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
34191eb2:	697b      	ldr	r3, [r7, #20]
34191eb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34191eb8:	2b00      	cmp	r3, #0
34191eba:	d002      	beq.n	34191ec2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
34191ebc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34191ec0:	e009      	b.n	34191ed6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
34191ec2:	697b      	ldr	r3, [r7, #20]
34191ec4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34191ec8:	2b00      	cmp	r3, #0
34191eca:	d002      	beq.n	34191ed2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
34191ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34191ed0:	e001      	b.n	34191ed6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
34191ed2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
34191ed6:	4618      	mov	r0, r3
34191ed8:	3720      	adds	r7, #32
34191eda:	46bd      	mov	sp, r7
34191edc:	bd80      	pop	{r7, pc}
34191ede:	bf00      	nop
34191ee0:	341c0000 	.word	0x341c0000
34191ee4:	10624dd3 	.word	0x10624dd3
34191ee8:	002000c5 	.word	0x002000c5

34191eec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
34191eec:	b480      	push	{r7}
34191eee:	b085      	sub	sp, #20
34191ef0:	af00      	add	r7, sp, #0
34191ef2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
34191ef4:	4b22      	ldr	r3, [pc, #136]	@ (34191f80 <SDMMC_GetCmdResp7+0x94>)
34191ef6:	681b      	ldr	r3, [r3, #0]
34191ef8:	4a22      	ldr	r2, [pc, #136]	@ (34191f84 <SDMMC_GetCmdResp7+0x98>)
34191efa:	fba2 2303 	umull	r2, r3, r2, r3
34191efe:	0a5b      	lsrs	r3, r3, #9
34191f00:	f241 3288 	movw	r2, #5000	@ 0x1388
34191f04:	fb02 f303 	mul.w	r3, r2, r3
34191f08:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
34191f0a:	68fb      	ldr	r3, [r7, #12]
34191f0c:	1e5a      	subs	r2, r3, #1
34191f0e:	60fa      	str	r2, [r7, #12]
34191f10:	2b00      	cmp	r3, #0
34191f12:	d102      	bne.n	34191f1a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
34191f14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
34191f18:	e02c      	b.n	34191f74 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
34191f1a:	687b      	ldr	r3, [r7, #4]
34191f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34191f1e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
34191f20:	68bb      	ldr	r3, [r7, #8]
34191f22:	f003 0345 	and.w	r3, r3, #69	@ 0x45
34191f26:	2b00      	cmp	r3, #0
34191f28:	d0ef      	beq.n	34191f0a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
34191f2a:	68bb      	ldr	r3, [r7, #8]
34191f2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
34191f30:	2b00      	cmp	r3, #0
34191f32:	d1ea      	bne.n	34191f0a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
34191f34:	687b      	ldr	r3, [r7, #4]
34191f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34191f38:	f003 0304 	and.w	r3, r3, #4
34191f3c:	2b00      	cmp	r3, #0
34191f3e:	d004      	beq.n	34191f4a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
34191f40:	687b      	ldr	r3, [r7, #4]
34191f42:	2204      	movs	r2, #4
34191f44:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
34191f46:	2304      	movs	r3, #4
34191f48:	e014      	b.n	34191f74 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
34191f4a:	687b      	ldr	r3, [r7, #4]
34191f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34191f4e:	f003 0301 	and.w	r3, r3, #1
34191f52:	2b00      	cmp	r3, #0
34191f54:	d004      	beq.n	34191f60 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
34191f56:	687b      	ldr	r3, [r7, #4]
34191f58:	2201      	movs	r2, #1
34191f5a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
34191f5c:	2301      	movs	r3, #1
34191f5e:	e009      	b.n	34191f74 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
34191f60:	687b      	ldr	r3, [r7, #4]
34191f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34191f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34191f68:	2b00      	cmp	r3, #0
34191f6a:	d002      	beq.n	34191f72 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
34191f6c:	687b      	ldr	r3, [r7, #4]
34191f6e:	2240      	movs	r2, #64	@ 0x40
34191f70:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
34191f72:	2300      	movs	r3, #0

}
34191f74:	4618      	mov	r0, r3
34191f76:	3714      	adds	r7, #20
34191f78:	46bd      	mov	sp, r7
34191f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
34191f7e:	4770      	bx	lr
34191f80:	341c0000 	.word	0x341c0000
34191f84:	10624dd3 	.word	0x10624dd3

34191f88 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
34191f88:	b480      	push	{r7}
34191f8a:	b085      	sub	sp, #20
34191f8c:	af00      	add	r7, sp, #0
34191f8e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
34191f90:	4b11      	ldr	r3, [pc, #68]	@ (34191fd8 <SDMMC_GetCmdError+0x50>)
34191f92:	681b      	ldr	r3, [r3, #0]
34191f94:	4a11      	ldr	r2, [pc, #68]	@ (34191fdc <SDMMC_GetCmdError+0x54>)
34191f96:	fba2 2303 	umull	r2, r3, r2, r3
34191f9a:	0a5b      	lsrs	r3, r3, #9
34191f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
34191fa0:	fb02 f303 	mul.w	r3, r2, r3
34191fa4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
34191fa6:	68fb      	ldr	r3, [r7, #12]
34191fa8:	1e5a      	subs	r2, r3, #1
34191faa:	60fa      	str	r2, [r7, #12]
34191fac:	2b00      	cmp	r3, #0
34191fae:	d102      	bne.n	34191fb6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
34191fb0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
34191fb4:	e009      	b.n	34191fca <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
34191fb6:	687b      	ldr	r3, [r7, #4]
34191fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34191fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34191fbe:	2b00      	cmp	r3, #0
34191fc0:	d0f1      	beq.n	34191fa6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
34191fc2:	687b      	ldr	r3, [r7, #4]
34191fc4:	4a06      	ldr	r2, [pc, #24]	@ (34191fe0 <SDMMC_GetCmdError+0x58>)
34191fc6:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
34191fc8:	2300      	movs	r3, #0
}
34191fca:	4618      	mov	r0, r3
34191fcc:	3714      	adds	r7, #20
34191fce:	46bd      	mov	sp, r7
34191fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
34191fd4:	4770      	bx	lr
34191fd6:	bf00      	nop
34191fd8:	341c0000 	.word	0x341c0000
34191fdc:	10624dd3 	.word	0x10624dd3
34191fe0:	002000c5 	.word	0x002000c5

34191fe4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
34191fe4:	b084      	sub	sp, #16
34191fe6:	b580      	push	{r7, lr}
34191fe8:	b084      	sub	sp, #16
34191fea:	af00      	add	r7, sp, #0
34191fec:	6078      	str	r0, [r7, #4]
34191fee:	f107 001c 	add.w	r0, r7, #28
34191ff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
34191ff6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
34191ffa:	2b03      	cmp	r3, #3
34191ffc:	d10e      	bne.n	3419201c <USB_CoreInit+0x38>
  {
    /* Select Data line pulsing using utmi_txvalid */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
34191ffe:	687b      	ldr	r3, [r7, #4]
34192000:	68db      	ldr	r3, [r3, #12]
34192002:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
34192006:	687b      	ldr	r3, [r7, #4]
34192008:	60da      	str	r2, [r3, #12]


    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
3419200a:	6878      	ldr	r0, [r7, #4]
3419200c:	f000 f8e7 	bl	341921de <USB_CoreReset>
34192010:	4603      	mov	r3, r0
34192012:	73fb      	strb	r3, [r7, #15]
  else
  {
    return HAL_ERROR;
  }

  if (cfg.dma_enable == 1U)
34192014:	7fbb      	ldrb	r3, [r7, #30]
34192016:	2b01      	cmp	r3, #1
34192018:	d10e      	bne.n	34192038 <USB_CoreInit+0x54>
3419201a:	e001      	b.n	34192020 <USB_CoreInit+0x3c>
    return HAL_ERROR;
3419201c:	2301      	movs	r3, #1
3419201e:	e00c      	b.n	3419203a <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
34192020:	687b      	ldr	r3, [r7, #4]
34192022:	689b      	ldr	r3, [r3, #8]
34192024:	f043 0206 	orr.w	r2, r3, #6
34192028:	687b      	ldr	r3, [r7, #4]
3419202a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
3419202c:	687b      	ldr	r3, [r7, #4]
3419202e:	689b      	ldr	r3, [r3, #8]
34192030:	f043 0220 	orr.w	r2, r3, #32
34192034:	687b      	ldr	r3, [r7, #4]
34192036:	609a      	str	r2, [r3, #8]
  }

  return ret;
34192038:	7bfb      	ldrb	r3, [r7, #15]
}
3419203a:	4618      	mov	r0, r3
3419203c:	3710      	adds	r7, #16
3419203e:	46bd      	mov	sp, r7
34192040:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
34192044:	b004      	add	sp, #16
34192046:	4770      	bx	lr

34192048 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
34192048:	b480      	push	{r7}
3419204a:	b083      	sub	sp, #12
3419204c:	af00      	add	r7, sp, #0
3419204e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
34192050:	687b      	ldr	r3, [r7, #4]
34192052:	689b      	ldr	r3, [r3, #8]
34192054:	f023 0201 	bic.w	r2, r3, #1
34192058:	687b      	ldr	r3, [r7, #4]
3419205a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
3419205c:	2300      	movs	r3, #0
}
3419205e:	4618      	mov	r0, r3
34192060:	370c      	adds	r7, #12
34192062:	46bd      	mov	sp, r7
34192064:	f85d 7b04 	ldr.w	r7, [sp], #4
34192068:	4770      	bx	lr

3419206a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
3419206a:	b580      	push	{r7, lr}
3419206c:	b084      	sub	sp, #16
3419206e:	af00      	add	r7, sp, #0
34192070:	6078      	str	r0, [r7, #4]
34192072:	460b      	mov	r3, r1
34192074:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
34192076:	2300      	movs	r3, #0
34192078:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
3419207a:	687b      	ldr	r3, [r7, #4]
3419207c:	68db      	ldr	r3, [r3, #12]
3419207e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
34192082:	687b      	ldr	r3, [r7, #4]
34192084:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
34192086:	78fb      	ldrb	r3, [r7, #3]
34192088:	2b01      	cmp	r3, #1
3419208a:	d115      	bne.n	341920b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
3419208c:	687b      	ldr	r3, [r7, #4]
3419208e:	68db      	ldr	r3, [r3, #12]
34192090:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
34192094:	687b      	ldr	r3, [r7, #4]
34192096:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
34192098:	200a      	movs	r0, #10
3419209a:	f7f0 fbb5 	bl	34182808 <HAL_Delay>
      ms += 10U;
3419209e:	68fb      	ldr	r3, [r7, #12]
341920a0:	330a      	adds	r3, #10
341920a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
341920a4:	6878      	ldr	r0, [r7, #4]
341920a6:	f000 f88c 	bl	341921c2 <USB_GetMode>
341920aa:	4603      	mov	r3, r0
341920ac:	2b01      	cmp	r3, #1
341920ae:	d01e      	beq.n	341920ee <USB_SetCurrentMode+0x84>
341920b0:	68fb      	ldr	r3, [r7, #12]
341920b2:	2bc7      	cmp	r3, #199	@ 0xc7
341920b4:	d9f0      	bls.n	34192098 <USB_SetCurrentMode+0x2e>
341920b6:	e01a      	b.n	341920ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
341920b8:	78fb      	ldrb	r3, [r7, #3]
341920ba:	2b00      	cmp	r3, #0
341920bc:	d115      	bne.n	341920ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
341920be:	687b      	ldr	r3, [r7, #4]
341920c0:	68db      	ldr	r3, [r3, #12]
341920c2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
341920c6:	687b      	ldr	r3, [r7, #4]
341920c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
341920ca:	200a      	movs	r0, #10
341920cc:	f7f0 fb9c 	bl	34182808 <HAL_Delay>
      ms += 10U;
341920d0:	68fb      	ldr	r3, [r7, #12]
341920d2:	330a      	adds	r3, #10
341920d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
341920d6:	6878      	ldr	r0, [r7, #4]
341920d8:	f000 f873 	bl	341921c2 <USB_GetMode>
341920dc:	4603      	mov	r3, r0
341920de:	2b00      	cmp	r3, #0
341920e0:	d005      	beq.n	341920ee <USB_SetCurrentMode+0x84>
341920e2:	68fb      	ldr	r3, [r7, #12]
341920e4:	2bc7      	cmp	r3, #199	@ 0xc7
341920e6:	d9f0      	bls.n	341920ca <USB_SetCurrentMode+0x60>
341920e8:	e001      	b.n	341920ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
341920ea:	2301      	movs	r3, #1
341920ec:	e005      	b.n	341920fa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
341920ee:	68fb      	ldr	r3, [r7, #12]
341920f0:	2bc8      	cmp	r3, #200	@ 0xc8
341920f2:	d101      	bne.n	341920f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
341920f4:	2301      	movs	r3, #1
341920f6:	e000      	b.n	341920fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
341920f8:	2300      	movs	r3, #0
}
341920fa:	4618      	mov	r0, r3
341920fc:	3710      	adds	r7, #16
341920fe:	46bd      	mov	sp, r7
34192100:	bd80      	pop	{r7, pc}

34192102 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
34192102:	b480      	push	{r7}
34192104:	b085      	sub	sp, #20
34192106:	af00      	add	r7, sp, #0
34192108:	6078      	str	r0, [r7, #4]
3419210a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
3419210c:	2300      	movs	r3, #0
3419210e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
34192110:	68fb      	ldr	r3, [r7, #12]
34192112:	3301      	adds	r3, #1
34192114:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
34192116:	68fb      	ldr	r3, [r7, #12]
34192118:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3419211c:	d901      	bls.n	34192122 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
3419211e:	2303      	movs	r3, #3
34192120:	e01b      	b.n	3419215a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
34192122:	687b      	ldr	r3, [r7, #4]
34192124:	691b      	ldr	r3, [r3, #16]
34192126:	2b00      	cmp	r3, #0
34192128:	daf2      	bge.n	34192110 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
3419212a:	2300      	movs	r3, #0
3419212c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
3419212e:	683b      	ldr	r3, [r7, #0]
34192130:	019b      	lsls	r3, r3, #6
34192132:	f043 0220 	orr.w	r2, r3, #32
34192136:	687b      	ldr	r3, [r7, #4]
34192138:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
3419213a:	68fb      	ldr	r3, [r7, #12]
3419213c:	3301      	adds	r3, #1
3419213e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
34192140:	68fb      	ldr	r3, [r7, #12]
34192142:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
34192146:	d901      	bls.n	3419214c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
34192148:	2303      	movs	r3, #3
3419214a:	e006      	b.n	3419215a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
3419214c:	687b      	ldr	r3, [r7, #4]
3419214e:	691b      	ldr	r3, [r3, #16]
34192150:	f003 0320 	and.w	r3, r3, #32
34192154:	2b20      	cmp	r3, #32
34192156:	d0f0      	beq.n	3419213a <USB_FlushTxFifo+0x38>

  return HAL_OK;
34192158:	2300      	movs	r3, #0
}
3419215a:	4618      	mov	r0, r3
3419215c:	3714      	adds	r7, #20
3419215e:	46bd      	mov	sp, r7
34192160:	f85d 7b04 	ldr.w	r7, [sp], #4
34192164:	4770      	bx	lr

34192166 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
34192166:	b480      	push	{r7}
34192168:	b085      	sub	sp, #20
3419216a:	af00      	add	r7, sp, #0
3419216c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
3419216e:	2300      	movs	r3, #0
34192170:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
34192172:	68fb      	ldr	r3, [r7, #12]
34192174:	3301      	adds	r3, #1
34192176:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
34192178:	68fb      	ldr	r3, [r7, #12]
3419217a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3419217e:	d901      	bls.n	34192184 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
34192180:	2303      	movs	r3, #3
34192182:	e018      	b.n	341921b6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
34192184:	687b      	ldr	r3, [r7, #4]
34192186:	691b      	ldr	r3, [r3, #16]
34192188:	2b00      	cmp	r3, #0
3419218a:	daf2      	bge.n	34192172 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
3419218c:	2300      	movs	r3, #0
3419218e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
34192190:	687b      	ldr	r3, [r7, #4]
34192192:	2210      	movs	r2, #16
34192194:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
34192196:	68fb      	ldr	r3, [r7, #12]
34192198:	3301      	adds	r3, #1
3419219a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
3419219c:	68fb      	ldr	r3, [r7, #12]
3419219e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
341921a2:	d901      	bls.n	341921a8 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
341921a4:	2303      	movs	r3, #3
341921a6:	e006      	b.n	341921b6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
341921a8:	687b      	ldr	r3, [r7, #4]
341921aa:	691b      	ldr	r3, [r3, #16]
341921ac:	f003 0310 	and.w	r3, r3, #16
341921b0:	2b10      	cmp	r3, #16
341921b2:	d0f0      	beq.n	34192196 <USB_FlushRxFifo+0x30>

  return HAL_OK;
341921b4:	2300      	movs	r3, #0
}
341921b6:	4618      	mov	r0, r3
341921b8:	3714      	adds	r7, #20
341921ba:	46bd      	mov	sp, r7
341921bc:	f85d 7b04 	ldr.w	r7, [sp], #4
341921c0:	4770      	bx	lr

341921c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
341921c2:	b480      	push	{r7}
341921c4:	b083      	sub	sp, #12
341921c6:	af00      	add	r7, sp, #0
341921c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
341921ca:	687b      	ldr	r3, [r7, #4]
341921cc:	695b      	ldr	r3, [r3, #20]
341921ce:	f003 0301 	and.w	r3, r3, #1
}
341921d2:	4618      	mov	r0, r3
341921d4:	370c      	adds	r7, #12
341921d6:	46bd      	mov	sp, r7
341921d8:	f85d 7b04 	ldr.w	r7, [sp], #4
341921dc:	4770      	bx	lr

341921de <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
341921de:	b480      	push	{r7}
341921e0:	b085      	sub	sp, #20
341921e2:	af00      	add	r7, sp, #0
341921e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
341921e6:	2300      	movs	r3, #0
341921e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
341921ea:	68fb      	ldr	r3, [r7, #12]
341921ec:	3301      	adds	r3, #1
341921ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
341921f0:	68fb      	ldr	r3, [r7, #12]
341921f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
341921f6:	d901      	bls.n	341921fc <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
341921f8:	2303      	movs	r3, #3
341921fa:	e01b      	b.n	34192234 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
341921fc:	687b      	ldr	r3, [r7, #4]
341921fe:	691b      	ldr	r3, [r3, #16]
34192200:	2b00      	cmp	r3, #0
34192202:	daf2      	bge.n	341921ea <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
34192204:	2300      	movs	r3, #0
34192206:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
34192208:	687b      	ldr	r3, [r7, #4]
3419220a:	691b      	ldr	r3, [r3, #16]
3419220c:	f043 0201 	orr.w	r2, r3, #1
34192210:	687b      	ldr	r3, [r7, #4]
34192212:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
34192214:	68fb      	ldr	r3, [r7, #12]
34192216:	3301      	adds	r3, #1
34192218:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
3419221a:	68fb      	ldr	r3, [r7, #12]
3419221c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
34192220:	d901      	bls.n	34192226 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
34192222:	2303      	movs	r3, #3
34192224:	e006      	b.n	34192234 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
34192226:	687b      	ldr	r3, [r7, #4]
34192228:	691b      	ldr	r3, [r3, #16]
3419222a:	f003 0301 	and.w	r3, r3, #1
3419222e:	2b01      	cmp	r3, #1
34192230:	d0f0      	beq.n	34192214 <USB_CoreReset+0x36>

  return HAL_OK;
34192232:	2300      	movs	r3, #0
}
34192234:	4618      	mov	r0, r3
34192236:	3714      	adds	r7, #20
34192238:	46bd      	mov	sp, r7
3419223a:	f85d 7b04 	ldr.w	r7, [sp], #4
3419223e:	4770      	bx	lr

34192240 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
34192240:	b084      	sub	sp, #16
34192242:	b580      	push	{r7, lr}
34192244:	b086      	sub	sp, #24
34192246:	af00      	add	r7, sp, #0
34192248:	6078      	str	r0, [r7, #4]
3419224a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
3419224e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
34192252:	2300      	movs	r3, #0
34192254:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
34192256:	687b      	ldr	r3, [r7, #4]
34192258:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Enable USB PHY pulldown resistors */
  USBx->GCCFG |= USB_OTG_GCCFG_PULLDOWNEN;
3419225a:	687b      	ldr	r3, [r7, #4]
3419225c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3419225e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
34192262:	687b      	ldr	r3, [r7, #4]
34192264:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
34192266:	68fb      	ldr	r3, [r7, #12]
34192268:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
3419226c:	461a      	mov	r2, r3
3419226e:	2300      	movs	r3, #0
34192270:	6013      	str	r3, [r2, #0]

  /* Disable VBUS override */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBVALOVAL | USB_OTG_GCCFG_VBVALEXTOEN);
34192272:	687b      	ldr	r3, [r7, #4]
34192274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34192276:	f023 72c0 	bic.w	r2, r3, #25165824	@ 0x1800000
3419227a:	687b      	ldr	r3, [r7, #4]
3419227c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_PDETEN);
3419227e:	687b      	ldr	r3, [r7, #4]
34192280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34192282:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
34192286:	687b      	ldr	r3, [r7, #4]
34192288:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_SDETEN);
3419228a:	687b      	ldr	r3, [r7, #4]
3419228c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3419228e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
34192292:	687b      	ldr	r3, [r7, #4]
34192294:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
34192296:	687b      	ldr	r3, [r7, #4]
34192298:	68db      	ldr	r3, [r3, #12]
3419229a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3419229e:	2b00      	cmp	r3, #0
341922a0:	d119      	bne.n	341922d6 <USB_HostInit+0x96>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
341922a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341922a6:	2b01      	cmp	r3, #1
341922a8:	d10a      	bne.n	341922c0 <USB_HostInit+0x80>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
341922aa:	68fb      	ldr	r3, [r7, #12]
341922ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
341922b0:	681b      	ldr	r3, [r3, #0]
341922b2:	68fa      	ldr	r2, [r7, #12]
341922b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
341922b8:	f043 0304 	orr.w	r3, r3, #4
341922bc:	6013      	str	r3, [r2, #0]
341922be:	e014      	b.n	341922ea <USB_HostInit+0xaa>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
341922c0:	68fb      	ldr	r3, [r7, #12]
341922c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
341922c6:	681b      	ldr	r3, [r3, #0]
341922c8:	68fa      	ldr	r2, [r7, #12]
341922ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
341922ce:	f023 0304 	bic.w	r3, r3, #4
341922d2:	6013      	str	r3, [r2, #0]
341922d4:	e009      	b.n	341922ea <USB_HostInit+0xaa>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
341922d6:	68fb      	ldr	r3, [r7, #12]
341922d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
341922dc:	681b      	ldr	r3, [r3, #0]
341922de:	68fa      	ldr	r2, [r7, #12]
341922e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
341922e4:	f023 0304 	bic.w	r3, r3, #4
341922e8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
341922ea:	2110      	movs	r1, #16
341922ec:	6878      	ldr	r0, [r7, #4]
341922ee:	f7ff ff08 	bl	34192102 <USB_FlushTxFifo>
341922f2:	4603      	mov	r3, r0
341922f4:	2b00      	cmp	r3, #0
341922f6:	d001      	beq.n	341922fc <USB_HostInit+0xbc>
  {
    ret = HAL_ERROR;
341922f8:	2301      	movs	r3, #1
341922fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
341922fc:	6878      	ldr	r0, [r7, #4]
341922fe:	f7ff ff32 	bl	34192166 <USB_FlushRxFifo>
34192302:	4603      	mov	r3, r0
34192304:	2b00      	cmp	r3, #0
34192306:	d001      	beq.n	3419230c <USB_HostInit+0xcc>
  {
    ret = HAL_ERROR;
34192308:	2301      	movs	r3, #1
3419230a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
3419230c:	2300      	movs	r3, #0
3419230e:	613b      	str	r3, [r7, #16]
34192310:	e015      	b.n	3419233e <USB_HostInit+0xfe>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
34192312:	693b      	ldr	r3, [r7, #16]
34192314:	015a      	lsls	r2, r3, #5
34192316:	68fb      	ldr	r3, [r7, #12]
34192318:	4413      	add	r3, r2
3419231a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
3419231e:	461a      	mov	r2, r3
34192320:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34192324:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
34192326:	693b      	ldr	r3, [r7, #16]
34192328:	015a      	lsls	r2, r3, #5
3419232a:	68fb      	ldr	r3, [r7, #12]
3419232c:	4413      	add	r3, r2
3419232e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
34192332:	461a      	mov	r2, r3
34192334:	2300      	movs	r3, #0
34192336:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
34192338:	693b      	ldr	r3, [r7, #16]
3419233a:	3301      	adds	r3, #1
3419233c:	613b      	str	r3, [r7, #16]
3419233e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
34192342:	461a      	mov	r2, r3
34192344:	693b      	ldr	r3, [r7, #16]
34192346:	4293      	cmp	r3, r2
34192348:	d3e3      	bcc.n	34192312 <USB_HostInit+0xd2>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
3419234a:	687b      	ldr	r3, [r7, #4]
3419234c:	2200      	movs	r2, #0
3419234e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
34192350:	687b      	ldr	r3, [r7, #4]
34192352:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
34192356:	615a      	str	r2, [r3, #20]
  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x200U;
34192358:	687b      	ldr	r3, [r7, #4]
3419235a:	f44f 7200 	mov.w	r2, #512	@ 0x200
3419235e:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
34192360:	687b      	ldr	r3, [r7, #4]
34192362:	4a0f      	ldr	r2, [pc, #60]	@ (341923a0 <USB_HostInit+0x160>)
34192364:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
34192366:	687b      	ldr	r3, [r7, #4]
34192368:	4a0e      	ldr	r2, [pc, #56]	@ (341923a4 <USB_HostInit+0x164>)
3419236a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
3419236e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
34192372:	2b00      	cmp	r3, #0
34192374:	d105      	bne.n	34192382 <USB_HostInit+0x142>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
34192376:	687b      	ldr	r3, [r7, #4]
34192378:	699b      	ldr	r3, [r3, #24]
3419237a:	f043 0210 	orr.w	r2, r3, #16
3419237e:	687b      	ldr	r3, [r7, #4]
34192380:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
34192382:	687b      	ldr	r3, [r7, #4]
34192384:	699a      	ldr	r2, [r3, #24]
34192386:	4b08      	ldr	r3, [pc, #32]	@ (341923a8 <USB_HostInit+0x168>)
34192388:	4313      	orrs	r3, r2
3419238a:	687a      	ldr	r2, [r7, #4]
3419238c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
3419238e:	7dfb      	ldrb	r3, [r7, #23]
}
34192390:	4618      	mov	r0, r3
34192392:	3718      	adds	r7, #24
34192394:	46bd      	mov	sp, r7
34192396:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
3419239a:	b004      	add	sp, #16
3419239c:	4770      	bx	lr
3419239e:	bf00      	nop
341923a0:	01000200 	.word	0x01000200
341923a4:	00e00300 	.word	0x00e00300
341923a8:	a3200008 	.word	0xa3200008

341923ac <memset>:
341923ac:	4402      	add	r2, r0
341923ae:	4603      	mov	r3, r0
341923b0:	4293      	cmp	r3, r2
341923b2:	d100      	bne.n	341923b6 <memset+0xa>
341923b4:	4770      	bx	lr
341923b6:	f803 1b01 	strb.w	r1, [r3], #1
341923ba:	e7f9      	b.n	341923b0 <memset+0x4>

341923bc <__libc_init_array>:
341923bc:	b570      	push	{r4, r5, r6, lr}
341923be:	4d0d      	ldr	r5, [pc, #52]	@ (341923f4 <__libc_init_array+0x38>)
341923c0:	2600      	movs	r6, #0
341923c2:	4c0d      	ldr	r4, [pc, #52]	@ (341923f8 <__libc_init_array+0x3c>)
341923c4:	1b64      	subs	r4, r4, r5
341923c6:	10a4      	asrs	r4, r4, #2
341923c8:	42a6      	cmp	r6, r4
341923ca:	d109      	bne.n	341923e0 <__libc_init_array+0x24>
341923cc:	4d0b      	ldr	r5, [pc, #44]	@ (341923fc <__libc_init_array+0x40>)
341923ce:	2600      	movs	r6, #0
341923d0:	4c0b      	ldr	r4, [pc, #44]	@ (34192400 <__libc_init_array+0x44>)
341923d2:	f000 f817 	bl	34192404 <_init>
341923d6:	1b64      	subs	r4, r4, r5
341923d8:	10a4      	asrs	r4, r4, #2
341923da:	42a6      	cmp	r6, r4
341923dc:	d105      	bne.n	341923ea <__libc_init_array+0x2e>
341923de:	bd70      	pop	{r4, r5, r6, pc}
341923e0:	f855 3b04 	ldr.w	r3, [r5], #4
341923e4:	3601      	adds	r6, #1
341923e6:	4798      	blx	r3
341923e8:	e7ee      	b.n	341923c8 <__libc_init_array+0xc>
341923ea:	f855 3b04 	ldr.w	r3, [r5], #4
341923ee:	3601      	adds	r6, #1
341923f0:	4798      	blx	r3
341923f2:	e7f2      	b.n	341923da <__libc_init_array+0x1e>
341923f4:	341924c4 	.word	0x341924c4
341923f8:	341924c4 	.word	0x341924c4
341923fc:	341924c4 	.word	0x341924c4
34192400:	341924c8 	.word	0x341924c8

34192404 <_init>:
34192404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34192406:	bf00      	nop
34192408:	bcf8      	pop	{r3, r4, r5, r6, r7}
3419240a:	bc08      	pop	{r3}
3419240c:	469e      	mov	lr, r3
3419240e:	4770      	bx	lr

34192410 <_fini>:
34192410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34192412:	bf00      	nop
34192414:	bcf8      	pop	{r3, r4, r5, r6, r7}
34192416:	bc08      	pop	{r3}
34192418:	469e      	mov	lr, r3
3419241a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

341924e0 <SECURE_SystemCoreClockUpdate>:
341924e0:	e97f e97f 	sg
341924e4:	f7f0 b916 	b.w	34182714 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
